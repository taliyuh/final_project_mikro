
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbb4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800cd88  0800cd88  0000dd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c8  0800d2c8  0000f260  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2c8  0800d2c8  0000e2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d0  0800d2d0  0000f260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d0  0800d2d0  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2d4  0800d2d4  0000e2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  0800d2d8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000260  0800d538  0000f260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  0800d538  0000f644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f260  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184a0  00000000  00000000  0000f290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c00  00000000  00000000  00027730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efb  00000000  00000000  0002c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b0e  00000000  00000000  0002d5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8d5  00000000  00000000  000570d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a7e  00000000  00000000  000729a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a424  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ac  00000000  00000000  0016a468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00170a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000260 	.word	0x20000260
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd6c 	.word	0x0800cd6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000264 	.word	0x20000264
 800020c:	0800cd6c 	.word	0x0800cd6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 fa47 	bl	80014c0 <null_ptr_check>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d117      	bne.n	800106e <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	20d0      	movs	r0, #208	@ 0xd0
 8001046:	f000 f818 	bl	800107a <bmp2_get_regs>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10b      	bne.n	800106e <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b58      	cmp	r3, #88	@ 0x58
 800105c:	d105      	bne.n	800106a <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fa79 	bl	8001556 <get_calib_param>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800106a:	23fc      	movs	r3, #252	@ 0xfc
 800106c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f000 fa18 	bl	80014c0 <null_ptr_check>
 8001090:	4603      	mov	r3, r0
 8001092:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11e      	bne.n	80010da <bmp2_get_regs+0x60>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01b      	beq.n	80010da <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010b0:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68dc      	ldr	r4, [r3, #12]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	7bf8      	ldrb	r0, [r7, #15]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	47a0      	blx	r4
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010d4:	23fe      	movs	r3, #254	@ 0xfe
 80010d6:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010d8:	e001      	b.n	80010de <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010da:	23ff      	movs	r3, #255	@ 0xff
 80010dc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b08b      	sub	sp, #44	@ 0x2c
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d901      	bls.n	8001102 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80010fe:	2304      	movs	r3, #4
 8001100:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f000 f9dc 	bl	80014c0 <null_ptr_check>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800110e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001112:	2b00      	cmp	r3, #0
 8001114:	d150      	bne.n	80011b8 <bmp2_set_regs+0xce>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d04d      	beq.n	80011b8 <bmp2_set_regs+0xce>
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d04a      	beq.n	80011b8 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d043      	beq.n	80011b0 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d114      	bne.n	8001160 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001136:	2300      	movs	r3, #0
 8001138:	77fb      	strb	r3, [r7, #31]
 800113a:	e00d      	b.n	8001158 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	440b      	add	r3, r1
 800114a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	3301      	adds	r3, #1
 8001156:	77fb      	strb	r3, [r7, #31]
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8ed      	bhi.n	800113c <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d90b      	bls.n	800117e <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001166:	f107 0114 	add.w	r1, r7, #20
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f9c6 	bl	8001500 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	3b01      	subs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	e001      	b.n	8001182 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691c      	ldr	r4, [r3, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	7818      	ldrb	r0, [r3, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f107 0114 	add.w	r1, r7, #20
 8001192:	6a3a      	ldr	r2, [r7, #32]
 8001194:	47a0      	blx	r4
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80011a8:	23fe      	movs	r3, #254	@ 0xfe
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80011ae:	e007      	b.n	80011c0 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80011b0:	23fd      	movs	r3, #253	@ 0xfd
 80011b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80011b6:	e003      	b.n	80011c0 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011b8:	23ff      	movs	r3, #255	@ 0xff
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80011be:	e000      	b.n	80011c2 <bmp2_set_regs+0xd8>
        if (len > 0)
 80011c0:	bf00      	nop
    }

    return rslt;
 80011c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	372c      	adds	r7, #44	@ 0x2c
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}

080011ce <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011d6:	23e0      	movs	r3, #224	@ 0xe0
 80011d8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011da:	23b6      	movs	r3, #182	@ 0xb6
 80011dc:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011de:	f107 010d 	add.w	r1, r7, #13
 80011e2:	f107 000e 	add.w	r0, r7, #14
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f7ff ff7e 	bl	80010ea <bmp2_set_regs>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001208:	2300      	movs	r3, #0
 800120a:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d02d      	beq.n	800126e <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001212:	f107 010c 	add.w	r1, r7, #12
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2202      	movs	r2, #2
 800121a:	20f4      	movs	r0, #244	@ 0xf4
 800121c:	f7ff ff2d 	bl	800107a <bmp2_get_regs>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d122      	bne.n	8001272 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	109b      	asrs	r3, r3, #2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001246:	7b7b      	ldrb	r3, [r7, #13]
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	109b      	asrs	r3, r3, #2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	b2da      	uxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001260:	7b7b      	ldrb	r3, [r7, #13]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	715a      	strb	r2, [r3, #5]
 800126c:	e001      	b.n	8001272 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800126e:	23ff      	movs	r3, #255	@ 0xff
 8001270:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f9fd 	bl	800168c <conf_sensor>
 8001292:	4603      	mov	r3, r0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01b      	beq.n	80012e4 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80012ac:	f107 010e 	add.w	r1, r7, #14
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	20f3      	movs	r0, #243	@ 0xf3
 80012b6:	f7ff fee0 	bl	800107a <bmp2_get_regs>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d110      	bne.n	80012e8 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	10db      	asrs	r3, r3, #3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	705a      	strb	r2, [r3, #1]
 80012e2:	e001      	b.n	80012e8 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012e4:	23ff      	movs	r3, #255	@ 0xff
 80012e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f9bf 	bl	800168c <conf_sensor>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	2300      	movs	r3, #0
 800132e:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d024      	beq.n	800138a <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001340:	f107 0110 	add.w	r1, r7, #16
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2206      	movs	r2, #6
 8001348:	20f7      	movs	r0, #247	@ 0xf7
 800134a:	f7ff fe96 	bl	800107a <bmp2_get_regs>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800135a:	f107 0208 	add.w	r2, r7, #8
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fab9 	bl	80018dc <parse_sensor_data>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800136e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10b      	bne.n	800138e <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f80b 	bl	800139a <bmp2_compensate_data>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	e001      	b.n	800138e <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800138a:	23ff      	movs	r3, #255	@ 0xff
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800138e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f88a 	bl	80014c0 <null_ptr_check>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80013b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d129      	bne.n	800140c <bmp2_compensate_data+0x72>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d026      	beq.n	800140c <bmp2_compensate_data+0x72>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d023      	beq.n	800140c <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3308      	adds	r3, #8
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fabb 	bl	8001964 <compensate_temperature>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80013f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10a      	bne.n	8001410 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fba5 	bl	8001b50 <compensate_pressure>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800140a:	e001      	b.n	8001410 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800140c:	23ff      	movs	r3, #255	@ 0xff
 800140e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b092      	sub	sp, #72	@ 0x48
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <bmp2_compute_meas_time+0x9c>)
 800142a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800142e:	461d      	mov	r5, r3
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <bmp2_compute_meas_time+0xa0>)
 800143a:	f107 0410 	add.w	r4, r7, #16
 800143e:	461d      	mov	r5, r3
 8001440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001444:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f837 	bl	80014c0 <null_ptr_check>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001458:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800145c:	2b00      	cmp	r3, #0
 800145e:	d122      	bne.n	80014a6 <bmp2_compute_meas_time+0x8a>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01f      	beq.n	80014a6 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7e1b      	ldrb	r3, [r3, #24]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d111      	bne.n	8001492 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	78db      	ldrb	r3, [r3, #3]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	3348      	adds	r3, #72	@ 0x48
 8001476:	443b      	add	r3, r7
 8001478:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3348      	adds	r3, #72	@ 0x48
 8001484:	443b      	add	r3, r7
 8001486:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800148a:	441a      	add	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001490:	e00c      	b.n	80014ac <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3348      	adds	r3, #72	@ 0x48
 800149a:	443b      	add	r3, r7
 800149c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014a4:	e002      	b.n	80014ac <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014a6:	23ff      	movs	r3, #255	@ 0xff
 80014a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80014ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3748      	adds	r7, #72	@ 0x48
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	0800cd88 	.word	0x0800cd88
 80014bc:	0800cd9c 	.word	0x0800cd9c

080014c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <null_ptr_check+0x26>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <null_ptr_check+0x26>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <null_ptr_check+0x26>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014e6:	23ff      	movs	r3, #255	@ 0xff
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e001      	b.n	80014f0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e015      	b.n	8001540 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	441a      	add	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	440b      	add	r3, r1
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	441a      	add	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	440b      	add	r3, r1
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3e5      	bcc.n	8001514 <interleave_data+0x14>
    }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b08a      	sub	sp, #40	@ 0x28
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001574:	f107 010c 	add.w	r1, r7, #12
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2219      	movs	r2, #25
 800157c:	2088      	movs	r0, #136	@ 0x88
 800157e:	f7ff fd7c 	bl	800107a <bmp2_get_regs>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 8001588:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800158c:	2b00      	cmp	r3, #0
 800158e:	d177      	bne.n	8001680 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001590:	7b7b      	ldrb	r3, [r7, #13]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80015b6:	7c7b      	ldrb	r3, [r7, #17]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7c3b      	ldrb	r3, [r7, #16]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80015c8:	7cfb      	ldrb	r3, [r7, #19]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7cbb      	ldrb	r3, [r7, #18]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015dc:	7d7b      	ldrb	r3, [r7, #21]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	7dbb      	ldrb	r3, [r7, #22]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001600:	7e7b      	ldrb	r3, [r7, #25]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	7e3b      	ldrb	r3, [r7, #24]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21a      	sxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001612:	7efb      	ldrb	r3, [r7, #27]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7ebb      	ldrb	r3, [r7, #26]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001624:	7f7b      	ldrb	r3, [r7, #29]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	7f3b      	ldrb	r3, [r7, #28]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21a      	sxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	7fbb      	ldrb	r3, [r7, #30]
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001648:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21a      	sxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800165e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21a      	sxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001674:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001678:	b25a      	sxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001680:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001684:	4618      	mov	r0, r3
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800169a:	2300      	movs	r3, #0
 800169c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800169e:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80016a2:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d074      	beq.n	8001794 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80016aa:	f107 0114 	add.w	r1, r7, #20
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	20f4      	movs	r0, #244	@ 0xf4
 80016b4:	f7ff fce1 	bl	800107a <bmp2_get_regs>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80016bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d169      	bne.n	8001798 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fd82 	bl	80011ce <bmp2_soft_reset>
 80016ca:	4603      	mov	r3, r0
 80016cc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80016ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d160      	bne.n	8001798 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f861 	bl	80017a4 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016e2:	7d7b      	ldrb	r3, [r7, #21]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80016fc:	7d7b      	ldrb	r3, [r7, #21]
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	f023 031c 	bic.w	r3, r3, #28
 8001704:	b25a      	sxtb	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f003 031c 	and.w	r3, r3, #28
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 800171c:	7d7b      	ldrb	r3, [r7, #21]
 800171e:	b25b      	sxtb	r3, r3
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	b25a      	sxtb	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	795b      	ldrb	r3, [r3, #5]
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800173a:	f107 0114 	add.w	r1, r7, #20
 800173e:	f107 0010 	add.w	r0, r7, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f7ff fcd0 	bl	80010ea <bmp2_set_regs>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800174e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d120      	bne.n	8001798 <conf_sensor+0x10c>
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01d      	beq.n	8001798 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001762:	7d3b      	ldrb	r3, [r7, #20]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	b25a      	sxtb	r2, r3
 800176c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	b25b      	sxtb	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800177e:	f107 0114 	add.w	r1, r7, #20
 8001782:	f107 0010 	add.w	r0, r7, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f7ff fcae 	bl	80010ea <bmp2_set_regs>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
 8001792:	e001      	b.n	8001798 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001794:	23ff      	movs	r3, #255	@ 0xff
 8001796:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001798:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	78db      	ldrb	r3, [r3, #3]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	f200 808b 	bhi.w	80018ce <set_os_mode+0x12a>
 80017b8:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <set_os_mode+0x1c>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017d5 	.word	0x080017d5
 80017c4:	08001807 	.word	0x08001807
 80017c8:	08001839 	.word	0x08001839
 80017cc:	0800186b 	.word	0x0800186b
 80017d0:	0800189d 	.word	0x0800189d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f023 031c 	bic.w	r3, r3, #28
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	701a      	strb	r2, [r3, #0]
            break;
 8001804:	e064      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	b25b      	sxtb	r3, r3
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	b25b      	sxtb	r3, r3
 8001818:	b2da      	uxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f023 031c 	bic.w	r3, r3, #28
 8001828:	b25b      	sxtb	r3, r3
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	701a      	strb	r2, [r3, #0]
            break;
 8001836:	e04b      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	b25b      	sxtb	r3, r3
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	f023 031c 	bic.w	r3, r3, #28
 800185a:	b25b      	sxtb	r3, r3
 800185c:	f043 030c 	orr.w	r3, r3, #12
 8001860:	b25b      	sxtb	r3, r3
 8001862:	b2da      	uxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	701a      	strb	r2, [r3, #0]
            break;
 8001868:	e032      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f043 0320 	orr.w	r3, r3, #32
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2da      	uxtb	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	f023 031c 	bic.w	r3, r3, #28
 800188c:	b25b      	sxtb	r3, r3
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	b25b      	sxtb	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	701a      	strb	r2, [r3, #0]
            break;
 800189a:	e019      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	f023 031c 	bic.w	r3, r3, #28
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f043 0314 	orr.w	r3, r3, #20
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	701a      	strb	r2, [r3, #0]
            break;
 80018cc:	e000      	b.n	80018d0 <set_os_mode+0x12c>
        default:
            break;
 80018ce:	bf00      	nop
    }
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	031b      	lsls	r3, r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3302      	adds	r3, #2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	b2db      	uxtb	r3, r3
 8001902:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	431a      	orrs	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3303      	adds	r3, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	031b      	lsls	r3, r3, #12
 800191a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3305      	adds	r3, #5
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	b2db      	uxtb	r3, r3
 8001930:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	431a      	orrs	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f000 fae3 	bl	8001f18 <st_check_boundaries>
 8001952:	4603      	mov	r3, r0
 8001954:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001956:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001968:	b08c      	sub	sp, #48	@ 0x30
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdf1 	bl	8000564 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <compensate_temperature+0x1d4>)
 8001988:	f7fe ff80 	bl	800088c <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8b9b      	ldrh	r3, [r3, #28]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdd3 	bl	8000544 <__aeabi_ui2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <compensate_temperature+0x1d8>)
 80019a4:	f7fe ff72 	bl	800088c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fc8a 	bl	80002c8 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdce 	bl	8000564 <__aeabi_i2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fe32 	bl	8000638 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdbf 	bl	8000564 <__aeabi_i2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80019ee:	f7fe ff4d 	bl	800088c <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8b9b      	ldrh	r3, [r3, #28]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda0 	bl	8000544 <__aeabi_ui2d>
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b4d      	ldr	r3, [pc, #308]	@ (8001b40 <compensate_temperature+0x1dc>)
 8001a0a:	f7fe ff3f 	bl	800088c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f7fe fc57 	bl	80002c8 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd9c 	bl	8000564 <__aeabi_i2d>
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001a34:	f7fe ff2a 	bl	800088c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8b9b      	ldrh	r3, [r3, #28]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd7d 	bl	8000544 <__aeabi_ui2d>
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <compensate_temperature+0x1dc>)
 8001a50:	f7fe ff1c 	bl	800088c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4640      	mov	r0, r8
 8001a5a:	4649      	mov	r1, r9
 8001a5c:	f7fe fc34 	bl	80002c8 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fde6 	bl	8000638 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4614      	mov	r4, r2
 8001a72:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd72 	bl	8000564 <__aeabi_i2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
    var2 =
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fdd6 	bl	8000638 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a9c:	f7fe fc16 	bl	80002cc <__adddf3>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f876 	bl	8000b98 <__aeabi_d2iz>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001ab2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aba:	f7fe fc07 	bl	80002cc <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <compensate_temperature+0x1e0>)
 8001acc:	f7fe fede 	bl	800088c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <compensate_temperature+0x1e4>)
 8001ade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ae2:	f7ff f81b 	bl	8000b1c <__aeabi_dcmplt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <compensate_temperature+0x1e4>)
 8001af2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <compensate_temperature+0x1e8>)
 8001b02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b06:	f7ff f827 	bl	8000b58 <__aeabi_dcmpgt>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <compensate_temperature+0x1e8>)
 8001b16:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3730      	adds	r7, #48	@ 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b38:	40d00000 	.word	0x40d00000
 8001b3c:	40900000 	.word	0x40900000
 8001b40:	40c00000 	.word	0x40c00000
 8001b44:	40b40000 	.word	0x40b40000
 8001b48:	c0440000 	.word	0xc0440000
 8001b4c:	40554000 	.word	0x40554000

08001b50 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b08c      	sub	sp, #48	@ 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcf6 	bl	8000564 <__aeabi_i2d>
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b80:	f7fe fe84 	bl	800088c <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4bcb      	ldr	r3, [pc, #812]	@ (8001ec0 <compensate_pressure+0x370>)
 8001b92:	f7fe fb99 	bl	80002c8 <__aeabi_dsub>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ba6:	f7fe fd47 	bl	8000638 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcd3 	bl	8000564 <__aeabi_i2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7fe fd37 	bl	8000638 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4bbb      	ldr	r3, [pc, #748]	@ (8001ec4 <compensate_pressure+0x374>)
 8001bd8:	f7fe fe58 	bl	800088c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcba 	bl	8000564 <__aeabi_i2d>
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fd20 	bl	8000638 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	f7fe fb62 	bl	80002cc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c10:	f7fe fb5c 	bl	80002cc <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4ba9      	ldr	r3, [pc, #676]	@ (8001ec8 <compensate_pressure+0x378>)
 8001c22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c26:	f7fe fe31 	bl	800088c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4614      	mov	r4, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc93 	bl	8000564 <__aeabi_i2d>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4ba2      	ldr	r3, [pc, #648]	@ (8001ecc <compensate_pressure+0x37c>)
 8001c44:	f7fe fcf8 	bl	8000638 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fb3c 	bl	80002cc <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc7e 	bl	8000564 <__aeabi_i2d>
 8001c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6c:	f7fe fce4 	bl	8000638 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7c:	f7fe fcdc 	bl	8000638 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b90      	ldr	r3, [pc, #576]	@ (8001ed0 <compensate_pressure+0x380>)
 8001c8e:	f7fe fdfd 	bl	800088c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc5f 	bl	8000564 <__aeabi_i2d>
 8001ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001caa:	f7fe fcc5 	bl	8000638 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fb09 	bl	80002cc <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4b82      	ldr	r3, [pc, #520]	@ (8001ed0 <compensate_pressure+0x380>)
 8001cc8:	f7fe fde0 	bl	800088c <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec4 <compensate_pressure+0x374>)
 8001cda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cde:	f7fe fdd5 	bl	800088c <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b79      	ldr	r3, [pc, #484]	@ (8001ed4 <compensate_pressure+0x384>)
 8001cf0:	f7fe faec 	bl	80002cc <__adddf3>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc1f 	bl	8000544 <__aeabi_ui2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fc93 	bl	8000638 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d26:	f7fe fef9 	bl	8000b1c <__aeabi_dcmplt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <compensate_pressure+0x1f8>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d3c:	f7fe ff0c 	bl	8000b58 <__aeabi_dcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80de 	beq.w	8001f04 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbf9 	bl	8000544 <__aeabi_ui2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	495f      	ldr	r1, [pc, #380]	@ (8001ed8 <compensate_pressure+0x388>)
 8001d5c:	f7fe fab4 	bl	80002c8 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <compensate_pressure+0x38c>)
 8001d6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d72:	f7fe fd8b 	bl	800088c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d7e:	f7fe faa3 	bl	80002c8 <__aeabi_dsub>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	a347      	add	r3, pc, #284	@ (adr r3, 8001ea8 <compensate_pressure+0x358>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc52 	bl	8000638 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da0:	f7fe fd74 	bl	800088c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd6 	bl	8000564 <__aeabi_i2d>
 8001db8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dbc:	f7fe fc3c 	bl	8000638 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dcc:	f7fe fc34 	bl	8000638 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <compensate_pressure+0x390>)
 8001dde:	f7fe fd55 	bl	800088c <__aeabi_ddiv>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb7 	bl	8000564 <__aeabi_i2d>
 8001df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dfa:	f7fe fc1d 	bl	8000638 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <compensate_pressure+0x374>)
 8001e0c:	f7fe fd3e 	bl	800088c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e20:	f7fe fa54 	bl	80002cc <__adddf3>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb96 	bl	8000564 <__aeabi_i2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe fa44 	bl	80002cc <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <compensate_pressure+0x394>)
 8001e52:	f7fe fd1b 	bl	800088c <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e5e:	f7fe fa35 	bl	80002cc <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e6a:	a311      	add	r3, pc, #68	@ (adr r3, 8001eb0 <compensate_pressure+0x360>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e74:	f7fe fe52 	bl	8000b1c <__aeabi_dcmplt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001eb0 <compensate_pressure+0x360>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001eb8 <compensate_pressure+0x368>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e98:	f7fe fe5e 	bl	8000b58 <__aeabi_dcmpgt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	e022      	b.n	8001ee8 <compensate_pressure+0x398>
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40b86a00 	.word	0x40b86a00
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40dd4c00 	.word	0x40dd4c00
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40fadb00 	.word	0x40fadb00
 8001ec0:	40ef4000 	.word	0x40ef4000
 8001ec4:	40e00000 	.word	0x40e00000
 8001ec8:	40100000 	.word	0x40100000
 8001ecc:	40f00000 	.word	0x40f00000
 8001ed0:	41200000 	.word	0x41200000
 8001ed4:	3ff00000 	.word	0x3ff00000
 8001ed8:	41300000 	.word	0x41300000
 8001edc:	40b00000 	.word	0x40b00000
 8001ee0:	41e00000 	.word	0x41e00000
 8001ee4:	40300000 	.word	0x40300000
 8001ee8:	d007      	beq.n	8001efa <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001eea:	a309      	add	r3, pc, #36	@ (adr r3, 8001f10 <compensate_pressure+0x3c0>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f00:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3730      	adds	r7, #48	@ 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40fadb00 	.word	0x40fadb00

08001f18 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db03      	blt.n	8001f34 <st_check_boundaries+0x1c>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	dd09      	ble.n	8001f48 <st_check_boundaries+0x30>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db06      	blt.n	8001f48 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	dc02      	bgt.n	8001f48 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f42:	23fa      	movs	r3, #250	@ 0xfa
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e023      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db03      	blt.n	8001f56 <st_check_boundaries+0x3e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	dd09      	ble.n	8001f6a <st_check_boundaries+0x52>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db06      	blt.n	8001f6a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	dc02      	bgt.n	8001f6a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f64:	23fb      	movs	r3, #251	@ 0xfb
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e012      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db03      	blt.n	8001f78 <st_check_boundaries+0x60>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	dd09      	ble.n	8001f8c <st_check_boundaries+0x74>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db03      	blt.n	8001f86 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	dd02      	ble.n	8001f8c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f86:	23f9      	movs	r3, #249	@ 0xf9
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	e001      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	000ffff0 	.word	0x000ffff0

08001fa4 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff f839 	bl	8001024 <bmp2_init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f91e 	bl	80011fe <bmp2_get_config>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f950 	bl	800127e <bmp2_set_config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2003      	movs	r0, #3
 8001fec:	f7ff f982 	bl	80012f4 <bmp2_set_power_mode>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001ff4:	f107 0108 	add.w	r1, r7, #8
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa0c 	bl	800141c <bmp2_compute_meas_time>
 8002004:	4603      	mov	r3, r0
 8002006:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6858      	ldr	r0, [r3, #4]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	891b      	ldrh	r3, [r3, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	f001 fe92 	bl	8003d64 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f107 010f 	add.w	r1, r7, #15
 8002048:	2305      	movs	r3, #5
 800204a:	2201      	movs	r2, #1
 800204c:	f003 f869 	bl	8005122 <HAL_SPI_Transmit>
 8002050:	4603      	mov	r3, r0
 8002052:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2305      	movs	r3, #5
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	f003 f9d4 	bl	800540c <HAL_SPI_Receive>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	7dbb      	ldrb	r3, [r7, #22]
 800206a:	4413      	add	r3, r2
 800206c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6858      	ldr	r0, [r3, #4]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	891b      	ldrh	r3, [r3, #8]
 8002076:	2201      	movs	r2, #1
 8002078:	4619      	mov	r1, r3
 800207a:	f001 fe73 	bl	8003d64 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800207e:	7dbb      	ldrb	r3, [r7, #22]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <bmp2_spi_read+0x74>
    iError = -1;
 8002084:	23ff      	movs	r3, #255	@ 0xff
 8002086:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6858      	ldr	r0, [r3, #4]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	891b      	ldrh	r3, [r3, #8]
 80020b8:	2200      	movs	r2, #0
 80020ba:	4619      	mov	r1, r3
 80020bc:	f001 fe52 	bl	8003d64 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f107 010f 	add.w	r1, r7, #15
 80020c8:	2305      	movs	r3, #5
 80020ca:	2201      	movs	r2, #1
 80020cc:	f003 f829 	bl	8005122 <HAL_SPI_Transmit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2305      	movs	r3, #5
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	f003 f81f 	bl	8005122 <HAL_SPI_Transmit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	7dbb      	ldrb	r3, [r7, #22]
 80020ea:	4413      	add	r3, r2
 80020ec:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6858      	ldr	r0, [r3, #4]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	891b      	ldrh	r3, [r3, #8]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	f001 fe33 	bl	8003d64 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80020fe:	7dbb      	ldrb	r3, [r7, #22]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <bmp2_spi_write+0x74>
    iError = -1;
 8002104:	23ff      	movs	r3, #255	@ 0xff
 8002106:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <bmp2_delay_us+0x24>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	4618      	mov	r0, r3
 800212a:	f001 faa7 	bl	800367c <HAL_Delay>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08b      	sub	sp, #44	@ 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002148:	23ff      	movs	r3, #255	@ 0xff
 800214a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	899b      	ldrh	r3, [r3, #12]
 8002154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f89c 	bl	800129c <bmp2_get_status>
 8002164:	4603      	mov	r3, r0
 8002166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8d4 	bl	800131e <bmp2_get_sensor_data>
 8002176:	4603      	mov	r3, r0
 8002178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 800217c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 8002186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <BMP2_ReadData+0xc4>)
 8002190:	f7fe fb7c 	bl	800088c <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 800219e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80021ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <BMP2_ReadData+0x80>
 80021b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dccd      	bgt.n	8002158 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	684c      	ldr	r4, [r1, #4]
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fd2d 	bl	8000c28 <__aeabi_d2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	684c      	ldr	r4, [r1, #4]
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fd22 	bl	8000c28 <__aeabi_d2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80021f0:	729a      	strb	r2, [r3, #10]

  return rslt;
 80021f2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	372c      	adds	r7, #44	@ 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	40590000 	.word	0x40590000

08002204 <FAN_PWM_Init>:
  * @brief Initialize PWM fan control
  * @param[in] hfan   : Fan PWM handler
  * @retval None
  */
void FAN_PWM_Init(FAN_PWM_Handle_TypeDef* hfan)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  hfan->Output.Duty = (hfan->ActiveState == FAN_ON_HIGH) ? (hfan->Output.Duty) : (100.0f - hfan->Output.Duty);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7b1b      	ldrb	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d103      	bne.n	800221c <FAN_PWM_Init+0x18>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edd3 7a02 	vldr	s15, [r3, #8]
 800221a:	e006      	b.n	800222a <FAN_PWM_Init+0x26>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002222:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002240 <FAN_PWM_Init+0x3c>
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hfan->Output));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8a8 	bl	8002388 <PWM_Init>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	42c80000 	.word	0x42c80000

08002244 <FAN_PWM_WriteDuty>:
  * @param[in/out] hfan   : Fan PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void FAN_PWM_WriteDuty(FAN_PWM_Handle_TypeDef* hfan, float duty)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	ed87 0a00 	vstr	s0, [r7]
  const float minDuty = 60.0f; // Minimum duty cycle for the fan to start
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <FAN_PWM_WriteDuty+0xac>)
 8002252:	60fb      	str	r3, [r7, #12]

  // Clamp the duty cycle to the valid range [0.0, 100.0]
  if (duty < 0.0f) {
 8002254:	edd7 7a00 	vldr	s15, [r7]
 8002258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d503      	bpl.n	800226a <FAN_PWM_WriteDuty+0x26>
    duty = 0.0f;
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	e00a      	b.n	8002280 <FAN_PWM_WriteDuty+0x3c>
  } else if (duty > 100.0f) {
 800226a:	edd7 7a00 	vldr	s15, [r7]
 800226e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 8002272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	dd01      	ble.n	8002280 <FAN_PWM_WriteDuty+0x3c>
    duty = 100.0f;
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <FAN_PWM_WriteDuty+0xb4>)
 800227e:	603b      	str	r3, [r7, #0]
  }

  // Map the duty cycle to the new range [minDuty, 100.0]
  if (duty > 0.0f) {
 8002280:	edd7 7a00 	vldr	s15, [r7]
 8002284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	dd13      	ble.n	80022b6 <FAN_PWM_WriteDuty+0x72>
      duty = minDuty + (duty * (100.0f - minDuty) / 100.0f);
 800228e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 8002292:	edd7 7a03 	vldr	s15, [r7, #12]
 8002296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800229a:	edd7 7a00 	vldr	s15, [r7]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 80022a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	edc7 7a00 	vstr	s15, [r7]
  }

  hfan->Output.Duty = (hfan->ActiveState == FAN_ON_HIGH) ? (duty) : (100.0f - duty);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7b1b      	ldrb	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d006      	beq.n	80022cc <FAN_PWM_WriteDuty+0x88>
 80022be:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 80022c2:	edd7 7a00 	vldr	s15, [r7]
 80022c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ca:	e001      	b.n	80022d0 <FAN_PWM_WriteDuty+0x8c>
 80022cc:	edd7 7a00 	vldr	s15, [r7]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hfan->Output), hfan->Output.Duty);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	edd3 7a02 	vldr	s15, [r3, #8]
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 f868 	bl	80023b8 <PWM_WriteDuty>
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	42700000 	.word	0x42700000
 80022f4:	42c80000 	.word	0x42c80000
 80022f8:	42c80000 	.word	0x42c80000

080022fc <HEATER_PWM_Init>:
  * @brief Initialize PWM heater control
  * @param[in] hhtr   : Heater PWM handler
  * @retval None
  */
void HEATER_PWM_Init(HEATER_PWM_Handle_TypeDef* hhtr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (hhtr->Output.Duty) : (100.0f - hhtr->Output.Duty);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7b1b      	ldrb	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d103      	bne.n	8002314 <HEATER_PWM_Init+0x18>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002312:	e006      	b.n	8002322 <HEATER_PWM_Init+0x26>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	edd3 7a02 	vldr	s15, [r3, #8]
 800231a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002338 <HEATER_PWM_Init+0x3c>
 800231e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hhtr->Output));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f82c 	bl	8002388 <PWM_Init>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	42c80000 	.word	0x42c80000

0800233c <HEATER_PWM_WriteDuty>:
  * @param[in/out] hhtr   : Heater PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void HEATER_PWM_WriteDuty(HEATER_PWM_Handle_TypeDef* hhtr, float duty)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	ed87 0a00 	vstr	s0, [r7]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (duty) : (100.0f - duty);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7b1b      	ldrb	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d006      	beq.n	800235e <HEATER_PWM_WriteDuty+0x22>
 8002350:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002384 <HEATER_PWM_WriteDuty+0x48>
 8002354:	edd7 7a00 	vldr	s15, [r7]
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235c:	e001      	b.n	8002362 <HEATER_PWM_WriteDuty+0x26>
 800235e:	edd7 7a00 	vldr	s15, [r7]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hhtr->Output), hhtr->Output.Duty);
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002370:	eeb0 0a67 	vmov.f32	s0, s15
 8002374:	4610      	mov	r0, r2
 8002376:	f000 f81f 	bl	80023b8 <PWM_WriteDuty>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	42c80000 	.word	0x42c80000

08002388 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	edd3 7a02 	vldr	s15, [r3, #8]
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f80c 	bl	80023b8 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f003 feac 	bl	8006108 <HAL_TIM_PWM_Start>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80023c4:	edd7 7a00 	vldr	s15, [r7]
 80023c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d503      	bpl.n	80023da <PWM_WriteDuty+0x22>
    duty = 0.0;
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	e00a      	b.n	80023f0 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800249c <PWM_WriteDuty+0xe4>
 80023e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	dd01      	ble.n	80023f0 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80023ec:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <PWM_WriteDuty+0xe8>)
 80023ee:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	3301      	adds	r3, #1
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002408:	edd7 7a00 	vldr	s15, [r7]
 800240c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002410:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800249c <PWM_WriteDuty+0xe4>
 8002414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241c:	ee17 3a90 	vmov	r3, s15
 8002420:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <PWM_WriteDuty+0x7e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002434:	e02c      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d105      	bne.n	800244a <PWM_WriteDuty+0x92>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002448:	e022      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d105      	bne.n	800245e <PWM_WriteDuty+0xa6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800245c:	e018      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d105      	bne.n	8002472 <PWM_WriteDuty+0xba>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002470:	e00e      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d105      	bne.n	8002486 <PWM_WriteDuty+0xce>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002484:	e004      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	42c80000 	.word	0x42c80000
 80024a0:	42c80000 	.word	0x42c80000

080024a4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ba:	4b86      	ldr	r3, [pc, #536]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	4a85      	ldr	r2, [pc, #532]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c6:	4b83      	ldr	r3, [pc, #524]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	4b80      	ldr	r3, [pc, #512]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a7f      	ldr	r2, [pc, #508]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b7d      	ldr	r3, [pc, #500]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ea:	4b7a      	ldr	r3, [pc, #488]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a79      	ldr	r2, [pc, #484]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b77      	ldr	r3, [pc, #476]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	4b74      	ldr	r3, [pc, #464]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a73      	ldr	r2, [pc, #460]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b71      	ldr	r3, [pc, #452]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	4b6e      	ldr	r3, [pc, #440]	@ (80026d4 <MX_GPIO_Init+0x230>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a6d      	ldr	r2, [pc, #436]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b6b      	ldr	r3, [pc, #428]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	4b68      	ldr	r3, [pc, #416]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	4a67      	ldr	r2, [pc, #412]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6313      	str	r3, [r2, #48]	@ 0x30
 800253e:	4b65      	ldr	r3, [pc, #404]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800254a:	4b62      	ldr	r3, [pc, #392]	@ (80026d4 <MX_GPIO_Init+0x230>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a61      	ldr	r2, [pc, #388]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b5f      	ldr	r3, [pc, #380]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_SPI_CS1_GPIO_Port, BMP280_SPI_CS1_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2110      	movs	r1, #16
 8002566:	485c      	ldr	r0, [pc, #368]	@ (80026d8 <MX_GPIO_Init+0x234>)
 8002568:	f001 fbfc 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|Fan_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	f244 4181 	movw	r1, #17537	@ 0x4481
 8002572:	485a      	ldr	r0, [pc, #360]	@ (80026dc <MX_GPIO_Init+0x238>)
 8002574:	f001 fbf6 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	2140      	movs	r1, #64	@ 0x40
 800257c:	4858      	ldr	r0, [pc, #352]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 800257e:	f001 fbf1 	bl	8003d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_SPI_CS1_Pin;
 8002582:	2310      	movs	r3, #16
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	2301      	movs	r3, #1
 8002588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMP280_SPI_CS1_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	484f      	ldr	r0, [pc, #316]	@ (80026d8 <MX_GPIO_Init+0x234>)
 800259a:	f001 fa37 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800259e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	484b      	ldr	r0, [pc, #300]	@ (80026e4 <MX_GPIO_Init+0x240>)
 80025b6:	f001 fa29 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025ba:	2332      	movs	r3, #50	@ 0x32
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ca:	230b      	movs	r3, #11
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4843      	ldr	r0, [pc, #268]	@ (80026e4 <MX_GPIO_Init+0x240>)
 80025d6:	f001 fa19 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025da:	2386      	movs	r3, #134	@ 0x86
 80025dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ea:	230b      	movs	r3, #11
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	483c      	ldr	r0, [pc, #240]	@ (80026e8 <MX_GPIO_Init+0x244>)
 80025f6:	f001 fa09 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|Fan_Pin|LD3_Pin|LD2_Pin;
 80025fa:	f244 4381 	movw	r3, #17537	@ 0x4481
 80025fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002600:	2301      	movs	r3, #1
 8002602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	4832      	ldr	r0, [pc, #200]	@ (80026dc <MX_GPIO_Init+0x238>)
 8002614:	f001 f9fa 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800262a:	230b      	movs	r3, #11
 800262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4829      	ldr	r0, [pc, #164]	@ (80026dc <MX_GPIO_Init+0x238>)
 8002636:	f001 f9e9 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800263a:	2340      	movs	r3, #64	@ 0x40
 800263c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4823      	ldr	r0, [pc, #140]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 8002652:	f001 f9db 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	481d      	ldr	r0, [pc, #116]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 800266a:	f001 f9cf 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800266e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002680:	230a      	movs	r3, #10
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4619      	mov	r1, r3
 800268a:	4817      	ldr	r0, [pc, #92]	@ (80026e8 <MX_GPIO_Init+0x244>)
 800268c:	f001 f9be 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	4619      	mov	r1, r3
 80026a4:	4810      	ldr	r0, [pc, #64]	@ (80026e8 <MX_GPIO_Init+0x244>)
 80026a6:	f001 f9b1 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026bc:	230b      	movs	r3, #11
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4806      	ldr	r0, [pc, #24]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 80026c8:	f001 f9a0 	bl	8003a0c <HAL_GPIO_Init>

}
 80026cc:	bf00      	nop
 80026ce:	3730      	adds	r7, #48	@ 0x30
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020000 	.word	0x40020000

080026ec <_write>:
uint16_t calculate_crc(const uint8_t *data, size_t length);
void process_user_input(void);

/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
    return (HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY) == HAL_OK) ? len : -1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	4807      	ldr	r0, [pc, #28]	@ (8002720 <_write+0x34>)
 8002704:	f004 fc7e 	bl	8007004 <HAL_UART_Transmit>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <_write+0x26>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	e001      	b.n	8002716 <_write+0x2a>
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	2000046c 	.word	0x2000046c

08002724 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_UART_RxCpltCallback+0x28>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d106      	bne.n	8002742 <HAL_UART_RxCpltCallback+0x1e>
    {
        process_user_input();
 8002734:	f000 f84a 	bl	80027cc <process_user_input>
        HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer)); // Restart reception
 8002738:	2214      	movs	r2, #20
 800273a:	4905      	ldr	r1, [pc, #20]	@ (8002750 <HAL_UART_RxCpltCallback+0x2c>)
 800273c:	4803      	ldr	r0, [pc, #12]	@ (800274c <HAL_UART_RxCpltCallback+0x28>)
 800273e:	f004 fcea 	bl	8007116 <HAL_UART_Receive_IT>
    }
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000046c 	.word	0x2000046c
 8002750:	2000027c 	.word	0x2000027c

08002754 <calculate_crc>:

uint16_t calculate_crc(const uint8_t *data, size_t length)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800275e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002762:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < length; i++) {
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e022      	b.n	80027b0 <calculate_crc+0x5c>
        crc ^= data[i];
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	8afb      	ldrh	r3, [r7, #22]
 8002776:	4053      	eors	r3, r2
 8002778:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	e011      	b.n	80027a4 <calculate_crc+0x50>
            if (crc & 0x0001) {
 8002780:	8afb      	ldrh	r3, [r7, #22]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d006      	beq.n	8002798 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;
 800278a:	8afb      	ldrh	r3, [r7, #22]
 800278c:	085b      	lsrs	r3, r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <calculate_crc+0x74>)
 8002792:	4053      	eors	r3, r2
 8002794:	82fb      	strh	r3, [r7, #22]
 8002796:	e002      	b.n	800279e <calculate_crc+0x4a>
            } else {
                crc >>= 1;
 8002798:	8afb      	ldrh	r3, [r7, #22]
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 800279e:	7bfb      	ldrb	r3, [r7, #15]
 80027a0:	3301      	adds	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b07      	cmp	r3, #7
 80027a8:	d9ea      	bls.n	8002780 <calculate_crc+0x2c>
    for (size_t i = 0; i < length; i++) {
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3301      	adds	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d3d8      	bcc.n	800276a <calculate_crc+0x16>
            }
        }
    }
    return crc;
 80027b8:	8afb      	ldrh	r3, [r7, #22]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	ffffa001 	.word	0xffffa001

080027cc <process_user_input>:

void process_user_input(void)
{
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
    char input[20];
    memcpy(input, rx_buffer, sizeof(rx_buffer));
 80027d2:	4b21      	ldr	r3, [pc, #132]	@ (8002858 <process_user_input+0x8c>)
 80027d4:	463c      	mov	r4, r7
 80027d6:	461d      	mov	r5, r3
 80027d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027dc:	682b      	ldr	r3, [r5, #0]
 80027de:	6023      	str	r3, [r4, #0]
    float new_temp = atof(input);
 80027e0:	463b      	mov	r3, r7
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 feaa 	bl	800853c <atof>
 80027e8:	ec53 2b10 	vmov	r2, r3, d0
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe fa1a 	bl	8000c28 <__aeabi_d2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	617b      	str	r3, [r7, #20]

    if (new_temp >= MIN_TEMP && new_temp <= MAX_TEMP) {
 80027f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027fc:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8002800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002808:	db16      	blt.n	8002838 <process_user_input+0x6c>
 800280a:	edd7 7a05 	vldr	s15, [r7, #20]
 800280e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800285c <process_user_input+0x90>
 8002812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281a:	d80d      	bhi.n	8002838 <process_user_input+0x6c>
        target_temperature = new_temp;
 800281c:	4a10      	ldr	r2, [pc, #64]	@ (8002860 <process_user_input+0x94>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	6013      	str	r3, [r2, #0]
        printf("Target temperature set to: %.2f\r\n", target_temperature);
 8002822:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <process_user_input+0x94>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd feae 	bl	8000588 <__aeabi_f2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	480c      	ldr	r0, [pc, #48]	@ (8002864 <process_user_input+0x98>)
 8002832:	f007 fbc9 	bl	8009fc8 <iprintf>
 8002836:	e00b      	b.n	8002850 <process_user_input+0x84>
    } else {
        printf("Invalid temperature! Please enter a value between %.1f and %.1f\r\n", MIN_TEMP, MAX_TEMP);
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <process_user_input+0x9c>)
 800283e:	e9cd 2300 	strd	r2, r3, [sp]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b09      	ldr	r3, [pc, #36]	@ (800286c <process_user_input+0xa0>)
 8002848:	4809      	ldr	r0, [pc, #36]	@ (8002870 <process_user_input+0xa4>)
 800284a:	f007 fbbd 	bl	8009fc8 <iprintf>
    }
}
 800284e:	bf00      	nop
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bdb0      	pop	{r4, r5, r7, pc}
 8002858:	2000027c 	.word	0x2000027c
 800285c:	42020000 	.word	0x42020000
 8002860:	20000074 	.word	0x20000074
 8002864:	0800cdbc 	.word	0x0800cdbc
 8002868:	40404000 	.word	0x40404000
 800286c:	40360000 	.word	0x40360000
 8002870:	0800cde0 	.word	0x0800cde0

08002874 <main>:

/* USER CODE END 0 */

int main(void)
{
 8002874:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002878:	b08c      	sub	sp, #48	@ 0x30
 800287a:	af06      	add	r7, sp, #24
    HAL_Init();
 800287c:	f000 fea1 	bl	80035c2 <HAL_Init>
    SystemClock_Config();
 8002880:	f000 f92c 	bl	8002adc <SystemClock_Config>
    MX_GPIO_Init();
 8002884:	f7ff fe0e 	bl	80024a4 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 8002888:	f000 fe42 	bl	8003510 <MX_USART3_UART_Init>
    MX_SPI4_Init();
 800288c:	f000 fa88 	bl	8002da0 <MX_SPI4_Init>
    MX_TIM2_Init();
 8002890:	f000 fc22 	bl	80030d8 <MX_TIM2_Init>
    MX_TIM7_Init();
 8002894:	f000 fcf0 	bl	8003278 <MX_TIM7_Init>
    MX_TIM3_Init();
 8002898:	f000 fc94 	bl	80031c4 <MX_TIM3_Init>

    BMP2_Init(&bmp2dev);
 800289c:	4880      	ldr	r0, [pc, #512]	@ (8002aa0 <main+0x22c>)
 800289e:	f7ff fb81 	bl	8001fa4 <BMP2_Init>
    HEATER_PWM_Init(&hheater);
 80028a2:	4880      	ldr	r0, [pc, #512]	@ (8002aa4 <main+0x230>)
 80028a4:	f7ff fd2a 	bl	80022fc <HEATER_PWM_Init>
    FAN_PWM_Init(&hfan);
 80028a8:	487f      	ldr	r0, [pc, #508]	@ (8002aa8 <main+0x234>)
 80028aa:	f7ff fcab 	bl	8002204 <FAN_PWM_Init>
    HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer)); // Start receiving user input
 80028ae:	2214      	movs	r2, #20
 80028b0:	497e      	ldr	r1, [pc, #504]	@ (8002aac <main+0x238>)
 80028b2:	487f      	ldr	r0, [pc, #508]	@ (8002ab0 <main+0x23c>)
 80028b4:	f004 fc2f 	bl	8007116 <HAL_UART_Receive_IT>
    HAL_TIM_Base_Start(&htim7);
 80028b8:	487e      	ldr	r0, [pc, #504]	@ (8002ab4 <main+0x240>)
 80028ba:	f003 fb5d 	bl	8005f78 <HAL_TIM_Base_Start>
    PID_Init();
 80028be:	f000 f981 	bl	8002bc4 <PID_Init>
    pid_controller.target_temperature = target_temperature;
 80028c2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab8 <main+0x244>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a7d      	ldr	r2, [pc, #500]	@ (8002abc <main+0x248>)
 80028c8:	6013      	str	r3, [r2, #0]

    while (1) {
        if (__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE)) {
 80028ca:	4b7a      	ldr	r3, [pc, #488]	@ (8002ab4 <main+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 80de 	bne.w	8002a96 <main+0x222>
            __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80028da:	4b76      	ldr	r3, [pc, #472]	@ (8002ab4 <main+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f06f 0201 	mvn.w	r2, #1
 80028e2:	611a      	str	r2, [r3, #16]

            double temp;
            BMP2_ReadData(&bmp2dev, NULL, &temp);
 80028e4:	463b      	mov	r3, r7
 80028e6:	461a      	mov	r2, r3
 80028e8:	2100      	movs	r1, #0
 80028ea:	486d      	ldr	r0, [pc, #436]	@ (8002aa0 <main+0x22c>)
 80028ec:	f7ff fc26 	bl	800213c <BMP2_ReadData>
            current_temperature = (float)temp;
 80028f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7fe f996 	bl	8000c28 <__aeabi_d2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4a70      	ldr	r2, [pc, #448]	@ (8002ac0 <main+0x24c>)
 8002900:	6013      	str	r3, [r2, #0]

            // Update target temperature for the single controller
            pid_controller.target_temperature = target_temperature;
 8002902:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab8 <main+0x244>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6d      	ldr	r2, [pc, #436]	@ (8002abc <main+0x248>)
 8002908:	6013      	str	r3, [r2, #0]

            // Feedforward (using the single target_temperature)
            float feedforward = 0.5f * (target_temperature - MIN_TEMP);
 800290a:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab8 <main+0x244>)
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8002914:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002918:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800291c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002920:	edc7 7a05 	vstr	s15, [r7, #20]

            // PID Control
            PID_Update(current_temperature);
 8002924:	4b66      	ldr	r3, [pc, #408]	@ (8002ac0 <main+0x24c>)
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	eeb0 0a67 	vmov.f32	s0, s15
 800292e:	f000 f973 	bl	8002c18 <PID_Update>
            pid_controller.output = PID_Calculate();
 8002932:	f000 f98b 	bl	8002c4c <PID_Calculate>
 8002936:	eef0 7a40 	vmov.f32	s15, s0
 800293a:	4b60      	ldr	r3, [pc, #384]	@ (8002abc <main+0x248>)
 800293c:	edc3 7a06 	vstr	s15, [r3, #24]

            if (current_temperature < target_temperature) {
 8002940:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac0 <main+0x24c>)
 8002942:	ed93 7a00 	vldr	s14, [r3]
 8002946:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab8 <main+0x244>)
 8002948:	edd3 7a00 	vldr	s15, [r3]
 800294c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002954:	d52b      	bpl.n	80029ae <main+0x13a>
                // Heating
                pid_controller.output_saturated = fminf(fmaxf(pid_controller.output + feedforward, 0.0f), 100.0f);
 8002956:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <main+0x248>)
 8002958:	ed93 7a06 	vldr	s14, [r3, #24]
 800295c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002964:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8002ac4 <main+0x250>
 8002968:	eeb0 0a67 	vmov.f32	s0, s15
 800296c:	f00a f9a8 	bl	800ccc0 <fmaxf>
 8002970:	eef0 7a40 	vmov.f32	s15, s0
 8002974:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8002ac8 <main+0x254>
 8002978:	eeb0 0a67 	vmov.f32	s0, s15
 800297c:	f00a f9bd 	bl	800ccfa <fminf>
 8002980:	eef0 7a40 	vmov.f32	s15, s0
 8002984:	4b4d      	ldr	r3, [pc, #308]	@ (8002abc <main+0x248>)
 8002986:	edc3 7a07 	vstr	s15, [r3, #28]
                HEATER_PWM_WriteDuty(&hheater, 5 * pid_controller.output_saturated);
 800298a:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <main+0x248>)
 800298c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002990:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002998:	eeb0 0a67 	vmov.f32	s0, s15
 800299c:	4841      	ldr	r0, [pc, #260]	@ (8002aa4 <main+0x230>)
 800299e:	f7ff fccd 	bl	800233c <HEATER_PWM_WriteDuty>
                FAN_PWM_WriteDuty(&hfan, 0.0f); // Fan off during heating
 80029a2:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8002ac4 <main+0x250>
 80029a6:	4840      	ldr	r0, [pc, #256]	@ (8002aa8 <main+0x234>)
 80029a8:	f7ff fc4c 	bl	8002244 <FAN_PWM_WriteDuty>
 80029ac:	e028      	b.n	8002a00 <main+0x18c>
            } else {
                // Cooling
                pid_controller.output_saturated = fminf(fmaxf(-pid_controller.output, 0.0f), 100.0f);
 80029ae:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <main+0x248>)
 80029b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80029b4:	eef1 7a67 	vneg.f32	s15, s15
 80029b8:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8002ac4 <main+0x250>
 80029bc:	eeb0 0a67 	vmov.f32	s0, s15
 80029c0:	f00a f97e 	bl	800ccc0 <fmaxf>
 80029c4:	eef0 7a40 	vmov.f32	s15, s0
 80029c8:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8002ac8 <main+0x254>
 80029cc:	eeb0 0a67 	vmov.f32	s0, s15
 80029d0:	f00a f993 	bl	800ccfa <fminf>
 80029d4:	eef0 7a40 	vmov.f32	s15, s0
 80029d8:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <main+0x248>)
 80029da:	edc3 7a07 	vstr	s15, [r3, #28]
                FAN_PWM_WriteDuty(&hfan, 3 * pid_controller.output_saturated);
 80029de:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <main+0x248>)
 80029e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80029e4:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80029e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ec:	eeb0 0a67 	vmov.f32	s0, s15
 80029f0:	482d      	ldr	r0, [pc, #180]	@ (8002aa8 <main+0x234>)
 80029f2:	f7ff fc27 	bl	8002244 <FAN_PWM_WriteDuty>
                HEATER_PWM_WriteDuty(&hheater, 0.0f); // Heater off during cooling
 80029f6:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8002ac4 <main+0x250>
 80029fa:	482a      	ldr	r0, [pc, #168]	@ (8002aa4 <main+0x230>)
 80029fc:	f7ff fc9e 	bl	800233c <HEATER_PWM_WriteDuty>
            }

            // Send Temperature Data with CRC
            if (HAL_GetTick() - last_temp_print_time >= 1000) {
 8002a00:	f000 fe30 	bl	8003664 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b31      	ldr	r3, [pc, #196]	@ (8002acc <main+0x258>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a10:	d341      	bcc.n	8002a96 <main+0x222>
                int msg_len = snprintf((char *)temp_msg_buffer, sizeof(temp_msg_buffer),
 8002a12:	4b29      	ldr	r3, [pc, #164]	@ (8002ab8 <main+0x244>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fdb6 	bl	8000588 <__aeabi_f2d>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	460d      	mov	r5, r1
 8002a20:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <main+0x24c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fdaf 	bl	8000588 <__aeabi_f2d>
 8002a2a:	4680      	mov	r8, r0
 8002a2c:	4689      	mov	r9, r1
                                       "{\"id\":1, \"target_temp\":%.2f, \"temp\":%.2f, \"pid_output\":%.2f}",
                                       target_temperature, current_temperature, pid_controller.output);
 8002a2e:	4b23      	ldr	r3, [pc, #140]	@ (8002abc <main+0x248>)
 8002a30:	699b      	ldr	r3, [r3, #24]
                int msg_len = snprintf((char *)temp_msg_buffer, sizeof(temp_msg_buffer),
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fda8 	bl	8000588 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a44:	e9cd 4500 	strd	r4, r5, [sp]
 8002a48:	4a21      	ldr	r2, [pc, #132]	@ (8002ad0 <main+0x25c>)
 8002a4a:	2164      	movs	r1, #100	@ 0x64
 8002a4c:	4821      	ldr	r0, [pc, #132]	@ (8002ad4 <main+0x260>)
 8002a4e:	f007 facd 	bl	8009fec <sniprintf>
 8002a52:	6138      	str	r0, [r7, #16]

                uint16_t crc = calculate_crc(temp_msg_buffer, msg_len);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4619      	mov	r1, r3
 8002a58:	481e      	ldr	r0, [pc, #120]	@ (8002ad4 <main+0x260>)
 8002a5a:	f7ff fe7b 	bl	8002754 <calculate_crc>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	81fb      	strh	r3, [r7, #14]
                snprintf((char *)temp_msg_buffer + msg_len, sizeof(temp_msg_buffer) - msg_len, ", \"crc\":%04X}\r\n", crc);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad4 <main+0x260>)
 8002a66:	1898      	adds	r0, r3, r2
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 8002a6e:	89fb      	ldrh	r3, [r7, #14]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <main+0x264>)
 8002a72:	f007 fabb 	bl	8009fec <sniprintf>

                HAL_UART_Transmit(&huart3, temp_msg_buffer, strlen((char *)temp_msg_buffer), HAL_MAX_DELAY);
 8002a76:	4817      	ldr	r0, [pc, #92]	@ (8002ad4 <main+0x260>)
 8002a78:	f7fd fc1a 	bl	80002b0 <strlen>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	4913      	ldr	r1, [pc, #76]	@ (8002ad4 <main+0x260>)
 8002a86:	480a      	ldr	r0, [pc, #40]	@ (8002ab0 <main+0x23c>)
 8002a88:	f004 fabc 	bl	8007004 <HAL_UART_Transmit>
                last_temp_print_time = HAL_GetTick();
 8002a8c:	f000 fdea 	bl	8003664 <HAL_GetTick>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a0e      	ldr	r2, [pc, #56]	@ (8002acc <main+0x258>)
 8002a94:	6013      	str	r3, [r2, #0]
            }
        }

        HAL_Delay(100);
 8002a96:	2064      	movs	r0, #100	@ 0x64
 8002a98:	f000 fdf0 	bl	800367c <HAL_Delay>
        if (__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE)) {
 8002a9c:	e715      	b.n	80028ca <main+0x56>
 8002a9e:	bf00      	nop
 8002aa0:	20000018 	.word	0x20000018
 8002aa4:	20000064 	.word	0x20000064
 8002aa8:	20000054 	.word	0x20000054
 8002aac:	2000027c 	.word	0x2000027c
 8002ab0:	2000046c 	.word	0x2000046c
 8002ab4:	20000420 	.word	0x20000420
 8002ab8:	20000074 	.word	0x20000074
 8002abc:	200002fc 	.word	0x200002fc
 8002ac0:	20000290 	.word	0x20000290
 8002ac4:	00000000 	.word	0x00000000
 8002ac8:	42c80000 	.word	0x42c80000
 8002acc:	200002f8 	.word	0x200002f8
 8002ad0:	0800ce24 	.word	0x0800ce24
 8002ad4:	20000294 	.word	0x20000294
 8002ad8:	0800ce64 	.word	0x0800ce64

08002adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b094      	sub	sp, #80	@ 0x50
 8002ae0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae2:	f107 0320 	add.w	r3, r7, #32
 8002ae6:	2230      	movs	r2, #48	@ 0x30
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f007 fb15 	bl	800a11a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af0:	f107 030c 	add.w	r3, r7, #12
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8002b00:	f001 f94a 	bl	8003d98 <HAL_PWR_EnableBkUpAccess>

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <SystemClock_Config+0xd4>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	4a29      	ldr	r2, [pc, #164]	@ (8002bb0 <SystemClock_Config+0xd4>)
 8002b0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b10:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <SystemClock_Config+0xd4>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1c:	4b25      	ldr	r3, [pc, #148]	@ (8002bb4 <SystemClock_Config+0xd8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a24      	ldr	r2, [pc, #144]	@ (8002bb4 <SystemClock_Config+0xd8>)
 8002b22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b22      	ldr	r3, [pc, #136]	@ (8002bb4 <SystemClock_Config+0xd8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8002b48:	2304      	movs	r3, #4
 8002b4a:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 216;
 8002b4c:	23d8      	movs	r3, #216	@ 0xd8
 8002b4e:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b50:	2302      	movs	r3, #2
 8002b52:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8002b54:	2303      	movs	r3, #3
 8002b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b58:	f107 0320 	add.w	r3, r7, #32
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f97b 	bl	8003e58 <HAL_RCC_OscConfig>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <SystemClock_Config+0x90>
    {
        Error_Handler();
 8002b68:	f000 f826 	bl	8002bb8 <Error_Handler>
    }

    /** Activate the Over-Drive mode
    */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b6c:	f001 f924 	bl	8003db8 <HAL_PWREx_EnableOverDrive>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0x9e>
    {
        Error_Handler();
 8002b76:	f000 f81f 	bl	8002bb8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	60fb      	str	r3, [r7, #12]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b86:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b8a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002b8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b90:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	2107      	movs	r1, #7
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fc01 	bl	80043a0 <HAL_RCC_ClockConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <SystemClock_Config+0xcc>
    {
        Error_Handler();
 8002ba4:	f000 f808 	bl	8002bb8 <Error_Handler>
    }
}
 8002ba8:	bf00      	nop
 8002baa:	3750      	adds	r7, #80	@ 0x50
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40007000 	.word	0x40007000

08002bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <Error_Handler+0x8>

08002bc4 <PID_Init>:
PID_Control_t pid_controller;

/**
 * @brief Initializes the PID controller.
 */
void PID_Init(void) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
    pid_controller.target_temperature = 0.0f;
 8002bc8:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <PID_Init+0x50>)
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
    pid_controller.current_temperature = 0.0f;
 8002bd0:	4b10      	ldr	r3, [pc, #64]	@ (8002c14 <PID_Init+0x50>)
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
    pid_controller.error = 0.0f;
 8002bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <PID_Init+0x50>)
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
    pid_controller.integral = 0.0f;
 8002be0:	4b0c      	ldr	r3, [pc, #48]	@ (8002c14 <PID_Init+0x50>)
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
    pid_controller.derivative = 0.0f;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <PID_Init+0x50>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
    pid_controller.previous_error = 0.0f;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <PID_Init+0x50>)
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
    pid_controller.output = 0.0f;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <PID_Init+0x50>)
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
    pid_controller.output_saturated = 0.0f;
 8002c00:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <PID_Init+0x50>)
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	200002fc 	.word	0x200002fc

08002c18 <PID_Update>:

/**
 * @brief Updates the PID controller with the current temperature.
 * @param current_temperature The current measured temperature.
 */
void PID_Update(float current_temperature) {
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	ed87 0a01 	vstr	s0, [r7, #4]
    pid_controller.current_temperature = current_temperature;
 8002c22:	4a09      	ldr	r2, [pc, #36]	@ (8002c48 <PID_Update+0x30>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6053      	str	r3, [r2, #4]
    pid_controller.error = pid_controller.target_temperature - current_temperature;
 8002c28:	4b07      	ldr	r3, [pc, #28]	@ (8002c48 <PID_Update+0x30>)
 8002c2a:	ed93 7a00 	vldr	s14, [r3]
 8002c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c36:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <PID_Update+0x30>)
 8002c38:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	200002fc 	.word	0x200002fc

08002c4c <PID_Calculate>:

/**
 * @brief Calculates the PID output.
 * @return The calculated PID output.
 */
float PID_Calculate(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    // Derivative Filter Parameters
    const float derivative_filter_constant = 0.9f;
 8002c52:	4b4e      	ldr	r3, [pc, #312]	@ (8002d8c <PID_Calculate+0x140>)
 8002c54:	607b      	str	r3, [r7, #4]
    static float previous_derivative = 0.0f;
    const float back_calculation_gain = 0.1f;
 8002c56:	4b4e      	ldr	r3, [pc, #312]	@ (8002d90 <PID_Calculate+0x144>)
 8002c58:	603b      	str	r3, [r7, #0]

    // Integral term with anti-windup
    pid_controller.integral += pid_controller.error;
 8002c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d94 <PID_Calculate+0x148>)
 8002c5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c60:	4b4c      	ldr	r3, [pc, #304]	@ (8002d94 <PID_Calculate+0x148>)
 8002c62:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <PID_Calculate+0x148>)
 8002c6c:	edc3 7a03 	vstr	s15, [r3, #12]
    if (pid_controller.output_saturated != pid_controller.output) {
 8002c70:	4b48      	ldr	r3, [pc, #288]	@ (8002d94 <PID_Calculate+0x148>)
 8002c72:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c76:	4b47      	ldr	r3, [pc, #284]	@ (8002d94 <PID_Calculate+0x148>)
 8002c78:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c7c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c84:	d013      	beq.n	8002cae <PID_Calculate+0x62>
        pid_controller.integral -= back_calculation_gain * (pid_controller.output_saturated - pid_controller.output);
 8002c86:	4b43      	ldr	r3, [pc, #268]	@ (8002d94 <PID_Calculate+0x148>)
 8002c88:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c8c:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <PID_Calculate+0x148>)
 8002c8e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c92:	4b40      	ldr	r3, [pc, #256]	@ (8002d94 <PID_Calculate+0x148>)
 8002c94:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c98:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c9c:	edd7 7a00 	vldr	s15, [r7]
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8002d94 <PID_Calculate+0x148>)
 8002caa:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    pid_controller.integral = fminf(fmaxf(pid_controller.integral, pid_params.integral_min), pid_params.integral_max);
 8002cae:	4b39      	ldr	r3, [pc, #228]	@ (8002d94 <PID_Calculate+0x148>)
 8002cb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cb4:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <PID_Calculate+0x14c>)
 8002cb6:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cba:	eef0 0a47 	vmov.f32	s1, s14
 8002cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc2:	f009 fffd 	bl	800ccc0 <fmaxf>
 8002cc6:	eeb0 7a40 	vmov.f32	s14, s0
 8002cca:	4b33      	ldr	r3, [pc, #204]	@ (8002d98 <PID_Calculate+0x14c>)
 8002ccc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cd0:	eef0 0a67 	vmov.f32	s1, s15
 8002cd4:	eeb0 0a47 	vmov.f32	s0, s14
 8002cd8:	f00a f80f 	bl	800ccfa <fminf>
 8002cdc:	eef0 7a40 	vmov.f32	s15, s0
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <PID_Calculate+0x148>)
 8002ce2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Derivative term with filtering
    pid_controller.derivative = (pid_controller.error - pid_controller.previous_error);
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <PID_Calculate+0x148>)
 8002ce8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cec:	4b29      	ldr	r3, [pc, #164]	@ (8002d94 <PID_Calculate+0x148>)
 8002cee:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf6:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <PID_Calculate+0x148>)
 8002cf8:	edc3 7a04 	vstr	s15, [r3, #16]
    pid_controller.derivative = derivative_filter_constant * previous_derivative + (1.0f - derivative_filter_constant) * pid_controller.derivative;
 8002cfc:	4b27      	ldr	r3, [pc, #156]	@ (8002d9c <PID_Calculate+0x150>)
 8002cfe:	ed93 7a00 	vldr	s14, [r3]
 8002d02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d16:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <PID_Calculate+0x148>)
 8002d18:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d24:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <PID_Calculate+0x148>)
 8002d26:	edc3 7a04 	vstr	s15, [r3, #16]

    // Calculate PID output
    pid_controller.output = (pid_params.kp * pid_controller.error) + (pid_params.ki * pid_controller.integral) + (pid_params.kd * pid_controller.derivative);
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <PID_Calculate+0x14c>)
 8002d2c:	ed93 7a00 	vldr	s14, [r3]
 8002d30:	4b18      	ldr	r3, [pc, #96]	@ (8002d94 <PID_Calculate+0x148>)
 8002d32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d3a:	4b17      	ldr	r3, [pc, #92]	@ (8002d98 <PID_Calculate+0x14c>)
 8002d3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002d40:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <PID_Calculate+0x148>)
 8002d42:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <PID_Calculate+0x14c>)
 8002d50:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d54:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <PID_Calculate+0x148>)
 8002d56:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <PID_Calculate+0x148>)
 8002d64:	edc3 7a06 	vstr	s15, [r3, #24]

    // Update previous values
    pid_controller.previous_error = pid_controller.error;
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <PID_Calculate+0x148>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a09      	ldr	r2, [pc, #36]	@ (8002d94 <PID_Calculate+0x148>)
 8002d6e:	6153      	str	r3, [r2, #20]
    previous_derivative = pid_controller.derivative;
 8002d70:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <PID_Calculate+0x148>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4a09      	ldr	r2, [pc, #36]	@ (8002d9c <PID_Calculate+0x150>)
 8002d76:	6013      	str	r3, [r2, #0]

    return pid_controller.output;
 8002d78:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <PID_Calculate+0x148>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	ee07 3a90 	vmov	s15, r3
}
 8002d80:	eeb0 0a67 	vmov.f32	s0, s15
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	3f666666 	.word	0x3f666666
 8002d90:	3dcccccd 	.word	0x3dcccccd
 8002d94:	200002fc 	.word	0x200002fc
 8002d98:	20000078 	.word	0x20000078
 8002d9c:	2000031c 	.word	0x2000031c

08002da0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002da6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <MX_SPI4_Init+0x78>)
 8002da8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002daa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002db0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002db2:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002db8:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002dbe:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002dcc:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dd6:	2210      	movs	r2, #16
 8002dd8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dda:	4b0e      	ldr	r3, [pc, #56]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002dec:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dee:	2207      	movs	r2, #7
 8002df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002df2:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002dfe:	4805      	ldr	r0, [pc, #20]	@ (8002e14 <MX_SPI4_Init+0x74>)
 8002e00:	f002 f8e4 	bl	8004fcc <HAL_SPI_Init>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002e0a:	f7ff fed5 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000320 	.word	0x20000320
 8002e18:	40013400 	.word	0x40013400

08002e1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	@ 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0314 	add.w	r3, r7, #20
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_SPI_MspInit+0x7c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d127      	bne.n	8002e8e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002e3e:	4b17      	ldr	r3, [pc, #92]	@ (8002e9c <HAL_SPI_MspInit+0x80>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <HAL_SPI_MspInit+0x80>)
 8002e44:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e4a:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <HAL_SPI_MspInit+0x80>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e56:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_SPI_MspInit+0x80>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	4a10      	ldr	r2, [pc, #64]	@ (8002e9c <HAL_SPI_MspInit+0x80>)
 8002e5c:	f043 0310 	orr.w	r3, r3, #16
 8002e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e62:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <HAL_SPI_MspInit+0x80>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SPI_SCK_Pin|BMP280_SPI_MISO_Pin|BMP280_SPI_MOSI_Pin;
 8002e6e:	2364      	movs	r3, #100	@ 0x64
 8002e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002e7e:	2305      	movs	r3, #5
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	4619      	mov	r1, r3
 8002e88:	4805      	ldr	r0, [pc, #20]	@ (8002ea0 <HAL_SPI_MspInit+0x84>)
 8002e8a:	f000 fdbf 	bl	8003a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002e8e:	bf00      	nop
 8002e90:	3728      	adds	r7, #40	@ 0x28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40013400 	.word	0x40013400
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	4a08      	ldr	r2, [pc, #32]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_MspInit+0x44>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800

08002eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ef0:	bf00      	nop
 8002ef2:	e7fd      	b.n	8002ef0 <NMI_Handler+0x4>

08002ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <HardFault_Handler+0x4>

08002efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <MemManage_Handler+0x4>

08002f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f08:	bf00      	nop
 8002f0a:	e7fd      	b.n	8002f08 <BusFault_Handler+0x4>

08002f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f10:	bf00      	nop
 8002f12:	e7fd      	b.n	8002f10 <UsageFault_Handler+0x4>

08002f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f42:	f000 fb7b 	bl	800363c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f50:	4802      	ldr	r0, [pc, #8]	@ (8002f5c <USART3_IRQHandler+0x10>)
 8002f52:	f004 f925 	bl	80071a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000046c 	.word	0x2000046c

08002f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return 1;
 8002f64:	2301      	movs	r3, #1
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <_kill>:

int _kill(int pid, int sig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f7a:	f007 f933 	bl	800a1e4 <__errno>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2216      	movs	r2, #22
 8002f82:	601a      	str	r2, [r3, #0]
  return -1;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <_exit>:

void _exit (int status)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ffe7 	bl	8002f70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fa2:	bf00      	nop
 8002fa4:	e7fd      	b.n	8002fa2 <_exit+0x12>

08002fa6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e00a      	b.n	8002fce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fb8:	f3af 8000 	nop.w
 8002fbc:	4601      	mov	r1, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	60ba      	str	r2, [r7, #8]
 8002fc4:	b2ca      	uxtb	r2, r1
 8002fc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	dbf0      	blt.n	8002fb8 <_read+0x12>
  }

  return len;
 8002fd6:	687b      	ldr	r3, [r7, #4]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003008:	605a      	str	r2, [r3, #4]
  return 0;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_isatty>:

int _isatty(int file)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003050:	4a14      	ldr	r2, [pc, #80]	@ (80030a4 <_sbrk+0x5c>)
 8003052:	4b15      	ldr	r3, [pc, #84]	@ (80030a8 <_sbrk+0x60>)
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800305c:	4b13      	ldr	r3, [pc, #76]	@ (80030ac <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <_sbrk+0x64>)
 8003066:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <_sbrk+0x68>)
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <_sbrk+0x64>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d207      	bcs.n	8003088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003078:	f007 f8b4 	bl	800a1e4 <__errno>
 800307c:	4603      	mov	r3, r0
 800307e:	220c      	movs	r2, #12
 8003080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	e009      	b.n	800309c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <_sbrk+0x64>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308e:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <_sbrk+0x64>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	4a05      	ldr	r2, [pc, #20]	@ (80030ac <_sbrk+0x64>)
 8003098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20050000 	.word	0x20050000
 80030a8:	00000400 	.word	0x00000400
 80030ac:	20000384 	.word	0x20000384
 80030b0:	20000648 	.word	0x20000648

080030b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b8:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <SystemInit+0x20>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	4a05      	ldr	r2, [pc, #20]	@ (80030d4 <SystemInit+0x20>)
 80030c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08e      	sub	sp, #56	@ 0x38
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ec:	f107 031c 	add.w	r3, r7, #28
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030f8:	463b      	mov	r3, r7
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	611a      	str	r2, [r3, #16]
 8003106:	615a      	str	r2, [r3, #20]
 8003108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800310a:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 800310c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8003112:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 8003114:	226b      	movs	r2, #107	@ 0x6b
 8003116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003118:	4b29      	ldr	r3, [pc, #164]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800311e:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 8003120:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	4b26      	ldr	r3, [pc, #152]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312c:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 800312e:	2200      	movs	r2, #0
 8003130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003132:	4823      	ldr	r0, [pc, #140]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 8003134:	f002 fec8 	bl	8005ec8 <HAL_TIM_Base_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800313e:	f7ff fd3b 	bl	8002bb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800314c:	4619      	mov	r1, r3
 800314e:	481c      	ldr	r0, [pc, #112]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 8003150:	f003 f9e8 	bl	8006524 <HAL_TIM_ConfigClockSource>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800315a:	f7ff fd2d 	bl	8002bb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800315e:	4818      	ldr	r0, [pc, #96]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 8003160:	f002 ff7a 	bl	8006058 <HAL_TIM_PWM_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800316a:	f7ff fd25 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	4619      	mov	r1, r3
 800317c:	4810      	ldr	r0, [pc, #64]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 800317e:	f003 fe65 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003188:	f7ff fd16 	bl	8002bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800318c:	2360      	movs	r3, #96	@ 0x60
 800318e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800319c:	463b      	mov	r3, r7
 800319e:	220c      	movs	r2, #12
 80031a0:	4619      	mov	r1, r3
 80031a2:	4807      	ldr	r0, [pc, #28]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 80031a4:	f003 f8aa 	bl	80062fc <HAL_TIM_PWM_ConfigChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80031ae:	f7ff fd03 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031b2:	4803      	ldr	r0, [pc, #12]	@ (80031c0 <MX_TIM2_Init+0xe8>)
 80031b4:	f000 f8ea 	bl	800338c <HAL_TIM_MspPostInit>

}
 80031b8:	bf00      	nop
 80031ba:	3738      	adds	r7, #56	@ 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000388 	.word	0x20000388

080031c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	@ 0x28
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ca:	f107 031c 	add.w	r3, r7, #28
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	605a      	str	r2, [r3, #4]
 80031d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d6:	463b      	mov	r3, r7
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
 80031e4:	615a      	str	r2, [r3, #20]
 80031e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031e8:	4b21      	ldr	r3, [pc, #132]	@ (8003270 <MX_TIM3_Init+0xac>)
 80031ea:	4a22      	ldr	r2, [pc, #136]	@ (8003274 <MX_TIM3_Init+0xb0>)
 80031ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <MX_TIM3_Init+0xac>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003270 <MX_TIM3_Init+0xac>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003270 <MX_TIM3_Init+0xac>)
 80031fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003200:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003202:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <MX_TIM3_Init+0xac>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003208:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <MX_TIM3_Init+0xac>)
 800320a:	2200      	movs	r2, #0
 800320c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800320e:	4818      	ldr	r0, [pc, #96]	@ (8003270 <MX_TIM3_Init+0xac>)
 8003210:	f002 ff22 	bl	8006058 <HAL_TIM_PWM_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800321a:	f7ff fccd 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	4619      	mov	r1, r3
 800322c:	4810      	ldr	r0, [pc, #64]	@ (8003270 <MX_TIM3_Init+0xac>)
 800322e:	f003 fe0d 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003238:	f7ff fcbe 	bl	8002bb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800323c:	2360      	movs	r3, #96	@ 0x60
 800323e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800324c:	463b      	mov	r3, r7
 800324e:	2200      	movs	r2, #0
 8003250:	4619      	mov	r1, r3
 8003252:	4807      	ldr	r0, [pc, #28]	@ (8003270 <MX_TIM3_Init+0xac>)
 8003254:	f003 f852 	bl	80062fc <HAL_TIM_PWM_ConfigChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800325e:	f7ff fcab 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003262:	4803      	ldr	r0, [pc, #12]	@ (8003270 <MX_TIM3_Init+0xac>)
 8003264:	f000 f892 	bl	800338c <HAL_TIM_MspPostInit>

}
 8003268:	bf00      	nop
 800326a:	3728      	adds	r7, #40	@ 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	200003d4 	.word	0x200003d4
 8003274:	40000400 	.word	0x40000400

08003278 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <MX_TIM7_Init+0x68>)
 800328a:	4a16      	ldr	r2, [pc, #88]	@ (80032e4 <MX_TIM7_Init+0x6c>)
 800328c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 800328e:	4b14      	ldr	r3, [pc, #80]	@ (80032e0 <MX_TIM7_Init+0x68>)
 8003290:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8003294:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	4b12      	ldr	r3, [pc, #72]	@ (80032e0 <MX_TIM7_Init+0x68>)
 8003298:	2200      	movs	r2, #0
 800329a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800329c:	4b10      	ldr	r3, [pc, #64]	@ (80032e0 <MX_TIM7_Init+0x68>)
 800329e:	f242 720f 	movw	r2, #9999	@ 0x270f
 80032a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a4:	4b0e      	ldr	r3, [pc, #56]	@ (80032e0 <MX_TIM7_Init+0x68>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032aa:	480d      	ldr	r0, [pc, #52]	@ (80032e0 <MX_TIM7_Init+0x68>)
 80032ac:	f002 fe0c 	bl	8005ec8 <HAL_TIM_Base_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80032b6:	f7ff fc7f 	bl	8002bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4806      	ldr	r0, [pc, #24]	@ (80032e0 <MX_TIM7_Init+0x68>)
 80032c8:	f003 fdc0 	bl	8006e4c <HAL_TIMEx_MasterConfigSynchronization>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80032d2:	f7ff fc71 	bl	8002bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20000420 	.word	0x20000420
 80032e4:	40001400 	.word	0x40001400

080032e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032f8:	d10c      	bne.n	8003314 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032fa:	4b12      	ldr	r3, [pc, #72]	@ (8003344 <HAL_TIM_Base_MspInit+0x5c>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	4a11      	ldr	r2, [pc, #68]	@ (8003344 <HAL_TIM_Base_MspInit+0x5c>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	6413      	str	r3, [r2, #64]	@ 0x40
 8003306:	4b0f      	ldr	r3, [pc, #60]	@ (8003344 <HAL_TIM_Base_MspInit+0x5c>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003312:	e010      	b.n	8003336 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <HAL_TIM_Base_MspInit+0x60>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10b      	bne.n	8003336 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800331e:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <HAL_TIM_Base_MspInit+0x5c>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	4a08      	ldr	r2, [pc, #32]	@ (8003344 <HAL_TIM_Base_MspInit+0x5c>)
 8003324:	f043 0320 	orr.w	r3, r3, #32
 8003328:	6413      	str	r3, [r2, #64]	@ 0x40
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_TIM_Base_MspInit+0x5c>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	40001400 	.word	0x40001400

0800334c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <HAL_TIM_PWM_MspInit+0x38>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10b      	bne.n	8003376 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800335e:	4b0a      	ldr	r3, [pc, #40]	@ (8003388 <HAL_TIM_PWM_MspInit+0x3c>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	4a09      	ldr	r2, [pc, #36]	@ (8003388 <HAL_TIM_PWM_MspInit+0x3c>)
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	6413      	str	r3, [r2, #64]	@ 0x40
 800336a:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_TIM_PWM_MspInit+0x3c>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40000400 	.word	0x40000400
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ac:	d11c      	bne.n	80033e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ae:	4b21      	ldr	r3, [pc, #132]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	4a20      	ldr	r2, [pc, #128]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 80033c6:	2308      	movs	r3, #8
 80033c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	2302      	movs	r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d2:	2300      	movs	r3, #0
 80033d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033d6:	2301      	movs	r3, #1
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	4619      	mov	r1, r3
 80033e0:	4815      	ldr	r0, [pc, #84]	@ (8003438 <HAL_TIM_MspPostInit+0xac>)
 80033e2:	f000 fb13 	bl	8003a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033e6:	e020      	b.n	800342a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a13      	ldr	r2, [pc, #76]	@ (800343c <HAL_TIM_MspPostInit+0xb0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d11b      	bne.n	800342a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003434 <HAL_TIM_MspPostInit+0xa8>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800340a:	2340      	movs	r3, #64	@ 0x40
 800340c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2302      	movs	r3, #2
 8003410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800341a:	2302      	movs	r3, #2
 800341c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341e:	f107 0314 	add.w	r3, r7, #20
 8003422:	4619      	mov	r1, r3
 8003424:	4804      	ldr	r0, [pc, #16]	@ (8003438 <HAL_TIM_MspPostInit+0xac>)
 8003426:	f000 faf1 	bl	8003a0c <HAL_GPIO_Init>
}
 800342a:	bf00      	nop
 800342c:	3728      	adds	r7, #40	@ 0x28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40020000 	.word	0x40020000
 800343c:	40000400 	.word	0x40000400

08003440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param uartHandle: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b0aa      	sub	sp, #168	@ 0xa8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003448:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003458:	f107 0310 	add.w	r3, r7, #16
 800345c:	2284      	movs	r2, #132	@ 0x84
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f006 fe5a 	bl	800a11a <memset>
  if(uartHandle->Instance==USART3)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a26      	ldr	r2, [pc, #152]	@ (8003504 <HAL_UART_MspInit+0xc4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d144      	bne.n	80034fa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003474:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003476:	2300      	movs	r3, #0
 8003478:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	4618      	mov	r0, r3
 8003480:	f001 f9b4 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800348a:	f7ff fb95 	bl	8002bb8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800348e:	4b1e      	ldr	r3, [pc, #120]	@ (8003508 <HAL_UART_MspInit+0xc8>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <HAL_UART_MspInit+0xc8>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003498:	6413      	str	r3, [r2, #64]	@ 0x40
 800349a:	4b1b      	ldr	r3, [pc, #108]	@ (8003508 <HAL_UART_MspInit+0xc8>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a6:	4b18      	ldr	r3, [pc, #96]	@ (8003508 <HAL_UART_MspInit+0xc8>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	4a17      	ldr	r2, [pc, #92]	@ (8003508 <HAL_UART_MspInit+0xc8>)
 80034ac:	f043 0308 	orr.w	r3, r3, #8
 80034b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b2:	4b15      	ldr	r3, [pc, #84]	@ (8003508 <HAL_UART_MspInit+0xc8>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80034be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034d8:	2307      	movs	r3, #7
 80034da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034de:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80034e2:	4619      	mov	r1, r3
 80034e4:	4809      	ldr	r0, [pc, #36]	@ (800350c <HAL_UART_MspInit+0xcc>)
 80034e6:	f000 fa91 	bl	8003a0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034ea:	2200      	movs	r2, #0
 80034ec:	2100      	movs	r1, #0
 80034ee:	2027      	movs	r0, #39	@ 0x27
 80034f0:	f000 f9c3 	bl	800387a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034f4:	2027      	movs	r0, #39	@ 0x27
 80034f6:	f000 f9dc 	bl	80038b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034fa:	bf00      	nop
 80034fc:	37a8      	adds	r7, #168	@ 0xa8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40004800 	.word	0x40004800
 8003508:	40023800 	.word	0x40023800
 800350c:	40020c00 	.word	0x40020c00

08003510 <MX_USART3_UART_Init>:
/**
 * @brief  Initializes the USART3 peripheral with default configuration.
 * @retval None
 */
void MX_USART3_UART_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8003514:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 8003516:	4a15      	ldr	r2, [pc, #84]	@ (800356c <MX_USART3_UART_Init+0x5c>)
 8003518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = USART3_DEFAULT_BAUDRATE;
 800351a:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 800351c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003522:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003528:	4b0f      	ldr	r3, [pc, #60]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 800352a:	2200      	movs	r2, #0
 800352c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 8003536:	220c      	movs	r2, #12
 8003538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 800353c:	2200      	movs	r2, #0
 800353e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003540:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 8003542:	2200      	movs	r2, #0
 8003544:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 8003548:	2200      	movs	r2, #0
 800354a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 800354e:	2200      	movs	r2, #0
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003552:	4805      	ldr	r0, [pc, #20]	@ (8003568 <MX_USART3_UART_Init+0x58>)
 8003554:	f003 fd08 	bl	8006f68 <HAL_UART_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800355e:	f7ff fb2b 	bl	8002bb8 <Error_Handler>
  }
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000046c 	.word	0x2000046c
 800356c:	40004800 	.word	0x40004800

08003570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003574:	f7ff fd9e 	bl	80030b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003578:	480c      	ldr	r0, [pc, #48]	@ (80035ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800357a:	490d      	ldr	r1, [pc, #52]	@ (80035b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800357c:	4a0d      	ldr	r2, [pc, #52]	@ (80035b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800357e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003580:	e002      	b.n	8003588 <LoopCopyDataInit>

08003582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003586:	3304      	adds	r3, #4

08003588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800358a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800358c:	d3f9      	bcc.n	8003582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003590:	4c0a      	ldr	r4, [pc, #40]	@ (80035bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003594:	e001      	b.n	800359a <LoopFillZerobss>

08003596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003598:	3204      	adds	r2, #4

0800359a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800359a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800359c:	d3fb      	bcc.n	8003596 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800359e:	f006 fe27 	bl	800a1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035a2:	f7ff f967 	bl	8002874 <main>
  bx  lr    
 80035a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b0:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80035b4:	0800d2d8 	.word	0x0800d2d8
  ldr r2, =_sbss
 80035b8:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80035bc:	20000644 	.word	0x20000644

080035c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035c0:	e7fe      	b.n	80035c0 <ADC_IRQHandler>

080035c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c6:	2003      	movs	r0, #3
 80035c8:	f000 f94c 	bl	8003864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035cc:	2000      	movs	r0, #0
 80035ce:	f000 f805 	bl	80035dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d2:	f7ff fc67 	bl	8002ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_InitTick+0x54>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_InitTick+0x58>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f967 	bl	80038ce <HAL_SYSTICK_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e00e      	b.n	8003628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d80a      	bhi.n	8003626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003610:	2200      	movs	r2, #0
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	f04f 30ff 	mov.w	r0, #4294967295
 8003618:	f000 f92f 	bl	800387a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800361c:	4a06      	ldr	r2, [pc, #24]	@ (8003638 <HAL_InitTick+0x5c>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000008c 	.word	0x2000008c
 8003634:	20000094 	.word	0x20000094
 8003638:	20000090 	.word	0x20000090

0800363c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003640:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_IncTick+0x20>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_IncTick+0x24>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4413      	add	r3, r2
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <HAL_IncTick+0x24>)
 800364e:	6013      	str	r3, [r2, #0]
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000094 	.word	0x20000094
 8003660:	200004f4 	.word	0x200004f4

08003664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return uwTick;
 8003668:	4b03      	ldr	r3, [pc, #12]	@ (8003678 <HAL_GetTick+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	200004f4 	.word	0x200004f4

0800367c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff ffee 	bl	8003664 <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d005      	beq.n	80036a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_Delay+0x44>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036a2:	bf00      	nop
 80036a4:	f7ff ffde 	bl	8003664 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d8f7      	bhi.n	80036a4 <HAL_Delay+0x28>
  {
  }
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000094 	.word	0x20000094

080036c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <__NVIC_SetPriorityGrouping+0x40>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036e0:	4013      	ands	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f2:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <__NVIC_SetPriorityGrouping+0x40>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60d3      	str	r3, [r2, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00
 8003708:	05fa0000 	.word	0x05fa0000

0800370c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <__NVIC_GetPriorityGrouping+0x18>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	f003 0307 	and.w	r3, r3, #7
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	2b00      	cmp	r3, #0
 8003738:	db0b      	blt.n	8003752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	f003 021f 	and.w	r2, r3, #31
 8003740:	4907      	ldr	r1, [pc, #28]	@ (8003760 <__NVIC_EnableIRQ+0x38>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2001      	movs	r0, #1
 800374a:	fa00 f202 	lsl.w	r2, r0, r2
 800374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	e000e100 	.word	0xe000e100

08003764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	6039      	str	r1, [r7, #0]
 800376e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003774:	2b00      	cmp	r3, #0
 8003776:	db0a      	blt.n	800378e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	490c      	ldr	r1, [pc, #48]	@ (80037b0 <__NVIC_SetPriority+0x4c>)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	0112      	lsls	r2, r2, #4
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	440b      	add	r3, r1
 8003788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800378c:	e00a      	b.n	80037a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4908      	ldr	r1, [pc, #32]	@ (80037b4 <__NVIC_SetPriority+0x50>)
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	3b04      	subs	r3, #4
 800379c:	0112      	lsls	r2, r2, #4
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	440b      	add	r3, r1
 80037a2:	761a      	strb	r2, [r3, #24]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000e100 	.word	0xe000e100
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b089      	sub	sp, #36	@ 0x24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f1c3 0307 	rsb	r3, r3, #7
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	bf28      	it	cs
 80037d6:	2304      	movcs	r3, #4
 80037d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3304      	adds	r3, #4
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d902      	bls.n	80037e8 <NVIC_EncodePriority+0x30>
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3b03      	subs	r3, #3
 80037e6:	e000      	b.n	80037ea <NVIC_EncodePriority+0x32>
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ec:	f04f 32ff 	mov.w	r2, #4294967295
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	401a      	ands	r2, r3
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003800:	f04f 31ff 	mov.w	r1, #4294967295
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	43d9      	mvns	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	4313      	orrs	r3, r2
         );
}
 8003812:	4618      	mov	r0, r3
 8003814:	3724      	adds	r7, #36	@ 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003830:	d301      	bcc.n	8003836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003832:	2301      	movs	r3, #1
 8003834:	e00f      	b.n	8003856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003836:	4a0a      	ldr	r2, [pc, #40]	@ (8003860 <SysTick_Config+0x40>)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800383e:	210f      	movs	r1, #15
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	f7ff ff8e 	bl	8003764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003848:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <SysTick_Config+0x40>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384e:	4b04      	ldr	r3, [pc, #16]	@ (8003860 <SysTick_Config+0x40>)
 8003850:	2207      	movs	r2, #7
 8003852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	e000e010 	.word	0xe000e010

08003864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff29 	bl	80036c4 <__NVIC_SetPriorityGrouping>
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800387a:	b580      	push	{r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800388c:	f7ff ff3e 	bl	800370c <__NVIC_GetPriorityGrouping>
 8003890:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	6978      	ldr	r0, [r7, #20]
 8003898:	f7ff ff8e 	bl	80037b8 <NVIC_EncodePriority>
 800389c:	4602      	mov	r2, r0
 800389e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a2:	4611      	mov	r1, r2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff5d 	bl	8003764 <__NVIC_SetPriority>
}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ff31 	bl	8003728 <__NVIC_EnableIRQ>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b082      	sub	sp, #8
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ffa2 	bl	8003820 <SysTick_Config>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038f4:	f7ff feb6 	bl	8003664 <HAL_GetTick>
 80038f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2280      	movs	r2, #128	@ 0x80
 800390a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e052      	b.n	80039be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0216 	bic.w	r2, r2, #22
 8003926:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003936:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_DMA_Abort+0x62>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0208 	bic.w	r2, r2, #8
 8003956:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003968:	e013      	b.n	8003992 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800396a:	f7ff fe7b 	bl	8003664 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b05      	cmp	r3, #5
 8003976:	d90c      	bls.n	8003992 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2203      	movs	r2, #3
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e015      	b.n	80039be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e4      	bne.n	800396a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	223f      	movs	r2, #63	@ 0x3f
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2280      	movs	r2, #128	@ 0x80
 80039de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e00c      	b.n	80039fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2205      	movs	r2, #5
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b089      	sub	sp, #36	@ 0x24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e175      	b.n	8003d18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	f040 8164 	bne.w	8003d12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d005      	beq.n	8003a62 <HAL_GPIO_Init+0x56>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d130      	bne.n	8003ac4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a98:	2201      	movs	r2, #1
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 0201 	and.w	r2, r3, #1
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d017      	beq.n	8003b00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d123      	bne.n	8003b54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	220f      	movs	r2, #15
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	08da      	lsrs	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0203 	and.w	r2, r3, #3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80be 	beq.w	8003d12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b96:	4b66      	ldr	r3, [pc, #408]	@ (8003d30 <HAL_GPIO_Init+0x324>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	4a65      	ldr	r2, [pc, #404]	@ (8003d30 <HAL_GPIO_Init+0x324>)
 8003b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ba2:	4b63      	ldr	r3, [pc, #396]	@ (8003d30 <HAL_GPIO_Init+0x324>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bae:	4a61      	ldr	r2, [pc, #388]	@ (8003d34 <HAL_GPIO_Init+0x328>)
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	089b      	lsrs	r3, r3, #2
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a58      	ldr	r2, [pc, #352]	@ (8003d38 <HAL_GPIO_Init+0x32c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d037      	beq.n	8003c4a <HAL_GPIO_Init+0x23e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a57      	ldr	r2, [pc, #348]	@ (8003d3c <HAL_GPIO_Init+0x330>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <HAL_GPIO_Init+0x23a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a56      	ldr	r2, [pc, #344]	@ (8003d40 <HAL_GPIO_Init+0x334>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <HAL_GPIO_Init+0x236>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a55      	ldr	r2, [pc, #340]	@ (8003d44 <HAL_GPIO_Init+0x338>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d025      	beq.n	8003c3e <HAL_GPIO_Init+0x232>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a54      	ldr	r2, [pc, #336]	@ (8003d48 <HAL_GPIO_Init+0x33c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <HAL_GPIO_Init+0x22e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a53      	ldr	r2, [pc, #332]	@ (8003d4c <HAL_GPIO_Init+0x340>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d019      	beq.n	8003c36 <HAL_GPIO_Init+0x22a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a52      	ldr	r2, [pc, #328]	@ (8003d50 <HAL_GPIO_Init+0x344>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x226>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a51      	ldr	r2, [pc, #324]	@ (8003d54 <HAL_GPIO_Init+0x348>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x222>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a50      	ldr	r2, [pc, #320]	@ (8003d58 <HAL_GPIO_Init+0x34c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x21e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003d5c <HAL_GPIO_Init+0x350>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x21a>
 8003c22:	2309      	movs	r3, #9
 8003c24:	e012      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c26:	230a      	movs	r3, #10
 8003c28:	e010      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e00e      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c2e:	2307      	movs	r3, #7
 8003c30:	e00c      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c32:	2306      	movs	r3, #6
 8003c34:	e00a      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c36:	2305      	movs	r3, #5
 8003c38:	e008      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	e006      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e004      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e002      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <HAL_GPIO_Init+0x240>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f002 0203 	and.w	r2, r2, #3
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	4093      	lsls	r3, r2
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c5c:	4935      	ldr	r1, [pc, #212]	@ (8003d34 <HAL_GPIO_Init+0x328>)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3302      	adds	r3, #2
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8e:	4a34      	ldr	r2, [pc, #208]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c94:	4b32      	ldr	r3, [pc, #200]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb8:	4a29      	ldr	r2, [pc, #164]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cbe:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d0c:	4a14      	ldr	r2, [pc, #80]	@ (8003d60 <HAL_GPIO_Init+0x354>)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3301      	adds	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	f67f ae86 	bls.w	8003a2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	3724      	adds	r7, #36	@ 0x24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40013800 	.word	0x40013800
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	40020400 	.word	0x40020400
 8003d40:	40020800 	.word	0x40020800
 8003d44:	40020c00 	.word	0x40020c00
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40021400 	.word	0x40021400
 8003d50:	40021800 	.word	0x40021800
 8003d54:	40021c00 	.word	0x40021c00
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40022400 	.word	0x40022400
 8003d60:	40013c00 	.word	0x40013c00

08003d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	807b      	strh	r3, [r7, #2]
 8003d70:	4613      	mov	r3, r2
 8003d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7a:	887a      	ldrh	r2, [r7, #2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d80:	e003      	b.n	8003d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d82:	887b      	ldrh	r3, [r7, #2]
 8003d84:	041a      	lsls	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	619a      	str	r2, [r3, #24]
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9c:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a04      	ldr	r2, [pc, #16]	@ (8003db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40007000 	.word	0x40007000

08003db8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	4b23      	ldr	r3, [pc, #140]	@ (8003e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	4a22      	ldr	r2, [pc, #136]	@ (8003e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dce:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003dda:	4b1e      	ldr	r3, [pc, #120]	@ (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1d      	ldr	r2, [pc, #116]	@ (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de6:	f7ff fc3d 	bl	8003664 <HAL_GetTick>
 8003dea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003dec:	e009      	b.n	8003e02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003dee:	f7ff fc39 	bl	8003664 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dfc:	d901      	bls.n	8003e02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e022      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e02:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0e:	d1ee      	bne.n	8003dee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e10:	4b10      	ldr	r3, [pc, #64]	@ (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0f      	ldr	r2, [pc, #60]	@ (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1c:	f7ff fc22 	bl	8003664 <HAL_GetTick>
 8003e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e22:	e009      	b.n	8003e38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e24:	f7ff fc1e 	bl	8003664 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e32:	d901      	bls.n	8003e38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e007      	b.n	8003e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e44:	d1ee      	bne.n	8003e24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000

08003e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e291      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8087 	beq.w	8003f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e7c:	4b96      	ldr	r3, [pc, #600]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d00c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e88:	4b93      	ldr	r3, [pc, #588]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 030c 	and.w	r3, r3, #12
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d112      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
 8003e94:	4b90      	ldr	r3, [pc, #576]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea2:	4b8d      	ldr	r3, [pc, #564]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d06c      	beq.n	8003f88 <HAL_RCC_OscConfig+0x130>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d168      	bne.n	8003f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e26b      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec2:	d106      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x7a>
 8003ec4:	4b84      	ldr	r3, [pc, #528]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a83      	ldr	r2, [pc, #524]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	e02e      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x9c>
 8003eda:	4b7f      	ldr	r3, [pc, #508]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7e      	ldr	r2, [pc, #504]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xc0>
 8003efe:	4b76      	ldr	r3, [pc, #472]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b73      	ldr	r3, [pc, #460]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xd8>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6c      	ldr	r3, [pc, #432]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6b      	ldr	r2, [pc, #428]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7ff fb94 	bl	8003664 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7ff fb90 	bl	8003664 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e21f      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xe8>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7ff fb80 	bl	8003664 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7ff fb7c 	bl	8003664 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e20b      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	4b57      	ldr	r3, [pc, #348]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x110>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d069      	beq.n	800406a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f96:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d11c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x190>
 8003fae:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d116      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e1df      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd2:	4b41      	ldr	r3, [pc, #260]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	493d      	ldr	r1, [pc, #244]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	e040      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d023      	beq.n	8004038 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff0:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a38      	ldr	r2, [pc, #224]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7ff fb32 	bl	8003664 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004004:	f7ff fb2e 	bl	8003664 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e1bd      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b30      	ldr	r3, [pc, #192]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004022:	4b2d      	ldr	r3, [pc, #180]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4929      	ldr	r1, [pc, #164]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
 8004036:	e018      	b.n	800406a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004038:	4b27      	ldr	r3, [pc, #156]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7ff fb0e 	bl	8003664 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800404c:	f7ff fb0a 	bl	8003664 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e199      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405e:	4b1e      	ldr	r3, [pc, #120]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d038      	beq.n	80040e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407e:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004082:	4a15      	ldr	r2, [pc, #84]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7ff faeb 	bl	8003664 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7ff fae7 	bl	8003664 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e176      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x23a>
 80040b0:	e01a      	b.n	80040e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b2:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	4a08      	ldr	r2, [pc, #32]	@ (80040d8 <HAL_RCC_OscConfig+0x280>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7ff fad1 	bl	8003664 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7ff facd 	bl	8003664 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d903      	bls.n	80040dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e15c      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
 80040d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040dc:	4b91      	ldr	r3, [pc, #580]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ee      	bne.n	80040c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a4 	beq.w	800423e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f6:	4b8b      	ldr	r3, [pc, #556]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10d      	bne.n	800411e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b88      	ldr	r3, [pc, #544]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	4a87      	ldr	r2, [pc, #540]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	@ 0x40
 800410e:	4b85      	ldr	r3, [pc, #532]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	60bb      	str	r3, [r7, #8]
 8004118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411e:	4b82      	ldr	r3, [pc, #520]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800412a:	4b7f      	ldr	r3, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a7e      	ldr	r2, [pc, #504]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7ff fa95 	bl	8003664 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7ff fa91 	bl	8003664 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	@ 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e120      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004150:	4b75      	ldr	r3, [pc, #468]	@ (8004328 <HAL_RCC_OscConfig+0x4d0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HAL_RCC_OscConfig+0x31a>
 8004164:	4b6f      	ldr	r3, [pc, #444]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004168:	4a6e      	ldr	r2, [pc, #440]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004170:	e02d      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10c      	bne.n	8004194 <HAL_RCC_OscConfig+0x33c>
 800417a:	4b6a      	ldr	r3, [pc, #424]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800417c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800417e:	4a69      	ldr	r2, [pc, #420]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6713      	str	r3, [r2, #112]	@ 0x70
 8004186:	4b67      	ldr	r3, [pc, #412]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	4a66      	ldr	r2, [pc, #408]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	6713      	str	r3, [r2, #112]	@ 0x70
 8004192:	e01c      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b05      	cmp	r3, #5
 800419a:	d10c      	bne.n	80041b6 <HAL_RCC_OscConfig+0x35e>
 800419c:	4b61      	ldr	r3, [pc, #388]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a60      	ldr	r2, [pc, #384]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b4:	e00b      	b.n	80041ce <HAL_RCC_OscConfig+0x376>
 80041b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041bc:	f023 0301 	bic.w	r3, r3, #1
 80041c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c2:	4b58      	ldr	r3, [pc, #352]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	4a57      	ldr	r2, [pc, #348]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041c8:	f023 0304 	bic.w	r3, r3, #4
 80041cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d015      	beq.n	8004202 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7ff fa45 	bl	8003664 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041de:	f7ff fa41 	bl	8003664 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e0ce      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0ee      	beq.n	80041de <HAL_RCC_OscConfig+0x386>
 8004200:	e014      	b.n	800422c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7ff fa2f 	bl	8003664 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004208:	e00a      	b.n	8004220 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800420a:	f7ff fa2b 	bl	8003664 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e0b8      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004220:	4b40      	ldr	r3, [pc, #256]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ee      	bne.n	800420a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800422c:	7dfb      	ldrb	r3, [r7, #23]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d105      	bne.n	800423e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004232:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	4a3b      	ldr	r2, [pc, #236]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 80a4 	beq.w	8004390 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004248:	4b36      	ldr	r3, [pc, #216]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d06b      	beq.n	800432c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d149      	bne.n	80042f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425c:	4b31      	ldr	r3, [pc, #196]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a30      	ldr	r2, [pc, #192]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7ff f9fc 	bl	8003664 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004270:	f7ff f9f8 	bl	8003664 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e087      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004282:	4b28      	ldr	r3, [pc, #160]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	019b      	lsls	r3, r3, #6
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	3b01      	subs	r3, #1
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	4313      	orrs	r3, r2
 80042b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042bc:	4b19      	ldr	r3, [pc, #100]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a18      	ldr	r2, [pc, #96]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7ff f9cc 	bl	8003664 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7ff f9c8 	bl	8003664 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e057      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x478>
 80042ee:	e04f      	b.n	8004390 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 80042f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7ff f9b2 	bl	8003664 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004304:	f7ff f9ae 	bl	8003664 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e03d      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004316:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <HAL_RCC_OscConfig+0x4cc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x4ac>
 8004322:	e035      	b.n	8004390 <HAL_RCC_OscConfig+0x538>
 8004324:	40023800 	.word	0x40023800
 8004328:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800432c:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <HAL_RCC_OscConfig+0x544>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d028      	beq.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004344:	429a      	cmp	r2, r3
 8004346:	d121      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d11a      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004362:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004364:	4293      	cmp	r3, r2
 8004366:	d111      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	3b01      	subs	r3, #1
 8004376:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004386:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0d0      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d910      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b67      	ldr	r3, [pc, #412]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 020f 	bic.w	r2, r3, #15
 80043ce:	4965      	ldr	r1, [pc, #404]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b63      	ldr	r3, [pc, #396]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 030f 	and.w	r3, r3, #15
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e0b8      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004400:	4b59      	ldr	r3, [pc, #356]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4a58      	ldr	r2, [pc, #352]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004406:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800440a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004418:	4b53      	ldr	r3, [pc, #332]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	4a52      	ldr	r2, [pc, #328]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800441e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004422:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b50      	ldr	r3, [pc, #320]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	494d      	ldr	r1, [pc, #308]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d040      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b47      	ldr	r3, [pc, #284]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d115      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e07f      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004462:	4b41      	ldr	r3, [pc, #260]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e073      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004472:	4b3d      	ldr	r3, [pc, #244]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e06b      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004482:	4b39      	ldr	r3, [pc, #228]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f023 0203 	bic.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4936      	ldr	r1, [pc, #216]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004490:	4313      	orrs	r3, r2
 8004492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004494:	f7ff f8e6 	bl	8003664 <HAL_GetTick>
 8004498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449c:	f7ff f8e2 	bl	8003664 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e053      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 020c 	and.w	r2, r3, #12
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d1eb      	bne.n	800449c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044c4:	4b27      	ldr	r3, [pc, #156]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d210      	bcs.n	80044f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b24      	ldr	r3, [pc, #144]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 020f 	bic.w	r2, r3, #15
 80044da:	4922      	ldr	r1, [pc, #136]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e2:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e032      	b.n	800455a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004500:	4b19      	ldr	r3, [pc, #100]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4916      	ldr	r1, [pc, #88]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800451e:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	490e      	ldr	r1, [pc, #56]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004532:	f000 f821 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8004536:	4602      	mov	r2, r0
 8004538:	4b0b      	ldr	r3, [pc, #44]	@ (8004568 <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	490a      	ldr	r1, [pc, #40]	@ (800456c <HAL_RCC_ClockConfig+0x1cc>)
 8004544:	5ccb      	ldrb	r3, [r1, r3]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	4a09      	ldr	r2, [pc, #36]	@ (8004570 <HAL_RCC_ClockConfig+0x1d0>)
 800454c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800454e:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <HAL_RCC_ClockConfig+0x1d4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff f842 	bl	80035dc <HAL_InitTick>

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023c00 	.word	0x40023c00
 8004568:	40023800 	.word	0x40023800
 800456c:	0800ce84 	.word	0x0800ce84
 8004570:	2000008c 	.word	0x2000008c
 8004574:	20000090 	.word	0x20000090

08004578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b094      	sub	sp, #80	@ 0x50
 800457e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004580:	2300      	movs	r3, #0
 8004582:	647b      	str	r3, [r7, #68]	@ 0x44
 8004584:	2300      	movs	r3, #0
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	2300      	movs	r3, #0
 800458a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004590:	4b79      	ldr	r3, [pc, #484]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 030c 	and.w	r3, r3, #12
 8004598:	2b08      	cmp	r3, #8
 800459a:	d00d      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x40>
 800459c:	2b08      	cmp	r3, #8
 800459e:	f200 80e1 	bhi.w	8004764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x34>
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d003      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045aa:	e0db      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b73      	ldr	r3, [pc, #460]	@ (800477c <HAL_RCC_GetSysClockFreq+0x204>)
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b0:	e0db      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045b2:	4b73      	ldr	r3, [pc, #460]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x208>)
 80045b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b6:	e0d8      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045c2:	4b6d      	ldr	r3, [pc, #436]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d063      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	2200      	movs	r2, #0
 80045d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045e2:	2300      	movs	r3, #0
 80045e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045ea:	4622      	mov	r2, r4
 80045ec:	462b      	mov	r3, r5
 80045ee:	f04f 0000 	mov.w	r0, #0
 80045f2:	f04f 0100 	mov.w	r1, #0
 80045f6:	0159      	lsls	r1, r3, #5
 80045f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045fc:	0150      	lsls	r0, r2, #5
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4621      	mov	r1, r4
 8004604:	1a51      	subs	r1, r2, r1
 8004606:	6139      	str	r1, [r7, #16]
 8004608:	4629      	mov	r1, r5
 800460a:	eb63 0301 	sbc.w	r3, r3, r1
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800461c:	4659      	mov	r1, fp
 800461e:	018b      	lsls	r3, r1, #6
 8004620:	4651      	mov	r1, sl
 8004622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004626:	4651      	mov	r1, sl
 8004628:	018a      	lsls	r2, r1, #6
 800462a:	4651      	mov	r1, sl
 800462c:	ebb2 0801 	subs.w	r8, r2, r1
 8004630:	4659      	mov	r1, fp
 8004632:	eb63 0901 	sbc.w	r9, r3, r1
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800464a:	4690      	mov	r8, r2
 800464c:	4699      	mov	r9, r3
 800464e:	4623      	mov	r3, r4
 8004650:	eb18 0303 	adds.w	r3, r8, r3
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	462b      	mov	r3, r5
 8004658:	eb49 0303 	adc.w	r3, r9, r3
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800466a:	4629      	mov	r1, r5
 800466c:	024b      	lsls	r3, r1, #9
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004674:	4621      	mov	r1, r4
 8004676:	024a      	lsls	r2, r1, #9
 8004678:	4610      	mov	r0, r2
 800467a:	4619      	mov	r1, r3
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	2200      	movs	r2, #0
 8004680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004688:	f7fc fb1e 	bl	8000cc8 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4613      	mov	r3, r2
 8004692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004694:	e058      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004696:	4b38      	ldr	r3, [pc, #224]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	099b      	lsrs	r3, r3, #6
 800469c:	2200      	movs	r2, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	4611      	mov	r1, r2
 80046a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	2300      	movs	r3, #0
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f04f 0100 	mov.w	r1, #0
 80046bc:	0159      	lsls	r1, r3, #5
 80046be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c2:	0150      	lsls	r0, r2, #5
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4641      	mov	r1, r8
 80046ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ce:	4649      	mov	r1, r9
 80046d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046e8:	ebb2 040a 	subs.w	r4, r2, sl
 80046ec:	eb63 050b 	sbc.w	r5, r3, fp
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	00eb      	lsls	r3, r5, #3
 80046fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fe:	00e2      	lsls	r2, r4, #3
 8004700:	4614      	mov	r4, r2
 8004702:	461d      	mov	r5, r3
 8004704:	4643      	mov	r3, r8
 8004706:	18e3      	adds	r3, r4, r3
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	464b      	mov	r3, r9
 800470c:	eb45 0303 	adc.w	r3, r5, r3
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800471e:	4629      	mov	r1, r5
 8004720:	028b      	lsls	r3, r1, #10
 8004722:	4621      	mov	r1, r4
 8004724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004728:	4621      	mov	r1, r4
 800472a:	028a      	lsls	r2, r1, #10
 800472c:	4610      	mov	r0, r2
 800472e:	4619      	mov	r1, r3
 8004730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004732:	2200      	movs	r2, #0
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	61fa      	str	r2, [r7, #28]
 8004738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800473c:	f7fc fac4 	bl	8000cc8 <__aeabi_uldivmod>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4613      	mov	r3, r2
 8004746:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x200>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	3301      	adds	r3, #1
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004758:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800475a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800475c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004760:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004762:	e002      	b.n	800476a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4b05      	ldr	r3, [pc, #20]	@ (800477c <HAL_RCC_GetSysClockFreq+0x204>)
 8004766:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800476a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800476c:	4618      	mov	r0, r3
 800476e:	3750      	adds	r7, #80	@ 0x50
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	00f42400 	.word	0x00f42400
 8004780:	007a1200 	.word	0x007a1200

08004784 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004788:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <HAL_RCC_GetHCLKFreq+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000008c 	.word	0x2000008c

0800479c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047a0:	f7ff fff0 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047a4:	4602      	mov	r2, r0
 80047a6:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	0a9b      	lsrs	r3, r3, #10
 80047ac:	f003 0307 	and.w	r3, r3, #7
 80047b0:	4903      	ldr	r1, [pc, #12]	@ (80047c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b2:	5ccb      	ldrb	r3, [r1, r3]
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40023800 	.word	0x40023800
 80047c0:	0800ce94 	.word	0x0800ce94

080047c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047c8:	f7ff ffdc 	bl	8004784 <HAL_RCC_GetHCLKFreq>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	0b5b      	lsrs	r3, r3, #13
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	4903      	ldr	r1, [pc, #12]	@ (80047e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047da:	5ccb      	ldrb	r3, [r1, r3]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40023800 	.word	0x40023800
 80047e8:	0800ce94 	.word	0x0800ce94

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b088      	sub	sp, #32
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004800:	2300      	movs	r3, #0
 8004802:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d012      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004814:	4b69      	ldr	r3, [pc, #420]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a68      	ldr	r2, [pc, #416]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800481e:	6093      	str	r3, [r2, #8]
 8004820:	4b66      	ldr	r3, [pc, #408]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004828:	4964      	ldr	r1, [pc, #400]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004836:	2301      	movs	r3, #1
 8004838:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d017      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004846:	4b5d      	ldr	r3, [pc, #372]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800484c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	4959      	ldr	r1, [pc, #356]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004864:	d101      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004866:	2301      	movs	r3, #1
 8004868:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004872:	2301      	movs	r3, #1
 8004874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d017      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004882:	4b4e      	ldr	r3, [pc, #312]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004888:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	494a      	ldr	r1, [pc, #296]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048a0:	d101      	bne.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048a2:	2301      	movs	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048ae:	2301      	movs	r3, #1
 80048b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048be:	2301      	movs	r3, #1
 80048c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 808b 	beq.w	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048d0:	4b3a      	ldr	r3, [pc, #232]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	4a39      	ldr	r2, [pc, #228]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048da:	6413      	str	r3, [r2, #64]	@ 0x40
 80048dc:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	60bb      	str	r3, [r7, #8]
 80048e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048e8:	4b35      	ldr	r3, [pc, #212]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a34      	ldr	r2, [pc, #208]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048f4:	f7fe feb6 	bl	8003664 <HAL_GetTick>
 80048f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fc:	f7fe feb2 	bl	8003664 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	@ 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e357      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800490e:	4b2c      	ldr	r3, [pc, #176]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800491a:	4b28      	ldr	r3, [pc, #160]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004922:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d035      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	d02e      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004938:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004940:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004942:	4b1e      	ldr	r3, [pc, #120]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004946:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800494c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800494e:	4b1b      	ldr	r3, [pc, #108]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004952:	4a1a      	ldr	r2, [pc, #104]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004958:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800495a:	4a18      	ldr	r2, [pc, #96]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004960:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d114      	bne.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fe fe7a 	bl	8003664 <HAL_GetTick>
 8004970:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004972:	e00a      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004974:	f7fe fe76 	bl	8003664 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e319      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498a:	4b0c      	ldr	r3, [pc, #48]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0ee      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049a2:	d111      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049a4:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049b0:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049b2:	400b      	ands	r3, r1
 80049b4:	4901      	ldr	r1, [pc, #4]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
 80049ba:	e00b      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40007000 	.word	0x40007000
 80049c4:	0ffffcff 	.word	0x0ffffcff
 80049c8:	4baa      	ldr	r3, [pc, #680]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4aa9      	ldr	r2, [pc, #676]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80049d2:	6093      	str	r3, [r2, #8]
 80049d4:	4ba7      	ldr	r3, [pc, #668]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	49a4      	ldr	r1, [pc, #656]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049f2:	4ba0      	ldr	r3, [pc, #640]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049f8:	4a9e      	ldr	r2, [pc, #632]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a02:	4b9c      	ldr	r3, [pc, #624]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a04:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	4999      	ldr	r1, [pc, #612]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a20:	4b94      	ldr	r3, [pc, #592]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a2e:	4991      	ldr	r1, [pc, #580]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a42:	4b8c      	ldr	r3, [pc, #560]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a50:	4988      	ldr	r1, [pc, #544]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a64:	4b83      	ldr	r3, [pc, #524]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a72:	4980      	ldr	r1, [pc, #512]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a86:	4b7b      	ldr	r3, [pc, #492]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	4977      	ldr	r1, [pc, #476]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004aa8:	4b72      	ldr	r3, [pc, #456]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aae:	f023 0203 	bic.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab6:	496f      	ldr	r1, [pc, #444]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aca:	4b6a      	ldr	r3, [pc, #424]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad0:	f023 020c 	bic.w	r2, r3, #12
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad8:	4966      	ldr	r1, [pc, #408]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aec:	4b61      	ldr	r3, [pc, #388]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	495e      	ldr	r1, [pc, #376]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b0e:	4b59      	ldr	r3, [pc, #356]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b14:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1c:	4955      	ldr	r1, [pc, #340]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b30:	4b50      	ldr	r3, [pc, #320]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	494d      	ldr	r1, [pc, #308]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b52:	4b48      	ldr	r3, [pc, #288]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	4944      	ldr	r1, [pc, #272]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b74:	4b3f      	ldr	r3, [pc, #252]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b82:	493c      	ldr	r1, [pc, #240]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004b96:	4b37      	ldr	r3, [pc, #220]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba4:	4933      	ldr	r1, [pc, #204]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bc6:	492b      	ldr	r1, [pc, #172]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d011      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bda:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004be8:	4922      	ldr	r1, [pc, #136]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c1a:	4b16      	ldr	r3, [pc, #88]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c20:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c28:	4912      	ldr	r1, [pc, #72]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c4c:	4909      	ldr	r1, [pc, #36]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d006      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80d9 	beq.w	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c68:	4b02      	ldr	r3, [pc, #8]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a01      	ldr	r2, [pc, #4]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c72:	e001      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004c74:	40023800 	.word	0x40023800
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7a:	f7fe fcf3 	bl	8003664 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c82:	f7fe fcef 	bl	8003664 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	@ 0x64
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e194      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c94:	4b6c      	ldr	r3, [pc, #432]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d021      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11d      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cb4:	4b64      	ldr	r3, [pc, #400]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cba:	0c1b      	lsrs	r3, r3, #16
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cc2:	4b61      	ldr	r3, [pc, #388]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	019a      	lsls	r2, r3, #6
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	041b      	lsls	r3, r3, #16
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	071b      	lsls	r3, r3, #28
 8004ce8:	4957      	ldr	r1, [pc, #348]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02e      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d1a:	d129      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d22:	0c1b      	lsrs	r3, r3, #16
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d2a:	4b47      	ldr	r3, [pc, #284]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d30:	0f1b      	lsrs	r3, r3, #28
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	019a      	lsls	r2, r3, #6
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	071b      	lsls	r3, r3, #28
 8004d50:	493d      	ldr	r1, [pc, #244]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d58:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d5e:	f023 021f 	bic.w	r2, r3, #31
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	3b01      	subs	r3, #1
 8004d68:	4937      	ldr	r1, [pc, #220]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01d      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d7c:	4b32      	ldr	r3, [pc, #200]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d82:	0e1b      	lsrs	r3, r3, #24
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d90:	0f1b      	lsrs	r3, r3, #28
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	019a      	lsls	r2, r3, #6
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	431a      	orrs	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	071b      	lsls	r3, r3, #28
 8004db0:	4925      	ldr	r1, [pc, #148]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d011      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	019a      	lsls	r2, r3, #6
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	071b      	lsls	r3, r3, #28
 8004de0:	4919      	ldr	r1, [pc, #100]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004de8:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df4:	f7fe fc36 	bl	8003664 <HAL_GetTick>
 8004df8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dfc:	f7fe fc32 	bl	8003664 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	@ 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e0d7      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	f040 80cd 	bne.w	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e22:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2e:	f7fe fc19 	bl	8003664 <HAL_GetTick>
 8004e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e34:	e00a      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e36:	f7fe fc15 	bl	8003664 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	@ 0x64
 8004e42:	d903      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e0ba      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e58:	d0ed      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02e      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d12a      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e82:	4b51      	ldr	r3, [pc, #324]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e90:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e96:	0f1b      	lsrs	r3, r3, #28
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	019a      	lsls	r2, r3, #6
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	061b      	lsls	r3, r3, #24
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	071b      	lsls	r3, r3, #28
 8004eb6:	4944      	ldr	r1, [pc, #272]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ebe:	4b42      	ldr	r3, [pc, #264]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ec4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	493d      	ldr	r1, [pc, #244]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d022      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eec:	d11d      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eee:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef4:	0e1b      	lsrs	r3, r3, #24
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004efc:	4b32      	ldr	r3, [pc, #200]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f02:	0f1b      	lsrs	r3, r3, #28
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	019a      	lsls	r2, r3, #6
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	431a      	orrs	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	071b      	lsls	r3, r3, #28
 8004f22:	4929      	ldr	r1, [pc, #164]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d028      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f36:	4b24      	ldr	r3, [pc, #144]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3c:	0e1b      	lsrs	r3, r3, #24
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f44:	4b20      	ldr	r3, [pc, #128]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	019a      	lsls	r2, r3, #6
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	061b      	lsls	r3, r3, #24
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	071b      	lsls	r3, r3, #28
 8004f6a:	4917      	ldr	r1, [pc, #92]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f72:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	4911      	ldr	r1, [pc, #68]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f88:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f94:	f7fe fb66 	bl	8003664 <HAL_GetTick>
 8004f98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f9c:	f7fe fb62 	bl	8003664 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	@ 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e007      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fae:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fba:	d1ef      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40023800 	.word	0x40023800

08004fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e09d      	b.n	800511a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d108      	bne.n	8004ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fee:	d009      	beq.n	8005004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	61da      	str	r2, [r3, #28]
 8004ff6:	e005      	b.n	8005004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd fefc 	bl	8002e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800503a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005044:	d902      	bls.n	800504c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005046:	2300      	movs	r3, #0
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e002      	b.n	8005052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800504c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800505a:	d007      	beq.n	800506c <HAL_SPI_Init+0xa0>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005064:	d002      	beq.n	800506c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ae:	ea42 0103 	orr.w	r1, r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 0204 	and.w	r2, r3, #4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80050e8:	ea42 0103 	orr.w	r1, r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_SPI_Transmit+0x22>
 8005140:	2302      	movs	r3, #2
 8005142:	e15f      	b.n	8005404 <HAL_SPI_Transmit+0x2e2>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800514c:	f7fe fa8a 	bl	8003664 <HAL_GetTick>
 8005150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d002      	beq.n	8005168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005162:	2302      	movs	r3, #2
 8005164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005166:	e148      	b.n	80053fa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_SPI_Transmit+0x52>
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005178:	e13f      	b.n	80053fa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2203      	movs	r2, #3
 800517e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051c4:	d10f      	bne.n	80051e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f0:	2b40      	cmp	r3, #64	@ 0x40
 80051f2:	d007      	beq.n	8005204 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800520c:	d94f      	bls.n	80052ae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_SPI_Transmit+0xfa>
 8005216:	8afb      	ldrh	r3, [r7, #22]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d142      	bne.n	80052a2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800522c:	1c9a      	adds	r2, r3, #2
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005240:	e02f      	b.n	80052a2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b02      	cmp	r3, #2
 800524e:	d112      	bne.n	8005276 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005254:	881a      	ldrh	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005274:	e015      	b.n	80052a2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005276:	f7fe f9f5 	bl	8003664 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d803      	bhi.n	800528e <HAL_SPI_Transmit+0x16c>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d102      	bne.n	8005294 <HAL_SPI_Transmit+0x172>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80052a0:	e0ab      	b.n	80053fa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1ca      	bne.n	8005242 <HAL_SPI_Transmit+0x120>
 80052ac:	e080      	b.n	80053b0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_SPI_Transmit+0x19a>
 80052b6:	8afb      	ldrh	r3, [r7, #22]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d174      	bne.n	80053a6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d912      	bls.n	80052ec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	1c9a      	adds	r2, r3, #2
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b02      	subs	r3, #2
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052ea:	e05c      	b.n	80053a6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	7812      	ldrb	r2, [r2, #0]
 80052f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005312:	e048      	b.n	80053a6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d12b      	bne.n	800537a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d912      	bls.n	8005352 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005330:	881a      	ldrh	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	1c9a      	adds	r2, r3, #2
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b02      	subs	r3, #2
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005350:	e029      	b.n	80053a6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	7812      	ldrb	r2, [r2, #0]
 800535e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005378:	e015      	b.n	80053a6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800537a:	f7fe f973 	bl	8003664 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d803      	bhi.n	8005392 <HAL_SPI_Transmit+0x270>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d102      	bne.n	8005398 <HAL_SPI_Transmit+0x276>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d106      	bne.n	80053a6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80053a4:	e029      	b.n	80053fa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1b1      	bne.n	8005314 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	6839      	ldr	r1, [r7, #0]
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 fd1d 	bl	8005df4 <SPI_EndRxTxTransaction>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ce:	2300      	movs	r3, #0
 80053d0:	613b      	str	r3, [r7, #16]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e003      	b.n	80053fa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005402:	7ffb      	ldrb	r3, [r7, #31]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d002      	beq.n	8005432 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800542c:	2302      	movs	r3, #2
 800542e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005430:	e11a      	b.n	8005668 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800543a:	d112      	bne.n	8005462 <HAL_SPI_Receive+0x56>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10e      	bne.n	8005462 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2204      	movs	r2, #4
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f90e 	bl	800567a <HAL_SPI_TransmitReceive>
 800545e:	4603      	mov	r3, r0
 8005460:	e107      	b.n	8005672 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_SPI_Receive+0x64>
 800546c:	2302      	movs	r3, #2
 800546e:	e100      	b.n	8005672 <HAL_SPI_Receive+0x266>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005478:	f7fe f8f4 	bl	8003664 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_SPI_Receive+0x7e>
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800548e:	e0eb      	b.n	8005668 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2204      	movs	r2, #4
 8005494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054da:	d908      	bls.n	80054ee <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	e007      	b.n	80054fe <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005506:	d10f      	bne.n	8005528 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005526:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b40      	cmp	r3, #64	@ 0x40
 8005534:	d007      	beq.n	8005546 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800554e:	d86f      	bhi.n	8005630 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005550:	e034      	b.n	80055bc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b01      	cmp	r3, #1
 800555e:	d117      	bne.n	8005590 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f103 020c 	add.w	r2, r3, #12
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800558e:	e015      	b.n	80055bc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005590:	f7fe f868 	bl	8003664 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d803      	bhi.n	80055a8 <HAL_SPI_Receive+0x19c>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a6:	d102      	bne.n	80055ae <HAL_SPI_Receive+0x1a2>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80055ba:	e055      	b.n	8005668 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1c4      	bne.n	8005552 <HAL_SPI_Receive+0x146>
 80055c8:	e038      	b.n	800563c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d115      	bne.n	8005604 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	b292      	uxth	r2, r2
 80055e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005602:	e015      	b.n	8005630 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005604:	f7fe f82e 	bl	8003664 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d803      	bhi.n	800561c <HAL_SPI_Receive+0x210>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d102      	bne.n	8005622 <HAL_SPI_Receive+0x216>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800562e:	e01b      	b.n	8005668 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005636:	b29b      	uxth	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1c6      	bne.n	80055ca <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	6839      	ldr	r1, [r7, #0]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 fb5b 	bl	8005cfc <SPI_EndRxTransaction>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	75fb      	strb	r3, [r7, #23]
 800565e:	e003      	b.n	8005668 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b08a      	sub	sp, #40	@ 0x28
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005688:	2301      	movs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x26>
 800569c:	2302      	movs	r3, #2
 800569e:	e20a      	b.n	8005ab6 <HAL_SPI_TransmitReceive+0x43c>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056a8:	f7fd ffdc 	bl	8003664 <HAL_GetTick>
 80056ac:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056b4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80056bc:	887b      	ldrh	r3, [r7, #2]
 80056be:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056c4:	7efb      	ldrb	r3, [r7, #27]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d00e      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x6e>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056d0:	d106      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <HAL_SPI_TransmitReceive+0x66>
 80056da:	7efb      	ldrb	r3, [r7, #27]
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d003      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80056e0:	2302      	movs	r3, #2
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80056e6:	e1e0      	b.n	8005aaa <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_SPI_TransmitReceive+0x80>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_TransmitReceive+0x80>
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d103      	bne.n	8005702 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005700:	e1d3      	b.n	8005aaa <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b04      	cmp	r3, #4
 800570c:	d003      	beq.n	8005716 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2205      	movs	r2, #5
 8005712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	887a      	ldrh	r2, [r7, #2]
 8005726:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	887a      	ldrh	r2, [r7, #2]
 800572e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	887a      	ldrh	r2, [r7, #2]
 800573c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	887a      	ldrh	r2, [r7, #2]
 8005742:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005758:	d802      	bhi.n	8005760 <HAL_SPI_TransmitReceive+0xe6>
 800575a:	8a3b      	ldrh	r3, [r7, #16]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d908      	bls.n	8005772 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800576e:	605a      	str	r2, [r3, #4]
 8005770:	e007      	b.n	8005782 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005780:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b40      	cmp	r3, #64	@ 0x40
 800578e:	d007      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800579e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057a8:	f240 8081 	bls.w	80058ae <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x140>
 80057b4:	8a7b      	ldrh	r3, [r7, #18]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d16d      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057de:	e05a      	b.n	8005896 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d11b      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x1ac>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x1ac>
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d113      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005802:	881a      	ldrh	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d11c      	bne.n	800586e <HAL_SPI_TransmitReceive+0x1f4>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d016      	beq.n	800586e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	b292      	uxth	r2, r2
 800584c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005852:	1c9a      	adds	r2, r3, #2
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800586a:	2301      	movs	r3, #1
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800586e:	f7fd fef9 	bl	8003664 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800587a:	429a      	cmp	r2, r3
 800587c:	d80b      	bhi.n	8005896 <HAL_SPI_TransmitReceive+0x21c>
 800587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d007      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005894:	e109      	b.n	8005aaa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d19f      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x166>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d199      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x166>
 80058ac:	e0e3      	b.n	8005a76 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_SPI_TransmitReceive+0x244>
 80058b6:	8a7b      	ldrh	r3, [r7, #18]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	f040 80cf 	bne.w	8005a5c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d912      	bls.n	80058ee <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058cc:	881a      	ldrh	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d8:	1c9a      	adds	r2, r3, #2
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b02      	subs	r3, #2
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058ec:	e0b6      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	7812      	ldrb	r2, [r2, #0]
 80058fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005914:	e0a2      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d134      	bne.n	800598e <HAL_SPI_TransmitReceive+0x314>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d02f      	beq.n	800598e <HAL_SPI_TransmitReceive+0x314>
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	2b01      	cmp	r3, #1
 8005932:	d12c      	bne.n	800598e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d912      	bls.n	8005964 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005942:	881a      	ldrh	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b02      	subs	r3, #2
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005962:	e012      	b.n	800598a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	d148      	bne.n	8005a2e <HAL_SPI_TransmitReceive+0x3b4>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d042      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d923      	bls.n	80059fc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	b292      	uxth	r2, r2
 80059c0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b02      	subs	r3, #2
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d81f      	bhi.n	8005a2a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	e016      	b.n	8005a2a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f103 020c 	add.w	r2, r3, #12
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a08:	7812      	ldrb	r2, [r2, #0]
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a2e:	f7fd fe19 	bl	8003664 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d803      	bhi.n	8005a46 <HAL_SPI_TransmitReceive+0x3cc>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d102      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x3d2>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d107      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005a5a:	e026      	b.n	8005aaa <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f47f af57 	bne.w	8005916 <HAL_SPI_TransmitReceive+0x29c>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f47f af50 	bne.w	8005916 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 f9ba 	bl	8005df4 <SPI_EndRxTxTransaction>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aa0:	e003      	b.n	8005aaa <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005ab2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3728      	adds	r7, #40	@ 0x28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ad0:	f7fd fdc8 	bl	8003664 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ae0:	f7fd fdc0 	bl	8003664 <HAL_GetTick>
 8005ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ae6:	4b39      	ldr	r3, [pc, #228]	@ (8005bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	015b      	lsls	r3, r3, #5
 8005aec:	0d1b      	lsrs	r3, r3, #20
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af6:	e054      	b.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d050      	beq.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b00:	f7fd fdb0 	bl	8003664 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d902      	bls.n	8005b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d13d      	bne.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b2e:	d111      	bne.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b38:	d004      	beq.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b42:	d107      	bne.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5c:	d10f      	bne.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e017      	b.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d19b      	bne.n	8005af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000008c 	.word	0x2000008c

08005bd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	@ 0x28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005be2:	f7fd fd3f 	bl	8003664 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	4413      	add	r3, r2
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005bf2:	f7fd fd37 	bl	8003664 <HAL_GetTick>
 8005bf6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c00:	4b3d      	ldr	r3, [pc, #244]	@ (8005cf8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	00da      	lsls	r2, r3, #3
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	0d1b      	lsrs	r3, r3, #20
 8005c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c18:	e060      	b.n	8005cdc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c20:	d107      	bne.n	8005c32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d050      	beq.n	8005cdc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c3a:	f7fd fd13 	bl	8003664 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d902      	bls.n	8005c50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d13d      	bne.n	8005ccc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c68:	d111      	bne.n	8005c8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c72:	d004      	beq.n	8005c7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c7c:	d107      	bne.n	8005c8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c96:	d10f      	bne.n	8005cb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e010      	b.n	8005cee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d196      	bne.n	8005c1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3728      	adds	r7, #40	@ 0x28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	2000008c 	.word	0x2000008c

08005cfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d10:	d111      	bne.n	8005d36 <SPI_EndRxTransaction+0x3a>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d1a:	d004      	beq.n	8005d26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d24:	d107      	bne.n	8005d36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d3e:	d112      	bne.n	8005d66 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2180      	movs	r1, #128	@ 0x80
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff feb8 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d021      	beq.n	8005d9a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d5a:	f043 0220 	orr.w	r2, r3, #32
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e03d      	b.n	8005de2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d66:	4b21      	ldr	r3, [pc, #132]	@ (8005dec <SPI_EndRxTransaction+0xf0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a21      	ldr	r2, [pc, #132]	@ (8005df0 <SPI_EndRxTransaction+0xf4>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	0d5b      	lsrs	r3, r3, #21
 8005d72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b80      	cmp	r3, #128	@ 0x80
 8005d94:	d0f2      	beq.n	8005d7c <SPI_EndRxTransaction+0x80>
 8005d96:	e000      	b.n	8005d9a <SPI_EndRxTransaction+0x9e>
        break;
 8005d98:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005da2:	d11d      	bne.n	8005de0 <SPI_EndRxTransaction+0xe4>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dac:	d004      	beq.n	8005db8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005db6:	d113      	bne.n	8005de0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff ff03 	bl	8005bd0 <SPI_WaitFifoStateUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e000      	b.n	8005de2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	2000008c 	.word	0x2000008c
 8005df0:	165e9f81 	.word	0x165e9f81

08005df4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fedf 	bl	8005bd0 <SPI_WaitFifoStateUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e046      	b.n	8005eb6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e28:	4b25      	ldr	r3, [pc, #148]	@ (8005ec0 <SPI_EndRxTxTransaction+0xcc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a25      	ldr	r2, [pc, #148]	@ (8005ec4 <SPI_EndRxTxTransaction+0xd0>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	0d5b      	lsrs	r3, r3, #21
 8005e34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e38:	fb02 f303 	mul.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e46:	d112      	bne.n	8005e6e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2180      	movs	r1, #128	@ 0x80
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fe34 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e62:	f043 0220 	orr.w	r2, r3, #32
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e023      	b.n	8005eb6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e84:	2b80      	cmp	r3, #128	@ 0x80
 8005e86:	d0f2      	beq.n	8005e6e <SPI_EndRxTxTransaction+0x7a>
 8005e88:	e000      	b.n	8005e8c <SPI_EndRxTxTransaction+0x98>
        break;
 8005e8a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f7ff fe99 	bl	8005bd0 <SPI_WaitFifoStateUntilTimeout>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea8:	f043 0220 	orr.w	r2, r3, #32
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e000      	b.n	8005eb6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000008c 	.word	0x2000008c
 8005ec4:	165e9f81 	.word	0x165e9f81

08005ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e049      	b.n	8005f6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fd f9fa 	bl	80032e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f000 fbd6 	bl	80066b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d001      	beq.n	8005f90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e04c      	b.n	800602a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a26      	ldr	r2, [pc, #152]	@ (8006038 <HAL_TIM_Base_Start+0xc0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d022      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x70>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005faa:	d01d      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x70>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a22      	ldr	r2, [pc, #136]	@ (800603c <HAL_TIM_Base_Start+0xc4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x70>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a21      	ldr	r2, [pc, #132]	@ (8006040 <HAL_TIM_Base_Start+0xc8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x70>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8006044 <HAL_TIM_Base_Start+0xcc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x70>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1e      	ldr	r2, [pc, #120]	@ (8006048 <HAL_TIM_Base_Start+0xd0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x70>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <HAL_TIM_Base_Start+0xd4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x70>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8006050 <HAL_TIM_Base_Start+0xd8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d115      	bne.n	8006014 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	4b19      	ldr	r3, [pc, #100]	@ (8006054 <HAL_TIM_Base_Start+0xdc>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d015      	beq.n	8006026 <HAL_TIM_Base_Start+0xae>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006000:	d011      	beq.n	8006026 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006012:	e008      	b.n	8006026 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e000      	b.n	8006028 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006026:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40010400 	.word	0x40010400
 800604c:	40014000 	.word	0x40014000
 8006050:	40001800 	.word	0x40001800
 8006054:	00010007 	.word	0x00010007

08006058 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e049      	b.n	80060fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fd f964 	bl	800334c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	f000 fb0e 	bl	80066b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_TIM_PWM_Start+0x24>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	e03c      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b04      	cmp	r3, #4
 8006130:	d109      	bne.n	8006146 <HAL_TIM_PWM_Start+0x3e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e02f      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start+0x58>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e022      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b0c      	cmp	r3, #12
 8006164:	d109      	bne.n	800617a <HAL_TIM_PWM_Start+0x72>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	bf14      	ite	ne
 8006172:	2301      	movne	r3, #1
 8006174:	2300      	moveq	r3, #0
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e015      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b10      	cmp	r3, #16
 800617e:	d109      	bne.n	8006194 <HAL_TIM_PWM_Start+0x8c>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	e008      	b.n	80061a6 <HAL_TIM_PWM_Start+0x9e>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	bf14      	ite	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	2300      	moveq	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e092      	b.n	80062d4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <HAL_TIM_PWM_Start+0xb6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061bc:	e023      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_PWM_Start+0xc6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061cc:	e01b      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Start+0xd6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061dc:	e013      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0xe6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0xf6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061fc:	e003      	b.n	8006206 <HAL_TIM_PWM_Start+0xfe>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2201      	movs	r2, #1
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fdf6 	bl	8006e00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a30      	ldr	r2, [pc, #192]	@ (80062dc <HAL_TIM_PWM_Start+0x1d4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_PWM_Start+0x120>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2f      	ldr	r2, [pc, #188]	@ (80062e0 <HAL_TIM_PWM_Start+0x1d8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d101      	bne.n	800622c <HAL_TIM_PWM_Start+0x124>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <HAL_TIM_PWM_Start+0x126>
 800622c:	2300      	movs	r3, #0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d007      	beq.n	8006242 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006240:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a25      	ldr	r2, [pc, #148]	@ (80062dc <HAL_TIM_PWM_Start+0x1d4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d022      	beq.n	8006292 <HAL_TIM_PWM_Start+0x18a>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006254:	d01d      	beq.n	8006292 <HAL_TIM_PWM_Start+0x18a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a22      	ldr	r2, [pc, #136]	@ (80062e4 <HAL_TIM_PWM_Start+0x1dc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d018      	beq.n	8006292 <HAL_TIM_PWM_Start+0x18a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a20      	ldr	r2, [pc, #128]	@ (80062e8 <HAL_TIM_PWM_Start+0x1e0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <HAL_TIM_PWM_Start+0x18a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <HAL_TIM_PWM_Start+0x1e4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00e      	beq.n	8006292 <HAL_TIM_PWM_Start+0x18a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	@ (80062e0 <HAL_TIM_PWM_Start+0x1d8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d009      	beq.n	8006292 <HAL_TIM_PWM_Start+0x18a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <HAL_TIM_PWM_Start+0x1e8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d004      	beq.n	8006292 <HAL_TIM_PWM_Start+0x18a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a19      	ldr	r2, [pc, #100]	@ (80062f4 <HAL_TIM_PWM_Start+0x1ec>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d115      	bne.n	80062be <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	4b17      	ldr	r3, [pc, #92]	@ (80062f8 <HAL_TIM_PWM_Start+0x1f0>)
 800629a:	4013      	ands	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b06      	cmp	r3, #6
 80062a2:	d015      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x1c8>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062aa:	d011      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062bc:	e008      	b.n	80062d0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e000      	b.n	80062d2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40010000 	.word	0x40010000
 80062e0:	40010400 	.word	0x40010400
 80062e4:	40000400 	.word	0x40000400
 80062e8:	40000800 	.word	0x40000800
 80062ec:	40000c00 	.word	0x40000c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40001800 	.word	0x40001800
 80062f8:	00010007 	.word	0x00010007

080062fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006312:	2b01      	cmp	r3, #1
 8006314:	d101      	bne.n	800631a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006316:	2302      	movs	r3, #2
 8006318:	e0ff      	b.n	800651a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b14      	cmp	r3, #20
 8006326:	f200 80f0 	bhi.w	800650a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800632a:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006385 	.word	0x08006385
 8006334:	0800650b 	.word	0x0800650b
 8006338:	0800650b 	.word	0x0800650b
 800633c:	0800650b 	.word	0x0800650b
 8006340:	080063c5 	.word	0x080063c5
 8006344:	0800650b 	.word	0x0800650b
 8006348:	0800650b 	.word	0x0800650b
 800634c:	0800650b 	.word	0x0800650b
 8006350:	08006407 	.word	0x08006407
 8006354:	0800650b 	.word	0x0800650b
 8006358:	0800650b 	.word	0x0800650b
 800635c:	0800650b 	.word	0x0800650b
 8006360:	08006447 	.word	0x08006447
 8006364:	0800650b 	.word	0x0800650b
 8006368:	0800650b 	.word	0x0800650b
 800636c:	0800650b 	.word	0x0800650b
 8006370:	08006489 	.word	0x08006489
 8006374:	0800650b 	.word	0x0800650b
 8006378:	0800650b 	.word	0x0800650b
 800637c:	0800650b 	.word	0x0800650b
 8006380:	080064c9 	.word	0x080064c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fa40 	bl	8006810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0208 	orr.w	r2, r2, #8
 800639e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0204 	bic.w	r2, r2, #4
 80063ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6999      	ldr	r1, [r3, #24]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	619a      	str	r2, [r3, #24]
      break;
 80063c2:	e0a5      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fa92 	bl	80068f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6999      	ldr	r1, [r3, #24]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	021a      	lsls	r2, r3, #8
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	619a      	str	r2, [r3, #24]
      break;
 8006404:	e084      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fae9 	bl	80069e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0208 	orr.w	r2, r2, #8
 8006420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0204 	bic.w	r2, r2, #4
 8006430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69d9      	ldr	r1, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	61da      	str	r2, [r3, #28]
      break;
 8006444:	e064      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68b9      	ldr	r1, [r7, #8]
 800644c:	4618      	mov	r0, r3
 800644e:	f000 fb3f 	bl	8006ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69d9      	ldr	r1, [r3, #28]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	021a      	lsls	r2, r3, #8
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	61da      	str	r2, [r3, #28]
      break;
 8006486:	e043      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fb76 	bl	8006b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0208 	orr.w	r2, r2, #8
 80064a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0204 	bic.w	r2, r2, #4
 80064b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	691a      	ldr	r2, [r3, #16]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80064c6:	e023      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fba8 	bl	8006c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	021a      	lsls	r2, r3, #8
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006508:	e002      	b.n	8006510 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
      break;
 800650e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006518:	7dfb      	ldrb	r3, [r7, #23]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop

08006524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_TIM_ConfigClockSource+0x1c>
 800653c:	2302      	movs	r3, #2
 800653e:	e0b4      	b.n	80066aa <HAL_TIM_ConfigClockSource+0x186>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	4b56      	ldr	r3, [pc, #344]	@ (80066b4 <HAL_TIM_ConfigClockSource+0x190>)
 800655c:	4013      	ands	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006578:	d03e      	beq.n	80065f8 <HAL_TIM_ConfigClockSource+0xd4>
 800657a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800657e:	f200 8087 	bhi.w	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 8006582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006586:	f000 8086 	beq.w	8006696 <HAL_TIM_ConfigClockSource+0x172>
 800658a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800658e:	d87f      	bhi.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b70      	cmp	r3, #112	@ 0x70
 8006592:	d01a      	beq.n	80065ca <HAL_TIM_ConfigClockSource+0xa6>
 8006594:	2b70      	cmp	r3, #112	@ 0x70
 8006596:	d87b      	bhi.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 8006598:	2b60      	cmp	r3, #96	@ 0x60
 800659a:	d050      	beq.n	800663e <HAL_TIM_ConfigClockSource+0x11a>
 800659c:	2b60      	cmp	r3, #96	@ 0x60
 800659e:	d877      	bhi.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	2b50      	cmp	r3, #80	@ 0x50
 80065a2:	d03c      	beq.n	800661e <HAL_TIM_ConfigClockSource+0xfa>
 80065a4:	2b50      	cmp	r3, #80	@ 0x50
 80065a6:	d873      	bhi.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b40      	cmp	r3, #64	@ 0x40
 80065aa:	d058      	beq.n	800665e <HAL_TIM_ConfigClockSource+0x13a>
 80065ac:	2b40      	cmp	r3, #64	@ 0x40
 80065ae:	d86f      	bhi.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b30      	cmp	r3, #48	@ 0x30
 80065b2:	d064      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x15a>
 80065b4:	2b30      	cmp	r3, #48	@ 0x30
 80065b6:	d86b      	bhi.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d060      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x15a>
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d867      	bhi.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d05c      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x15a>
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d05a      	beq.n	800667e <HAL_TIM_ConfigClockSource+0x15a>
 80065c8:	e062      	b.n	8006690 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065da:	f000 fbf1 	bl	8006dc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	609a      	str	r2, [r3, #8]
      break;
 80065f6:	e04f      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006608:	f000 fbda 	bl	8006dc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800661a:	609a      	str	r2, [r3, #8]
      break;
 800661c:	e03c      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800662a:	461a      	mov	r2, r3
 800662c:	f000 fb4e 	bl	8006ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2150      	movs	r1, #80	@ 0x50
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fba7 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 800663c:	e02c      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800664a:	461a      	mov	r2, r3
 800664c:	f000 fb6d 	bl	8006d2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2160      	movs	r1, #96	@ 0x60
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fb97 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 800665c:	e01c      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800666a:	461a      	mov	r2, r3
 800666c:	f000 fb2e 	bl	8006ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2140      	movs	r1, #64	@ 0x40
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fb87 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 800667c:	e00c      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f000 fb7e 	bl	8006d8a <TIM_ITRx_SetConfig>
      break;
 800668e:	e003      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
      break;
 8006694:	e000      	b.n	8006698 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	fffeff88 	.word	0xfffeff88

080066b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a46      	ldr	r2, [pc, #280]	@ (80067e4 <TIM_Base_SetConfig+0x12c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d6:	d00f      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a43      	ldr	r2, [pc, #268]	@ (80067e8 <TIM_Base_SetConfig+0x130>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00b      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a42      	ldr	r2, [pc, #264]	@ (80067ec <TIM_Base_SetConfig+0x134>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d007      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a41      	ldr	r2, [pc, #260]	@ (80067f0 <TIM_Base_SetConfig+0x138>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a40      	ldr	r2, [pc, #256]	@ (80067f4 <TIM_Base_SetConfig+0x13c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d108      	bne.n	800670a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a35      	ldr	r2, [pc, #212]	@ (80067e4 <TIM_Base_SetConfig+0x12c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d02b      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006718:	d027      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a32      	ldr	r2, [pc, #200]	@ (80067e8 <TIM_Base_SetConfig+0x130>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d023      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a31      	ldr	r2, [pc, #196]	@ (80067ec <TIM_Base_SetConfig+0x134>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01f      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a30      	ldr	r2, [pc, #192]	@ (80067f0 <TIM_Base_SetConfig+0x138>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01b      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2f      	ldr	r2, [pc, #188]	@ (80067f4 <TIM_Base_SetConfig+0x13c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d017      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2e      	ldr	r2, [pc, #184]	@ (80067f8 <TIM_Base_SetConfig+0x140>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2d      	ldr	r2, [pc, #180]	@ (80067fc <TIM_Base_SetConfig+0x144>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00f      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a2c      	ldr	r2, [pc, #176]	@ (8006800 <TIM_Base_SetConfig+0x148>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00b      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2b      	ldr	r2, [pc, #172]	@ (8006804 <TIM_Base_SetConfig+0x14c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d007      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2a      	ldr	r2, [pc, #168]	@ (8006808 <TIM_Base_SetConfig+0x150>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a29      	ldr	r2, [pc, #164]	@ (800680c <TIM_Base_SetConfig+0x154>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d108      	bne.n	800677c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a10      	ldr	r2, [pc, #64]	@ (80067e4 <TIM_Base_SetConfig+0x12c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_Base_SetConfig+0xf8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a12      	ldr	r2, [pc, #72]	@ (80067f4 <TIM_Base_SetConfig+0x13c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d103      	bne.n	80067b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d105      	bne.n	80067d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f023 0201 	bic.w	r2, r3, #1
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	611a      	str	r2, [r3, #16]
  }
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	40001800 	.word	0x40001800
 8006808:	40001c00 	.word	0x40001c00
 800680c:	40002000 	.word	0x40002000

08006810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f023 0201 	bic.w	r2, r3, #1
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4b2b      	ldr	r3, [pc, #172]	@ (80068e8 <TIM_OC1_SetConfig+0xd8>)
 800683c:	4013      	ands	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f023 0302 	bic.w	r3, r3, #2
 8006858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a21      	ldr	r2, [pc, #132]	@ (80068ec <TIM_OC1_SetConfig+0xdc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC1_SetConfig+0x64>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a20      	ldr	r2, [pc, #128]	@ (80068f0 <TIM_OC1_SetConfig+0xe0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d10c      	bne.n	800688e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	f023 0308 	bic.w	r3, r3, #8
 800687a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a16      	ldr	r2, [pc, #88]	@ (80068ec <TIM_OC1_SetConfig+0xdc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC1_SetConfig+0x8e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a15      	ldr	r2, [pc, #84]	@ (80068f0 <TIM_OC1_SetConfig+0xe0>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d111      	bne.n	80068c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	fffeff8f 	.word	0xfffeff8f
 80068ec:	40010000 	.word	0x40010000
 80068f0:	40010400 	.word	0x40010400

080068f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f023 0210 	bic.w	r2, r3, #16
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4b2e      	ldr	r3, [pc, #184]	@ (80069d8 <TIM_OC2_SetConfig+0xe4>)
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800692a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f023 0320 	bic.w	r3, r3, #32
 800693e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	011b      	lsls	r3, r3, #4
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a23      	ldr	r2, [pc, #140]	@ (80069dc <TIM_OC2_SetConfig+0xe8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC2_SetConfig+0x68>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a22      	ldr	r2, [pc, #136]	@ (80069e0 <TIM_OC2_SetConfig+0xec>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d10d      	bne.n	8006978 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006976:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <TIM_OC2_SetConfig+0xe8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_OC2_SetConfig+0x94>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a17      	ldr	r2, [pc, #92]	@ (80069e0 <TIM_OC2_SetConfig+0xec>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d113      	bne.n	80069b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800698e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	feff8fff 	.word	0xfeff8fff
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40010400 	.word	0x40010400

080069e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ac4 <TIM_OC3_SetConfig+0xe0>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a22      	ldr	r2, [pc, #136]	@ (8006ac8 <TIM_OC3_SetConfig+0xe4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_OC3_SetConfig+0x66>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a21      	ldr	r2, [pc, #132]	@ (8006acc <TIM_OC3_SetConfig+0xe8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d10d      	bne.n	8006a66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a17      	ldr	r2, [pc, #92]	@ (8006ac8 <TIM_OC3_SetConfig+0xe4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_OC3_SetConfig+0x92>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a16      	ldr	r2, [pc, #88]	@ (8006acc <TIM_OC3_SetConfig+0xe8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d113      	bne.n	8006a9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	fffeff8f 	.word	0xfffeff8f
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40010400 	.word	0x40010400

08006ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	4b1e      	ldr	r3, [pc, #120]	@ (8006b74 <TIM_OC4_SetConfig+0xa4>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	031b      	lsls	r3, r3, #12
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a13      	ldr	r2, [pc, #76]	@ (8006b78 <TIM_OC4_SetConfig+0xa8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_OC4_SetConfig+0x68>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a12      	ldr	r2, [pc, #72]	@ (8006b7c <TIM_OC4_SetConfig+0xac>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d109      	bne.n	8006b4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	019b      	lsls	r3, r3, #6
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	621a      	str	r2, [r3, #32]
}
 8006b66:	bf00      	nop
 8006b68:	371c      	adds	r7, #28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	feff8fff 	.word	0xfeff8fff
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40010400 	.word	0x40010400

08006b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4b1b      	ldr	r3, [pc, #108]	@ (8006c18 <TIM_OC5_SetConfig+0x98>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a12      	ldr	r2, [pc, #72]	@ (8006c1c <TIM_OC5_SetConfig+0x9c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d003      	beq.n	8006bde <TIM_OC5_SetConfig+0x5e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a11      	ldr	r2, [pc, #68]	@ (8006c20 <TIM_OC5_SetConfig+0xa0>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d109      	bne.n	8006bf2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	fffeff8f 	.word	0xfffeff8f
 8006c1c:	40010000 	.word	0x40010000
 8006c20:	40010400 	.word	0x40010400

08006c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc0 <TIM_OC6_SetConfig+0x9c>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	051b      	lsls	r3, r3, #20
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a13      	ldr	r2, [pc, #76]	@ (8006cc4 <TIM_OC6_SetConfig+0xa0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC6_SetConfig+0x60>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a12      	ldr	r2, [pc, #72]	@ (8006cc8 <TIM_OC6_SetConfig+0xa4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d109      	bne.n	8006c98 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	029b      	lsls	r3, r3, #10
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	feff8fff 	.word	0xfeff8fff
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40010400 	.word	0x40010400

08006ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0201 	bic.w	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 030a 	bic.w	r3, r3, #10
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b087      	sub	sp, #28
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	f023 0210 	bic.w	r2, r3, #16
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	031b      	lsls	r3, r3, #12
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	621a      	str	r2, [r3, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	371c      	adds	r7, #28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f043 0307 	orr.w	r3, r3, #7
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	021a      	lsls	r2, r3, #8
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	609a      	str	r2, [r3, #8]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	2201      	movs	r2, #1
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6a1a      	ldr	r2, [r3, #32]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	43db      	mvns	r3, r3
 8006e22:	401a      	ands	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a1a      	ldr	r2, [r3, #32]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 031f 	and.w	r3, r3, #31
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	fa01 f303 	lsl.w	r3, r1, r3
 8006e38:	431a      	orrs	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	621a      	str	r2, [r3, #32]
}
 8006e3e:	bf00      	nop
 8006e40:	371c      	adds	r7, #28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e06d      	b.n	8006f40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a30      	ldr	r2, [pc, #192]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d004      	beq.n	8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a2f      	ldr	r2, [pc, #188]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a20      	ldr	r2, [pc, #128]	@ (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d022      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ed6:	d01d      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1d      	ldr	r2, [pc, #116]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d018      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d013      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00e      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a15      	ldr	r2, [pc, #84]	@ (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d009      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a16      	ldr	r2, [pc, #88]	@ (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d004      	beq.n	8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	@ (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d10c      	bne.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40010400 	.word	0x40010400
 8006f54:	40000400 	.word	0x40000400
 8006f58:	40000800 	.word	0x40000800
 8006f5c:	40000c00 	.word	0x40000c00
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40001800 	.word	0x40001800

08006f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e040      	b.n	8006ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fc fa58 	bl	8003440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2224      	movs	r2, #36	@ 0x24
 8006f94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0201 	bic.w	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fe4c 	bl	8007c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fbe5 	bl	8007784 <UART_SetConfig>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e01b      	b.n	8006ffc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fecb 	bl	8007d90 <UART_CheckIdleState>
 8006ffa:	4603      	mov	r3, r0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	@ 0x28
 8007008:	af02      	add	r7, sp, #8
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007018:	2b20      	cmp	r3, #32
 800701a:	d177      	bne.n	800710c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <HAL_UART_Transmit+0x24>
 8007022:	88fb      	ldrh	r3, [r7, #6]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e070      	b.n	800710e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2221      	movs	r2, #33	@ 0x21
 8007038:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800703a:	f7fc fb13 	bl	8003664 <HAL_GetTick>
 800703e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007058:	d108      	bne.n	800706c <HAL_UART_Transmit+0x68>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d104      	bne.n	800706c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	e003      	b.n	8007074 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007074:	e02f      	b.n	80070d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2200      	movs	r2, #0
 800707e:	2180      	movs	r1, #128	@ 0x80
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fedc 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e03b      	b.n	800710e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10b      	bne.n	80070b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	3302      	adds	r3, #2
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e007      	b.n	80070c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	781a      	ldrb	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	3301      	adds	r3, #1
 80070c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1c9      	bne.n	8007076 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2200      	movs	r2, #0
 80070ea:	2140      	movs	r1, #64	@ 0x40
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fea6 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e005      	b.n	800710e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	e000      	b.n	800710e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800710c:	2302      	movs	r3, #2
  }
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b08a      	sub	sp, #40	@ 0x28
 800711a:	af00      	add	r7, sp, #0
 800711c:	60f8      	str	r0, [r7, #12]
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	4613      	mov	r3, r2
 8007122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800712a:	2b20      	cmp	r3, #32
 800712c:	d132      	bne.n	8007194 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_UART_Receive_IT+0x24>
 8007134:	88fb      	ldrh	r3, [r7, #6]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e02b      	b.n	8007196 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d018      	beq.n	8007184 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	613b      	str	r3, [r7, #16]
   return(result);
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	623b      	str	r3, [r7, #32]
 8007172:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	69f9      	ldr	r1, [r7, #28]
 8007176:	6a3a      	ldr	r2, [r7, #32]
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	61bb      	str	r3, [r7, #24]
   return(result);
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	461a      	mov	r2, r3
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fec4 	bl	8007f18 <UART_Start_Receive_IT>
 8007190:	4603      	mov	r3, r0
 8007192:	e000      	b.n	8007196 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007194:	2302      	movs	r3, #2
  }
}
 8007196:	4618      	mov	r0, r3
 8007198:	3728      	adds	r7, #40	@ 0x28
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b0ba      	sub	sp, #232	@ 0xe8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80071ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80071ce:	4013      	ands	r3, r2
 80071d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80071d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d115      	bne.n	8007208 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00f      	beq.n	8007208 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 8297 	beq.w	800772c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	4798      	blx	r3
      }
      return;
 8007206:	e291      	b.n	800772c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 8117 	beq.w	8007440 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d106      	bne.n	800722c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800721e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007222:	4b85      	ldr	r3, [pc, #532]	@ (8007438 <HAL_UART_IRQHandler+0x298>)
 8007224:	4013      	ands	r3, r2
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 810a 	beq.w	8007440 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0xbc>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800723c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2201      	movs	r2, #1
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d011      	beq.n	800728c <HAL_UART_IRQHandler+0xec>
 8007268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2202      	movs	r2, #2
 800727a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007282:	f043 0204 	orr.w	r2, r3, #4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d011      	beq.n	80072bc <HAL_UART_IRQHandler+0x11c>
 8007298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00b      	beq.n	80072bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2204      	movs	r2, #4
 80072aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072b2:	f043 0202 	orr.w	r2, r3, #2
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d017      	beq.n	80072f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80072d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ee:	f043 0208 	orr.w	r2, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007300:	2b00      	cmp	r3, #0
 8007302:	d012      	beq.n	800732a <HAL_UART_IRQHandler+0x18a>
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007308:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007318:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 81fd 	beq.w	8007730 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00d      	beq.n	800735e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007364:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007372:	2b40      	cmp	r3, #64	@ 0x40
 8007374:	d005      	beq.n	8007382 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800737a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800737e:	2b00      	cmp	r3, #0
 8007380:	d04f      	beq.n	8007422 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fe8e 	bl	80080a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007392:	2b40      	cmp	r3, #64	@ 0x40
 8007394:	d141      	bne.n	800741a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3308      	adds	r3, #8
 800739c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80073ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1d9      	bne.n	8007396 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d013      	beq.n	8007412 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ee:	4a13      	ldr	r2, [pc, #76]	@ (800743c <HAL_UART_IRQHandler+0x29c>)
 80073f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fc fae5 	bl	80039c6 <HAL_DMA_Abort_IT>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d017      	beq.n	8007432 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800740c:	4610      	mov	r0, r2
 800740e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	e00f      	b.n	8007432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9a0 	bl	8007758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e00b      	b.n	8007432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f99c 	bl	8007758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007420:	e007      	b.n	8007432 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f998 	bl	8007758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007430:	e17e      	b.n	8007730 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007432:	bf00      	nop
    return;
 8007434:	e17c      	b.n	8007730 <HAL_UART_IRQHandler+0x590>
 8007436:	bf00      	nop
 8007438:	04000120 	.word	0x04000120
 800743c:	0800816d 	.word	0x0800816d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007444:	2b01      	cmp	r3, #1
 8007446:	f040 814c 	bne.w	80076e2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800744a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8145 	beq.w	80076e2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800745c:	f003 0310 	and.w	r3, r3, #16
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 813e 	beq.w	80076e2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2210      	movs	r2, #16
 800746c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007478:	2b40      	cmp	r3, #64	@ 0x40
 800747a:	f040 80b6 	bne.w	80075ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800748a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 8150 	beq.w	8007734 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800749a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800749e:	429a      	cmp	r2, r3
 80074a0:	f080 8148 	bcs.w	8007734 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074b8:	f000 8086 	beq.w	80075c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1da      	bne.n	80074bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800752a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800752e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007532:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800753c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e1      	bne.n	8007506 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3308      	adds	r3, #8
 8007562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007566:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007568:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800756c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e3      	bne.n	8007542 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007598:	f023 0310 	bic.w	r3, r3, #16
 800759c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e4      	bne.n	8007588 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fc f98f 	bl	80038e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2202      	movs	r2, #2
 80075cc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8c2 	bl	800776c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075e8:	e0a4      	b.n	8007734 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 8096 	beq.w	8007738 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800760c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8091 	beq.w	8007738 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800762a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007638:	647b      	str	r3, [r7, #68]	@ 0x44
 800763a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800763e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e4      	bne.n	8007616 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3308      	adds	r3, #8
 8007652:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	623b      	str	r3, [r7, #32]
   return(result);
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	f023 0301 	bic.w	r3, r3, #1
 8007662:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007670:	633a      	str	r2, [r7, #48]	@ 0x30
 8007672:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e3      	bne.n	800764c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2220      	movs	r2, #32
 8007688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	69fa      	ldr	r2, [r7, #28]
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	617b      	str	r3, [r7, #20]
   return(result);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f846 	bl	800776c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076e0:	e02a      	b.n	8007738 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d008      	beq.n	800770c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d01c      	beq.n	800773c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
    }
    return;
 800770a:	e017      	b.n	800773c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d012      	beq.n	800773e <HAL_UART_IRQHandler+0x59e>
 8007718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800771c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00c      	beq.n	800773e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fd37 	bl	8008198 <UART_EndTransmit_IT>
    return;
 800772a:	e008      	b.n	800773e <HAL_UART_IRQHandler+0x59e>
      return;
 800772c:	bf00      	nop
 800772e:	e006      	b.n	800773e <HAL_UART_IRQHandler+0x59e>
    return;
 8007730:	bf00      	nop
 8007732:	e004      	b.n	800773e <HAL_UART_IRQHandler+0x59e>
      return;
 8007734:	bf00      	nop
 8007736:	e002      	b.n	800773e <HAL_UART_IRQHandler+0x59e>
      return;
 8007738:	bf00      	nop
 800773a:	e000      	b.n	800773e <HAL_UART_IRQHandler+0x59e>
    return;
 800773c:	bf00      	nop
  }

}
 800773e:	37e8      	adds	r7, #232	@ 0xe8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4ba6      	ldr	r3, [pc, #664]	@ (8007a48 <UART_SetConfig+0x2c4>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	6979      	ldr	r1, [r7, #20]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a94      	ldr	r2, [pc, #592]	@ (8007a4c <UART_SetConfig+0x2c8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d120      	bne.n	8007842 <UART_SetConfig+0xbe>
 8007800:	4b93      	ldr	r3, [pc, #588]	@ (8007a50 <UART_SetConfig+0x2cc>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d816      	bhi.n	800783c <UART_SetConfig+0xb8>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <UART_SetConfig+0x90>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007825 	.word	0x08007825
 8007818:	08007831 	.word	0x08007831
 800781c:	0800782b 	.word	0x0800782b
 8007820:	08007837 	.word	0x08007837
 8007824:	2301      	movs	r3, #1
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e150      	b.n	8007acc <UART_SetConfig+0x348>
 800782a:	2302      	movs	r3, #2
 800782c:	77fb      	strb	r3, [r7, #31]
 800782e:	e14d      	b.n	8007acc <UART_SetConfig+0x348>
 8007830:	2304      	movs	r3, #4
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e14a      	b.n	8007acc <UART_SetConfig+0x348>
 8007836:	2308      	movs	r3, #8
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	e147      	b.n	8007acc <UART_SetConfig+0x348>
 800783c:	2310      	movs	r3, #16
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e144      	b.n	8007acc <UART_SetConfig+0x348>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a83      	ldr	r2, [pc, #524]	@ (8007a54 <UART_SetConfig+0x2d0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d132      	bne.n	80078b2 <UART_SetConfig+0x12e>
 800784c:	4b80      	ldr	r3, [pc, #512]	@ (8007a50 <UART_SetConfig+0x2cc>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007852:	f003 030c 	and.w	r3, r3, #12
 8007856:	2b0c      	cmp	r3, #12
 8007858:	d828      	bhi.n	80078ac <UART_SetConfig+0x128>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <UART_SetConfig+0xdc>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007895 	.word	0x08007895
 8007864:	080078ad 	.word	0x080078ad
 8007868:	080078ad 	.word	0x080078ad
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078a1 	.word	0x080078a1
 8007874:	080078ad 	.word	0x080078ad
 8007878:	080078ad 	.word	0x080078ad
 800787c:	080078ad 	.word	0x080078ad
 8007880:	0800789b 	.word	0x0800789b
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078ad 	.word	0x080078ad
 8007890:	080078a7 	.word	0x080078a7
 8007894:	2300      	movs	r3, #0
 8007896:	77fb      	strb	r3, [r7, #31]
 8007898:	e118      	b.n	8007acc <UART_SetConfig+0x348>
 800789a:	2302      	movs	r3, #2
 800789c:	77fb      	strb	r3, [r7, #31]
 800789e:	e115      	b.n	8007acc <UART_SetConfig+0x348>
 80078a0:	2304      	movs	r3, #4
 80078a2:	77fb      	strb	r3, [r7, #31]
 80078a4:	e112      	b.n	8007acc <UART_SetConfig+0x348>
 80078a6:	2308      	movs	r3, #8
 80078a8:	77fb      	strb	r3, [r7, #31]
 80078aa:	e10f      	b.n	8007acc <UART_SetConfig+0x348>
 80078ac:	2310      	movs	r3, #16
 80078ae:	77fb      	strb	r3, [r7, #31]
 80078b0:	e10c      	b.n	8007acc <UART_SetConfig+0x348>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a68      	ldr	r2, [pc, #416]	@ (8007a58 <UART_SetConfig+0x2d4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d120      	bne.n	80078fe <UART_SetConfig+0x17a>
 80078bc:	4b64      	ldr	r3, [pc, #400]	@ (8007a50 <UART_SetConfig+0x2cc>)
 80078be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078c6:	2b30      	cmp	r3, #48	@ 0x30
 80078c8:	d013      	beq.n	80078f2 <UART_SetConfig+0x16e>
 80078ca:	2b30      	cmp	r3, #48	@ 0x30
 80078cc:	d814      	bhi.n	80078f8 <UART_SetConfig+0x174>
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d009      	beq.n	80078e6 <UART_SetConfig+0x162>
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d810      	bhi.n	80078f8 <UART_SetConfig+0x174>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <UART_SetConfig+0x15c>
 80078da:	2b10      	cmp	r3, #16
 80078dc:	d006      	beq.n	80078ec <UART_SetConfig+0x168>
 80078de:	e00b      	b.n	80078f8 <UART_SetConfig+0x174>
 80078e0:	2300      	movs	r3, #0
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	e0f2      	b.n	8007acc <UART_SetConfig+0x348>
 80078e6:	2302      	movs	r3, #2
 80078e8:	77fb      	strb	r3, [r7, #31]
 80078ea:	e0ef      	b.n	8007acc <UART_SetConfig+0x348>
 80078ec:	2304      	movs	r3, #4
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	e0ec      	b.n	8007acc <UART_SetConfig+0x348>
 80078f2:	2308      	movs	r3, #8
 80078f4:	77fb      	strb	r3, [r7, #31]
 80078f6:	e0e9      	b.n	8007acc <UART_SetConfig+0x348>
 80078f8:	2310      	movs	r3, #16
 80078fa:	77fb      	strb	r3, [r7, #31]
 80078fc:	e0e6      	b.n	8007acc <UART_SetConfig+0x348>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a56      	ldr	r2, [pc, #344]	@ (8007a5c <UART_SetConfig+0x2d8>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d120      	bne.n	800794a <UART_SetConfig+0x1c6>
 8007908:	4b51      	ldr	r3, [pc, #324]	@ (8007a50 <UART_SetConfig+0x2cc>)
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007912:	2bc0      	cmp	r3, #192	@ 0xc0
 8007914:	d013      	beq.n	800793e <UART_SetConfig+0x1ba>
 8007916:	2bc0      	cmp	r3, #192	@ 0xc0
 8007918:	d814      	bhi.n	8007944 <UART_SetConfig+0x1c0>
 800791a:	2b80      	cmp	r3, #128	@ 0x80
 800791c:	d009      	beq.n	8007932 <UART_SetConfig+0x1ae>
 800791e:	2b80      	cmp	r3, #128	@ 0x80
 8007920:	d810      	bhi.n	8007944 <UART_SetConfig+0x1c0>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <UART_SetConfig+0x1a8>
 8007926:	2b40      	cmp	r3, #64	@ 0x40
 8007928:	d006      	beq.n	8007938 <UART_SetConfig+0x1b4>
 800792a:	e00b      	b.n	8007944 <UART_SetConfig+0x1c0>
 800792c:	2300      	movs	r3, #0
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e0cc      	b.n	8007acc <UART_SetConfig+0x348>
 8007932:	2302      	movs	r3, #2
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e0c9      	b.n	8007acc <UART_SetConfig+0x348>
 8007938:	2304      	movs	r3, #4
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e0c6      	b.n	8007acc <UART_SetConfig+0x348>
 800793e:	2308      	movs	r3, #8
 8007940:	77fb      	strb	r3, [r7, #31]
 8007942:	e0c3      	b.n	8007acc <UART_SetConfig+0x348>
 8007944:	2310      	movs	r3, #16
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e0c0      	b.n	8007acc <UART_SetConfig+0x348>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a44      	ldr	r2, [pc, #272]	@ (8007a60 <UART_SetConfig+0x2dc>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d125      	bne.n	80079a0 <UART_SetConfig+0x21c>
 8007954:	4b3e      	ldr	r3, [pc, #248]	@ (8007a50 <UART_SetConfig+0x2cc>)
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800795a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800795e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007962:	d017      	beq.n	8007994 <UART_SetConfig+0x210>
 8007964:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007968:	d817      	bhi.n	800799a <UART_SetConfig+0x216>
 800796a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800796e:	d00b      	beq.n	8007988 <UART_SetConfig+0x204>
 8007970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007974:	d811      	bhi.n	800799a <UART_SetConfig+0x216>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <UART_SetConfig+0x1fe>
 800797a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800797e:	d006      	beq.n	800798e <UART_SetConfig+0x20a>
 8007980:	e00b      	b.n	800799a <UART_SetConfig+0x216>
 8007982:	2300      	movs	r3, #0
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e0a1      	b.n	8007acc <UART_SetConfig+0x348>
 8007988:	2302      	movs	r3, #2
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e09e      	b.n	8007acc <UART_SetConfig+0x348>
 800798e:	2304      	movs	r3, #4
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e09b      	b.n	8007acc <UART_SetConfig+0x348>
 8007994:	2308      	movs	r3, #8
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e098      	b.n	8007acc <UART_SetConfig+0x348>
 800799a:	2310      	movs	r3, #16
 800799c:	77fb      	strb	r3, [r7, #31]
 800799e:	e095      	b.n	8007acc <UART_SetConfig+0x348>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a2f      	ldr	r2, [pc, #188]	@ (8007a64 <UART_SetConfig+0x2e0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d125      	bne.n	80079f6 <UART_SetConfig+0x272>
 80079aa:	4b29      	ldr	r3, [pc, #164]	@ (8007a50 <UART_SetConfig+0x2cc>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079b8:	d017      	beq.n	80079ea <UART_SetConfig+0x266>
 80079ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079be:	d817      	bhi.n	80079f0 <UART_SetConfig+0x26c>
 80079c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c4:	d00b      	beq.n	80079de <UART_SetConfig+0x25a>
 80079c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ca:	d811      	bhi.n	80079f0 <UART_SetConfig+0x26c>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <UART_SetConfig+0x254>
 80079d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d4:	d006      	beq.n	80079e4 <UART_SetConfig+0x260>
 80079d6:	e00b      	b.n	80079f0 <UART_SetConfig+0x26c>
 80079d8:	2301      	movs	r3, #1
 80079da:	77fb      	strb	r3, [r7, #31]
 80079dc:	e076      	b.n	8007acc <UART_SetConfig+0x348>
 80079de:	2302      	movs	r3, #2
 80079e0:	77fb      	strb	r3, [r7, #31]
 80079e2:	e073      	b.n	8007acc <UART_SetConfig+0x348>
 80079e4:	2304      	movs	r3, #4
 80079e6:	77fb      	strb	r3, [r7, #31]
 80079e8:	e070      	b.n	8007acc <UART_SetConfig+0x348>
 80079ea:	2308      	movs	r3, #8
 80079ec:	77fb      	strb	r3, [r7, #31]
 80079ee:	e06d      	b.n	8007acc <UART_SetConfig+0x348>
 80079f0:	2310      	movs	r3, #16
 80079f2:	77fb      	strb	r3, [r7, #31]
 80079f4:	e06a      	b.n	8007acc <UART_SetConfig+0x348>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007a68 <UART_SetConfig+0x2e4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d138      	bne.n	8007a72 <UART_SetConfig+0x2ee>
 8007a00:	4b13      	ldr	r3, [pc, #76]	@ (8007a50 <UART_SetConfig+0x2cc>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a0e:	d017      	beq.n	8007a40 <UART_SetConfig+0x2bc>
 8007a10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a14:	d82a      	bhi.n	8007a6c <UART_SetConfig+0x2e8>
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a1a:	d00b      	beq.n	8007a34 <UART_SetConfig+0x2b0>
 8007a1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a20:	d824      	bhi.n	8007a6c <UART_SetConfig+0x2e8>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <UART_SetConfig+0x2aa>
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a2a:	d006      	beq.n	8007a3a <UART_SetConfig+0x2b6>
 8007a2c:	e01e      	b.n	8007a6c <UART_SetConfig+0x2e8>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e04b      	b.n	8007acc <UART_SetConfig+0x348>
 8007a34:	2302      	movs	r3, #2
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e048      	b.n	8007acc <UART_SetConfig+0x348>
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e045      	b.n	8007acc <UART_SetConfig+0x348>
 8007a40:	2308      	movs	r3, #8
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e042      	b.n	8007acc <UART_SetConfig+0x348>
 8007a46:	bf00      	nop
 8007a48:	efff69f3 	.word	0xefff69f3
 8007a4c:	40011000 	.word	0x40011000
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40004400 	.word	0x40004400
 8007a58:	40004800 	.word	0x40004800
 8007a5c:	40004c00 	.word	0x40004c00
 8007a60:	40005000 	.word	0x40005000
 8007a64:	40011400 	.word	0x40011400
 8007a68:	40007800 	.word	0x40007800
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	77fb      	strb	r3, [r7, #31]
 8007a70:	e02c      	b.n	8007acc <UART_SetConfig+0x348>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a72      	ldr	r2, [pc, #456]	@ (8007c40 <UART_SetConfig+0x4bc>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d125      	bne.n	8007ac8 <UART_SetConfig+0x344>
 8007a7c:	4b71      	ldr	r3, [pc, #452]	@ (8007c44 <UART_SetConfig+0x4c0>)
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a86:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007a8a:	d017      	beq.n	8007abc <UART_SetConfig+0x338>
 8007a8c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007a90:	d817      	bhi.n	8007ac2 <UART_SetConfig+0x33e>
 8007a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a96:	d00b      	beq.n	8007ab0 <UART_SetConfig+0x32c>
 8007a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a9c:	d811      	bhi.n	8007ac2 <UART_SetConfig+0x33e>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <UART_SetConfig+0x326>
 8007aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aa6:	d006      	beq.n	8007ab6 <UART_SetConfig+0x332>
 8007aa8:	e00b      	b.n	8007ac2 <UART_SetConfig+0x33e>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	77fb      	strb	r3, [r7, #31]
 8007aae:	e00d      	b.n	8007acc <UART_SetConfig+0x348>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	77fb      	strb	r3, [r7, #31]
 8007ab4:	e00a      	b.n	8007acc <UART_SetConfig+0x348>
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e007      	b.n	8007acc <UART_SetConfig+0x348>
 8007abc:	2308      	movs	r3, #8
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e004      	b.n	8007acc <UART_SetConfig+0x348>
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e001      	b.n	8007acc <UART_SetConfig+0x348>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ad4:	d15b      	bne.n	8007b8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d828      	bhi.n	8007b2e <UART_SetConfig+0x3aa>
 8007adc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <UART_SetConfig+0x360>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	08007b2f 	.word	0x08007b2f
 8007af4:	08007b1f 	.word	0x08007b1f
 8007af8:	08007b2f 	.word	0x08007b2f
 8007afc:	08007b2f 	.word	0x08007b2f
 8007b00:	08007b2f 	.word	0x08007b2f
 8007b04:	08007b27 	.word	0x08007b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fc fe48 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8007b0c:	61b8      	str	r0, [r7, #24]
        break;
 8007b0e:	e013      	b.n	8007b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b10:	f7fc fe58 	bl	80047c4 <HAL_RCC_GetPCLK2Freq>
 8007b14:	61b8      	str	r0, [r7, #24]
        break;
 8007b16:	e00f      	b.n	8007b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b18:	4b4b      	ldr	r3, [pc, #300]	@ (8007c48 <UART_SetConfig+0x4c4>)
 8007b1a:	61bb      	str	r3, [r7, #24]
        break;
 8007b1c:	e00c      	b.n	8007b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1e:	f7fc fd2b 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8007b22:	61b8      	str	r0, [r7, #24]
        break;
 8007b24:	e008      	b.n	8007b38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b2a:	61bb      	str	r3, [r7, #24]
        break;
 8007b2c:	e004      	b.n	8007b38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	77bb      	strb	r3, [r7, #30]
        break;
 8007b36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d074      	beq.n	8007c28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	005a      	lsls	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	441a      	add	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b0f      	cmp	r3, #15
 8007b58:	d916      	bls.n	8007b88 <UART_SetConfig+0x404>
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b60:	d212      	bcs.n	8007b88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	f023 030f 	bic.w	r3, r3, #15
 8007b6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f003 0307 	and.w	r3, r3, #7
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	89fb      	ldrh	r3, [r7, #14]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	89fa      	ldrh	r2, [r7, #14]
 8007b84:	60da      	str	r2, [r3, #12]
 8007b86:	e04f      	b.n	8007c28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	77bb      	strb	r3, [r7, #30]
 8007b8c:	e04c      	b.n	8007c28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b8e:	7ffb      	ldrb	r3, [r7, #31]
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d828      	bhi.n	8007be6 <UART_SetConfig+0x462>
 8007b94:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <UART_SetConfig+0x418>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bc1 	.word	0x08007bc1
 8007ba0:	08007bc9 	.word	0x08007bc9
 8007ba4:	08007bd1 	.word	0x08007bd1
 8007ba8:	08007be7 	.word	0x08007be7
 8007bac:	08007bd7 	.word	0x08007bd7
 8007bb0:	08007be7 	.word	0x08007be7
 8007bb4:	08007be7 	.word	0x08007be7
 8007bb8:	08007be7 	.word	0x08007be7
 8007bbc:	08007bdf 	.word	0x08007bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc0:	f7fc fdec 	bl	800479c <HAL_RCC_GetPCLK1Freq>
 8007bc4:	61b8      	str	r0, [r7, #24]
        break;
 8007bc6:	e013      	b.n	8007bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc8:	f7fc fdfc 	bl	80047c4 <HAL_RCC_GetPCLK2Freq>
 8007bcc:	61b8      	str	r0, [r7, #24]
        break;
 8007bce:	e00f      	b.n	8007bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c48 <UART_SetConfig+0x4c4>)
 8007bd2:	61bb      	str	r3, [r7, #24]
        break;
 8007bd4:	e00c      	b.n	8007bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd6:	f7fc fccf 	bl	8004578 <HAL_RCC_GetSysClockFreq>
 8007bda:	61b8      	str	r0, [r7, #24]
        break;
 8007bdc:	e008      	b.n	8007bf0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007be2:	61bb      	str	r3, [r7, #24]
        break;
 8007be4:	e004      	b.n	8007bf0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	77bb      	strb	r3, [r7, #30]
        break;
 8007bee:	bf00      	nop
    }

    if (pclk != 0U)
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d018      	beq.n	8007c28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	085a      	lsrs	r2, r3, #1
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	441a      	add	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b0f      	cmp	r3, #15
 8007c0e:	d909      	bls.n	8007c24 <UART_SetConfig+0x4a0>
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c16:	d205      	bcs.n	8007c24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60da      	str	r2, [r3, #12]
 8007c22:	e001      	b.n	8007c28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c34:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3720      	adds	r7, #32
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	40007c00 	.word	0x40007c00
 8007c44:	40023800 	.word	0x40023800
 8007c48:	00f42400 	.word	0x00f42400

08007c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01a      	beq.n	8007d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d4a:	d10a      	bne.n	8007d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]
  }
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	@ 0x30
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007da0:	f7fb fc60 	bl	8003664 <HAL_GetTick>
 8007da4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d12e      	bne.n	8007e12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f83b 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d021      	beq.n	8007e12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007de2:	623b      	str	r3, [r7, #32]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	61fb      	str	r3, [r7, #28]
 8007dee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	69b9      	ldr	r1, [r7, #24]
 8007df2:	69fa      	ldr	r2, [r7, #28]
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e6      	bne.n	8007dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e011      	b.n	8007e36 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3728      	adds	r7, #40	@ 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b084      	sub	sp, #16
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	603b      	str	r3, [r7, #0]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4e:	e04f      	b.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d04b      	beq.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e58:	f7fb fc04 	bl	8003664 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <UART_WaitOnFlagUntilTimeout+0x30>
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e04e      	b.n	8007f10 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d037      	beq.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b80      	cmp	r3, #128	@ 0x80
 8007e84:	d034      	beq.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b40      	cmp	r3, #64	@ 0x40
 8007e8a:	d031      	beq.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d110      	bne.n	8007ebc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 f8fe 	bl	80080a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2208      	movs	r2, #8
 8007eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e029      	b.n	8007f10 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007eca:	d111      	bne.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ed4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f000 f8e4 	bl	80080a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e00f      	b.n	8007f10 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69da      	ldr	r2, [r3, #28]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	bf0c      	ite	eq
 8007f00:	2301      	moveq	r3, #1
 8007f02:	2300      	movne	r3, #0
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d0a0      	beq.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b097      	sub	sp, #92	@ 0x5c
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	88fa      	ldrh	r2, [r7, #6]
 8007f30:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	88fa      	ldrh	r2, [r7, #6]
 8007f38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f4a:	d10e      	bne.n	8007f6a <UART_Start_Receive_IT+0x52>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d105      	bne.n	8007f60 <UART_Start_Receive_IT+0x48>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f5e:	e02d      	b.n	8007fbc <UART_Start_Receive_IT+0xa4>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	22ff      	movs	r2, #255	@ 0xff
 8007f64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f68:	e028      	b.n	8007fbc <UART_Start_Receive_IT+0xa4>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <UART_Start_Receive_IT+0x76>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <UART_Start_Receive_IT+0x6c>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22ff      	movs	r2, #255	@ 0xff
 8007f7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f82:	e01b      	b.n	8007fbc <UART_Start_Receive_IT+0xa4>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	227f      	movs	r2, #127	@ 0x7f
 8007f88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f8c:	e016      	b.n	8007fbc <UART_Start_Receive_IT+0xa4>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f96:	d10d      	bne.n	8007fb4 <UART_Start_Receive_IT+0x9c>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <UART_Start_Receive_IT+0x92>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	227f      	movs	r2, #127	@ 0x7f
 8007fa4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fa8:	e008      	b.n	8007fbc <UART_Start_Receive_IT+0xa4>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	223f      	movs	r2, #63	@ 0x3f
 8007fae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fb2:	e003      	b.n	8007fbc <UART_Start_Receive_IT+0xa4>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2222      	movs	r2, #34	@ 0x22
 8007fc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fec:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007fee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ff2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e5      	bne.n	8007fcc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008008:	d107      	bne.n	800801a <UART_Start_Receive_IT+0x102>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a21      	ldr	r2, [pc, #132]	@ (800809c <UART_Start_Receive_IT+0x184>)
 8008016:	669a      	str	r2, [r3, #104]	@ 0x68
 8008018:	e002      	b.n	8008020 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4a20      	ldr	r2, [pc, #128]	@ (80080a0 <UART_Start_Receive_IT+0x188>)
 800801e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d019      	beq.n	800805c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800803c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
 8008048:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800804c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e6      	bne.n	8008028 <UART_Start_Receive_IT+0x110>
 800805a:	e018      	b.n	800808e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	613b      	str	r3, [r7, #16]
   return(result);
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f043 0320 	orr.w	r3, r3, #32
 8008070:	653b      	str	r3, [r7, #80]	@ 0x50
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800807a:	623b      	str	r3, [r7, #32]
 800807c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	69f9      	ldr	r1, [r7, #28]
 8008080:	6a3a      	ldr	r2, [r7, #32]
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	61bb      	str	r3, [r7, #24]
   return(result);
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e6      	bne.n	800805c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	375c      	adds	r7, #92	@ 0x5c
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	08008395 	.word	0x08008395
 80080a0:	080081ed 	.word	0x080081ed

080080a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b095      	sub	sp, #84	@ 0x54
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80080cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e6      	bne.n	80080ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3308      	adds	r3, #8
 80080e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3308      	adds	r3, #8
 80080fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008100:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800810c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008116:	2b01      	cmp	r3, #1
 8008118:	d118      	bne.n	800814c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	60bb      	str	r3, [r7, #8]
   return(result);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f023 0310 	bic.w	r3, r3, #16
 800812e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008138:	61bb      	str	r3, [r7, #24]
 800813a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6979      	ldr	r1, [r7, #20]
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	613b      	str	r3, [r7, #16]
   return(result);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e6      	bne.n	800811a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008160:	bf00      	nop
 8008162:	3754      	adds	r7, #84	@ 0x54
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fae4 	bl	8007758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081b4:	61fb      	str	r3, [r7, #28]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	61bb      	str	r3, [r7, #24]
 80081c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6979      	ldr	r1, [r7, #20]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	613b      	str	r3, [r7, #16]
   return(result);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e6      	bne.n	80081a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff fab0 	bl	8007744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081e4:	bf00      	nop
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b09c      	sub	sp, #112	@ 0x70
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008204:	2b22      	cmp	r3, #34	@ 0x22
 8008206:	f040 80b9 	bne.w	800837c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008214:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008218:	b2d9      	uxtb	r1, r3
 800821a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800821e:	b2da      	uxtb	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008224:	400a      	ands	r2, r1
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 809c 	bne.w	800838c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008272:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e6      	bne.n	8008254 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3308      	adds	r3, #8
 800828c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008298:	f023 0301 	bic.w	r3, r3, #1
 800829c:	667b      	str	r3, [r7, #100]	@ 0x64
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80082a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80082a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e5      	bne.n	8008286 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d018      	beq.n	800830e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80082fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e6      	bne.n	80082dc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008312:	2b01      	cmp	r3, #1
 8008314:	d12e      	bne.n	8008374 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	60fb      	str	r3, [r7, #12]
   return(result);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f023 0310 	bic.w	r3, r3, #16
 8008330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	69b9      	ldr	r1, [r7, #24]
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	617b      	str	r3, [r7, #20]
   return(result);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e6      	bne.n	800831c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b10      	cmp	r3, #16
 800835a:	d103      	bne.n	8008364 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2210      	movs	r2, #16
 8008362:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7ff f9fd 	bl	800776c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008372:	e00b      	b.n	800838c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fa f9d5 	bl	8002724 <HAL_UART_RxCpltCallback>
}
 800837a:	e007      	b.n	800838c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0208 	orr.w	r2, r2, #8
 800838a:	619a      	str	r2, [r3, #24]
}
 800838c:	bf00      	nop
 800838e:	3770      	adds	r7, #112	@ 0x70
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b09c      	sub	sp, #112	@ 0x70
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083ac:	2b22      	cmp	r3, #34	@ 0x22
 80083ae:	f040 80b9 	bne.w	8008524 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80083c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80083c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80083ca:	4013      	ands	r3, r2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d6:	1c9a      	adds	r2, r3, #2
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f040 809c 	bne.w	8008534 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800840a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800840c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008410:	667b      	str	r3, [r7, #100]	@ 0x64
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800841a:	657b      	str	r3, [r7, #84]	@ 0x54
 800841c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008420:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e6      	bne.n	80083fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3308      	adds	r3, #8
 8008434:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800843e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008440:	f023 0301 	bic.w	r3, r3, #1
 8008444:	663b      	str	r3, [r7, #96]	@ 0x60
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3308      	adds	r3, #8
 800844c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800844e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008452:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008454:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008456:	e841 2300 	strex	r3, r2, [r1]
 800845a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1e5      	bne.n	800842e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d018      	beq.n	80084b6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	61fb      	str	r3, [r7, #28]
   return(result);
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084a4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e6      	bne.n	8008484 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d12e      	bne.n	800851c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	f023 0310 	bic.w	r3, r3, #16
 80084d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	6979      	ldr	r1, [r7, #20]
 80084e8:	69ba      	ldr	r2, [r7, #24]
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	613b      	str	r3, [r7, #16]
   return(result);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e6      	bne.n	80084c4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f003 0310 	and.w	r3, r3, #16
 8008500:	2b10      	cmp	r3, #16
 8008502:	d103      	bne.n	800850c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2210      	movs	r2, #16
 800850a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff f929 	bl	800776c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800851a:	e00b      	b.n	8008534 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7fa f901 	bl	8002724 <HAL_UART_RxCpltCallback>
}
 8008522:	e007      	b.n	8008534 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0208 	orr.w	r2, r2, #8
 8008532:	619a      	str	r2, [r3, #24]
}
 8008534:	bf00      	nop
 8008536:	3770      	adds	r7, #112	@ 0x70
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <atof>:
 800853c:	2100      	movs	r1, #0
 800853e:	f000 be09 	b.w	8009154 <strtod>

08008542 <sulp>:
 8008542:	b570      	push	{r4, r5, r6, lr}
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	ec45 4b10 	vmov	d0, r4, r5
 800854c:	4616      	mov	r6, r2
 800854e:	f003 fca3 	bl	800be98 <__ulp>
 8008552:	ec51 0b10 	vmov	r0, r1, d0
 8008556:	b17e      	cbz	r6, 8008578 <sulp+0x36>
 8008558:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800855c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008560:	2b00      	cmp	r3, #0
 8008562:	dd09      	ble.n	8008578 <sulp+0x36>
 8008564:	051b      	lsls	r3, r3, #20
 8008566:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800856a:	2400      	movs	r4, #0
 800856c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008570:	4622      	mov	r2, r4
 8008572:	462b      	mov	r3, r5
 8008574:	f7f8 f860 	bl	8000638 <__aeabi_dmul>
 8008578:	ec41 0b10 	vmov	d0, r0, r1
 800857c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008580 <_strtod_l>:
 8008580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008584:	b09f      	sub	sp, #124	@ 0x7c
 8008586:	460c      	mov	r4, r1
 8008588:	9217      	str	r2, [sp, #92]	@ 0x5c
 800858a:	2200      	movs	r2, #0
 800858c:	921a      	str	r2, [sp, #104]	@ 0x68
 800858e:	9005      	str	r0, [sp, #20]
 8008590:	f04f 0a00 	mov.w	sl, #0
 8008594:	f04f 0b00 	mov.w	fp, #0
 8008598:	460a      	mov	r2, r1
 800859a:	9219      	str	r2, [sp, #100]	@ 0x64
 800859c:	7811      	ldrb	r1, [r2, #0]
 800859e:	292b      	cmp	r1, #43	@ 0x2b
 80085a0:	d04a      	beq.n	8008638 <_strtod_l+0xb8>
 80085a2:	d838      	bhi.n	8008616 <_strtod_l+0x96>
 80085a4:	290d      	cmp	r1, #13
 80085a6:	d832      	bhi.n	800860e <_strtod_l+0x8e>
 80085a8:	2908      	cmp	r1, #8
 80085aa:	d832      	bhi.n	8008612 <_strtod_l+0x92>
 80085ac:	2900      	cmp	r1, #0
 80085ae:	d03b      	beq.n	8008628 <_strtod_l+0xa8>
 80085b0:	2200      	movs	r2, #0
 80085b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80085b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80085b6:	782a      	ldrb	r2, [r5, #0]
 80085b8:	2a30      	cmp	r2, #48	@ 0x30
 80085ba:	f040 80b3 	bne.w	8008724 <_strtod_l+0x1a4>
 80085be:	786a      	ldrb	r2, [r5, #1]
 80085c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80085c4:	2a58      	cmp	r2, #88	@ 0x58
 80085c6:	d16e      	bne.n	80086a6 <_strtod_l+0x126>
 80085c8:	9302      	str	r3, [sp, #8]
 80085ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	4a8e      	ldr	r2, [pc, #568]	@ (800880c <_strtod_l+0x28c>)
 80085d4:	9805      	ldr	r0, [sp, #20]
 80085d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80085d8:	a919      	add	r1, sp, #100	@ 0x64
 80085da:	f002 fd4f 	bl	800b07c <__gethex>
 80085de:	f010 060f 	ands.w	r6, r0, #15
 80085e2:	4604      	mov	r4, r0
 80085e4:	d005      	beq.n	80085f2 <_strtod_l+0x72>
 80085e6:	2e06      	cmp	r6, #6
 80085e8:	d128      	bne.n	800863c <_strtod_l+0xbc>
 80085ea:	3501      	adds	r5, #1
 80085ec:	2300      	movs	r3, #0
 80085ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80085f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 858e 	bne.w	8009116 <_strtod_l+0xb96>
 80085fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085fc:	b1cb      	cbz	r3, 8008632 <_strtod_l+0xb2>
 80085fe:	4652      	mov	r2, sl
 8008600:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008604:	ec43 2b10 	vmov	d0, r2, r3
 8008608:	b01f      	add	sp, #124	@ 0x7c
 800860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860e:	2920      	cmp	r1, #32
 8008610:	d1ce      	bne.n	80085b0 <_strtod_l+0x30>
 8008612:	3201      	adds	r2, #1
 8008614:	e7c1      	b.n	800859a <_strtod_l+0x1a>
 8008616:	292d      	cmp	r1, #45	@ 0x2d
 8008618:	d1ca      	bne.n	80085b0 <_strtod_l+0x30>
 800861a:	2101      	movs	r1, #1
 800861c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800861e:	1c51      	adds	r1, r2, #1
 8008620:	9119      	str	r1, [sp, #100]	@ 0x64
 8008622:	7852      	ldrb	r2, [r2, #1]
 8008624:	2a00      	cmp	r2, #0
 8008626:	d1c5      	bne.n	80085b4 <_strtod_l+0x34>
 8008628:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800862a:	9419      	str	r4, [sp, #100]	@ 0x64
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8570 	bne.w	8009112 <_strtod_l+0xb92>
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	e7e5      	b.n	8008604 <_strtod_l+0x84>
 8008638:	2100      	movs	r1, #0
 800863a:	e7ef      	b.n	800861c <_strtod_l+0x9c>
 800863c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800863e:	b13a      	cbz	r2, 8008650 <_strtod_l+0xd0>
 8008640:	2135      	movs	r1, #53	@ 0x35
 8008642:	a81c      	add	r0, sp, #112	@ 0x70
 8008644:	f003 fd22 	bl	800c08c <__copybits>
 8008648:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800864a:	9805      	ldr	r0, [sp, #20]
 800864c:	f003 f8f0 	bl	800b830 <_Bfree>
 8008650:	3e01      	subs	r6, #1
 8008652:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008654:	2e04      	cmp	r6, #4
 8008656:	d806      	bhi.n	8008666 <_strtod_l+0xe6>
 8008658:	e8df f006 	tbb	[pc, r6]
 800865c:	201d0314 	.word	0x201d0314
 8008660:	14          	.byte	0x14
 8008661:	00          	.byte	0x00
 8008662:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008666:	05e1      	lsls	r1, r4, #23
 8008668:	bf48      	it	mi
 800866a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800866e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008672:	0d1b      	lsrs	r3, r3, #20
 8008674:	051b      	lsls	r3, r3, #20
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1bb      	bne.n	80085f2 <_strtod_l+0x72>
 800867a:	f001 fdb3 	bl	800a1e4 <__errno>
 800867e:	2322      	movs	r3, #34	@ 0x22
 8008680:	6003      	str	r3, [r0, #0]
 8008682:	e7b6      	b.n	80085f2 <_strtod_l+0x72>
 8008684:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008688:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800868c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008690:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008694:	e7e7      	b.n	8008666 <_strtod_l+0xe6>
 8008696:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008814 <_strtod_l+0x294>
 800869a:	e7e4      	b.n	8008666 <_strtod_l+0xe6>
 800869c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80086a0:	f04f 3aff 	mov.w	sl, #4294967295
 80086a4:	e7df      	b.n	8008666 <_strtod_l+0xe6>
 80086a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	2b30      	cmp	r3, #48	@ 0x30
 80086b0:	d0f9      	beq.n	80086a6 <_strtod_l+0x126>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d09d      	beq.n	80085f2 <_strtod_l+0x72>
 80086b6:	2301      	movs	r3, #1
 80086b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80086be:	2300      	movs	r3, #0
 80086c0:	9308      	str	r3, [sp, #32]
 80086c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c4:	461f      	mov	r7, r3
 80086c6:	220a      	movs	r2, #10
 80086c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80086ca:	7805      	ldrb	r5, [r0, #0]
 80086cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80086d0:	b2d9      	uxtb	r1, r3
 80086d2:	2909      	cmp	r1, #9
 80086d4:	d928      	bls.n	8008728 <_strtod_l+0x1a8>
 80086d6:	494e      	ldr	r1, [pc, #312]	@ (8008810 <_strtod_l+0x290>)
 80086d8:	2201      	movs	r2, #1
 80086da:	f001 fd26 	bl	800a12a <strncmp>
 80086de:	2800      	cmp	r0, #0
 80086e0:	d032      	beq.n	8008748 <_strtod_l+0x1c8>
 80086e2:	2000      	movs	r0, #0
 80086e4:	462a      	mov	r2, r5
 80086e6:	4681      	mov	r9, r0
 80086e8:	463d      	mov	r5, r7
 80086ea:	4603      	mov	r3, r0
 80086ec:	2a65      	cmp	r2, #101	@ 0x65
 80086ee:	d001      	beq.n	80086f4 <_strtod_l+0x174>
 80086f0:	2a45      	cmp	r2, #69	@ 0x45
 80086f2:	d114      	bne.n	800871e <_strtod_l+0x19e>
 80086f4:	b91d      	cbnz	r5, 80086fe <_strtod_l+0x17e>
 80086f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086f8:	4302      	orrs	r2, r0
 80086fa:	d095      	beq.n	8008628 <_strtod_l+0xa8>
 80086fc:	2500      	movs	r5, #0
 80086fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008700:	1c62      	adds	r2, r4, #1
 8008702:	9219      	str	r2, [sp, #100]	@ 0x64
 8008704:	7862      	ldrb	r2, [r4, #1]
 8008706:	2a2b      	cmp	r2, #43	@ 0x2b
 8008708:	d077      	beq.n	80087fa <_strtod_l+0x27a>
 800870a:	2a2d      	cmp	r2, #45	@ 0x2d
 800870c:	d07b      	beq.n	8008806 <_strtod_l+0x286>
 800870e:	f04f 0c00 	mov.w	ip, #0
 8008712:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008716:	2909      	cmp	r1, #9
 8008718:	f240 8082 	bls.w	8008820 <_strtod_l+0x2a0>
 800871c:	9419      	str	r4, [sp, #100]	@ 0x64
 800871e:	f04f 0800 	mov.w	r8, #0
 8008722:	e0a2      	b.n	800886a <_strtod_l+0x2ea>
 8008724:	2300      	movs	r3, #0
 8008726:	e7c7      	b.n	80086b8 <_strtod_l+0x138>
 8008728:	2f08      	cmp	r7, #8
 800872a:	bfd5      	itete	le
 800872c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800872e:	9908      	ldrgt	r1, [sp, #32]
 8008730:	fb02 3301 	mlale	r3, r2, r1, r3
 8008734:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008738:	f100 0001 	add.w	r0, r0, #1
 800873c:	bfd4      	ite	le
 800873e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008740:	9308      	strgt	r3, [sp, #32]
 8008742:	3701      	adds	r7, #1
 8008744:	9019      	str	r0, [sp, #100]	@ 0x64
 8008746:	e7bf      	b.n	80086c8 <_strtod_l+0x148>
 8008748:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	9219      	str	r2, [sp, #100]	@ 0x64
 800874e:	785a      	ldrb	r2, [r3, #1]
 8008750:	b37f      	cbz	r7, 80087b2 <_strtod_l+0x232>
 8008752:	4681      	mov	r9, r0
 8008754:	463d      	mov	r5, r7
 8008756:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800875a:	2b09      	cmp	r3, #9
 800875c:	d912      	bls.n	8008784 <_strtod_l+0x204>
 800875e:	2301      	movs	r3, #1
 8008760:	e7c4      	b.n	80086ec <_strtod_l+0x16c>
 8008762:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	9219      	str	r2, [sp, #100]	@ 0x64
 8008768:	785a      	ldrb	r2, [r3, #1]
 800876a:	3001      	adds	r0, #1
 800876c:	2a30      	cmp	r2, #48	@ 0x30
 800876e:	d0f8      	beq.n	8008762 <_strtod_l+0x1e2>
 8008770:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008774:	2b08      	cmp	r3, #8
 8008776:	f200 84d3 	bhi.w	8009120 <_strtod_l+0xba0>
 800877a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800877c:	930c      	str	r3, [sp, #48]	@ 0x30
 800877e:	4681      	mov	r9, r0
 8008780:	2000      	movs	r0, #0
 8008782:	4605      	mov	r5, r0
 8008784:	3a30      	subs	r2, #48	@ 0x30
 8008786:	f100 0301 	add.w	r3, r0, #1
 800878a:	d02a      	beq.n	80087e2 <_strtod_l+0x262>
 800878c:	4499      	add	r9, r3
 800878e:	eb00 0c05 	add.w	ip, r0, r5
 8008792:	462b      	mov	r3, r5
 8008794:	210a      	movs	r1, #10
 8008796:	4563      	cmp	r3, ip
 8008798:	d10d      	bne.n	80087b6 <_strtod_l+0x236>
 800879a:	1c69      	adds	r1, r5, #1
 800879c:	4401      	add	r1, r0
 800879e:	4428      	add	r0, r5
 80087a0:	2808      	cmp	r0, #8
 80087a2:	dc16      	bgt.n	80087d2 <_strtod_l+0x252>
 80087a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087a6:	230a      	movs	r3, #10
 80087a8:	fb03 2300 	mla	r3, r3, r0, r2
 80087ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80087ae:	2300      	movs	r3, #0
 80087b0:	e018      	b.n	80087e4 <_strtod_l+0x264>
 80087b2:	4638      	mov	r0, r7
 80087b4:	e7da      	b.n	800876c <_strtod_l+0x1ec>
 80087b6:	2b08      	cmp	r3, #8
 80087b8:	f103 0301 	add.w	r3, r3, #1
 80087bc:	dc03      	bgt.n	80087c6 <_strtod_l+0x246>
 80087be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80087c0:	434e      	muls	r6, r1
 80087c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80087c4:	e7e7      	b.n	8008796 <_strtod_l+0x216>
 80087c6:	2b10      	cmp	r3, #16
 80087c8:	bfde      	ittt	le
 80087ca:	9e08      	ldrle	r6, [sp, #32]
 80087cc:	434e      	mulle	r6, r1
 80087ce:	9608      	strle	r6, [sp, #32]
 80087d0:	e7e1      	b.n	8008796 <_strtod_l+0x216>
 80087d2:	280f      	cmp	r0, #15
 80087d4:	dceb      	bgt.n	80087ae <_strtod_l+0x22e>
 80087d6:	9808      	ldr	r0, [sp, #32]
 80087d8:	230a      	movs	r3, #10
 80087da:	fb03 2300 	mla	r3, r3, r0, r2
 80087de:	9308      	str	r3, [sp, #32]
 80087e0:	e7e5      	b.n	80087ae <_strtod_l+0x22e>
 80087e2:	4629      	mov	r1, r5
 80087e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087e6:	1c50      	adds	r0, r2, #1
 80087e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80087ea:	7852      	ldrb	r2, [r2, #1]
 80087ec:	4618      	mov	r0, r3
 80087ee:	460d      	mov	r5, r1
 80087f0:	e7b1      	b.n	8008756 <_strtod_l+0x1d6>
 80087f2:	f04f 0900 	mov.w	r9, #0
 80087f6:	2301      	movs	r3, #1
 80087f8:	e77d      	b.n	80086f6 <_strtod_l+0x176>
 80087fa:	f04f 0c00 	mov.w	ip, #0
 80087fe:	1ca2      	adds	r2, r4, #2
 8008800:	9219      	str	r2, [sp, #100]	@ 0x64
 8008802:	78a2      	ldrb	r2, [r4, #2]
 8008804:	e785      	b.n	8008712 <_strtod_l+0x192>
 8008806:	f04f 0c01 	mov.w	ip, #1
 800880a:	e7f8      	b.n	80087fe <_strtod_l+0x27e>
 800880c:	0800ceb4 	.word	0x0800ceb4
 8008810:	0800ce9c 	.word	0x0800ce9c
 8008814:	7ff00000 	.word	0x7ff00000
 8008818:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800881a:	1c51      	adds	r1, r2, #1
 800881c:	9119      	str	r1, [sp, #100]	@ 0x64
 800881e:	7852      	ldrb	r2, [r2, #1]
 8008820:	2a30      	cmp	r2, #48	@ 0x30
 8008822:	d0f9      	beq.n	8008818 <_strtod_l+0x298>
 8008824:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008828:	2908      	cmp	r1, #8
 800882a:	f63f af78 	bhi.w	800871e <_strtod_l+0x19e>
 800882e:	3a30      	subs	r2, #48	@ 0x30
 8008830:	920e      	str	r2, [sp, #56]	@ 0x38
 8008832:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008834:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008836:	f04f 080a 	mov.w	r8, #10
 800883a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800883c:	1c56      	adds	r6, r2, #1
 800883e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008840:	7852      	ldrb	r2, [r2, #1]
 8008842:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008846:	f1be 0f09 	cmp.w	lr, #9
 800884a:	d939      	bls.n	80088c0 <_strtod_l+0x340>
 800884c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800884e:	1a76      	subs	r6, r6, r1
 8008850:	2e08      	cmp	r6, #8
 8008852:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008856:	dc03      	bgt.n	8008860 <_strtod_l+0x2e0>
 8008858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800885a:	4588      	cmp	r8, r1
 800885c:	bfa8      	it	ge
 800885e:	4688      	movge	r8, r1
 8008860:	f1bc 0f00 	cmp.w	ip, #0
 8008864:	d001      	beq.n	800886a <_strtod_l+0x2ea>
 8008866:	f1c8 0800 	rsb	r8, r8, #0
 800886a:	2d00      	cmp	r5, #0
 800886c:	d14e      	bne.n	800890c <_strtod_l+0x38c>
 800886e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008870:	4308      	orrs	r0, r1
 8008872:	f47f aebe 	bne.w	80085f2 <_strtod_l+0x72>
 8008876:	2b00      	cmp	r3, #0
 8008878:	f47f aed6 	bne.w	8008628 <_strtod_l+0xa8>
 800887c:	2a69      	cmp	r2, #105	@ 0x69
 800887e:	d028      	beq.n	80088d2 <_strtod_l+0x352>
 8008880:	dc25      	bgt.n	80088ce <_strtod_l+0x34e>
 8008882:	2a49      	cmp	r2, #73	@ 0x49
 8008884:	d025      	beq.n	80088d2 <_strtod_l+0x352>
 8008886:	2a4e      	cmp	r2, #78	@ 0x4e
 8008888:	f47f aece 	bne.w	8008628 <_strtod_l+0xa8>
 800888c:	499b      	ldr	r1, [pc, #620]	@ (8008afc <_strtod_l+0x57c>)
 800888e:	a819      	add	r0, sp, #100	@ 0x64
 8008890:	f002 fe16 	bl	800b4c0 <__match>
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f aec7 	beq.w	8008628 <_strtod_l+0xa8>
 800889a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	2b28      	cmp	r3, #40	@ 0x28
 80088a0:	d12e      	bne.n	8008900 <_strtod_l+0x380>
 80088a2:	4997      	ldr	r1, [pc, #604]	@ (8008b00 <_strtod_l+0x580>)
 80088a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80088a6:	a819      	add	r0, sp, #100	@ 0x64
 80088a8:	f002 fe1e 	bl	800b4e8 <__hexnan>
 80088ac:	2805      	cmp	r0, #5
 80088ae:	d127      	bne.n	8008900 <_strtod_l+0x380>
 80088b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80088b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80088b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80088ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80088be:	e698      	b.n	80085f2 <_strtod_l+0x72>
 80088c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80088c2:	fb08 2101 	mla	r1, r8, r1, r2
 80088c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80088ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80088cc:	e7b5      	b.n	800883a <_strtod_l+0x2ba>
 80088ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80088d0:	e7da      	b.n	8008888 <_strtod_l+0x308>
 80088d2:	498c      	ldr	r1, [pc, #560]	@ (8008b04 <_strtod_l+0x584>)
 80088d4:	a819      	add	r0, sp, #100	@ 0x64
 80088d6:	f002 fdf3 	bl	800b4c0 <__match>
 80088da:	2800      	cmp	r0, #0
 80088dc:	f43f aea4 	beq.w	8008628 <_strtod_l+0xa8>
 80088e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e2:	4989      	ldr	r1, [pc, #548]	@ (8008b08 <_strtod_l+0x588>)
 80088e4:	3b01      	subs	r3, #1
 80088e6:	a819      	add	r0, sp, #100	@ 0x64
 80088e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80088ea:	f002 fde9 	bl	800b4c0 <__match>
 80088ee:	b910      	cbnz	r0, 80088f6 <_strtod_l+0x376>
 80088f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088f2:	3301      	adds	r3, #1
 80088f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80088f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008b18 <_strtod_l+0x598>
 80088fa:	f04f 0a00 	mov.w	sl, #0
 80088fe:	e678      	b.n	80085f2 <_strtod_l+0x72>
 8008900:	4882      	ldr	r0, [pc, #520]	@ (8008b0c <_strtod_l+0x58c>)
 8008902:	f001 fcad 	bl	800a260 <nan>
 8008906:	ec5b ab10 	vmov	sl, fp, d0
 800890a:	e672      	b.n	80085f2 <_strtod_l+0x72>
 800890c:	eba8 0309 	sub.w	r3, r8, r9
 8008910:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008912:	9309      	str	r3, [sp, #36]	@ 0x24
 8008914:	2f00      	cmp	r7, #0
 8008916:	bf08      	it	eq
 8008918:	462f      	moveq	r7, r5
 800891a:	2d10      	cmp	r5, #16
 800891c:	462c      	mov	r4, r5
 800891e:	bfa8      	it	ge
 8008920:	2410      	movge	r4, #16
 8008922:	f7f7 fe0f 	bl	8000544 <__aeabi_ui2d>
 8008926:	2d09      	cmp	r5, #9
 8008928:	4682      	mov	sl, r0
 800892a:	468b      	mov	fp, r1
 800892c:	dc13      	bgt.n	8008956 <_strtod_l+0x3d6>
 800892e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	f43f ae5e 	beq.w	80085f2 <_strtod_l+0x72>
 8008936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008938:	dd78      	ble.n	8008a2c <_strtod_l+0x4ac>
 800893a:	2b16      	cmp	r3, #22
 800893c:	dc5f      	bgt.n	80089fe <_strtod_l+0x47e>
 800893e:	4974      	ldr	r1, [pc, #464]	@ (8008b10 <_strtod_l+0x590>)
 8008940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008948:	4652      	mov	r2, sl
 800894a:	465b      	mov	r3, fp
 800894c:	f7f7 fe74 	bl	8000638 <__aeabi_dmul>
 8008950:	4682      	mov	sl, r0
 8008952:	468b      	mov	fp, r1
 8008954:	e64d      	b.n	80085f2 <_strtod_l+0x72>
 8008956:	4b6e      	ldr	r3, [pc, #440]	@ (8008b10 <_strtod_l+0x590>)
 8008958:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800895c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008960:	f7f7 fe6a 	bl	8000638 <__aeabi_dmul>
 8008964:	4682      	mov	sl, r0
 8008966:	9808      	ldr	r0, [sp, #32]
 8008968:	468b      	mov	fp, r1
 800896a:	f7f7 fdeb 	bl	8000544 <__aeabi_ui2d>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4650      	mov	r0, sl
 8008974:	4659      	mov	r1, fp
 8008976:	f7f7 fca9 	bl	80002cc <__adddf3>
 800897a:	2d0f      	cmp	r5, #15
 800897c:	4682      	mov	sl, r0
 800897e:	468b      	mov	fp, r1
 8008980:	ddd5      	ble.n	800892e <_strtod_l+0x3ae>
 8008982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008984:	1b2c      	subs	r4, r5, r4
 8008986:	441c      	add	r4, r3
 8008988:	2c00      	cmp	r4, #0
 800898a:	f340 8096 	ble.w	8008aba <_strtod_l+0x53a>
 800898e:	f014 030f 	ands.w	r3, r4, #15
 8008992:	d00a      	beq.n	80089aa <_strtod_l+0x42a>
 8008994:	495e      	ldr	r1, [pc, #376]	@ (8008b10 <_strtod_l+0x590>)
 8008996:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800899a:	4652      	mov	r2, sl
 800899c:	465b      	mov	r3, fp
 800899e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089a2:	f7f7 fe49 	bl	8000638 <__aeabi_dmul>
 80089a6:	4682      	mov	sl, r0
 80089a8:	468b      	mov	fp, r1
 80089aa:	f034 040f 	bics.w	r4, r4, #15
 80089ae:	d073      	beq.n	8008a98 <_strtod_l+0x518>
 80089b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80089b4:	dd48      	ble.n	8008a48 <_strtod_l+0x4c8>
 80089b6:	2400      	movs	r4, #0
 80089b8:	46a0      	mov	r8, r4
 80089ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80089bc:	46a1      	mov	r9, r4
 80089be:	9a05      	ldr	r2, [sp, #20]
 80089c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008b18 <_strtod_l+0x598>
 80089c4:	2322      	movs	r3, #34	@ 0x22
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	f04f 0a00 	mov.w	sl, #0
 80089cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f43f ae0f 	beq.w	80085f2 <_strtod_l+0x72>
 80089d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089d6:	9805      	ldr	r0, [sp, #20]
 80089d8:	f002 ff2a 	bl	800b830 <_Bfree>
 80089dc:	9805      	ldr	r0, [sp, #20]
 80089de:	4649      	mov	r1, r9
 80089e0:	f002 ff26 	bl	800b830 <_Bfree>
 80089e4:	9805      	ldr	r0, [sp, #20]
 80089e6:	4641      	mov	r1, r8
 80089e8:	f002 ff22 	bl	800b830 <_Bfree>
 80089ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089ee:	9805      	ldr	r0, [sp, #20]
 80089f0:	f002 ff1e 	bl	800b830 <_Bfree>
 80089f4:	9805      	ldr	r0, [sp, #20]
 80089f6:	4621      	mov	r1, r4
 80089f8:	f002 ff1a 	bl	800b830 <_Bfree>
 80089fc:	e5f9      	b.n	80085f2 <_strtod_l+0x72>
 80089fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008a04:	4293      	cmp	r3, r2
 8008a06:	dbbc      	blt.n	8008982 <_strtod_l+0x402>
 8008a08:	4c41      	ldr	r4, [pc, #260]	@ (8008b10 <_strtod_l+0x590>)
 8008a0a:	f1c5 050f 	rsb	r5, r5, #15
 8008a0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008a12:	4652      	mov	r2, sl
 8008a14:	465b      	mov	r3, fp
 8008a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a1a:	f7f7 fe0d 	bl	8000638 <__aeabi_dmul>
 8008a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a20:	1b5d      	subs	r5, r3, r5
 8008a22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008a2a:	e78f      	b.n	800894c <_strtod_l+0x3cc>
 8008a2c:	3316      	adds	r3, #22
 8008a2e:	dba8      	blt.n	8008982 <_strtod_l+0x402>
 8008a30:	4b37      	ldr	r3, [pc, #220]	@ (8008b10 <_strtod_l+0x590>)
 8008a32:	eba9 0808 	sub.w	r8, r9, r8
 8008a36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a3e:	4650      	mov	r0, sl
 8008a40:	4659      	mov	r1, fp
 8008a42:	f7f7 ff23 	bl	800088c <__aeabi_ddiv>
 8008a46:	e783      	b.n	8008950 <_strtod_l+0x3d0>
 8008a48:	4b32      	ldr	r3, [pc, #200]	@ (8008b14 <_strtod_l+0x594>)
 8008a4a:	9308      	str	r3, [sp, #32]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	1124      	asrs	r4, r4, #4
 8008a50:	4650      	mov	r0, sl
 8008a52:	4659      	mov	r1, fp
 8008a54:	461e      	mov	r6, r3
 8008a56:	2c01      	cmp	r4, #1
 8008a58:	dc21      	bgt.n	8008a9e <_strtod_l+0x51e>
 8008a5a:	b10b      	cbz	r3, 8008a60 <_strtod_l+0x4e0>
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	468b      	mov	fp, r1
 8008a60:	492c      	ldr	r1, [pc, #176]	@ (8008b14 <_strtod_l+0x594>)
 8008a62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a6a:	4652      	mov	r2, sl
 8008a6c:	465b      	mov	r3, fp
 8008a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a72:	f7f7 fde1 	bl	8000638 <__aeabi_dmul>
 8008a76:	4b28      	ldr	r3, [pc, #160]	@ (8008b18 <_strtod_l+0x598>)
 8008a78:	460a      	mov	r2, r1
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	4927      	ldr	r1, [pc, #156]	@ (8008b1c <_strtod_l+0x59c>)
 8008a7e:	428b      	cmp	r3, r1
 8008a80:	4682      	mov	sl, r0
 8008a82:	d898      	bhi.n	80089b6 <_strtod_l+0x436>
 8008a84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf86      	itte	hi
 8008a8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008b20 <_strtod_l+0x5a0>
 8008a90:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a98:	2300      	movs	r3, #0
 8008a9a:	9308      	str	r3, [sp, #32]
 8008a9c:	e07a      	b.n	8008b94 <_strtod_l+0x614>
 8008a9e:	07e2      	lsls	r2, r4, #31
 8008aa0:	d505      	bpl.n	8008aae <_strtod_l+0x52e>
 8008aa2:	9b08      	ldr	r3, [sp, #32]
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f7f7 fdc6 	bl	8000638 <__aeabi_dmul>
 8008aac:	2301      	movs	r3, #1
 8008aae:	9a08      	ldr	r2, [sp, #32]
 8008ab0:	3208      	adds	r2, #8
 8008ab2:	3601      	adds	r6, #1
 8008ab4:	1064      	asrs	r4, r4, #1
 8008ab6:	9208      	str	r2, [sp, #32]
 8008ab8:	e7cd      	b.n	8008a56 <_strtod_l+0x4d6>
 8008aba:	d0ed      	beq.n	8008a98 <_strtod_l+0x518>
 8008abc:	4264      	negs	r4, r4
 8008abe:	f014 020f 	ands.w	r2, r4, #15
 8008ac2:	d00a      	beq.n	8008ada <_strtod_l+0x55a>
 8008ac4:	4b12      	ldr	r3, [pc, #72]	@ (8008b10 <_strtod_l+0x590>)
 8008ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aca:	4650      	mov	r0, sl
 8008acc:	4659      	mov	r1, fp
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fedb 	bl	800088c <__aeabi_ddiv>
 8008ad6:	4682      	mov	sl, r0
 8008ad8:	468b      	mov	fp, r1
 8008ada:	1124      	asrs	r4, r4, #4
 8008adc:	d0dc      	beq.n	8008a98 <_strtod_l+0x518>
 8008ade:	2c1f      	cmp	r4, #31
 8008ae0:	dd20      	ble.n	8008b24 <_strtod_l+0x5a4>
 8008ae2:	2400      	movs	r4, #0
 8008ae4:	46a0      	mov	r8, r4
 8008ae6:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ae8:	46a1      	mov	r9, r4
 8008aea:	9a05      	ldr	r2, [sp, #20]
 8008aec:	2322      	movs	r3, #34	@ 0x22
 8008aee:	f04f 0a00 	mov.w	sl, #0
 8008af2:	f04f 0b00 	mov.w	fp, #0
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	e768      	b.n	80089cc <_strtod_l+0x44c>
 8008afa:	bf00      	nop
 8008afc:	0800cefd 	.word	0x0800cefd
 8008b00:	0800cea0 	.word	0x0800cea0
 8008b04:	0800cef5 	.word	0x0800cef5
 8008b08:	0800cf34 	.word	0x0800cf34
 8008b0c:	0800d2c5 	.word	0x0800d2c5
 8008b10:	0800d0b0 	.word	0x0800d0b0
 8008b14:	0800d088 	.word	0x0800d088
 8008b18:	7ff00000 	.word	0x7ff00000
 8008b1c:	7ca00000 	.word	0x7ca00000
 8008b20:	7fefffff 	.word	0x7fefffff
 8008b24:	f014 0310 	ands.w	r3, r4, #16
 8008b28:	bf18      	it	ne
 8008b2a:	236a      	movne	r3, #106	@ 0x6a
 8008b2c:	4ea9      	ldr	r6, [pc, #676]	@ (8008dd4 <_strtod_l+0x854>)
 8008b2e:	9308      	str	r3, [sp, #32]
 8008b30:	4650      	mov	r0, sl
 8008b32:	4659      	mov	r1, fp
 8008b34:	2300      	movs	r3, #0
 8008b36:	07e2      	lsls	r2, r4, #31
 8008b38:	d504      	bpl.n	8008b44 <_strtod_l+0x5c4>
 8008b3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b3e:	f7f7 fd7b 	bl	8000638 <__aeabi_dmul>
 8008b42:	2301      	movs	r3, #1
 8008b44:	1064      	asrs	r4, r4, #1
 8008b46:	f106 0608 	add.w	r6, r6, #8
 8008b4a:	d1f4      	bne.n	8008b36 <_strtod_l+0x5b6>
 8008b4c:	b10b      	cbz	r3, 8008b52 <_strtod_l+0x5d2>
 8008b4e:	4682      	mov	sl, r0
 8008b50:	468b      	mov	fp, r1
 8008b52:	9b08      	ldr	r3, [sp, #32]
 8008b54:	b1b3      	cbz	r3, 8008b84 <_strtod_l+0x604>
 8008b56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	4659      	mov	r1, fp
 8008b62:	dd0f      	ble.n	8008b84 <_strtod_l+0x604>
 8008b64:	2b1f      	cmp	r3, #31
 8008b66:	dd55      	ble.n	8008c14 <_strtod_l+0x694>
 8008b68:	2b34      	cmp	r3, #52	@ 0x34
 8008b6a:	bfde      	ittt	le
 8008b6c:	f04f 33ff 	movle.w	r3, #4294967295
 8008b70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008b74:	4093      	lslle	r3, r2
 8008b76:	f04f 0a00 	mov.w	sl, #0
 8008b7a:	bfcc      	ite	gt
 8008b7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b80:	ea03 0b01 	andle.w	fp, r3, r1
 8008b84:	2200      	movs	r2, #0
 8008b86:	2300      	movs	r3, #0
 8008b88:	4650      	mov	r0, sl
 8008b8a:	4659      	mov	r1, fp
 8008b8c:	f7f7 ffbc 	bl	8000b08 <__aeabi_dcmpeq>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d1a6      	bne.n	8008ae2 <_strtod_l+0x562>
 8008b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b9a:	9805      	ldr	r0, [sp, #20]
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	463a      	mov	r2, r7
 8008ba0:	f002 feae 	bl	800b900 <__s2b>
 8008ba4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f af05 	beq.w	80089b6 <_strtod_l+0x436>
 8008bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bae:	2a00      	cmp	r2, #0
 8008bb0:	eba9 0308 	sub.w	r3, r9, r8
 8008bb4:	bfa8      	it	ge
 8008bb6:	2300      	movge	r3, #0
 8008bb8:	9312      	str	r3, [sp, #72]	@ 0x48
 8008bba:	2400      	movs	r4, #0
 8008bbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008bc0:	9316      	str	r3, [sp, #88]	@ 0x58
 8008bc2:	46a0      	mov	r8, r4
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bc6:	9805      	ldr	r0, [sp, #20]
 8008bc8:	6859      	ldr	r1, [r3, #4]
 8008bca:	f002 fdf1 	bl	800b7b0 <_Balloc>
 8008bce:	4681      	mov	r9, r0
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f43f aef4 	beq.w	80089be <_strtod_l+0x43e>
 8008bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bd8:	691a      	ldr	r2, [r3, #16]
 8008bda:	3202      	adds	r2, #2
 8008bdc:	f103 010c 	add.w	r1, r3, #12
 8008be0:	0092      	lsls	r2, r2, #2
 8008be2:	300c      	adds	r0, #12
 8008be4:	f001 fb2b 	bl	800a23e <memcpy>
 8008be8:	ec4b ab10 	vmov	d0, sl, fp
 8008bec:	9805      	ldr	r0, [sp, #20]
 8008bee:	aa1c      	add	r2, sp, #112	@ 0x70
 8008bf0:	a91b      	add	r1, sp, #108	@ 0x6c
 8008bf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008bf6:	f003 f9bf 	bl	800bf78 <__d2b>
 8008bfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f43f aede 	beq.w	80089be <_strtod_l+0x43e>
 8008c02:	9805      	ldr	r0, [sp, #20]
 8008c04:	2101      	movs	r1, #1
 8008c06:	f002 ff11 	bl	800ba2c <__i2b>
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	b948      	cbnz	r0, 8008c22 <_strtod_l+0x6a2>
 8008c0e:	f04f 0800 	mov.w	r8, #0
 8008c12:	e6d4      	b.n	80089be <_strtod_l+0x43e>
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1c:	ea03 0a0a 	and.w	sl, r3, sl
 8008c20:	e7b0      	b.n	8008b84 <_strtod_l+0x604>
 8008c22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008c24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	bfab      	itete	ge
 8008c2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008c2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008c2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008c30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008c32:	bfac      	ite	ge
 8008c34:	18ef      	addge	r7, r5, r3
 8008c36:	1b5e      	sublt	r6, r3, r5
 8008c38:	9b08      	ldr	r3, [sp, #32]
 8008c3a:	1aed      	subs	r5, r5, r3
 8008c3c:	4415      	add	r5, r2
 8008c3e:	4b66      	ldr	r3, [pc, #408]	@ (8008dd8 <_strtod_l+0x858>)
 8008c40:	3d01      	subs	r5, #1
 8008c42:	429d      	cmp	r5, r3
 8008c44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c48:	da50      	bge.n	8008cec <_strtod_l+0x76c>
 8008c4a:	1b5b      	subs	r3, r3, r5
 8008c4c:	2b1f      	cmp	r3, #31
 8008c4e:	eba2 0203 	sub.w	r2, r2, r3
 8008c52:	f04f 0101 	mov.w	r1, #1
 8008c56:	dc3d      	bgt.n	8008cd4 <_strtod_l+0x754>
 8008c58:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c62:	18bd      	adds	r5, r7, r2
 8008c64:	9b08      	ldr	r3, [sp, #32]
 8008c66:	42af      	cmp	r7, r5
 8008c68:	4416      	add	r6, r2
 8008c6a:	441e      	add	r6, r3
 8008c6c:	463b      	mov	r3, r7
 8008c6e:	bfa8      	it	ge
 8008c70:	462b      	movge	r3, r5
 8008c72:	42b3      	cmp	r3, r6
 8008c74:	bfa8      	it	ge
 8008c76:	4633      	movge	r3, r6
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	bfc2      	ittt	gt
 8008c7c:	1aed      	subgt	r5, r5, r3
 8008c7e:	1af6      	subgt	r6, r6, r3
 8008c80:	1aff      	subgt	r7, r7, r3
 8008c82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	dd16      	ble.n	8008cb6 <_strtod_l+0x736>
 8008c88:	4641      	mov	r1, r8
 8008c8a:	9805      	ldr	r0, [sp, #20]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	f002 ff8d 	bl	800bbac <__pow5mult>
 8008c92:	4680      	mov	r8, r0
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d0ba      	beq.n	8008c0e <_strtod_l+0x68e>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c9c:	9805      	ldr	r0, [sp, #20]
 8008c9e:	f002 fedb 	bl	800ba58 <__multiply>
 8008ca2:	900e      	str	r0, [sp, #56]	@ 0x38
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f43f ae8a 	beq.w	80089be <_strtod_l+0x43e>
 8008caa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cac:	9805      	ldr	r0, [sp, #20]
 8008cae:	f002 fdbf 	bl	800b830 <_Bfree>
 8008cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cb6:	2d00      	cmp	r5, #0
 8008cb8:	dc1d      	bgt.n	8008cf6 <_strtod_l+0x776>
 8008cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dd23      	ble.n	8008d08 <_strtod_l+0x788>
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008cc4:	9805      	ldr	r0, [sp, #20]
 8008cc6:	f002 ff71 	bl	800bbac <__pow5mult>
 8008cca:	4681      	mov	r9, r0
 8008ccc:	b9e0      	cbnz	r0, 8008d08 <_strtod_l+0x788>
 8008cce:	f04f 0900 	mov.w	r9, #0
 8008cd2:	e674      	b.n	80089be <_strtod_l+0x43e>
 8008cd4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008cd8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008cdc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008ce0:	35e2      	adds	r5, #226	@ 0xe2
 8008ce2:	fa01 f305 	lsl.w	r3, r1, r5
 8008ce6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ce8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008cea:	e7ba      	b.n	8008c62 <_strtod_l+0x6e2>
 8008cec:	2300      	movs	r3, #0
 8008cee:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cf4:	e7b5      	b.n	8008c62 <_strtod_l+0x6e2>
 8008cf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cf8:	9805      	ldr	r0, [sp, #20]
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	f002 ffb0 	bl	800bc60 <__lshift>
 8008d00:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d1d9      	bne.n	8008cba <_strtod_l+0x73a>
 8008d06:	e65a      	b.n	80089be <_strtod_l+0x43e>
 8008d08:	2e00      	cmp	r6, #0
 8008d0a:	dd07      	ble.n	8008d1c <_strtod_l+0x79c>
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	9805      	ldr	r0, [sp, #20]
 8008d10:	4632      	mov	r2, r6
 8008d12:	f002 ffa5 	bl	800bc60 <__lshift>
 8008d16:	4681      	mov	r9, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d0d8      	beq.n	8008cce <_strtod_l+0x74e>
 8008d1c:	2f00      	cmp	r7, #0
 8008d1e:	dd08      	ble.n	8008d32 <_strtod_l+0x7b2>
 8008d20:	4641      	mov	r1, r8
 8008d22:	9805      	ldr	r0, [sp, #20]
 8008d24:	463a      	mov	r2, r7
 8008d26:	f002 ff9b 	bl	800bc60 <__lshift>
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f43f ae46 	beq.w	80089be <_strtod_l+0x43e>
 8008d32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d34:	9805      	ldr	r0, [sp, #20]
 8008d36:	464a      	mov	r2, r9
 8008d38:	f003 f81a 	bl	800bd70 <__mdiff>
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f ae3d 	beq.w	80089be <_strtod_l+0x43e>
 8008d44:	68c3      	ldr	r3, [r0, #12]
 8008d46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60c3      	str	r3, [r0, #12]
 8008d4c:	4641      	mov	r1, r8
 8008d4e:	f002 fff3 	bl	800bd38 <__mcmp>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	da46      	bge.n	8008de4 <_strtod_l+0x864>
 8008d56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d58:	ea53 030a 	orrs.w	r3, r3, sl
 8008d5c:	d16c      	bne.n	8008e38 <_strtod_l+0x8b8>
 8008d5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d168      	bne.n	8008e38 <_strtod_l+0x8b8>
 8008d66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d6a:	0d1b      	lsrs	r3, r3, #20
 8008d6c:	051b      	lsls	r3, r3, #20
 8008d6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d72:	d961      	bls.n	8008e38 <_strtod_l+0x8b8>
 8008d74:	6963      	ldr	r3, [r4, #20]
 8008d76:	b913      	cbnz	r3, 8008d7e <_strtod_l+0x7fe>
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	dd5c      	ble.n	8008e38 <_strtod_l+0x8b8>
 8008d7e:	4621      	mov	r1, r4
 8008d80:	2201      	movs	r2, #1
 8008d82:	9805      	ldr	r0, [sp, #20]
 8008d84:	f002 ff6c 	bl	800bc60 <__lshift>
 8008d88:	4641      	mov	r1, r8
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	f002 ffd4 	bl	800bd38 <__mcmp>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	dd51      	ble.n	8008e38 <_strtod_l+0x8b8>
 8008d94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d98:	9a08      	ldr	r2, [sp, #32]
 8008d9a:	0d1b      	lsrs	r3, r3, #20
 8008d9c:	051b      	lsls	r3, r3, #20
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	d06b      	beq.n	8008e7a <_strtod_l+0x8fa>
 8008da2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008da6:	d868      	bhi.n	8008e7a <_strtod_l+0x8fa>
 8008da8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008dac:	f67f ae9d 	bls.w	8008aea <_strtod_l+0x56a>
 8008db0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ddc <_strtod_l+0x85c>)
 8008db2:	4650      	mov	r0, sl
 8008db4:	4659      	mov	r1, fp
 8008db6:	2200      	movs	r2, #0
 8008db8:	f7f7 fc3e 	bl	8000638 <__aeabi_dmul>
 8008dbc:	4b08      	ldr	r3, [pc, #32]	@ (8008de0 <_strtod_l+0x860>)
 8008dbe:	400b      	ands	r3, r1
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	468b      	mov	fp, r1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f47f ae05 	bne.w	80089d4 <_strtod_l+0x454>
 8008dca:	9a05      	ldr	r2, [sp, #20]
 8008dcc:	2322      	movs	r3, #34	@ 0x22
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	e600      	b.n	80089d4 <_strtod_l+0x454>
 8008dd2:	bf00      	nop
 8008dd4:	0800cec8 	.word	0x0800cec8
 8008dd8:	fffffc02 	.word	0xfffffc02
 8008ddc:	39500000 	.word	0x39500000
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008de8:	d165      	bne.n	8008eb6 <_strtod_l+0x936>
 8008dea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008dec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008df0:	b35a      	cbz	r2, 8008e4a <_strtod_l+0x8ca>
 8008df2:	4a9f      	ldr	r2, [pc, #636]	@ (8009070 <_strtod_l+0xaf0>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d12b      	bne.n	8008e50 <_strtod_l+0x8d0>
 8008df8:	9b08      	ldr	r3, [sp, #32]
 8008dfa:	4651      	mov	r1, sl
 8008dfc:	b303      	cbz	r3, 8008e40 <_strtod_l+0x8c0>
 8008dfe:	4b9d      	ldr	r3, [pc, #628]	@ (8009074 <_strtod_l+0xaf4>)
 8008e00:	465a      	mov	r2, fp
 8008e02:	4013      	ands	r3, r2
 8008e04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008e08:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0c:	d81b      	bhi.n	8008e46 <_strtod_l+0x8c6>
 8008e0e:	0d1b      	lsrs	r3, r3, #20
 8008e10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e14:	fa02 f303 	lsl.w	r3, r2, r3
 8008e18:	4299      	cmp	r1, r3
 8008e1a:	d119      	bne.n	8008e50 <_strtod_l+0x8d0>
 8008e1c:	4b96      	ldr	r3, [pc, #600]	@ (8009078 <_strtod_l+0xaf8>)
 8008e1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d102      	bne.n	8008e2a <_strtod_l+0x8aa>
 8008e24:	3101      	adds	r1, #1
 8008e26:	f43f adca 	beq.w	80089be <_strtod_l+0x43e>
 8008e2a:	4b92      	ldr	r3, [pc, #584]	@ (8009074 <_strtod_l+0xaf4>)
 8008e2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e2e:	401a      	ands	r2, r3
 8008e30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008e34:	f04f 0a00 	mov.w	sl, #0
 8008e38:	9b08      	ldr	r3, [sp, #32]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1b8      	bne.n	8008db0 <_strtod_l+0x830>
 8008e3e:	e5c9      	b.n	80089d4 <_strtod_l+0x454>
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295
 8008e44:	e7e8      	b.n	8008e18 <_strtod_l+0x898>
 8008e46:	4613      	mov	r3, r2
 8008e48:	e7e6      	b.n	8008e18 <_strtod_l+0x898>
 8008e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8008e4e:	d0a1      	beq.n	8008d94 <_strtod_l+0x814>
 8008e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e52:	b1db      	cbz	r3, 8008e8c <_strtod_l+0x90c>
 8008e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e56:	4213      	tst	r3, r2
 8008e58:	d0ee      	beq.n	8008e38 <_strtod_l+0x8b8>
 8008e5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5c:	9a08      	ldr	r2, [sp, #32]
 8008e5e:	4650      	mov	r0, sl
 8008e60:	4659      	mov	r1, fp
 8008e62:	b1bb      	cbz	r3, 8008e94 <_strtod_l+0x914>
 8008e64:	f7ff fb6d 	bl	8008542 <sulp>
 8008e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e6c:	ec53 2b10 	vmov	r2, r3, d0
 8008e70:	f7f7 fa2c 	bl	80002cc <__adddf3>
 8008e74:	4682      	mov	sl, r0
 8008e76:	468b      	mov	fp, r1
 8008e78:	e7de      	b.n	8008e38 <_strtod_l+0x8b8>
 8008e7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e86:	f04f 3aff 	mov.w	sl, #4294967295
 8008e8a:	e7d5      	b.n	8008e38 <_strtod_l+0x8b8>
 8008e8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e8e:	ea13 0f0a 	tst.w	r3, sl
 8008e92:	e7e1      	b.n	8008e58 <_strtod_l+0x8d8>
 8008e94:	f7ff fb55 	bl	8008542 <sulp>
 8008e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e9c:	ec53 2b10 	vmov	r2, r3, d0
 8008ea0:	f7f7 fa12 	bl	80002c8 <__aeabi_dsub>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	f7f7 fe2c 	bl	8000b08 <__aeabi_dcmpeq>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d0c1      	beq.n	8008e38 <_strtod_l+0x8b8>
 8008eb4:	e619      	b.n	8008aea <_strtod_l+0x56a>
 8008eb6:	4641      	mov	r1, r8
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f003 f8b5 	bl	800c028 <__ratio>
 8008ebe:	ec57 6b10 	vmov	r6, r7, d0
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 fe30 	bl	8000b30 <__aeabi_dcmple>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d06f      	beq.n	8008fb4 <_strtod_l+0xa34>
 8008ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d17a      	bne.n	8008fd0 <_strtod_l+0xa50>
 8008eda:	f1ba 0f00 	cmp.w	sl, #0
 8008ede:	d158      	bne.n	8008f92 <_strtod_l+0xa12>
 8008ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d15a      	bne.n	8008fa0 <_strtod_l+0xa20>
 8008eea:	4b64      	ldr	r3, [pc, #400]	@ (800907c <_strtod_l+0xafc>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	4630      	mov	r0, r6
 8008ef0:	4639      	mov	r1, r7
 8008ef2:	f7f7 fe13 	bl	8000b1c <__aeabi_dcmplt>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d159      	bne.n	8008fae <_strtod_l+0xa2e>
 8008efa:	4630      	mov	r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	4b60      	ldr	r3, [pc, #384]	@ (8009080 <_strtod_l+0xb00>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	f7f7 fb99 	bl	8000638 <__aeabi_dmul>
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008f0e:	9606      	str	r6, [sp, #24]
 8008f10:	9307      	str	r3, [sp, #28]
 8008f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f16:	4d57      	ldr	r5, [pc, #348]	@ (8009074 <_strtod_l+0xaf4>)
 8008f18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f1e:	401d      	ands	r5, r3
 8008f20:	4b58      	ldr	r3, [pc, #352]	@ (8009084 <_strtod_l+0xb04>)
 8008f22:	429d      	cmp	r5, r3
 8008f24:	f040 80b2 	bne.w	800908c <_strtod_l+0xb0c>
 8008f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008f2e:	ec4b ab10 	vmov	d0, sl, fp
 8008f32:	f002 ffb1 	bl	800be98 <__ulp>
 8008f36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f3a:	ec51 0b10 	vmov	r0, r1, d0
 8008f3e:	f7f7 fb7b 	bl	8000638 <__aeabi_dmul>
 8008f42:	4652      	mov	r2, sl
 8008f44:	465b      	mov	r3, fp
 8008f46:	f7f7 f9c1 	bl	80002cc <__adddf3>
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4949      	ldr	r1, [pc, #292]	@ (8009074 <_strtod_l+0xaf4>)
 8008f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8009088 <_strtod_l+0xb08>)
 8008f50:	4019      	ands	r1, r3
 8008f52:	4291      	cmp	r1, r2
 8008f54:	4682      	mov	sl, r0
 8008f56:	d942      	bls.n	8008fde <_strtod_l+0xa5e>
 8008f58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f5a:	4b47      	ldr	r3, [pc, #284]	@ (8009078 <_strtod_l+0xaf8>)
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d103      	bne.n	8008f68 <_strtod_l+0x9e8>
 8008f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f62:	3301      	adds	r3, #1
 8008f64:	f43f ad2b 	beq.w	80089be <_strtod_l+0x43e>
 8008f68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009078 <_strtod_l+0xaf8>
 8008f6c:	f04f 3aff 	mov.w	sl, #4294967295
 8008f70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f72:	9805      	ldr	r0, [sp, #20]
 8008f74:	f002 fc5c 	bl	800b830 <_Bfree>
 8008f78:	9805      	ldr	r0, [sp, #20]
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f002 fc58 	bl	800b830 <_Bfree>
 8008f80:	9805      	ldr	r0, [sp, #20]
 8008f82:	4641      	mov	r1, r8
 8008f84:	f002 fc54 	bl	800b830 <_Bfree>
 8008f88:	9805      	ldr	r0, [sp, #20]
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	f002 fc50 	bl	800b830 <_Bfree>
 8008f90:	e618      	b.n	8008bc4 <_strtod_l+0x644>
 8008f92:	f1ba 0f01 	cmp.w	sl, #1
 8008f96:	d103      	bne.n	8008fa0 <_strtod_l+0xa20>
 8008f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f43f ada5 	beq.w	8008aea <_strtod_l+0x56a>
 8008fa0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009050 <_strtod_l+0xad0>
 8008fa4:	4f35      	ldr	r7, [pc, #212]	@ (800907c <_strtod_l+0xafc>)
 8008fa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008faa:	2600      	movs	r6, #0
 8008fac:	e7b1      	b.n	8008f12 <_strtod_l+0x992>
 8008fae:	4f34      	ldr	r7, [pc, #208]	@ (8009080 <_strtod_l+0xb00>)
 8008fb0:	2600      	movs	r6, #0
 8008fb2:	e7aa      	b.n	8008f0a <_strtod_l+0x98a>
 8008fb4:	4b32      	ldr	r3, [pc, #200]	@ (8009080 <_strtod_l+0xb00>)
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	4639      	mov	r1, r7
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f7f7 fb3c 	bl	8000638 <__aeabi_dmul>
 8008fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d09f      	beq.n	8008f0a <_strtod_l+0x98a>
 8008fca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008fce:	e7a0      	b.n	8008f12 <_strtod_l+0x992>
 8008fd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009058 <_strtod_l+0xad8>
 8008fd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fd8:	ec57 6b17 	vmov	r6, r7, d7
 8008fdc:	e799      	b.n	8008f12 <_strtod_l+0x992>
 8008fde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1c1      	bne.n	8008f70 <_strtod_l+0x9f0>
 8008fec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ff0:	0d1b      	lsrs	r3, r3, #20
 8008ff2:	051b      	lsls	r3, r3, #20
 8008ff4:	429d      	cmp	r5, r3
 8008ff6:	d1bb      	bne.n	8008f70 <_strtod_l+0x9f0>
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f7f7 fe7c 	bl	8000cf8 <__aeabi_d2lz>
 8009000:	f7f7 faec 	bl	80005dc <__aeabi_l2d>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4630      	mov	r0, r6
 800900a:	4639      	mov	r1, r7
 800900c:	f7f7 f95c 	bl	80002c8 <__aeabi_dsub>
 8009010:	460b      	mov	r3, r1
 8009012:	4602      	mov	r2, r0
 8009014:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009018:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800901c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800901e:	ea46 060a 	orr.w	r6, r6, sl
 8009022:	431e      	orrs	r6, r3
 8009024:	d06f      	beq.n	8009106 <_strtod_l+0xb86>
 8009026:	a30e      	add	r3, pc, #56	@ (adr r3, 8009060 <_strtod_l+0xae0>)
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 fd76 	bl	8000b1c <__aeabi_dcmplt>
 8009030:	2800      	cmp	r0, #0
 8009032:	f47f accf 	bne.w	80089d4 <_strtod_l+0x454>
 8009036:	a30c      	add	r3, pc, #48	@ (adr r3, 8009068 <_strtod_l+0xae8>)
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009040:	f7f7 fd8a 	bl	8000b58 <__aeabi_dcmpgt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d093      	beq.n	8008f70 <_strtod_l+0x9f0>
 8009048:	e4c4      	b.n	80089d4 <_strtod_l+0x454>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
 8009050:	00000000 	.word	0x00000000
 8009054:	bff00000 	.word	0xbff00000
 8009058:	00000000 	.word	0x00000000
 800905c:	3ff00000 	.word	0x3ff00000
 8009060:	94a03595 	.word	0x94a03595
 8009064:	3fdfffff 	.word	0x3fdfffff
 8009068:	35afe535 	.word	0x35afe535
 800906c:	3fe00000 	.word	0x3fe00000
 8009070:	000fffff 	.word	0x000fffff
 8009074:	7ff00000 	.word	0x7ff00000
 8009078:	7fefffff 	.word	0x7fefffff
 800907c:	3ff00000 	.word	0x3ff00000
 8009080:	3fe00000 	.word	0x3fe00000
 8009084:	7fe00000 	.word	0x7fe00000
 8009088:	7c9fffff 	.word	0x7c9fffff
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	b323      	cbz	r3, 80090da <_strtod_l+0xb5a>
 8009090:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009094:	d821      	bhi.n	80090da <_strtod_l+0xb5a>
 8009096:	a328      	add	r3, pc, #160	@ (adr r3, 8009138 <_strtod_l+0xbb8>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	4630      	mov	r0, r6
 800909e:	4639      	mov	r1, r7
 80090a0:	f7f7 fd46 	bl	8000b30 <__aeabi_dcmple>
 80090a4:	b1a0      	cbz	r0, 80090d0 <_strtod_l+0xb50>
 80090a6:	4639      	mov	r1, r7
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7f7 fd9d 	bl	8000be8 <__aeabi_d2uiz>
 80090ae:	2801      	cmp	r0, #1
 80090b0:	bf38      	it	cc
 80090b2:	2001      	movcc	r0, #1
 80090b4:	f7f7 fa46 	bl	8000544 <__aeabi_ui2d>
 80090b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ba:	4606      	mov	r6, r0
 80090bc:	460f      	mov	r7, r1
 80090be:	b9fb      	cbnz	r3, 8009100 <_strtod_l+0xb80>
 80090c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80090c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80090c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80090cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80090d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80090d6:	1b5b      	subs	r3, r3, r5
 80090d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80090da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80090de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80090e2:	f002 fed9 	bl	800be98 <__ulp>
 80090e6:	4650      	mov	r0, sl
 80090e8:	ec53 2b10 	vmov	r2, r3, d0
 80090ec:	4659      	mov	r1, fp
 80090ee:	f7f7 faa3 	bl	8000638 <__aeabi_dmul>
 80090f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090f6:	f7f7 f8e9 	bl	80002cc <__adddf3>
 80090fa:	4682      	mov	sl, r0
 80090fc:	468b      	mov	fp, r1
 80090fe:	e770      	b.n	8008fe2 <_strtod_l+0xa62>
 8009100:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009104:	e7e0      	b.n	80090c8 <_strtod_l+0xb48>
 8009106:	a30e      	add	r3, pc, #56	@ (adr r3, 8009140 <_strtod_l+0xbc0>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 fd06 	bl	8000b1c <__aeabi_dcmplt>
 8009110:	e798      	b.n	8009044 <_strtod_l+0xac4>
 8009112:	2300      	movs	r3, #0
 8009114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009116:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	f7ff ba6d 	b.w	80085fa <_strtod_l+0x7a>
 8009120:	2a65      	cmp	r2, #101	@ 0x65
 8009122:	f43f ab66 	beq.w	80087f2 <_strtod_l+0x272>
 8009126:	2a45      	cmp	r2, #69	@ 0x45
 8009128:	f43f ab63 	beq.w	80087f2 <_strtod_l+0x272>
 800912c:	2301      	movs	r3, #1
 800912e:	f7ff bb9e 	b.w	800886e <_strtod_l+0x2ee>
 8009132:	bf00      	nop
 8009134:	f3af 8000 	nop.w
 8009138:	ffc00000 	.word	0xffc00000
 800913c:	41dfffff 	.word	0x41dfffff
 8009140:	94a03595 	.word	0x94a03595
 8009144:	3fcfffff 	.word	0x3fcfffff

08009148 <_strtod_r>:
 8009148:	4b01      	ldr	r3, [pc, #4]	@ (8009150 <_strtod_r+0x8>)
 800914a:	f7ff ba19 	b.w	8008580 <_strtod_l>
 800914e:	bf00      	nop
 8009150:	200000a4 	.word	0x200000a4

08009154 <strtod>:
 8009154:	460a      	mov	r2, r1
 8009156:	4601      	mov	r1, r0
 8009158:	4802      	ldr	r0, [pc, #8]	@ (8009164 <strtod+0x10>)
 800915a:	4b03      	ldr	r3, [pc, #12]	@ (8009168 <strtod+0x14>)
 800915c:	6800      	ldr	r0, [r0, #0]
 800915e:	f7ff ba0f 	b.w	8008580 <_strtod_l>
 8009162:	bf00      	nop
 8009164:	20000210 	.word	0x20000210
 8009168:	200000a4 	.word	0x200000a4

0800916c <__cvt>:
 800916c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009170:	ec57 6b10 	vmov	r6, r7, d0
 8009174:	2f00      	cmp	r7, #0
 8009176:	460c      	mov	r4, r1
 8009178:	4619      	mov	r1, r3
 800917a:	463b      	mov	r3, r7
 800917c:	bfbb      	ittet	lt
 800917e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009182:	461f      	movlt	r7, r3
 8009184:	2300      	movge	r3, #0
 8009186:	232d      	movlt	r3, #45	@ 0x2d
 8009188:	700b      	strb	r3, [r1, #0]
 800918a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800918c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009190:	4691      	mov	r9, r2
 8009192:	f023 0820 	bic.w	r8, r3, #32
 8009196:	bfbc      	itt	lt
 8009198:	4632      	movlt	r2, r6
 800919a:	4616      	movlt	r6, r2
 800919c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091a0:	d005      	beq.n	80091ae <__cvt+0x42>
 80091a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80091a6:	d100      	bne.n	80091aa <__cvt+0x3e>
 80091a8:	3401      	adds	r4, #1
 80091aa:	2102      	movs	r1, #2
 80091ac:	e000      	b.n	80091b0 <__cvt+0x44>
 80091ae:	2103      	movs	r1, #3
 80091b0:	ab03      	add	r3, sp, #12
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	ab02      	add	r3, sp, #8
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	ec47 6b10 	vmov	d0, r6, r7
 80091bc:	4653      	mov	r3, sl
 80091be:	4622      	mov	r2, r4
 80091c0:	f001 f8e6 	bl	800a390 <_dtoa_r>
 80091c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80091c8:	4605      	mov	r5, r0
 80091ca:	d119      	bne.n	8009200 <__cvt+0x94>
 80091cc:	f019 0f01 	tst.w	r9, #1
 80091d0:	d00e      	beq.n	80091f0 <__cvt+0x84>
 80091d2:	eb00 0904 	add.w	r9, r0, r4
 80091d6:	2200      	movs	r2, #0
 80091d8:	2300      	movs	r3, #0
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 fc93 	bl	8000b08 <__aeabi_dcmpeq>
 80091e2:	b108      	cbz	r0, 80091e8 <__cvt+0x7c>
 80091e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80091e8:	2230      	movs	r2, #48	@ 0x30
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	454b      	cmp	r3, r9
 80091ee:	d31e      	bcc.n	800922e <__cvt+0xc2>
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091f4:	1b5b      	subs	r3, r3, r5
 80091f6:	4628      	mov	r0, r5
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	b004      	add	sp, #16
 80091fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009200:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009204:	eb00 0904 	add.w	r9, r0, r4
 8009208:	d1e5      	bne.n	80091d6 <__cvt+0x6a>
 800920a:	7803      	ldrb	r3, [r0, #0]
 800920c:	2b30      	cmp	r3, #48	@ 0x30
 800920e:	d10a      	bne.n	8009226 <__cvt+0xba>
 8009210:	2200      	movs	r2, #0
 8009212:	2300      	movs	r3, #0
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f7f7 fc76 	bl	8000b08 <__aeabi_dcmpeq>
 800921c:	b918      	cbnz	r0, 8009226 <__cvt+0xba>
 800921e:	f1c4 0401 	rsb	r4, r4, #1
 8009222:	f8ca 4000 	str.w	r4, [sl]
 8009226:	f8da 3000 	ldr.w	r3, [sl]
 800922a:	4499      	add	r9, r3
 800922c:	e7d3      	b.n	80091d6 <__cvt+0x6a>
 800922e:	1c59      	adds	r1, r3, #1
 8009230:	9103      	str	r1, [sp, #12]
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	e7d9      	b.n	80091ea <__cvt+0x7e>

08009236 <__exponent>:
 8009236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009238:	2900      	cmp	r1, #0
 800923a:	bfba      	itte	lt
 800923c:	4249      	neglt	r1, r1
 800923e:	232d      	movlt	r3, #45	@ 0x2d
 8009240:	232b      	movge	r3, #43	@ 0x2b
 8009242:	2909      	cmp	r1, #9
 8009244:	7002      	strb	r2, [r0, #0]
 8009246:	7043      	strb	r3, [r0, #1]
 8009248:	dd29      	ble.n	800929e <__exponent+0x68>
 800924a:	f10d 0307 	add.w	r3, sp, #7
 800924e:	461d      	mov	r5, r3
 8009250:	270a      	movs	r7, #10
 8009252:	461a      	mov	r2, r3
 8009254:	fbb1 f6f7 	udiv	r6, r1, r7
 8009258:	fb07 1416 	mls	r4, r7, r6, r1
 800925c:	3430      	adds	r4, #48	@ 0x30
 800925e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009262:	460c      	mov	r4, r1
 8009264:	2c63      	cmp	r4, #99	@ 0x63
 8009266:	f103 33ff 	add.w	r3, r3, #4294967295
 800926a:	4631      	mov	r1, r6
 800926c:	dcf1      	bgt.n	8009252 <__exponent+0x1c>
 800926e:	3130      	adds	r1, #48	@ 0x30
 8009270:	1e94      	subs	r4, r2, #2
 8009272:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009276:	1c41      	adds	r1, r0, #1
 8009278:	4623      	mov	r3, r4
 800927a:	42ab      	cmp	r3, r5
 800927c:	d30a      	bcc.n	8009294 <__exponent+0x5e>
 800927e:	f10d 0309 	add.w	r3, sp, #9
 8009282:	1a9b      	subs	r3, r3, r2
 8009284:	42ac      	cmp	r4, r5
 8009286:	bf88      	it	hi
 8009288:	2300      	movhi	r3, #0
 800928a:	3302      	adds	r3, #2
 800928c:	4403      	add	r3, r0
 800928e:	1a18      	subs	r0, r3, r0
 8009290:	b003      	add	sp, #12
 8009292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009294:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009298:	f801 6f01 	strb.w	r6, [r1, #1]!
 800929c:	e7ed      	b.n	800927a <__exponent+0x44>
 800929e:	2330      	movs	r3, #48	@ 0x30
 80092a0:	3130      	adds	r1, #48	@ 0x30
 80092a2:	7083      	strb	r3, [r0, #2]
 80092a4:	70c1      	strb	r1, [r0, #3]
 80092a6:	1d03      	adds	r3, r0, #4
 80092a8:	e7f1      	b.n	800928e <__exponent+0x58>
	...

080092ac <_printf_float>:
 80092ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b0:	b08d      	sub	sp, #52	@ 0x34
 80092b2:	460c      	mov	r4, r1
 80092b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80092b8:	4616      	mov	r6, r2
 80092ba:	461f      	mov	r7, r3
 80092bc:	4605      	mov	r5, r0
 80092be:	f000 ff47 	bl	800a150 <_localeconv_r>
 80092c2:	6803      	ldr	r3, [r0, #0]
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7f6 fff2 	bl	80002b0 <strlen>
 80092cc:	2300      	movs	r3, #0
 80092ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80092d0:	f8d8 3000 	ldr.w	r3, [r8]
 80092d4:	9005      	str	r0, [sp, #20]
 80092d6:	3307      	adds	r3, #7
 80092d8:	f023 0307 	bic.w	r3, r3, #7
 80092dc:	f103 0208 	add.w	r2, r3, #8
 80092e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80092e4:	f8d4 b000 	ldr.w	fp, [r4]
 80092e8:	f8c8 2000 	str.w	r2, [r8]
 80092ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80092f4:	9307      	str	r3, [sp, #28]
 80092f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80092fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80092fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009302:	4b9c      	ldr	r3, [pc, #624]	@ (8009574 <_printf_float+0x2c8>)
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	f7f7 fc30 	bl	8000b6c <__aeabi_dcmpun>
 800930c:	bb70      	cbnz	r0, 800936c <_printf_float+0xc0>
 800930e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009312:	4b98      	ldr	r3, [pc, #608]	@ (8009574 <_printf_float+0x2c8>)
 8009314:	f04f 32ff 	mov.w	r2, #4294967295
 8009318:	f7f7 fc0a 	bl	8000b30 <__aeabi_dcmple>
 800931c:	bb30      	cbnz	r0, 800936c <_printf_float+0xc0>
 800931e:	2200      	movs	r2, #0
 8009320:	2300      	movs	r3, #0
 8009322:	4640      	mov	r0, r8
 8009324:	4649      	mov	r1, r9
 8009326:	f7f7 fbf9 	bl	8000b1c <__aeabi_dcmplt>
 800932a:	b110      	cbz	r0, 8009332 <_printf_float+0x86>
 800932c:	232d      	movs	r3, #45	@ 0x2d
 800932e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009332:	4a91      	ldr	r2, [pc, #580]	@ (8009578 <_printf_float+0x2cc>)
 8009334:	4b91      	ldr	r3, [pc, #580]	@ (800957c <_printf_float+0x2d0>)
 8009336:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800933a:	bf94      	ite	ls
 800933c:	4690      	movls	r8, r2
 800933e:	4698      	movhi	r8, r3
 8009340:	2303      	movs	r3, #3
 8009342:	6123      	str	r3, [r4, #16]
 8009344:	f02b 0304 	bic.w	r3, fp, #4
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	f04f 0900 	mov.w	r9, #0
 800934e:	9700      	str	r7, [sp, #0]
 8009350:	4633      	mov	r3, r6
 8009352:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009354:	4621      	mov	r1, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f000 f9d2 	bl	8009700 <_printf_common>
 800935c:	3001      	adds	r0, #1
 800935e:	f040 808d 	bne.w	800947c <_printf_float+0x1d0>
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	b00d      	add	sp, #52	@ 0x34
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	4640      	mov	r0, r8
 8009372:	4649      	mov	r1, r9
 8009374:	f7f7 fbfa 	bl	8000b6c <__aeabi_dcmpun>
 8009378:	b140      	cbz	r0, 800938c <_printf_float+0xe0>
 800937a:	464b      	mov	r3, r9
 800937c:	2b00      	cmp	r3, #0
 800937e:	bfbc      	itt	lt
 8009380:	232d      	movlt	r3, #45	@ 0x2d
 8009382:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009386:	4a7e      	ldr	r2, [pc, #504]	@ (8009580 <_printf_float+0x2d4>)
 8009388:	4b7e      	ldr	r3, [pc, #504]	@ (8009584 <_printf_float+0x2d8>)
 800938a:	e7d4      	b.n	8009336 <_printf_float+0x8a>
 800938c:	6863      	ldr	r3, [r4, #4]
 800938e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009392:	9206      	str	r2, [sp, #24]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	d13b      	bne.n	8009410 <_printf_float+0x164>
 8009398:	2306      	movs	r3, #6
 800939a:	6063      	str	r3, [r4, #4]
 800939c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80093a0:	2300      	movs	r3, #0
 80093a2:	6022      	str	r2, [r4, #0]
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80093a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80093ac:	ab09      	add	r3, sp, #36	@ 0x24
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	6861      	ldr	r1, [r4, #4]
 80093b2:	ec49 8b10 	vmov	d0, r8, r9
 80093b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7ff fed6 	bl	800916c <__cvt>
 80093c0:	9b06      	ldr	r3, [sp, #24]
 80093c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093c4:	2b47      	cmp	r3, #71	@ 0x47
 80093c6:	4680      	mov	r8, r0
 80093c8:	d129      	bne.n	800941e <_printf_float+0x172>
 80093ca:	1cc8      	adds	r0, r1, #3
 80093cc:	db02      	blt.n	80093d4 <_printf_float+0x128>
 80093ce:	6863      	ldr	r3, [r4, #4]
 80093d0:	4299      	cmp	r1, r3
 80093d2:	dd41      	ble.n	8009458 <_printf_float+0x1ac>
 80093d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80093d8:	fa5f fa8a 	uxtb.w	sl, sl
 80093dc:	3901      	subs	r1, #1
 80093de:	4652      	mov	r2, sl
 80093e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80093e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80093e6:	f7ff ff26 	bl	8009236 <__exponent>
 80093ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093ec:	1813      	adds	r3, r2, r0
 80093ee:	2a01      	cmp	r2, #1
 80093f0:	4681      	mov	r9, r0
 80093f2:	6123      	str	r3, [r4, #16]
 80093f4:	dc02      	bgt.n	80093fc <_printf_float+0x150>
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	07d2      	lsls	r2, r2, #31
 80093fa:	d501      	bpl.n	8009400 <_printf_float+0x154>
 80093fc:	3301      	adds	r3, #1
 80093fe:	6123      	str	r3, [r4, #16]
 8009400:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009404:	2b00      	cmp	r3, #0
 8009406:	d0a2      	beq.n	800934e <_printf_float+0xa2>
 8009408:	232d      	movs	r3, #45	@ 0x2d
 800940a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800940e:	e79e      	b.n	800934e <_printf_float+0xa2>
 8009410:	9a06      	ldr	r2, [sp, #24]
 8009412:	2a47      	cmp	r2, #71	@ 0x47
 8009414:	d1c2      	bne.n	800939c <_printf_float+0xf0>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1c0      	bne.n	800939c <_printf_float+0xf0>
 800941a:	2301      	movs	r3, #1
 800941c:	e7bd      	b.n	800939a <_printf_float+0xee>
 800941e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009422:	d9db      	bls.n	80093dc <_printf_float+0x130>
 8009424:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009428:	d118      	bne.n	800945c <_printf_float+0x1b0>
 800942a:	2900      	cmp	r1, #0
 800942c:	6863      	ldr	r3, [r4, #4]
 800942e:	dd0b      	ble.n	8009448 <_printf_float+0x19c>
 8009430:	6121      	str	r1, [r4, #16]
 8009432:	b913      	cbnz	r3, 800943a <_printf_float+0x18e>
 8009434:	6822      	ldr	r2, [r4, #0]
 8009436:	07d0      	lsls	r0, r2, #31
 8009438:	d502      	bpl.n	8009440 <_printf_float+0x194>
 800943a:	3301      	adds	r3, #1
 800943c:	440b      	add	r3, r1
 800943e:	6123      	str	r3, [r4, #16]
 8009440:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009442:	f04f 0900 	mov.w	r9, #0
 8009446:	e7db      	b.n	8009400 <_printf_float+0x154>
 8009448:	b913      	cbnz	r3, 8009450 <_printf_float+0x1a4>
 800944a:	6822      	ldr	r2, [r4, #0]
 800944c:	07d2      	lsls	r2, r2, #31
 800944e:	d501      	bpl.n	8009454 <_printf_float+0x1a8>
 8009450:	3302      	adds	r3, #2
 8009452:	e7f4      	b.n	800943e <_printf_float+0x192>
 8009454:	2301      	movs	r3, #1
 8009456:	e7f2      	b.n	800943e <_printf_float+0x192>
 8009458:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800945c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800945e:	4299      	cmp	r1, r3
 8009460:	db05      	blt.n	800946e <_printf_float+0x1c2>
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	6121      	str	r1, [r4, #16]
 8009466:	07d8      	lsls	r0, r3, #31
 8009468:	d5ea      	bpl.n	8009440 <_printf_float+0x194>
 800946a:	1c4b      	adds	r3, r1, #1
 800946c:	e7e7      	b.n	800943e <_printf_float+0x192>
 800946e:	2900      	cmp	r1, #0
 8009470:	bfd4      	ite	le
 8009472:	f1c1 0202 	rsble	r2, r1, #2
 8009476:	2201      	movgt	r2, #1
 8009478:	4413      	add	r3, r2
 800947a:	e7e0      	b.n	800943e <_printf_float+0x192>
 800947c:	6823      	ldr	r3, [r4, #0]
 800947e:	055a      	lsls	r2, r3, #21
 8009480:	d407      	bmi.n	8009492 <_printf_float+0x1e6>
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	4642      	mov	r2, r8
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	d12b      	bne.n	80094e8 <_printf_float+0x23c>
 8009490:	e767      	b.n	8009362 <_printf_float+0xb6>
 8009492:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009496:	f240 80dd 	bls.w	8009654 <_printf_float+0x3a8>
 800949a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800949e:	2200      	movs	r2, #0
 80094a0:	2300      	movs	r3, #0
 80094a2:	f7f7 fb31 	bl	8000b08 <__aeabi_dcmpeq>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d033      	beq.n	8009512 <_printf_float+0x266>
 80094aa:	4a37      	ldr	r2, [pc, #220]	@ (8009588 <_printf_float+0x2dc>)
 80094ac:	2301      	movs	r3, #1
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f af54 	beq.w	8009362 <_printf_float+0xb6>
 80094ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80094be:	4543      	cmp	r3, r8
 80094c0:	db02      	blt.n	80094c8 <_printf_float+0x21c>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	07d8      	lsls	r0, r3, #31
 80094c6:	d50f      	bpl.n	80094e8 <_printf_float+0x23c>
 80094c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	f43f af45 	beq.w	8009362 <_printf_float+0xb6>
 80094d8:	f04f 0900 	mov.w	r9, #0
 80094dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80094e0:	f104 0a1a 	add.w	sl, r4, #26
 80094e4:	45c8      	cmp	r8, r9
 80094e6:	dc09      	bgt.n	80094fc <_printf_float+0x250>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	079b      	lsls	r3, r3, #30
 80094ec:	f100 8103 	bmi.w	80096f6 <_printf_float+0x44a>
 80094f0:	68e0      	ldr	r0, [r4, #12]
 80094f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094f4:	4298      	cmp	r0, r3
 80094f6:	bfb8      	it	lt
 80094f8:	4618      	movlt	r0, r3
 80094fa:	e734      	b.n	8009366 <_printf_float+0xba>
 80094fc:	2301      	movs	r3, #1
 80094fe:	4652      	mov	r2, sl
 8009500:	4631      	mov	r1, r6
 8009502:	4628      	mov	r0, r5
 8009504:	47b8      	blx	r7
 8009506:	3001      	adds	r0, #1
 8009508:	f43f af2b 	beq.w	8009362 <_printf_float+0xb6>
 800950c:	f109 0901 	add.w	r9, r9, #1
 8009510:	e7e8      	b.n	80094e4 <_printf_float+0x238>
 8009512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009514:	2b00      	cmp	r3, #0
 8009516:	dc39      	bgt.n	800958c <_printf_float+0x2e0>
 8009518:	4a1b      	ldr	r2, [pc, #108]	@ (8009588 <_printf_float+0x2dc>)
 800951a:	2301      	movs	r3, #1
 800951c:	4631      	mov	r1, r6
 800951e:	4628      	mov	r0, r5
 8009520:	47b8      	blx	r7
 8009522:	3001      	adds	r0, #1
 8009524:	f43f af1d 	beq.w	8009362 <_printf_float+0xb6>
 8009528:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800952c:	ea59 0303 	orrs.w	r3, r9, r3
 8009530:	d102      	bne.n	8009538 <_printf_float+0x28c>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	07d9      	lsls	r1, r3, #31
 8009536:	d5d7      	bpl.n	80094e8 <_printf_float+0x23c>
 8009538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	47b8      	blx	r7
 8009542:	3001      	adds	r0, #1
 8009544:	f43f af0d 	beq.w	8009362 <_printf_float+0xb6>
 8009548:	f04f 0a00 	mov.w	sl, #0
 800954c:	f104 0b1a 	add.w	fp, r4, #26
 8009550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009552:	425b      	negs	r3, r3
 8009554:	4553      	cmp	r3, sl
 8009556:	dc01      	bgt.n	800955c <_printf_float+0x2b0>
 8009558:	464b      	mov	r3, r9
 800955a:	e793      	b.n	8009484 <_printf_float+0x1d8>
 800955c:	2301      	movs	r3, #1
 800955e:	465a      	mov	r2, fp
 8009560:	4631      	mov	r1, r6
 8009562:	4628      	mov	r0, r5
 8009564:	47b8      	blx	r7
 8009566:	3001      	adds	r0, #1
 8009568:	f43f aefb 	beq.w	8009362 <_printf_float+0xb6>
 800956c:	f10a 0a01 	add.w	sl, sl, #1
 8009570:	e7ee      	b.n	8009550 <_printf_float+0x2a4>
 8009572:	bf00      	nop
 8009574:	7fefffff 	.word	0x7fefffff
 8009578:	0800cef0 	.word	0x0800cef0
 800957c:	0800cef4 	.word	0x0800cef4
 8009580:	0800cef8 	.word	0x0800cef8
 8009584:	0800cefc 	.word	0x0800cefc
 8009588:	0800cf00 	.word	0x0800cf00
 800958c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800958e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009592:	4553      	cmp	r3, sl
 8009594:	bfa8      	it	ge
 8009596:	4653      	movge	r3, sl
 8009598:	2b00      	cmp	r3, #0
 800959a:	4699      	mov	r9, r3
 800959c:	dc36      	bgt.n	800960c <_printf_float+0x360>
 800959e:	f04f 0b00 	mov.w	fp, #0
 80095a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095a6:	f104 021a 	add.w	r2, r4, #26
 80095aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095ac:	9306      	str	r3, [sp, #24]
 80095ae:	eba3 0309 	sub.w	r3, r3, r9
 80095b2:	455b      	cmp	r3, fp
 80095b4:	dc31      	bgt.n	800961a <_printf_float+0x36e>
 80095b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b8:	459a      	cmp	sl, r3
 80095ba:	dc3a      	bgt.n	8009632 <_printf_float+0x386>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	07da      	lsls	r2, r3, #31
 80095c0:	d437      	bmi.n	8009632 <_printf_float+0x386>
 80095c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c4:	ebaa 0903 	sub.w	r9, sl, r3
 80095c8:	9b06      	ldr	r3, [sp, #24]
 80095ca:	ebaa 0303 	sub.w	r3, sl, r3
 80095ce:	4599      	cmp	r9, r3
 80095d0:	bfa8      	it	ge
 80095d2:	4699      	movge	r9, r3
 80095d4:	f1b9 0f00 	cmp.w	r9, #0
 80095d8:	dc33      	bgt.n	8009642 <_printf_float+0x396>
 80095da:	f04f 0800 	mov.w	r8, #0
 80095de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095e2:	f104 0b1a 	add.w	fp, r4, #26
 80095e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e8:	ebaa 0303 	sub.w	r3, sl, r3
 80095ec:	eba3 0309 	sub.w	r3, r3, r9
 80095f0:	4543      	cmp	r3, r8
 80095f2:	f77f af79 	ble.w	80094e8 <_printf_float+0x23c>
 80095f6:	2301      	movs	r3, #1
 80095f8:	465a      	mov	r2, fp
 80095fa:	4631      	mov	r1, r6
 80095fc:	4628      	mov	r0, r5
 80095fe:	47b8      	blx	r7
 8009600:	3001      	adds	r0, #1
 8009602:	f43f aeae 	beq.w	8009362 <_printf_float+0xb6>
 8009606:	f108 0801 	add.w	r8, r8, #1
 800960a:	e7ec      	b.n	80095e6 <_printf_float+0x33a>
 800960c:	4642      	mov	r2, r8
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	d1c2      	bne.n	800959e <_printf_float+0x2f2>
 8009618:	e6a3      	b.n	8009362 <_printf_float+0xb6>
 800961a:	2301      	movs	r3, #1
 800961c:	4631      	mov	r1, r6
 800961e:	4628      	mov	r0, r5
 8009620:	9206      	str	r2, [sp, #24]
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f ae9c 	beq.w	8009362 <_printf_float+0xb6>
 800962a:	9a06      	ldr	r2, [sp, #24]
 800962c:	f10b 0b01 	add.w	fp, fp, #1
 8009630:	e7bb      	b.n	80095aa <_printf_float+0x2fe>
 8009632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009636:	4631      	mov	r1, r6
 8009638:	4628      	mov	r0, r5
 800963a:	47b8      	blx	r7
 800963c:	3001      	adds	r0, #1
 800963e:	d1c0      	bne.n	80095c2 <_printf_float+0x316>
 8009640:	e68f      	b.n	8009362 <_printf_float+0xb6>
 8009642:	9a06      	ldr	r2, [sp, #24]
 8009644:	464b      	mov	r3, r9
 8009646:	4442      	add	r2, r8
 8009648:	4631      	mov	r1, r6
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	d1c3      	bne.n	80095da <_printf_float+0x32e>
 8009652:	e686      	b.n	8009362 <_printf_float+0xb6>
 8009654:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009658:	f1ba 0f01 	cmp.w	sl, #1
 800965c:	dc01      	bgt.n	8009662 <_printf_float+0x3b6>
 800965e:	07db      	lsls	r3, r3, #31
 8009660:	d536      	bpl.n	80096d0 <_printf_float+0x424>
 8009662:	2301      	movs	r3, #1
 8009664:	4642      	mov	r2, r8
 8009666:	4631      	mov	r1, r6
 8009668:	4628      	mov	r0, r5
 800966a:	47b8      	blx	r7
 800966c:	3001      	adds	r0, #1
 800966e:	f43f ae78 	beq.w	8009362 <_printf_float+0xb6>
 8009672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009676:	4631      	mov	r1, r6
 8009678:	4628      	mov	r0, r5
 800967a:	47b8      	blx	r7
 800967c:	3001      	adds	r0, #1
 800967e:	f43f ae70 	beq.w	8009362 <_printf_float+0xb6>
 8009682:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009686:	2200      	movs	r2, #0
 8009688:	2300      	movs	r3, #0
 800968a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800968e:	f7f7 fa3b 	bl	8000b08 <__aeabi_dcmpeq>
 8009692:	b9c0      	cbnz	r0, 80096c6 <_printf_float+0x41a>
 8009694:	4653      	mov	r3, sl
 8009696:	f108 0201 	add.w	r2, r8, #1
 800969a:	4631      	mov	r1, r6
 800969c:	4628      	mov	r0, r5
 800969e:	47b8      	blx	r7
 80096a0:	3001      	adds	r0, #1
 80096a2:	d10c      	bne.n	80096be <_printf_float+0x412>
 80096a4:	e65d      	b.n	8009362 <_printf_float+0xb6>
 80096a6:	2301      	movs	r3, #1
 80096a8:	465a      	mov	r2, fp
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	47b8      	blx	r7
 80096b0:	3001      	adds	r0, #1
 80096b2:	f43f ae56 	beq.w	8009362 <_printf_float+0xb6>
 80096b6:	f108 0801 	add.w	r8, r8, #1
 80096ba:	45d0      	cmp	r8, sl
 80096bc:	dbf3      	blt.n	80096a6 <_printf_float+0x3fa>
 80096be:	464b      	mov	r3, r9
 80096c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80096c4:	e6df      	b.n	8009486 <_printf_float+0x1da>
 80096c6:	f04f 0800 	mov.w	r8, #0
 80096ca:	f104 0b1a 	add.w	fp, r4, #26
 80096ce:	e7f4      	b.n	80096ba <_printf_float+0x40e>
 80096d0:	2301      	movs	r3, #1
 80096d2:	4642      	mov	r2, r8
 80096d4:	e7e1      	b.n	800969a <_printf_float+0x3ee>
 80096d6:	2301      	movs	r3, #1
 80096d8:	464a      	mov	r2, r9
 80096da:	4631      	mov	r1, r6
 80096dc:	4628      	mov	r0, r5
 80096de:	47b8      	blx	r7
 80096e0:	3001      	adds	r0, #1
 80096e2:	f43f ae3e 	beq.w	8009362 <_printf_float+0xb6>
 80096e6:	f108 0801 	add.w	r8, r8, #1
 80096ea:	68e3      	ldr	r3, [r4, #12]
 80096ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096ee:	1a5b      	subs	r3, r3, r1
 80096f0:	4543      	cmp	r3, r8
 80096f2:	dcf0      	bgt.n	80096d6 <_printf_float+0x42a>
 80096f4:	e6fc      	b.n	80094f0 <_printf_float+0x244>
 80096f6:	f04f 0800 	mov.w	r8, #0
 80096fa:	f104 0919 	add.w	r9, r4, #25
 80096fe:	e7f4      	b.n	80096ea <_printf_float+0x43e>

08009700 <_printf_common>:
 8009700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009704:	4616      	mov	r6, r2
 8009706:	4698      	mov	r8, r3
 8009708:	688a      	ldr	r2, [r1, #8]
 800970a:	690b      	ldr	r3, [r1, #16]
 800970c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009710:	4293      	cmp	r3, r2
 8009712:	bfb8      	it	lt
 8009714:	4613      	movlt	r3, r2
 8009716:	6033      	str	r3, [r6, #0]
 8009718:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800971c:	4607      	mov	r7, r0
 800971e:	460c      	mov	r4, r1
 8009720:	b10a      	cbz	r2, 8009726 <_printf_common+0x26>
 8009722:	3301      	adds	r3, #1
 8009724:	6033      	str	r3, [r6, #0]
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	0699      	lsls	r1, r3, #26
 800972a:	bf42      	ittt	mi
 800972c:	6833      	ldrmi	r3, [r6, #0]
 800972e:	3302      	addmi	r3, #2
 8009730:	6033      	strmi	r3, [r6, #0]
 8009732:	6825      	ldr	r5, [r4, #0]
 8009734:	f015 0506 	ands.w	r5, r5, #6
 8009738:	d106      	bne.n	8009748 <_printf_common+0x48>
 800973a:	f104 0a19 	add.w	sl, r4, #25
 800973e:	68e3      	ldr	r3, [r4, #12]
 8009740:	6832      	ldr	r2, [r6, #0]
 8009742:	1a9b      	subs	r3, r3, r2
 8009744:	42ab      	cmp	r3, r5
 8009746:	dc26      	bgt.n	8009796 <_printf_common+0x96>
 8009748:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800974c:	6822      	ldr	r2, [r4, #0]
 800974e:	3b00      	subs	r3, #0
 8009750:	bf18      	it	ne
 8009752:	2301      	movne	r3, #1
 8009754:	0692      	lsls	r2, r2, #26
 8009756:	d42b      	bmi.n	80097b0 <_printf_common+0xb0>
 8009758:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800975c:	4641      	mov	r1, r8
 800975e:	4638      	mov	r0, r7
 8009760:	47c8      	blx	r9
 8009762:	3001      	adds	r0, #1
 8009764:	d01e      	beq.n	80097a4 <_printf_common+0xa4>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	6922      	ldr	r2, [r4, #16]
 800976a:	f003 0306 	and.w	r3, r3, #6
 800976e:	2b04      	cmp	r3, #4
 8009770:	bf02      	ittt	eq
 8009772:	68e5      	ldreq	r5, [r4, #12]
 8009774:	6833      	ldreq	r3, [r6, #0]
 8009776:	1aed      	subeq	r5, r5, r3
 8009778:	68a3      	ldr	r3, [r4, #8]
 800977a:	bf0c      	ite	eq
 800977c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009780:	2500      	movne	r5, #0
 8009782:	4293      	cmp	r3, r2
 8009784:	bfc4      	itt	gt
 8009786:	1a9b      	subgt	r3, r3, r2
 8009788:	18ed      	addgt	r5, r5, r3
 800978a:	2600      	movs	r6, #0
 800978c:	341a      	adds	r4, #26
 800978e:	42b5      	cmp	r5, r6
 8009790:	d11a      	bne.n	80097c8 <_printf_common+0xc8>
 8009792:	2000      	movs	r0, #0
 8009794:	e008      	b.n	80097a8 <_printf_common+0xa8>
 8009796:	2301      	movs	r3, #1
 8009798:	4652      	mov	r2, sl
 800979a:	4641      	mov	r1, r8
 800979c:	4638      	mov	r0, r7
 800979e:	47c8      	blx	r9
 80097a0:	3001      	adds	r0, #1
 80097a2:	d103      	bne.n	80097ac <_printf_common+0xac>
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ac:	3501      	adds	r5, #1
 80097ae:	e7c6      	b.n	800973e <_printf_common+0x3e>
 80097b0:	18e1      	adds	r1, r4, r3
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	2030      	movs	r0, #48	@ 0x30
 80097b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097ba:	4422      	add	r2, r4
 80097bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097c4:	3302      	adds	r3, #2
 80097c6:	e7c7      	b.n	8009758 <_printf_common+0x58>
 80097c8:	2301      	movs	r3, #1
 80097ca:	4622      	mov	r2, r4
 80097cc:	4641      	mov	r1, r8
 80097ce:	4638      	mov	r0, r7
 80097d0:	47c8      	blx	r9
 80097d2:	3001      	adds	r0, #1
 80097d4:	d0e6      	beq.n	80097a4 <_printf_common+0xa4>
 80097d6:	3601      	adds	r6, #1
 80097d8:	e7d9      	b.n	800978e <_printf_common+0x8e>
	...

080097dc <_printf_i>:
 80097dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097e0:	7e0f      	ldrb	r7, [r1, #24]
 80097e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80097e4:	2f78      	cmp	r7, #120	@ 0x78
 80097e6:	4691      	mov	r9, r2
 80097e8:	4680      	mov	r8, r0
 80097ea:	460c      	mov	r4, r1
 80097ec:	469a      	mov	sl, r3
 80097ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80097f2:	d807      	bhi.n	8009804 <_printf_i+0x28>
 80097f4:	2f62      	cmp	r7, #98	@ 0x62
 80097f6:	d80a      	bhi.n	800980e <_printf_i+0x32>
 80097f8:	2f00      	cmp	r7, #0
 80097fa:	f000 80d2 	beq.w	80099a2 <_printf_i+0x1c6>
 80097fe:	2f58      	cmp	r7, #88	@ 0x58
 8009800:	f000 80b9 	beq.w	8009976 <_printf_i+0x19a>
 8009804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800980c:	e03a      	b.n	8009884 <_printf_i+0xa8>
 800980e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009812:	2b15      	cmp	r3, #21
 8009814:	d8f6      	bhi.n	8009804 <_printf_i+0x28>
 8009816:	a101      	add	r1, pc, #4	@ (adr r1, 800981c <_printf_i+0x40>)
 8009818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800981c:	08009875 	.word	0x08009875
 8009820:	08009889 	.word	0x08009889
 8009824:	08009805 	.word	0x08009805
 8009828:	08009805 	.word	0x08009805
 800982c:	08009805 	.word	0x08009805
 8009830:	08009805 	.word	0x08009805
 8009834:	08009889 	.word	0x08009889
 8009838:	08009805 	.word	0x08009805
 800983c:	08009805 	.word	0x08009805
 8009840:	08009805 	.word	0x08009805
 8009844:	08009805 	.word	0x08009805
 8009848:	08009989 	.word	0x08009989
 800984c:	080098b3 	.word	0x080098b3
 8009850:	08009943 	.word	0x08009943
 8009854:	08009805 	.word	0x08009805
 8009858:	08009805 	.word	0x08009805
 800985c:	080099ab 	.word	0x080099ab
 8009860:	08009805 	.word	0x08009805
 8009864:	080098b3 	.word	0x080098b3
 8009868:	08009805 	.word	0x08009805
 800986c:	08009805 	.word	0x08009805
 8009870:	0800994b 	.word	0x0800994b
 8009874:	6833      	ldr	r3, [r6, #0]
 8009876:	1d1a      	adds	r2, r3, #4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6032      	str	r2, [r6, #0]
 800987c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009884:	2301      	movs	r3, #1
 8009886:	e09d      	b.n	80099c4 <_printf_i+0x1e8>
 8009888:	6833      	ldr	r3, [r6, #0]
 800988a:	6820      	ldr	r0, [r4, #0]
 800988c:	1d19      	adds	r1, r3, #4
 800988e:	6031      	str	r1, [r6, #0]
 8009890:	0606      	lsls	r6, r0, #24
 8009892:	d501      	bpl.n	8009898 <_printf_i+0xbc>
 8009894:	681d      	ldr	r5, [r3, #0]
 8009896:	e003      	b.n	80098a0 <_printf_i+0xc4>
 8009898:	0645      	lsls	r5, r0, #25
 800989a:	d5fb      	bpl.n	8009894 <_printf_i+0xb8>
 800989c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098a0:	2d00      	cmp	r5, #0
 80098a2:	da03      	bge.n	80098ac <_printf_i+0xd0>
 80098a4:	232d      	movs	r3, #45	@ 0x2d
 80098a6:	426d      	negs	r5, r5
 80098a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098ac:	4859      	ldr	r0, [pc, #356]	@ (8009a14 <_printf_i+0x238>)
 80098ae:	230a      	movs	r3, #10
 80098b0:	e011      	b.n	80098d6 <_printf_i+0xfa>
 80098b2:	6821      	ldr	r1, [r4, #0]
 80098b4:	6833      	ldr	r3, [r6, #0]
 80098b6:	0608      	lsls	r0, r1, #24
 80098b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80098bc:	d402      	bmi.n	80098c4 <_printf_i+0xe8>
 80098be:	0649      	lsls	r1, r1, #25
 80098c0:	bf48      	it	mi
 80098c2:	b2ad      	uxthmi	r5, r5
 80098c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80098c6:	4853      	ldr	r0, [pc, #332]	@ (8009a14 <_printf_i+0x238>)
 80098c8:	6033      	str	r3, [r6, #0]
 80098ca:	bf14      	ite	ne
 80098cc:	230a      	movne	r3, #10
 80098ce:	2308      	moveq	r3, #8
 80098d0:	2100      	movs	r1, #0
 80098d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80098d6:	6866      	ldr	r6, [r4, #4]
 80098d8:	60a6      	str	r6, [r4, #8]
 80098da:	2e00      	cmp	r6, #0
 80098dc:	bfa2      	ittt	ge
 80098de:	6821      	ldrge	r1, [r4, #0]
 80098e0:	f021 0104 	bicge.w	r1, r1, #4
 80098e4:	6021      	strge	r1, [r4, #0]
 80098e6:	b90d      	cbnz	r5, 80098ec <_printf_i+0x110>
 80098e8:	2e00      	cmp	r6, #0
 80098ea:	d04b      	beq.n	8009984 <_printf_i+0x1a8>
 80098ec:	4616      	mov	r6, r2
 80098ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80098f2:	fb03 5711 	mls	r7, r3, r1, r5
 80098f6:	5dc7      	ldrb	r7, [r0, r7]
 80098f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098fc:	462f      	mov	r7, r5
 80098fe:	42bb      	cmp	r3, r7
 8009900:	460d      	mov	r5, r1
 8009902:	d9f4      	bls.n	80098ee <_printf_i+0x112>
 8009904:	2b08      	cmp	r3, #8
 8009906:	d10b      	bne.n	8009920 <_printf_i+0x144>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	07df      	lsls	r7, r3, #31
 800990c:	d508      	bpl.n	8009920 <_printf_i+0x144>
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	6861      	ldr	r1, [r4, #4]
 8009912:	4299      	cmp	r1, r3
 8009914:	bfde      	ittt	le
 8009916:	2330      	movle	r3, #48	@ 0x30
 8009918:	f806 3c01 	strble.w	r3, [r6, #-1]
 800991c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009920:	1b92      	subs	r2, r2, r6
 8009922:	6122      	str	r2, [r4, #16]
 8009924:	f8cd a000 	str.w	sl, [sp]
 8009928:	464b      	mov	r3, r9
 800992a:	aa03      	add	r2, sp, #12
 800992c:	4621      	mov	r1, r4
 800992e:	4640      	mov	r0, r8
 8009930:	f7ff fee6 	bl	8009700 <_printf_common>
 8009934:	3001      	adds	r0, #1
 8009936:	d14a      	bne.n	80099ce <_printf_i+0x1f2>
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	b004      	add	sp, #16
 800993e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009942:	6823      	ldr	r3, [r4, #0]
 8009944:	f043 0320 	orr.w	r3, r3, #32
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	4833      	ldr	r0, [pc, #204]	@ (8009a18 <_printf_i+0x23c>)
 800994c:	2778      	movs	r7, #120	@ 0x78
 800994e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	6831      	ldr	r1, [r6, #0]
 8009956:	061f      	lsls	r7, r3, #24
 8009958:	f851 5b04 	ldr.w	r5, [r1], #4
 800995c:	d402      	bmi.n	8009964 <_printf_i+0x188>
 800995e:	065f      	lsls	r7, r3, #25
 8009960:	bf48      	it	mi
 8009962:	b2ad      	uxthmi	r5, r5
 8009964:	6031      	str	r1, [r6, #0]
 8009966:	07d9      	lsls	r1, r3, #31
 8009968:	bf44      	itt	mi
 800996a:	f043 0320 	orrmi.w	r3, r3, #32
 800996e:	6023      	strmi	r3, [r4, #0]
 8009970:	b11d      	cbz	r5, 800997a <_printf_i+0x19e>
 8009972:	2310      	movs	r3, #16
 8009974:	e7ac      	b.n	80098d0 <_printf_i+0xf4>
 8009976:	4827      	ldr	r0, [pc, #156]	@ (8009a14 <_printf_i+0x238>)
 8009978:	e7e9      	b.n	800994e <_printf_i+0x172>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	f023 0320 	bic.w	r3, r3, #32
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	e7f6      	b.n	8009972 <_printf_i+0x196>
 8009984:	4616      	mov	r6, r2
 8009986:	e7bd      	b.n	8009904 <_printf_i+0x128>
 8009988:	6833      	ldr	r3, [r6, #0]
 800998a:	6825      	ldr	r5, [r4, #0]
 800998c:	6961      	ldr	r1, [r4, #20]
 800998e:	1d18      	adds	r0, r3, #4
 8009990:	6030      	str	r0, [r6, #0]
 8009992:	062e      	lsls	r6, r5, #24
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	d501      	bpl.n	800999c <_printf_i+0x1c0>
 8009998:	6019      	str	r1, [r3, #0]
 800999a:	e002      	b.n	80099a2 <_printf_i+0x1c6>
 800999c:	0668      	lsls	r0, r5, #25
 800999e:	d5fb      	bpl.n	8009998 <_printf_i+0x1bc>
 80099a0:	8019      	strh	r1, [r3, #0]
 80099a2:	2300      	movs	r3, #0
 80099a4:	6123      	str	r3, [r4, #16]
 80099a6:	4616      	mov	r6, r2
 80099a8:	e7bc      	b.n	8009924 <_printf_i+0x148>
 80099aa:	6833      	ldr	r3, [r6, #0]
 80099ac:	1d1a      	adds	r2, r3, #4
 80099ae:	6032      	str	r2, [r6, #0]
 80099b0:	681e      	ldr	r6, [r3, #0]
 80099b2:	6862      	ldr	r2, [r4, #4]
 80099b4:	2100      	movs	r1, #0
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7f6 fc2a 	bl	8000210 <memchr>
 80099bc:	b108      	cbz	r0, 80099c2 <_printf_i+0x1e6>
 80099be:	1b80      	subs	r0, r0, r6
 80099c0:	6060      	str	r0, [r4, #4]
 80099c2:	6863      	ldr	r3, [r4, #4]
 80099c4:	6123      	str	r3, [r4, #16]
 80099c6:	2300      	movs	r3, #0
 80099c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099cc:	e7aa      	b.n	8009924 <_printf_i+0x148>
 80099ce:	6923      	ldr	r3, [r4, #16]
 80099d0:	4632      	mov	r2, r6
 80099d2:	4649      	mov	r1, r9
 80099d4:	4640      	mov	r0, r8
 80099d6:	47d0      	blx	sl
 80099d8:	3001      	adds	r0, #1
 80099da:	d0ad      	beq.n	8009938 <_printf_i+0x15c>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	079b      	lsls	r3, r3, #30
 80099e0:	d413      	bmi.n	8009a0a <_printf_i+0x22e>
 80099e2:	68e0      	ldr	r0, [r4, #12]
 80099e4:	9b03      	ldr	r3, [sp, #12]
 80099e6:	4298      	cmp	r0, r3
 80099e8:	bfb8      	it	lt
 80099ea:	4618      	movlt	r0, r3
 80099ec:	e7a6      	b.n	800993c <_printf_i+0x160>
 80099ee:	2301      	movs	r3, #1
 80099f0:	4632      	mov	r2, r6
 80099f2:	4649      	mov	r1, r9
 80099f4:	4640      	mov	r0, r8
 80099f6:	47d0      	blx	sl
 80099f8:	3001      	adds	r0, #1
 80099fa:	d09d      	beq.n	8009938 <_printf_i+0x15c>
 80099fc:	3501      	adds	r5, #1
 80099fe:	68e3      	ldr	r3, [r4, #12]
 8009a00:	9903      	ldr	r1, [sp, #12]
 8009a02:	1a5b      	subs	r3, r3, r1
 8009a04:	42ab      	cmp	r3, r5
 8009a06:	dcf2      	bgt.n	80099ee <_printf_i+0x212>
 8009a08:	e7eb      	b.n	80099e2 <_printf_i+0x206>
 8009a0a:	2500      	movs	r5, #0
 8009a0c:	f104 0619 	add.w	r6, r4, #25
 8009a10:	e7f5      	b.n	80099fe <_printf_i+0x222>
 8009a12:	bf00      	nop
 8009a14:	0800cf02 	.word	0x0800cf02
 8009a18:	0800cf13 	.word	0x0800cf13

08009a1c <_scanf_float>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	b087      	sub	sp, #28
 8009a22:	4617      	mov	r7, r2
 8009a24:	9303      	str	r3, [sp, #12]
 8009a26:	688b      	ldr	r3, [r1, #8]
 8009a28:	1e5a      	subs	r2, r3, #1
 8009a2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009a2e:	bf81      	itttt	hi
 8009a30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009a34:	eb03 0b05 	addhi.w	fp, r3, r5
 8009a38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009a3c:	608b      	strhi	r3, [r1, #8]
 8009a3e:	680b      	ldr	r3, [r1, #0]
 8009a40:	460a      	mov	r2, r1
 8009a42:	f04f 0500 	mov.w	r5, #0
 8009a46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009a4a:	f842 3b1c 	str.w	r3, [r2], #28
 8009a4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009a52:	4680      	mov	r8, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	bf98      	it	ls
 8009a58:	f04f 0b00 	movls.w	fp, #0
 8009a5c:	9201      	str	r2, [sp, #4]
 8009a5e:	4616      	mov	r6, r2
 8009a60:	46aa      	mov	sl, r5
 8009a62:	46a9      	mov	r9, r5
 8009a64:	9502      	str	r5, [sp, #8]
 8009a66:	68a2      	ldr	r2, [r4, #8]
 8009a68:	b152      	cbz	r2, 8009a80 <_scanf_float+0x64>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009a70:	d864      	bhi.n	8009b3c <_scanf_float+0x120>
 8009a72:	2b40      	cmp	r3, #64	@ 0x40
 8009a74:	d83c      	bhi.n	8009af0 <_scanf_float+0xd4>
 8009a76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009a7a:	b2c8      	uxtb	r0, r1
 8009a7c:	280e      	cmp	r0, #14
 8009a7e:	d93a      	bls.n	8009af6 <_scanf_float+0xda>
 8009a80:	f1b9 0f00 	cmp.w	r9, #0
 8009a84:	d003      	beq.n	8009a8e <_scanf_float+0x72>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a92:	f1ba 0f01 	cmp.w	sl, #1
 8009a96:	f200 8117 	bhi.w	8009cc8 <_scanf_float+0x2ac>
 8009a9a:	9b01      	ldr	r3, [sp, #4]
 8009a9c:	429e      	cmp	r6, r3
 8009a9e:	f200 8108 	bhi.w	8009cb2 <_scanf_float+0x296>
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	b007      	add	sp, #28
 8009aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aaa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009aae:	2a0d      	cmp	r2, #13
 8009ab0:	d8e6      	bhi.n	8009a80 <_scanf_float+0x64>
 8009ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8009ab8 <_scanf_float+0x9c>)
 8009ab4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ab8:	08009bff 	.word	0x08009bff
 8009abc:	08009a81 	.word	0x08009a81
 8009ac0:	08009a81 	.word	0x08009a81
 8009ac4:	08009a81 	.word	0x08009a81
 8009ac8:	08009c5f 	.word	0x08009c5f
 8009acc:	08009c37 	.word	0x08009c37
 8009ad0:	08009a81 	.word	0x08009a81
 8009ad4:	08009a81 	.word	0x08009a81
 8009ad8:	08009c0d 	.word	0x08009c0d
 8009adc:	08009a81 	.word	0x08009a81
 8009ae0:	08009a81 	.word	0x08009a81
 8009ae4:	08009a81 	.word	0x08009a81
 8009ae8:	08009a81 	.word	0x08009a81
 8009aec:	08009bc5 	.word	0x08009bc5
 8009af0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009af4:	e7db      	b.n	8009aae <_scanf_float+0x92>
 8009af6:	290e      	cmp	r1, #14
 8009af8:	d8c2      	bhi.n	8009a80 <_scanf_float+0x64>
 8009afa:	a001      	add	r0, pc, #4	@ (adr r0, 8009b00 <_scanf_float+0xe4>)
 8009afc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009b00:	08009bb5 	.word	0x08009bb5
 8009b04:	08009a81 	.word	0x08009a81
 8009b08:	08009bb5 	.word	0x08009bb5
 8009b0c:	08009c4b 	.word	0x08009c4b
 8009b10:	08009a81 	.word	0x08009a81
 8009b14:	08009b5d 	.word	0x08009b5d
 8009b18:	08009b9b 	.word	0x08009b9b
 8009b1c:	08009b9b 	.word	0x08009b9b
 8009b20:	08009b9b 	.word	0x08009b9b
 8009b24:	08009b9b 	.word	0x08009b9b
 8009b28:	08009b9b 	.word	0x08009b9b
 8009b2c:	08009b9b 	.word	0x08009b9b
 8009b30:	08009b9b 	.word	0x08009b9b
 8009b34:	08009b9b 	.word	0x08009b9b
 8009b38:	08009b9b 	.word	0x08009b9b
 8009b3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009b3e:	d809      	bhi.n	8009b54 <_scanf_float+0x138>
 8009b40:	2b60      	cmp	r3, #96	@ 0x60
 8009b42:	d8b2      	bhi.n	8009aaa <_scanf_float+0x8e>
 8009b44:	2b54      	cmp	r3, #84	@ 0x54
 8009b46:	d07b      	beq.n	8009c40 <_scanf_float+0x224>
 8009b48:	2b59      	cmp	r3, #89	@ 0x59
 8009b4a:	d199      	bne.n	8009a80 <_scanf_float+0x64>
 8009b4c:	2d07      	cmp	r5, #7
 8009b4e:	d197      	bne.n	8009a80 <_scanf_float+0x64>
 8009b50:	2508      	movs	r5, #8
 8009b52:	e02c      	b.n	8009bae <_scanf_float+0x192>
 8009b54:	2b74      	cmp	r3, #116	@ 0x74
 8009b56:	d073      	beq.n	8009c40 <_scanf_float+0x224>
 8009b58:	2b79      	cmp	r3, #121	@ 0x79
 8009b5a:	e7f6      	b.n	8009b4a <_scanf_float+0x12e>
 8009b5c:	6821      	ldr	r1, [r4, #0]
 8009b5e:	05c8      	lsls	r0, r1, #23
 8009b60:	d51b      	bpl.n	8009b9a <_scanf_float+0x17e>
 8009b62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009b66:	6021      	str	r1, [r4, #0]
 8009b68:	f109 0901 	add.w	r9, r9, #1
 8009b6c:	f1bb 0f00 	cmp.w	fp, #0
 8009b70:	d003      	beq.n	8009b7a <_scanf_float+0x15e>
 8009b72:	3201      	adds	r2, #1
 8009b74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b78:	60a2      	str	r2, [r4, #8]
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	60a3      	str	r3, [r4, #8]
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	3301      	adds	r3, #1
 8009b84:	6123      	str	r3, [r4, #16]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
 8009b8e:	f340 8087 	ble.w	8009ca0 <_scanf_float+0x284>
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	3301      	adds	r3, #1
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	e765      	b.n	8009a66 <_scanf_float+0x4a>
 8009b9a:	eb1a 0105 	adds.w	r1, sl, r5
 8009b9e:	f47f af6f 	bne.w	8009a80 <_scanf_float+0x64>
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009ba8:	6022      	str	r2, [r4, #0]
 8009baa:	460d      	mov	r5, r1
 8009bac:	468a      	mov	sl, r1
 8009bae:	f806 3b01 	strb.w	r3, [r6], #1
 8009bb2:	e7e2      	b.n	8009b7a <_scanf_float+0x15e>
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	0610      	lsls	r0, r2, #24
 8009bb8:	f57f af62 	bpl.w	8009a80 <_scanf_float+0x64>
 8009bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bc0:	6022      	str	r2, [r4, #0]
 8009bc2:	e7f4      	b.n	8009bae <_scanf_float+0x192>
 8009bc4:	f1ba 0f00 	cmp.w	sl, #0
 8009bc8:	d10e      	bne.n	8009be8 <_scanf_float+0x1cc>
 8009bca:	f1b9 0f00 	cmp.w	r9, #0
 8009bce:	d10e      	bne.n	8009bee <_scanf_float+0x1d2>
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009bd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009bda:	d108      	bne.n	8009bee <_scanf_float+0x1d2>
 8009bdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009be0:	6022      	str	r2, [r4, #0]
 8009be2:	f04f 0a01 	mov.w	sl, #1
 8009be6:	e7e2      	b.n	8009bae <_scanf_float+0x192>
 8009be8:	f1ba 0f02 	cmp.w	sl, #2
 8009bec:	d055      	beq.n	8009c9a <_scanf_float+0x27e>
 8009bee:	2d01      	cmp	r5, #1
 8009bf0:	d002      	beq.n	8009bf8 <_scanf_float+0x1dc>
 8009bf2:	2d04      	cmp	r5, #4
 8009bf4:	f47f af44 	bne.w	8009a80 <_scanf_float+0x64>
 8009bf8:	3501      	adds	r5, #1
 8009bfa:	b2ed      	uxtb	r5, r5
 8009bfc:	e7d7      	b.n	8009bae <_scanf_float+0x192>
 8009bfe:	f1ba 0f01 	cmp.w	sl, #1
 8009c02:	f47f af3d 	bne.w	8009a80 <_scanf_float+0x64>
 8009c06:	f04f 0a02 	mov.w	sl, #2
 8009c0a:	e7d0      	b.n	8009bae <_scanf_float+0x192>
 8009c0c:	b97d      	cbnz	r5, 8009c2e <_scanf_float+0x212>
 8009c0e:	f1b9 0f00 	cmp.w	r9, #0
 8009c12:	f47f af38 	bne.w	8009a86 <_scanf_float+0x6a>
 8009c16:	6822      	ldr	r2, [r4, #0]
 8009c18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009c1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009c20:	f040 8108 	bne.w	8009e34 <_scanf_float+0x418>
 8009c24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009c28:	6022      	str	r2, [r4, #0]
 8009c2a:	2501      	movs	r5, #1
 8009c2c:	e7bf      	b.n	8009bae <_scanf_float+0x192>
 8009c2e:	2d03      	cmp	r5, #3
 8009c30:	d0e2      	beq.n	8009bf8 <_scanf_float+0x1dc>
 8009c32:	2d05      	cmp	r5, #5
 8009c34:	e7de      	b.n	8009bf4 <_scanf_float+0x1d8>
 8009c36:	2d02      	cmp	r5, #2
 8009c38:	f47f af22 	bne.w	8009a80 <_scanf_float+0x64>
 8009c3c:	2503      	movs	r5, #3
 8009c3e:	e7b6      	b.n	8009bae <_scanf_float+0x192>
 8009c40:	2d06      	cmp	r5, #6
 8009c42:	f47f af1d 	bne.w	8009a80 <_scanf_float+0x64>
 8009c46:	2507      	movs	r5, #7
 8009c48:	e7b1      	b.n	8009bae <_scanf_float+0x192>
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	0591      	lsls	r1, r2, #22
 8009c4e:	f57f af17 	bpl.w	8009a80 <_scanf_float+0x64>
 8009c52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009c56:	6022      	str	r2, [r4, #0]
 8009c58:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c5c:	e7a7      	b.n	8009bae <_scanf_float+0x192>
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009c64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009c68:	d006      	beq.n	8009c78 <_scanf_float+0x25c>
 8009c6a:	0550      	lsls	r0, r2, #21
 8009c6c:	f57f af08 	bpl.w	8009a80 <_scanf_float+0x64>
 8009c70:	f1b9 0f00 	cmp.w	r9, #0
 8009c74:	f000 80de 	beq.w	8009e34 <_scanf_float+0x418>
 8009c78:	0591      	lsls	r1, r2, #22
 8009c7a:	bf58      	it	pl
 8009c7c:	9902      	ldrpl	r1, [sp, #8]
 8009c7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009c82:	bf58      	it	pl
 8009c84:	eba9 0101 	subpl.w	r1, r9, r1
 8009c88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009c8c:	bf58      	it	pl
 8009c8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009c92:	6022      	str	r2, [r4, #0]
 8009c94:	f04f 0900 	mov.w	r9, #0
 8009c98:	e789      	b.n	8009bae <_scanf_float+0x192>
 8009c9a:	f04f 0a03 	mov.w	sl, #3
 8009c9e:	e786      	b.n	8009bae <_scanf_float+0x192>
 8009ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ca4:	4639      	mov	r1, r7
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	4798      	blx	r3
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f43f aedb 	beq.w	8009a66 <_scanf_float+0x4a>
 8009cb0:	e6e6      	b.n	8009a80 <_scanf_float+0x64>
 8009cb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009cb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009cba:	463a      	mov	r2, r7
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4798      	blx	r3
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	6123      	str	r3, [r4, #16]
 8009cc6:	e6e8      	b.n	8009a9a <_scanf_float+0x7e>
 8009cc8:	1e6b      	subs	r3, r5, #1
 8009cca:	2b06      	cmp	r3, #6
 8009ccc:	d824      	bhi.n	8009d18 <_scanf_float+0x2fc>
 8009cce:	2d02      	cmp	r5, #2
 8009cd0:	d836      	bhi.n	8009d40 <_scanf_float+0x324>
 8009cd2:	9b01      	ldr	r3, [sp, #4]
 8009cd4:	429e      	cmp	r6, r3
 8009cd6:	f67f aee4 	bls.w	8009aa2 <_scanf_float+0x86>
 8009cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009cde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ce2:	463a      	mov	r2, r7
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	4798      	blx	r3
 8009ce8:	6923      	ldr	r3, [r4, #16]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	6123      	str	r3, [r4, #16]
 8009cee:	e7f0      	b.n	8009cd2 <_scanf_float+0x2b6>
 8009cf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009cf4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009cf8:	463a      	mov	r2, r7
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4798      	blx	r3
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	6123      	str	r3, [r4, #16]
 8009d04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d08:	fa5f fa8a 	uxtb.w	sl, sl
 8009d0c:	f1ba 0f02 	cmp.w	sl, #2
 8009d10:	d1ee      	bne.n	8009cf0 <_scanf_float+0x2d4>
 8009d12:	3d03      	subs	r5, #3
 8009d14:	b2ed      	uxtb	r5, r5
 8009d16:	1b76      	subs	r6, r6, r5
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	05da      	lsls	r2, r3, #23
 8009d1c:	d530      	bpl.n	8009d80 <_scanf_float+0x364>
 8009d1e:	055b      	lsls	r3, r3, #21
 8009d20:	d511      	bpl.n	8009d46 <_scanf_float+0x32a>
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	429e      	cmp	r6, r3
 8009d26:	f67f aebc 	bls.w	8009aa2 <_scanf_float+0x86>
 8009d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009d32:	463a      	mov	r2, r7
 8009d34:	4640      	mov	r0, r8
 8009d36:	4798      	blx	r3
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	e7f0      	b.n	8009d22 <_scanf_float+0x306>
 8009d40:	46aa      	mov	sl, r5
 8009d42:	46b3      	mov	fp, r6
 8009d44:	e7de      	b.n	8009d04 <_scanf_float+0x2e8>
 8009d46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	2965      	cmp	r1, #101	@ 0x65
 8009d4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d52:	f106 35ff 	add.w	r5, r6, #4294967295
 8009d56:	6123      	str	r3, [r4, #16]
 8009d58:	d00c      	beq.n	8009d74 <_scanf_float+0x358>
 8009d5a:	2945      	cmp	r1, #69	@ 0x45
 8009d5c:	d00a      	beq.n	8009d74 <_scanf_float+0x358>
 8009d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d62:	463a      	mov	r2, r7
 8009d64:	4640      	mov	r0, r8
 8009d66:	4798      	blx	r3
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	1eb5      	subs	r5, r6, #2
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009d78:	463a      	mov	r2, r7
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	4798      	blx	r3
 8009d7e:	462e      	mov	r6, r5
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	f012 0210 	ands.w	r2, r2, #16
 8009d86:	d001      	beq.n	8009d8c <_scanf_float+0x370>
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e68b      	b.n	8009aa4 <_scanf_float+0x88>
 8009d8c:	7032      	strb	r2, [r6, #0]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d98:	d11c      	bne.n	8009dd4 <_scanf_float+0x3b8>
 8009d9a:	9b02      	ldr	r3, [sp, #8]
 8009d9c:	454b      	cmp	r3, r9
 8009d9e:	eba3 0209 	sub.w	r2, r3, r9
 8009da2:	d123      	bne.n	8009dec <_scanf_float+0x3d0>
 8009da4:	9901      	ldr	r1, [sp, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	4640      	mov	r0, r8
 8009daa:	f7ff f9cd 	bl	8009148 <_strtod_r>
 8009dae:	9b03      	ldr	r3, [sp, #12]
 8009db0:	6821      	ldr	r1, [r4, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f011 0f02 	tst.w	r1, #2
 8009db8:	ec57 6b10 	vmov	r6, r7, d0
 8009dbc:	f103 0204 	add.w	r2, r3, #4
 8009dc0:	d01f      	beq.n	8009e02 <_scanf_float+0x3e6>
 8009dc2:	9903      	ldr	r1, [sp, #12]
 8009dc4:	600a      	str	r2, [r1, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	e9c3 6700 	strd	r6, r7, [r3]
 8009dcc:	68e3      	ldr	r3, [r4, #12]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	60e3      	str	r3, [r4, #12]
 8009dd2:	e7d9      	b.n	8009d88 <_scanf_float+0x36c>
 8009dd4:	9b04      	ldr	r3, [sp, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0e4      	beq.n	8009da4 <_scanf_float+0x388>
 8009dda:	9905      	ldr	r1, [sp, #20]
 8009ddc:	230a      	movs	r3, #10
 8009dde:	3101      	adds	r1, #1
 8009de0:	4640      	mov	r0, r8
 8009de2:	f002 fa11 	bl	800c208 <_strtol_r>
 8009de6:	9b04      	ldr	r3, [sp, #16]
 8009de8:	9e05      	ldr	r6, [sp, #20]
 8009dea:	1ac2      	subs	r2, r0, r3
 8009dec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009df0:	429e      	cmp	r6, r3
 8009df2:	bf28      	it	cs
 8009df4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009df8:	4910      	ldr	r1, [pc, #64]	@ (8009e3c <_scanf_float+0x420>)
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f000 f92a 	bl	800a054 <siprintf>
 8009e00:	e7d0      	b.n	8009da4 <_scanf_float+0x388>
 8009e02:	f011 0f04 	tst.w	r1, #4
 8009e06:	9903      	ldr	r1, [sp, #12]
 8009e08:	600a      	str	r2, [r1, #0]
 8009e0a:	d1dc      	bne.n	8009dc6 <_scanf_float+0x3aa>
 8009e0c:	681d      	ldr	r5, [r3, #0]
 8009e0e:	4632      	mov	r2, r6
 8009e10:	463b      	mov	r3, r7
 8009e12:	4630      	mov	r0, r6
 8009e14:	4639      	mov	r1, r7
 8009e16:	f7f6 fea9 	bl	8000b6c <__aeabi_dcmpun>
 8009e1a:	b128      	cbz	r0, 8009e28 <_scanf_float+0x40c>
 8009e1c:	4808      	ldr	r0, [pc, #32]	@ (8009e40 <_scanf_float+0x424>)
 8009e1e:	f000 fa27 	bl	800a270 <nanf>
 8009e22:	ed85 0a00 	vstr	s0, [r5]
 8009e26:	e7d1      	b.n	8009dcc <_scanf_float+0x3b0>
 8009e28:	4630      	mov	r0, r6
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f7f6 fefc 	bl	8000c28 <__aeabi_d2f>
 8009e30:	6028      	str	r0, [r5, #0]
 8009e32:	e7cb      	b.n	8009dcc <_scanf_float+0x3b0>
 8009e34:	f04f 0900 	mov.w	r9, #0
 8009e38:	e629      	b.n	8009a8e <_scanf_float+0x72>
 8009e3a:	bf00      	nop
 8009e3c:	0800cf24 	.word	0x0800cf24
 8009e40:	0800d2c5 	.word	0x0800d2c5

08009e44 <std>:
 8009e44:	2300      	movs	r3, #0
 8009e46:	b510      	push	{r4, lr}
 8009e48:	4604      	mov	r4, r0
 8009e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e52:	6083      	str	r3, [r0, #8]
 8009e54:	8181      	strh	r1, [r0, #12]
 8009e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e58:	81c2      	strh	r2, [r0, #14]
 8009e5a:	6183      	str	r3, [r0, #24]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	2208      	movs	r2, #8
 8009e60:	305c      	adds	r0, #92	@ 0x5c
 8009e62:	f000 f95a 	bl	800a11a <memset>
 8009e66:	4b0d      	ldr	r3, [pc, #52]	@ (8009e9c <std+0x58>)
 8009e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea0 <std+0x5c>)
 8009e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea4 <std+0x60>)
 8009e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea8 <std+0x64>)
 8009e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e76:	4b0d      	ldr	r3, [pc, #52]	@ (8009eac <std+0x68>)
 8009e78:	6224      	str	r4, [r4, #32]
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d006      	beq.n	8009e8c <std+0x48>
 8009e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e82:	4294      	cmp	r4, r2
 8009e84:	d002      	beq.n	8009e8c <std+0x48>
 8009e86:	33d0      	adds	r3, #208	@ 0xd0
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d105      	bne.n	8009e98 <std+0x54>
 8009e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e94:	f000 b9d0 	b.w	800a238 <__retarget_lock_init_recursive>
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0800a095 	.word	0x0800a095
 8009ea0:	0800a0b7 	.word	0x0800a0b7
 8009ea4:	0800a0ef 	.word	0x0800a0ef
 8009ea8:	0800a113 	.word	0x0800a113
 8009eac:	200004f8 	.word	0x200004f8

08009eb0 <stdio_exit_handler>:
 8009eb0:	4a02      	ldr	r2, [pc, #8]	@ (8009ebc <stdio_exit_handler+0xc>)
 8009eb2:	4903      	ldr	r1, [pc, #12]	@ (8009ec0 <stdio_exit_handler+0x10>)
 8009eb4:	4803      	ldr	r0, [pc, #12]	@ (8009ec4 <stdio_exit_handler+0x14>)
 8009eb6:	f000 b869 	b.w	8009f8c <_fwalk_sglue>
 8009eba:	bf00      	nop
 8009ebc:	20000098 	.word	0x20000098
 8009ec0:	0800c861 	.word	0x0800c861
 8009ec4:	20000214 	.word	0x20000214

08009ec8 <cleanup_stdio>:
 8009ec8:	6841      	ldr	r1, [r0, #4]
 8009eca:	4b0c      	ldr	r3, [pc, #48]	@ (8009efc <cleanup_stdio+0x34>)
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	d001      	beq.n	8009ed8 <cleanup_stdio+0x10>
 8009ed4:	f002 fcc4 	bl	800c860 <_fflush_r>
 8009ed8:	68a1      	ldr	r1, [r4, #8]
 8009eda:	4b09      	ldr	r3, [pc, #36]	@ (8009f00 <cleanup_stdio+0x38>)
 8009edc:	4299      	cmp	r1, r3
 8009ede:	d002      	beq.n	8009ee6 <cleanup_stdio+0x1e>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f002 fcbd 	bl	800c860 <_fflush_r>
 8009ee6:	68e1      	ldr	r1, [r4, #12]
 8009ee8:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <cleanup_stdio+0x3c>)
 8009eea:	4299      	cmp	r1, r3
 8009eec:	d004      	beq.n	8009ef8 <cleanup_stdio+0x30>
 8009eee:	4620      	mov	r0, r4
 8009ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef4:	f002 bcb4 	b.w	800c860 <_fflush_r>
 8009ef8:	bd10      	pop	{r4, pc}
 8009efa:	bf00      	nop
 8009efc:	200004f8 	.word	0x200004f8
 8009f00:	20000560 	.word	0x20000560
 8009f04:	200005c8 	.word	0x200005c8

08009f08 <global_stdio_init.part.0>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f38 <global_stdio_init.part.0+0x30>)
 8009f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8009f3c <global_stdio_init.part.0+0x34>)
 8009f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8009f40 <global_stdio_init.part.0+0x38>)
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	4620      	mov	r0, r4
 8009f14:	2200      	movs	r2, #0
 8009f16:	2104      	movs	r1, #4
 8009f18:	f7ff ff94 	bl	8009e44 <std>
 8009f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f20:	2201      	movs	r2, #1
 8009f22:	2109      	movs	r1, #9
 8009f24:	f7ff ff8e 	bl	8009e44 <std>
 8009f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f32:	2112      	movs	r1, #18
 8009f34:	f7ff bf86 	b.w	8009e44 <std>
 8009f38:	20000630 	.word	0x20000630
 8009f3c:	200004f8 	.word	0x200004f8
 8009f40:	08009eb1 	.word	0x08009eb1

08009f44 <__sfp_lock_acquire>:
 8009f44:	4801      	ldr	r0, [pc, #4]	@ (8009f4c <__sfp_lock_acquire+0x8>)
 8009f46:	f000 b978 	b.w	800a23a <__retarget_lock_acquire_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	20000639 	.word	0x20000639

08009f50 <__sfp_lock_release>:
 8009f50:	4801      	ldr	r0, [pc, #4]	@ (8009f58 <__sfp_lock_release+0x8>)
 8009f52:	f000 b973 	b.w	800a23c <__retarget_lock_release_recursive>
 8009f56:	bf00      	nop
 8009f58:	20000639 	.word	0x20000639

08009f5c <__sinit>:
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	4604      	mov	r4, r0
 8009f60:	f7ff fff0 	bl	8009f44 <__sfp_lock_acquire>
 8009f64:	6a23      	ldr	r3, [r4, #32]
 8009f66:	b11b      	cbz	r3, 8009f70 <__sinit+0x14>
 8009f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f6c:	f7ff bff0 	b.w	8009f50 <__sfp_lock_release>
 8009f70:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <__sinit+0x28>)
 8009f72:	6223      	str	r3, [r4, #32]
 8009f74:	4b04      	ldr	r3, [pc, #16]	@ (8009f88 <__sinit+0x2c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1f5      	bne.n	8009f68 <__sinit+0xc>
 8009f7c:	f7ff ffc4 	bl	8009f08 <global_stdio_init.part.0>
 8009f80:	e7f2      	b.n	8009f68 <__sinit+0xc>
 8009f82:	bf00      	nop
 8009f84:	08009ec9 	.word	0x08009ec9
 8009f88:	20000630 	.word	0x20000630

08009f8c <_fwalk_sglue>:
 8009f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f90:	4607      	mov	r7, r0
 8009f92:	4688      	mov	r8, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	2600      	movs	r6, #0
 8009f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8009fa0:	d505      	bpl.n	8009fae <_fwalk_sglue+0x22>
 8009fa2:	6824      	ldr	r4, [r4, #0]
 8009fa4:	2c00      	cmp	r4, #0
 8009fa6:	d1f7      	bne.n	8009f98 <_fwalk_sglue+0xc>
 8009fa8:	4630      	mov	r0, r6
 8009faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d907      	bls.n	8009fc4 <_fwalk_sglue+0x38>
 8009fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	d003      	beq.n	8009fc4 <_fwalk_sglue+0x38>
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	47c0      	blx	r8
 8009fc2:	4306      	orrs	r6, r0
 8009fc4:	3568      	adds	r5, #104	@ 0x68
 8009fc6:	e7e9      	b.n	8009f9c <_fwalk_sglue+0x10>

08009fc8 <iprintf>:
 8009fc8:	b40f      	push	{r0, r1, r2, r3}
 8009fca:	b507      	push	{r0, r1, r2, lr}
 8009fcc:	4906      	ldr	r1, [pc, #24]	@ (8009fe8 <iprintf+0x20>)
 8009fce:	ab04      	add	r3, sp, #16
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd6:	6881      	ldr	r1, [r0, #8]
 8009fd8:	9301      	str	r3, [sp, #4]
 8009fda:	f002 faa5 	bl	800c528 <_vfiprintf_r>
 8009fde:	b003      	add	sp, #12
 8009fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe4:	b004      	add	sp, #16
 8009fe6:	4770      	bx	lr
 8009fe8:	20000210 	.word	0x20000210

08009fec <sniprintf>:
 8009fec:	b40c      	push	{r2, r3}
 8009fee:	b530      	push	{r4, r5, lr}
 8009ff0:	4b17      	ldr	r3, [pc, #92]	@ (800a050 <sniprintf+0x64>)
 8009ff2:	1e0c      	subs	r4, r1, #0
 8009ff4:	681d      	ldr	r5, [r3, #0]
 8009ff6:	b09d      	sub	sp, #116	@ 0x74
 8009ff8:	da08      	bge.n	800a00c <sniprintf+0x20>
 8009ffa:	238b      	movs	r3, #139	@ 0x8b
 8009ffc:	602b      	str	r3, [r5, #0]
 8009ffe:	f04f 30ff 	mov.w	r0, #4294967295
 800a002:	b01d      	add	sp, #116	@ 0x74
 800a004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a008:	b002      	add	sp, #8
 800a00a:	4770      	bx	lr
 800a00c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a010:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a014:	bf14      	ite	ne
 800a016:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a01a:	4623      	moveq	r3, r4
 800a01c:	9304      	str	r3, [sp, #16]
 800a01e:	9307      	str	r3, [sp, #28]
 800a020:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a024:	9002      	str	r0, [sp, #8]
 800a026:	9006      	str	r0, [sp, #24]
 800a028:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a02c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a02e:	ab21      	add	r3, sp, #132	@ 0x84
 800a030:	a902      	add	r1, sp, #8
 800a032:	4628      	mov	r0, r5
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	f002 f951 	bl	800c2dc <_svfiprintf_r>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	bfbc      	itt	lt
 800a03e:	238b      	movlt	r3, #139	@ 0x8b
 800a040:	602b      	strlt	r3, [r5, #0]
 800a042:	2c00      	cmp	r4, #0
 800a044:	d0dd      	beq.n	800a002 <sniprintf+0x16>
 800a046:	9b02      	ldr	r3, [sp, #8]
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
 800a04c:	e7d9      	b.n	800a002 <sniprintf+0x16>
 800a04e:	bf00      	nop
 800a050:	20000210 	.word	0x20000210

0800a054 <siprintf>:
 800a054:	b40e      	push	{r1, r2, r3}
 800a056:	b500      	push	{lr}
 800a058:	b09c      	sub	sp, #112	@ 0x70
 800a05a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a05c:	9002      	str	r0, [sp, #8]
 800a05e:	9006      	str	r0, [sp, #24]
 800a060:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a064:	4809      	ldr	r0, [pc, #36]	@ (800a08c <siprintf+0x38>)
 800a066:	9107      	str	r1, [sp, #28]
 800a068:	9104      	str	r1, [sp, #16]
 800a06a:	4909      	ldr	r1, [pc, #36]	@ (800a090 <siprintf+0x3c>)
 800a06c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a070:	9105      	str	r1, [sp, #20]
 800a072:	6800      	ldr	r0, [r0, #0]
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	a902      	add	r1, sp, #8
 800a078:	f002 f930 	bl	800c2dc <_svfiprintf_r>
 800a07c:	9b02      	ldr	r3, [sp, #8]
 800a07e:	2200      	movs	r2, #0
 800a080:	701a      	strb	r2, [r3, #0]
 800a082:	b01c      	add	sp, #112	@ 0x70
 800a084:	f85d eb04 	ldr.w	lr, [sp], #4
 800a088:	b003      	add	sp, #12
 800a08a:	4770      	bx	lr
 800a08c:	20000210 	.word	0x20000210
 800a090:	ffff0208 	.word	0xffff0208

0800a094 <__sread>:
 800a094:	b510      	push	{r4, lr}
 800a096:	460c      	mov	r4, r1
 800a098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a09c:	f000 f87e 	bl	800a19c <_read_r>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	bfab      	itete	ge
 800a0a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0a6:	89a3      	ldrhlt	r3, [r4, #12]
 800a0a8:	181b      	addge	r3, r3, r0
 800a0aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a0ae:	bfac      	ite	ge
 800a0b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a0b2:	81a3      	strhlt	r3, [r4, #12]
 800a0b4:	bd10      	pop	{r4, pc}

0800a0b6 <__swrite>:
 800a0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ba:	461f      	mov	r7, r3
 800a0bc:	898b      	ldrh	r3, [r1, #12]
 800a0be:	05db      	lsls	r3, r3, #23
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	d505      	bpl.n	800a0d4 <__swrite+0x1e>
 800a0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f000 f852 	bl	800a178 <_lseek_r>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a0de:	81a3      	strh	r3, [r4, #12]
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ea:	f000 b869 	b.w	800a1c0 <_write_r>

0800a0ee <__sseek>:
 800a0ee:	b510      	push	{r4, lr}
 800a0f0:	460c      	mov	r4, r1
 800a0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f6:	f000 f83f 	bl	800a178 <_lseek_r>
 800a0fa:	1c43      	adds	r3, r0, #1
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	bf15      	itete	ne
 800a100:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a102:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a106:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a10a:	81a3      	strheq	r3, [r4, #12]
 800a10c:	bf18      	it	ne
 800a10e:	81a3      	strhne	r3, [r4, #12]
 800a110:	bd10      	pop	{r4, pc}

0800a112 <__sclose>:
 800a112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a116:	f000 b81f 	b.w	800a158 <_close_r>

0800a11a <memset>:
 800a11a:	4402      	add	r2, r0
 800a11c:	4603      	mov	r3, r0
 800a11e:	4293      	cmp	r3, r2
 800a120:	d100      	bne.n	800a124 <memset+0xa>
 800a122:	4770      	bx	lr
 800a124:	f803 1b01 	strb.w	r1, [r3], #1
 800a128:	e7f9      	b.n	800a11e <memset+0x4>

0800a12a <strncmp>:
 800a12a:	b510      	push	{r4, lr}
 800a12c:	b16a      	cbz	r2, 800a14a <strncmp+0x20>
 800a12e:	3901      	subs	r1, #1
 800a130:	1884      	adds	r4, r0, r2
 800a132:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a136:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d103      	bne.n	800a146 <strncmp+0x1c>
 800a13e:	42a0      	cmp	r0, r4
 800a140:	d001      	beq.n	800a146 <strncmp+0x1c>
 800a142:	2a00      	cmp	r2, #0
 800a144:	d1f5      	bne.n	800a132 <strncmp+0x8>
 800a146:	1ad0      	subs	r0, r2, r3
 800a148:	bd10      	pop	{r4, pc}
 800a14a:	4610      	mov	r0, r2
 800a14c:	e7fc      	b.n	800a148 <strncmp+0x1e>
	...

0800a150 <_localeconv_r>:
 800a150:	4800      	ldr	r0, [pc, #0]	@ (800a154 <_localeconv_r+0x4>)
 800a152:	4770      	bx	lr
 800a154:	20000194 	.word	0x20000194

0800a158 <_close_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4d06      	ldr	r5, [pc, #24]	@ (800a174 <_close_r+0x1c>)
 800a15c:	2300      	movs	r3, #0
 800a15e:	4604      	mov	r4, r0
 800a160:	4608      	mov	r0, r1
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	f7f8 ff3c 	bl	8002fe0 <_close>
 800a168:	1c43      	adds	r3, r0, #1
 800a16a:	d102      	bne.n	800a172 <_close_r+0x1a>
 800a16c:	682b      	ldr	r3, [r5, #0]
 800a16e:	b103      	cbz	r3, 800a172 <_close_r+0x1a>
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	20000634 	.word	0x20000634

0800a178 <_lseek_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4d07      	ldr	r5, [pc, #28]	@ (800a198 <_lseek_r+0x20>)
 800a17c:	4604      	mov	r4, r0
 800a17e:	4608      	mov	r0, r1
 800a180:	4611      	mov	r1, r2
 800a182:	2200      	movs	r2, #0
 800a184:	602a      	str	r2, [r5, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	f7f8 ff51 	bl	800302e <_lseek>
 800a18c:	1c43      	adds	r3, r0, #1
 800a18e:	d102      	bne.n	800a196 <_lseek_r+0x1e>
 800a190:	682b      	ldr	r3, [r5, #0]
 800a192:	b103      	cbz	r3, 800a196 <_lseek_r+0x1e>
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	bd38      	pop	{r3, r4, r5, pc}
 800a198:	20000634 	.word	0x20000634

0800a19c <_read_r>:
 800a19c:	b538      	push	{r3, r4, r5, lr}
 800a19e:	4d07      	ldr	r5, [pc, #28]	@ (800a1bc <_read_r+0x20>)
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	4608      	mov	r0, r1
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	602a      	str	r2, [r5, #0]
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	f7f8 fefb 	bl	8002fa6 <_read>
 800a1b0:	1c43      	adds	r3, r0, #1
 800a1b2:	d102      	bne.n	800a1ba <_read_r+0x1e>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	b103      	cbz	r3, 800a1ba <_read_r+0x1e>
 800a1b8:	6023      	str	r3, [r4, #0]
 800a1ba:	bd38      	pop	{r3, r4, r5, pc}
 800a1bc:	20000634 	.word	0x20000634

0800a1c0 <_write_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d07      	ldr	r5, [pc, #28]	@ (800a1e0 <_write_r+0x20>)
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	602a      	str	r2, [r5, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f7f8 fa8c 	bl	80026ec <_write>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_write_r+0x1e>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_write_r+0x1e>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	20000634 	.word	0x20000634

0800a1e4 <__errno>:
 800a1e4:	4b01      	ldr	r3, [pc, #4]	@ (800a1ec <__errno+0x8>)
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000210 	.word	0x20000210

0800a1f0 <__libc_init_array>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4d0d      	ldr	r5, [pc, #52]	@ (800a228 <__libc_init_array+0x38>)
 800a1f4:	4c0d      	ldr	r4, [pc, #52]	@ (800a22c <__libc_init_array+0x3c>)
 800a1f6:	1b64      	subs	r4, r4, r5
 800a1f8:	10a4      	asrs	r4, r4, #2
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	42a6      	cmp	r6, r4
 800a1fe:	d109      	bne.n	800a214 <__libc_init_array+0x24>
 800a200:	4d0b      	ldr	r5, [pc, #44]	@ (800a230 <__libc_init_array+0x40>)
 800a202:	4c0c      	ldr	r4, [pc, #48]	@ (800a234 <__libc_init_array+0x44>)
 800a204:	f002 fdb2 	bl	800cd6c <_init>
 800a208:	1b64      	subs	r4, r4, r5
 800a20a:	10a4      	asrs	r4, r4, #2
 800a20c:	2600      	movs	r6, #0
 800a20e:	42a6      	cmp	r6, r4
 800a210:	d105      	bne.n	800a21e <__libc_init_array+0x2e>
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	f855 3b04 	ldr.w	r3, [r5], #4
 800a218:	4798      	blx	r3
 800a21a:	3601      	adds	r6, #1
 800a21c:	e7ee      	b.n	800a1fc <__libc_init_array+0xc>
 800a21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a222:	4798      	blx	r3
 800a224:	3601      	adds	r6, #1
 800a226:	e7f2      	b.n	800a20e <__libc_init_array+0x1e>
 800a228:	0800d2d0 	.word	0x0800d2d0
 800a22c:	0800d2d0 	.word	0x0800d2d0
 800a230:	0800d2d0 	.word	0x0800d2d0
 800a234:	0800d2d4 	.word	0x0800d2d4

0800a238 <__retarget_lock_init_recursive>:
 800a238:	4770      	bx	lr

0800a23a <__retarget_lock_acquire_recursive>:
 800a23a:	4770      	bx	lr

0800a23c <__retarget_lock_release_recursive>:
 800a23c:	4770      	bx	lr

0800a23e <memcpy>:
 800a23e:	440a      	add	r2, r1
 800a240:	4291      	cmp	r1, r2
 800a242:	f100 33ff 	add.w	r3, r0, #4294967295
 800a246:	d100      	bne.n	800a24a <memcpy+0xc>
 800a248:	4770      	bx	lr
 800a24a:	b510      	push	{r4, lr}
 800a24c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a250:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a254:	4291      	cmp	r1, r2
 800a256:	d1f9      	bne.n	800a24c <memcpy+0xe>
 800a258:	bd10      	pop	{r4, pc}
 800a25a:	0000      	movs	r0, r0
 800a25c:	0000      	movs	r0, r0
	...

0800a260 <nan>:
 800a260:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a268 <nan+0x8>
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	00000000 	.word	0x00000000
 800a26c:	7ff80000 	.word	0x7ff80000

0800a270 <nanf>:
 800a270:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a278 <nanf+0x8>
 800a274:	4770      	bx	lr
 800a276:	bf00      	nop
 800a278:	7fc00000 	.word	0x7fc00000

0800a27c <quorem>:
 800a27c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a280:	6903      	ldr	r3, [r0, #16]
 800a282:	690c      	ldr	r4, [r1, #16]
 800a284:	42a3      	cmp	r3, r4
 800a286:	4607      	mov	r7, r0
 800a288:	db7e      	blt.n	800a388 <quorem+0x10c>
 800a28a:	3c01      	subs	r4, #1
 800a28c:	f101 0814 	add.w	r8, r1, #20
 800a290:	00a3      	lsls	r3, r4, #2
 800a292:	f100 0514 	add.w	r5, r0, #20
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2b2:	d32e      	bcc.n	800a312 <quorem+0x96>
 800a2b4:	f04f 0a00 	mov.w	sl, #0
 800a2b8:	46c4      	mov	ip, r8
 800a2ba:	46ae      	mov	lr, r5
 800a2bc:	46d3      	mov	fp, sl
 800a2be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2c2:	b298      	uxth	r0, r3
 800a2c4:	fb06 a000 	mla	r0, r6, r0, sl
 800a2c8:	0c02      	lsrs	r2, r0, #16
 800a2ca:	0c1b      	lsrs	r3, r3, #16
 800a2cc:	fb06 2303 	mla	r3, r6, r3, r2
 800a2d0:	f8de 2000 	ldr.w	r2, [lr]
 800a2d4:	b280      	uxth	r0, r0
 800a2d6:	b292      	uxth	r2, r2
 800a2d8:	1a12      	subs	r2, r2, r0
 800a2da:	445a      	add	r2, fp
 800a2dc:	f8de 0000 	ldr.w	r0, [lr]
 800a2e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a2ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a2ee:	b292      	uxth	r2, r2
 800a2f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a2f4:	45e1      	cmp	r9, ip
 800a2f6:	f84e 2b04 	str.w	r2, [lr], #4
 800a2fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a2fe:	d2de      	bcs.n	800a2be <quorem+0x42>
 800a300:	9b00      	ldr	r3, [sp, #0]
 800a302:	58eb      	ldr	r3, [r5, r3]
 800a304:	b92b      	cbnz	r3, 800a312 <quorem+0x96>
 800a306:	9b01      	ldr	r3, [sp, #4]
 800a308:	3b04      	subs	r3, #4
 800a30a:	429d      	cmp	r5, r3
 800a30c:	461a      	mov	r2, r3
 800a30e:	d32f      	bcc.n	800a370 <quorem+0xf4>
 800a310:	613c      	str	r4, [r7, #16]
 800a312:	4638      	mov	r0, r7
 800a314:	f001 fd10 	bl	800bd38 <__mcmp>
 800a318:	2800      	cmp	r0, #0
 800a31a:	db25      	blt.n	800a368 <quorem+0xec>
 800a31c:	4629      	mov	r1, r5
 800a31e:	2000      	movs	r0, #0
 800a320:	f858 2b04 	ldr.w	r2, [r8], #4
 800a324:	f8d1 c000 	ldr.w	ip, [r1]
 800a328:	fa1f fe82 	uxth.w	lr, r2
 800a32c:	fa1f f38c 	uxth.w	r3, ip
 800a330:	eba3 030e 	sub.w	r3, r3, lr
 800a334:	4403      	add	r3, r0
 800a336:	0c12      	lsrs	r2, r2, #16
 800a338:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a33c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a340:	b29b      	uxth	r3, r3
 800a342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a346:	45c1      	cmp	r9, r8
 800a348:	f841 3b04 	str.w	r3, [r1], #4
 800a34c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a350:	d2e6      	bcs.n	800a320 <quorem+0xa4>
 800a352:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a35a:	b922      	cbnz	r2, 800a366 <quorem+0xea>
 800a35c:	3b04      	subs	r3, #4
 800a35e:	429d      	cmp	r5, r3
 800a360:	461a      	mov	r2, r3
 800a362:	d30b      	bcc.n	800a37c <quorem+0x100>
 800a364:	613c      	str	r4, [r7, #16]
 800a366:	3601      	adds	r6, #1
 800a368:	4630      	mov	r0, r6
 800a36a:	b003      	add	sp, #12
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	6812      	ldr	r2, [r2, #0]
 800a372:	3b04      	subs	r3, #4
 800a374:	2a00      	cmp	r2, #0
 800a376:	d1cb      	bne.n	800a310 <quorem+0x94>
 800a378:	3c01      	subs	r4, #1
 800a37a:	e7c6      	b.n	800a30a <quorem+0x8e>
 800a37c:	6812      	ldr	r2, [r2, #0]
 800a37e:	3b04      	subs	r3, #4
 800a380:	2a00      	cmp	r2, #0
 800a382:	d1ef      	bne.n	800a364 <quorem+0xe8>
 800a384:	3c01      	subs	r4, #1
 800a386:	e7ea      	b.n	800a35e <quorem+0xe2>
 800a388:	2000      	movs	r0, #0
 800a38a:	e7ee      	b.n	800a36a <quorem+0xee>
 800a38c:	0000      	movs	r0, r0
	...

0800a390 <_dtoa_r>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	69c7      	ldr	r7, [r0, #28]
 800a396:	b099      	sub	sp, #100	@ 0x64
 800a398:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a39c:	ec55 4b10 	vmov	r4, r5, d0
 800a3a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a3a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3a4:	4683      	mov	fp, r0
 800a3a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3aa:	b97f      	cbnz	r7, 800a3cc <_dtoa_r+0x3c>
 800a3ac:	2010      	movs	r0, #16
 800a3ae:	f001 f937 	bl	800b620 <malloc>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a3b8:	b920      	cbnz	r0, 800a3c4 <_dtoa_r+0x34>
 800a3ba:	4ba7      	ldr	r3, [pc, #668]	@ (800a658 <_dtoa_r+0x2c8>)
 800a3bc:	21ef      	movs	r1, #239	@ 0xef
 800a3be:	48a7      	ldr	r0, [pc, #668]	@ (800a65c <_dtoa_r+0x2cc>)
 800a3c0:	f002 fb34 	bl	800ca2c <__assert_func>
 800a3c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a3c8:	6007      	str	r7, [r0, #0]
 800a3ca:	60c7      	str	r7, [r0, #12]
 800a3cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3d0:	6819      	ldr	r1, [r3, #0]
 800a3d2:	b159      	cbz	r1, 800a3ec <_dtoa_r+0x5c>
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	604a      	str	r2, [r1, #4]
 800a3d8:	2301      	movs	r3, #1
 800a3da:	4093      	lsls	r3, r2
 800a3dc:	608b      	str	r3, [r1, #8]
 800a3de:	4658      	mov	r0, fp
 800a3e0:	f001 fa26 	bl	800b830 <_Bfree>
 800a3e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	1e2b      	subs	r3, r5, #0
 800a3ee:	bfb9      	ittee	lt
 800a3f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a3f4:	9303      	strlt	r3, [sp, #12]
 800a3f6:	2300      	movge	r3, #0
 800a3f8:	6033      	strge	r3, [r6, #0]
 800a3fa:	9f03      	ldr	r7, [sp, #12]
 800a3fc:	4b98      	ldr	r3, [pc, #608]	@ (800a660 <_dtoa_r+0x2d0>)
 800a3fe:	bfbc      	itt	lt
 800a400:	2201      	movlt	r2, #1
 800a402:	6032      	strlt	r2, [r6, #0]
 800a404:	43bb      	bics	r3, r7
 800a406:	d112      	bne.n	800a42e <_dtoa_r+0x9e>
 800a408:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a40a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a414:	4323      	orrs	r3, r4
 800a416:	f000 854d 	beq.w	800aeb4 <_dtoa_r+0xb24>
 800a41a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a41c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a674 <_dtoa_r+0x2e4>
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 854f 	beq.w	800aec4 <_dtoa_r+0xb34>
 800a426:	f10a 0303 	add.w	r3, sl, #3
 800a42a:	f000 bd49 	b.w	800aec0 <_dtoa_r+0xb30>
 800a42e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a432:	2200      	movs	r2, #0
 800a434:	ec51 0b17 	vmov	r0, r1, d7
 800a438:	2300      	movs	r3, #0
 800a43a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a43e:	f7f6 fb63 	bl	8000b08 <__aeabi_dcmpeq>
 800a442:	4680      	mov	r8, r0
 800a444:	b158      	cbz	r0, 800a45e <_dtoa_r+0xce>
 800a446:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a448:	2301      	movs	r3, #1
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a44e:	b113      	cbz	r3, 800a456 <_dtoa_r+0xc6>
 800a450:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a452:	4b84      	ldr	r3, [pc, #528]	@ (800a664 <_dtoa_r+0x2d4>)
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a678 <_dtoa_r+0x2e8>
 800a45a:	f000 bd33 	b.w	800aec4 <_dtoa_r+0xb34>
 800a45e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a462:	aa16      	add	r2, sp, #88	@ 0x58
 800a464:	a917      	add	r1, sp, #92	@ 0x5c
 800a466:	4658      	mov	r0, fp
 800a468:	f001 fd86 	bl	800bf78 <__d2b>
 800a46c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a470:	4681      	mov	r9, r0
 800a472:	2e00      	cmp	r6, #0
 800a474:	d077      	beq.n	800a566 <_dtoa_r+0x1d6>
 800a476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a478:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a47c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a484:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a488:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a48c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a490:	4619      	mov	r1, r3
 800a492:	2200      	movs	r2, #0
 800a494:	4b74      	ldr	r3, [pc, #464]	@ (800a668 <_dtoa_r+0x2d8>)
 800a496:	f7f5 ff17 	bl	80002c8 <__aeabi_dsub>
 800a49a:	a369      	add	r3, pc, #420	@ (adr r3, 800a640 <_dtoa_r+0x2b0>)
 800a49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a0:	f7f6 f8ca 	bl	8000638 <__aeabi_dmul>
 800a4a4:	a368      	add	r3, pc, #416	@ (adr r3, 800a648 <_dtoa_r+0x2b8>)
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f5 ff0f 	bl	80002cc <__adddf3>
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	f7f6 f856 	bl	8000564 <__aeabi_i2d>
 800a4b8:	a365      	add	r3, pc, #404	@ (adr r3, 800a650 <_dtoa_r+0x2c0>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f6 f8bb 	bl	8000638 <__aeabi_dmul>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	4629      	mov	r1, r5
 800a4ca:	f7f5 feff 	bl	80002cc <__adddf3>
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	460d      	mov	r5, r1
 800a4d2:	f7f6 fb61 	bl	8000b98 <__aeabi_d2iz>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4607      	mov	r7, r0
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7f6 fb1c 	bl	8000b1c <__aeabi_dcmplt>
 800a4e4:	b140      	cbz	r0, 800a4f8 <_dtoa_r+0x168>
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7f6 f83c 	bl	8000564 <__aeabi_i2d>
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	462b      	mov	r3, r5
 800a4f0:	f7f6 fb0a 	bl	8000b08 <__aeabi_dcmpeq>
 800a4f4:	b900      	cbnz	r0, 800a4f8 <_dtoa_r+0x168>
 800a4f6:	3f01      	subs	r7, #1
 800a4f8:	2f16      	cmp	r7, #22
 800a4fa:	d851      	bhi.n	800a5a0 <_dtoa_r+0x210>
 800a4fc:	4b5b      	ldr	r3, [pc, #364]	@ (800a66c <_dtoa_r+0x2dc>)
 800a4fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a50a:	f7f6 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d048      	beq.n	800a5a4 <_dtoa_r+0x214>
 800a512:	3f01      	subs	r7, #1
 800a514:	2300      	movs	r3, #0
 800a516:	9312      	str	r3, [sp, #72]	@ 0x48
 800a518:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a51a:	1b9b      	subs	r3, r3, r6
 800a51c:	1e5a      	subs	r2, r3, #1
 800a51e:	bf44      	itt	mi
 800a520:	f1c3 0801 	rsbmi	r8, r3, #1
 800a524:	2300      	movmi	r3, #0
 800a526:	9208      	str	r2, [sp, #32]
 800a528:	bf54      	ite	pl
 800a52a:	f04f 0800 	movpl.w	r8, #0
 800a52e:	9308      	strmi	r3, [sp, #32]
 800a530:	2f00      	cmp	r7, #0
 800a532:	db39      	blt.n	800a5a8 <_dtoa_r+0x218>
 800a534:	9b08      	ldr	r3, [sp, #32]
 800a536:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a538:	443b      	add	r3, r7
 800a53a:	9308      	str	r3, [sp, #32]
 800a53c:	2300      	movs	r3, #0
 800a53e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a542:	2b09      	cmp	r3, #9
 800a544:	d864      	bhi.n	800a610 <_dtoa_r+0x280>
 800a546:	2b05      	cmp	r3, #5
 800a548:	bfc4      	itt	gt
 800a54a:	3b04      	subgt	r3, #4
 800a54c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a550:	f1a3 0302 	sub.w	r3, r3, #2
 800a554:	bfcc      	ite	gt
 800a556:	2400      	movgt	r4, #0
 800a558:	2401      	movle	r4, #1
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d863      	bhi.n	800a626 <_dtoa_r+0x296>
 800a55e:	e8df f003 	tbb	[pc, r3]
 800a562:	372a      	.short	0x372a
 800a564:	5535      	.short	0x5535
 800a566:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a56a:	441e      	add	r6, r3
 800a56c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a570:	2b20      	cmp	r3, #32
 800a572:	bfc1      	itttt	gt
 800a574:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a578:	409f      	lslgt	r7, r3
 800a57a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a57e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a582:	bfd6      	itet	le
 800a584:	f1c3 0320 	rsble	r3, r3, #32
 800a588:	ea47 0003 	orrgt.w	r0, r7, r3
 800a58c:	fa04 f003 	lslle.w	r0, r4, r3
 800a590:	f7f5 ffd8 	bl	8000544 <__aeabi_ui2d>
 800a594:	2201      	movs	r2, #1
 800a596:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a59a:	3e01      	subs	r6, #1
 800a59c:	9214      	str	r2, [sp, #80]	@ 0x50
 800a59e:	e777      	b.n	800a490 <_dtoa_r+0x100>
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e7b8      	b.n	800a516 <_dtoa_r+0x186>
 800a5a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a5a6:	e7b7      	b.n	800a518 <_dtoa_r+0x188>
 800a5a8:	427b      	negs	r3, r7
 800a5aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	eba8 0807 	sub.w	r8, r8, r7
 800a5b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5b4:	e7c4      	b.n	800a540 <_dtoa_r+0x1b0>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	dc35      	bgt.n	800a62c <_dtoa_r+0x29c>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	9307      	str	r3, [sp, #28]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5ca:	e00b      	b.n	800a5e4 <_dtoa_r+0x254>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e7f3      	b.n	800a5b8 <_dtoa_r+0x228>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5d6:	18fb      	adds	r3, r7, r3
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	9307      	str	r3, [sp, #28]
 800a5e0:	bfb8      	it	lt
 800a5e2:	2301      	movlt	r3, #1
 800a5e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	f102 0514 	add.w	r5, r2, #20
 800a5f0:	429d      	cmp	r5, r3
 800a5f2:	d91f      	bls.n	800a634 <_dtoa_r+0x2a4>
 800a5f4:	6041      	str	r1, [r0, #4]
 800a5f6:	4658      	mov	r0, fp
 800a5f8:	f001 f8da 	bl	800b7b0 <_Balloc>
 800a5fc:	4682      	mov	sl, r0
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d13c      	bne.n	800a67c <_dtoa_r+0x2ec>
 800a602:	4b1b      	ldr	r3, [pc, #108]	@ (800a670 <_dtoa_r+0x2e0>)
 800a604:	4602      	mov	r2, r0
 800a606:	f240 11af 	movw	r1, #431	@ 0x1af
 800a60a:	e6d8      	b.n	800a3be <_dtoa_r+0x2e>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e7e0      	b.n	800a5d2 <_dtoa_r+0x242>
 800a610:	2401      	movs	r4, #1
 800a612:	2300      	movs	r3, #0
 800a614:	9309      	str	r3, [sp, #36]	@ 0x24
 800a616:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a618:	f04f 33ff 	mov.w	r3, #4294967295
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	2200      	movs	r2, #0
 800a622:	2312      	movs	r3, #18
 800a624:	e7d0      	b.n	800a5c8 <_dtoa_r+0x238>
 800a626:	2301      	movs	r3, #1
 800a628:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a62a:	e7f5      	b.n	800a618 <_dtoa_r+0x288>
 800a62c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	9307      	str	r3, [sp, #28]
 800a632:	e7d7      	b.n	800a5e4 <_dtoa_r+0x254>
 800a634:	3101      	adds	r1, #1
 800a636:	0052      	lsls	r2, r2, #1
 800a638:	e7d8      	b.n	800a5ec <_dtoa_r+0x25c>
 800a63a:	bf00      	nop
 800a63c:	f3af 8000 	nop.w
 800a640:	636f4361 	.word	0x636f4361
 800a644:	3fd287a7 	.word	0x3fd287a7
 800a648:	8b60c8b3 	.word	0x8b60c8b3
 800a64c:	3fc68a28 	.word	0x3fc68a28
 800a650:	509f79fb 	.word	0x509f79fb
 800a654:	3fd34413 	.word	0x3fd34413
 800a658:	0800cf3e 	.word	0x0800cf3e
 800a65c:	0800cf55 	.word	0x0800cf55
 800a660:	7ff00000 	.word	0x7ff00000
 800a664:	0800cf01 	.word	0x0800cf01
 800a668:	3ff80000 	.word	0x3ff80000
 800a66c:	0800d0b0 	.word	0x0800d0b0
 800a670:	0800cfad 	.word	0x0800cfad
 800a674:	0800cf3a 	.word	0x0800cf3a
 800a678:	0800cf00 	.word	0x0800cf00
 800a67c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a680:	6018      	str	r0, [r3, #0]
 800a682:	9b07      	ldr	r3, [sp, #28]
 800a684:	2b0e      	cmp	r3, #14
 800a686:	f200 80a4 	bhi.w	800a7d2 <_dtoa_r+0x442>
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	f000 80a1 	beq.w	800a7d2 <_dtoa_r+0x442>
 800a690:	2f00      	cmp	r7, #0
 800a692:	dd33      	ble.n	800a6fc <_dtoa_r+0x36c>
 800a694:	4bad      	ldr	r3, [pc, #692]	@ (800a94c <_dtoa_r+0x5bc>)
 800a696:	f007 020f 	and.w	r2, r7, #15
 800a69a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a69e:	ed93 7b00 	vldr	d7, [r3]
 800a6a2:	05f8      	lsls	r0, r7, #23
 800a6a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a6a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a6ac:	d516      	bpl.n	800a6dc <_dtoa_r+0x34c>
 800a6ae:	4ba8      	ldr	r3, [pc, #672]	@ (800a950 <_dtoa_r+0x5c0>)
 800a6b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6b8:	f7f6 f8e8 	bl	800088c <__aeabi_ddiv>
 800a6bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6c0:	f004 040f 	and.w	r4, r4, #15
 800a6c4:	2603      	movs	r6, #3
 800a6c6:	4da2      	ldr	r5, [pc, #648]	@ (800a950 <_dtoa_r+0x5c0>)
 800a6c8:	b954      	cbnz	r4, 800a6e0 <_dtoa_r+0x350>
 800a6ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d2:	f7f6 f8db 	bl	800088c <__aeabi_ddiv>
 800a6d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6da:	e028      	b.n	800a72e <_dtoa_r+0x39e>
 800a6dc:	2602      	movs	r6, #2
 800a6de:	e7f2      	b.n	800a6c6 <_dtoa_r+0x336>
 800a6e0:	07e1      	lsls	r1, r4, #31
 800a6e2:	d508      	bpl.n	800a6f6 <_dtoa_r+0x366>
 800a6e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6ec:	f7f5 ffa4 	bl	8000638 <__aeabi_dmul>
 800a6f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6f4:	3601      	adds	r6, #1
 800a6f6:	1064      	asrs	r4, r4, #1
 800a6f8:	3508      	adds	r5, #8
 800a6fa:	e7e5      	b.n	800a6c8 <_dtoa_r+0x338>
 800a6fc:	f000 80d2 	beq.w	800a8a4 <_dtoa_r+0x514>
 800a700:	427c      	negs	r4, r7
 800a702:	4b92      	ldr	r3, [pc, #584]	@ (800a94c <_dtoa_r+0x5bc>)
 800a704:	4d92      	ldr	r5, [pc, #584]	@ (800a950 <_dtoa_r+0x5c0>)
 800a706:	f004 020f 	and.w	r2, r4, #15
 800a70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a716:	f7f5 ff8f 	bl	8000638 <__aeabi_dmul>
 800a71a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a71e:	1124      	asrs	r4, r4, #4
 800a720:	2300      	movs	r3, #0
 800a722:	2602      	movs	r6, #2
 800a724:	2c00      	cmp	r4, #0
 800a726:	f040 80b2 	bne.w	800a88e <_dtoa_r+0x4fe>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1d3      	bne.n	800a6d6 <_dtoa_r+0x346>
 800a72e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a730:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 80b7 	beq.w	800a8a8 <_dtoa_r+0x518>
 800a73a:	4b86      	ldr	r3, [pc, #536]	@ (800a954 <_dtoa_r+0x5c4>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	4620      	mov	r0, r4
 800a740:	4629      	mov	r1, r5
 800a742:	f7f6 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 800a746:	2800      	cmp	r0, #0
 800a748:	f000 80ae 	beq.w	800a8a8 <_dtoa_r+0x518>
 800a74c:	9b07      	ldr	r3, [sp, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 80aa 	beq.w	800a8a8 <_dtoa_r+0x518>
 800a754:	9b00      	ldr	r3, [sp, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	dd37      	ble.n	800a7ca <_dtoa_r+0x43a>
 800a75a:	1e7b      	subs	r3, r7, #1
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	4620      	mov	r0, r4
 800a760:	4b7d      	ldr	r3, [pc, #500]	@ (800a958 <_dtoa_r+0x5c8>)
 800a762:	2200      	movs	r2, #0
 800a764:	4629      	mov	r1, r5
 800a766:	f7f5 ff67 	bl	8000638 <__aeabi_dmul>
 800a76a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a76e:	9c00      	ldr	r4, [sp, #0]
 800a770:	3601      	adds	r6, #1
 800a772:	4630      	mov	r0, r6
 800a774:	f7f5 fef6 	bl	8000564 <__aeabi_i2d>
 800a778:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a77c:	f7f5 ff5c 	bl	8000638 <__aeabi_dmul>
 800a780:	4b76      	ldr	r3, [pc, #472]	@ (800a95c <_dtoa_r+0x5cc>)
 800a782:	2200      	movs	r2, #0
 800a784:	f7f5 fda2 	bl	80002cc <__adddf3>
 800a788:	4605      	mov	r5, r0
 800a78a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a78e:	2c00      	cmp	r4, #0
 800a790:	f040 808d 	bne.w	800a8ae <_dtoa_r+0x51e>
 800a794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a798:	4b71      	ldr	r3, [pc, #452]	@ (800a960 <_dtoa_r+0x5d0>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	f7f5 fd94 	bl	80002c8 <__aeabi_dsub>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7a8:	462a      	mov	r2, r5
 800a7aa:	4633      	mov	r3, r6
 800a7ac:	f7f6 f9d4 	bl	8000b58 <__aeabi_dcmpgt>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f040 828b 	bne.w	800accc <_dtoa_r+0x93c>
 800a7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a7c0:	f7f6 f9ac 	bl	8000b1c <__aeabi_dcmplt>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f040 8128 	bne.w	800aa1a <_dtoa_r+0x68a>
 800a7ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a7ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a7d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f2c0 815a 	blt.w	800aa8e <_dtoa_r+0x6fe>
 800a7da:	2f0e      	cmp	r7, #14
 800a7dc:	f300 8157 	bgt.w	800aa8e <_dtoa_r+0x6fe>
 800a7e0:	4b5a      	ldr	r3, [pc, #360]	@ (800a94c <_dtoa_r+0x5bc>)
 800a7e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a7e6:	ed93 7b00 	vldr	d7, [r3]
 800a7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	ed8d 7b00 	vstr	d7, [sp]
 800a7f2:	da03      	bge.n	800a7fc <_dtoa_r+0x46c>
 800a7f4:	9b07      	ldr	r3, [sp, #28]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f340 8101 	ble.w	800a9fe <_dtoa_r+0x66e>
 800a7fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a800:	4656      	mov	r6, sl
 800a802:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a806:	4620      	mov	r0, r4
 800a808:	4629      	mov	r1, r5
 800a80a:	f7f6 f83f 	bl	800088c <__aeabi_ddiv>
 800a80e:	f7f6 f9c3 	bl	8000b98 <__aeabi_d2iz>
 800a812:	4680      	mov	r8, r0
 800a814:	f7f5 fea6 	bl	8000564 <__aeabi_i2d>
 800a818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a81c:	f7f5 ff0c 	bl	8000638 <__aeabi_dmul>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a82c:	f7f5 fd4c 	bl	80002c8 <__aeabi_dsub>
 800a830:	f806 4b01 	strb.w	r4, [r6], #1
 800a834:	9d07      	ldr	r5, [sp, #28]
 800a836:	eba6 040a 	sub.w	r4, r6, sl
 800a83a:	42a5      	cmp	r5, r4
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	f040 8117 	bne.w	800aa72 <_dtoa_r+0x6e2>
 800a844:	f7f5 fd42 	bl	80002cc <__adddf3>
 800a848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a84c:	4604      	mov	r4, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	f7f6 f982 	bl	8000b58 <__aeabi_dcmpgt>
 800a854:	2800      	cmp	r0, #0
 800a856:	f040 80f9 	bne.w	800aa4c <_dtoa_r+0x6bc>
 800a85a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a85e:	4620      	mov	r0, r4
 800a860:	4629      	mov	r1, r5
 800a862:	f7f6 f951 	bl	8000b08 <__aeabi_dcmpeq>
 800a866:	b118      	cbz	r0, 800a870 <_dtoa_r+0x4e0>
 800a868:	f018 0f01 	tst.w	r8, #1
 800a86c:	f040 80ee 	bne.w	800aa4c <_dtoa_r+0x6bc>
 800a870:	4649      	mov	r1, r9
 800a872:	4658      	mov	r0, fp
 800a874:	f000 ffdc 	bl	800b830 <_Bfree>
 800a878:	2300      	movs	r3, #0
 800a87a:	7033      	strb	r3, [r6, #0]
 800a87c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a87e:	3701      	adds	r7, #1
 800a880:	601f      	str	r7, [r3, #0]
 800a882:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 831d 	beq.w	800aec4 <_dtoa_r+0xb34>
 800a88a:	601e      	str	r6, [r3, #0]
 800a88c:	e31a      	b.n	800aec4 <_dtoa_r+0xb34>
 800a88e:	07e2      	lsls	r2, r4, #31
 800a890:	d505      	bpl.n	800a89e <_dtoa_r+0x50e>
 800a892:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a896:	f7f5 fecf 	bl	8000638 <__aeabi_dmul>
 800a89a:	3601      	adds	r6, #1
 800a89c:	2301      	movs	r3, #1
 800a89e:	1064      	asrs	r4, r4, #1
 800a8a0:	3508      	adds	r5, #8
 800a8a2:	e73f      	b.n	800a724 <_dtoa_r+0x394>
 800a8a4:	2602      	movs	r6, #2
 800a8a6:	e742      	b.n	800a72e <_dtoa_r+0x39e>
 800a8a8:	9c07      	ldr	r4, [sp, #28]
 800a8aa:	9704      	str	r7, [sp, #16]
 800a8ac:	e761      	b.n	800a772 <_dtoa_r+0x3e2>
 800a8ae:	4b27      	ldr	r3, [pc, #156]	@ (800a94c <_dtoa_r+0x5bc>)
 800a8b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8ba:	4454      	add	r4, sl
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	d053      	beq.n	800a968 <_dtoa_r+0x5d8>
 800a8c0:	4928      	ldr	r1, [pc, #160]	@ (800a964 <_dtoa_r+0x5d4>)
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	f7f5 ffe2 	bl	800088c <__aeabi_ddiv>
 800a8c8:	4633      	mov	r3, r6
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	f7f5 fcfc 	bl	80002c8 <__aeabi_dsub>
 800a8d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8d4:	4656      	mov	r6, sl
 800a8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8da:	f7f6 f95d 	bl	8000b98 <__aeabi_d2iz>
 800a8de:	4605      	mov	r5, r0
 800a8e0:	f7f5 fe40 	bl	8000564 <__aeabi_i2d>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ec:	f7f5 fcec 	bl	80002c8 <__aeabi_dsub>
 800a8f0:	3530      	adds	r5, #48	@ 0x30
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8fa:	f806 5b01 	strb.w	r5, [r6], #1
 800a8fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a902:	f7f6 f90b 	bl	8000b1c <__aeabi_dcmplt>
 800a906:	2800      	cmp	r0, #0
 800a908:	d171      	bne.n	800a9ee <_dtoa_r+0x65e>
 800a90a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a90e:	4911      	ldr	r1, [pc, #68]	@ (800a954 <_dtoa_r+0x5c4>)
 800a910:	2000      	movs	r0, #0
 800a912:	f7f5 fcd9 	bl	80002c8 <__aeabi_dsub>
 800a916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a91a:	f7f6 f8ff 	bl	8000b1c <__aeabi_dcmplt>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f040 8095 	bne.w	800aa4e <_dtoa_r+0x6be>
 800a924:	42a6      	cmp	r6, r4
 800a926:	f43f af50 	beq.w	800a7ca <_dtoa_r+0x43a>
 800a92a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a92e:	4b0a      	ldr	r3, [pc, #40]	@ (800a958 <_dtoa_r+0x5c8>)
 800a930:	2200      	movs	r2, #0
 800a932:	f7f5 fe81 	bl	8000638 <__aeabi_dmul>
 800a936:	4b08      	ldr	r3, [pc, #32]	@ (800a958 <_dtoa_r+0x5c8>)
 800a938:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a93c:	2200      	movs	r2, #0
 800a93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a942:	f7f5 fe79 	bl	8000638 <__aeabi_dmul>
 800a946:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a94a:	e7c4      	b.n	800a8d6 <_dtoa_r+0x546>
 800a94c:	0800d0b0 	.word	0x0800d0b0
 800a950:	0800d088 	.word	0x0800d088
 800a954:	3ff00000 	.word	0x3ff00000
 800a958:	40240000 	.word	0x40240000
 800a95c:	401c0000 	.word	0x401c0000
 800a960:	40140000 	.word	0x40140000
 800a964:	3fe00000 	.word	0x3fe00000
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	f7f5 fe64 	bl	8000638 <__aeabi_dmul>
 800a970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a974:	9415      	str	r4, [sp, #84]	@ 0x54
 800a976:	4656      	mov	r6, sl
 800a978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a97c:	f7f6 f90c 	bl	8000b98 <__aeabi_d2iz>
 800a980:	4605      	mov	r5, r0
 800a982:	f7f5 fdef 	bl	8000564 <__aeabi_i2d>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a98e:	f7f5 fc9b 	bl	80002c8 <__aeabi_dsub>
 800a992:	3530      	adds	r5, #48	@ 0x30
 800a994:	f806 5b01 	strb.w	r5, [r6], #1
 800a998:	4602      	mov	r2, r0
 800a99a:	460b      	mov	r3, r1
 800a99c:	42a6      	cmp	r6, r4
 800a99e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	d124      	bne.n	800a9f2 <_dtoa_r+0x662>
 800a9a8:	4bac      	ldr	r3, [pc, #688]	@ (800ac5c <_dtoa_r+0x8cc>)
 800a9aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a9ae:	f7f5 fc8d 	bl	80002cc <__adddf3>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ba:	f7f6 f8cd 	bl	8000b58 <__aeabi_dcmpgt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d145      	bne.n	800aa4e <_dtoa_r+0x6be>
 800a9c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9c6:	49a5      	ldr	r1, [pc, #660]	@ (800ac5c <_dtoa_r+0x8cc>)
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	f7f5 fc7d 	bl	80002c8 <__aeabi_dsub>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d6:	f7f6 f8a1 	bl	8000b1c <__aeabi_dcmplt>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f43f aef5 	beq.w	800a7ca <_dtoa_r+0x43a>
 800a9e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a9e2:	1e73      	subs	r3, r6, #1
 800a9e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a9e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a9ea:	2b30      	cmp	r3, #48	@ 0x30
 800a9ec:	d0f8      	beq.n	800a9e0 <_dtoa_r+0x650>
 800a9ee:	9f04      	ldr	r7, [sp, #16]
 800a9f0:	e73e      	b.n	800a870 <_dtoa_r+0x4e0>
 800a9f2:	4b9b      	ldr	r3, [pc, #620]	@ (800ac60 <_dtoa_r+0x8d0>)
 800a9f4:	f7f5 fe20 	bl	8000638 <__aeabi_dmul>
 800a9f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9fc:	e7bc      	b.n	800a978 <_dtoa_r+0x5e8>
 800a9fe:	d10c      	bne.n	800aa1a <_dtoa_r+0x68a>
 800aa00:	4b98      	ldr	r3, [pc, #608]	@ (800ac64 <_dtoa_r+0x8d4>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa08:	f7f5 fe16 	bl	8000638 <__aeabi_dmul>
 800aa0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa10:	f7f6 f898 	bl	8000b44 <__aeabi_dcmpge>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f000 8157 	beq.w	800acc8 <_dtoa_r+0x938>
 800aa1a:	2400      	movs	r4, #0
 800aa1c:	4625      	mov	r5, r4
 800aa1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa20:	43db      	mvns	r3, r3
 800aa22:	9304      	str	r3, [sp, #16]
 800aa24:	4656      	mov	r6, sl
 800aa26:	2700      	movs	r7, #0
 800aa28:	4621      	mov	r1, r4
 800aa2a:	4658      	mov	r0, fp
 800aa2c:	f000 ff00 	bl	800b830 <_Bfree>
 800aa30:	2d00      	cmp	r5, #0
 800aa32:	d0dc      	beq.n	800a9ee <_dtoa_r+0x65e>
 800aa34:	b12f      	cbz	r7, 800aa42 <_dtoa_r+0x6b2>
 800aa36:	42af      	cmp	r7, r5
 800aa38:	d003      	beq.n	800aa42 <_dtoa_r+0x6b2>
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	4658      	mov	r0, fp
 800aa3e:	f000 fef7 	bl	800b830 <_Bfree>
 800aa42:	4629      	mov	r1, r5
 800aa44:	4658      	mov	r0, fp
 800aa46:	f000 fef3 	bl	800b830 <_Bfree>
 800aa4a:	e7d0      	b.n	800a9ee <_dtoa_r+0x65e>
 800aa4c:	9704      	str	r7, [sp, #16]
 800aa4e:	4633      	mov	r3, r6
 800aa50:	461e      	mov	r6, r3
 800aa52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa56:	2a39      	cmp	r2, #57	@ 0x39
 800aa58:	d107      	bne.n	800aa6a <_dtoa_r+0x6da>
 800aa5a:	459a      	cmp	sl, r3
 800aa5c:	d1f8      	bne.n	800aa50 <_dtoa_r+0x6c0>
 800aa5e:	9a04      	ldr	r2, [sp, #16]
 800aa60:	3201      	adds	r2, #1
 800aa62:	9204      	str	r2, [sp, #16]
 800aa64:	2230      	movs	r2, #48	@ 0x30
 800aa66:	f88a 2000 	strb.w	r2, [sl]
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	3201      	adds	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]
 800aa70:	e7bd      	b.n	800a9ee <_dtoa_r+0x65e>
 800aa72:	4b7b      	ldr	r3, [pc, #492]	@ (800ac60 <_dtoa_r+0x8d0>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	f7f5 fddf 	bl	8000638 <__aeabi_dmul>
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	4604      	mov	r4, r0
 800aa80:	460d      	mov	r5, r1
 800aa82:	f7f6 f841 	bl	8000b08 <__aeabi_dcmpeq>
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f aebb 	beq.w	800a802 <_dtoa_r+0x472>
 800aa8c:	e6f0      	b.n	800a870 <_dtoa_r+0x4e0>
 800aa8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa90:	2a00      	cmp	r2, #0
 800aa92:	f000 80db 	beq.w	800ac4c <_dtoa_r+0x8bc>
 800aa96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa98:	2a01      	cmp	r2, #1
 800aa9a:	f300 80bf 	bgt.w	800ac1c <_dtoa_r+0x88c>
 800aa9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aaa0:	2a00      	cmp	r2, #0
 800aaa2:	f000 80b7 	beq.w	800ac14 <_dtoa_r+0x884>
 800aaa6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aaaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aaac:	4646      	mov	r6, r8
 800aaae:	9a08      	ldr	r2, [sp, #32]
 800aab0:	2101      	movs	r1, #1
 800aab2:	441a      	add	r2, r3
 800aab4:	4658      	mov	r0, fp
 800aab6:	4498      	add	r8, r3
 800aab8:	9208      	str	r2, [sp, #32]
 800aaba:	f000 ffb7 	bl	800ba2c <__i2b>
 800aabe:	4605      	mov	r5, r0
 800aac0:	b15e      	cbz	r6, 800aada <_dtoa_r+0x74a>
 800aac2:	9b08      	ldr	r3, [sp, #32]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	dd08      	ble.n	800aada <_dtoa_r+0x74a>
 800aac8:	42b3      	cmp	r3, r6
 800aaca:	9a08      	ldr	r2, [sp, #32]
 800aacc:	bfa8      	it	ge
 800aace:	4633      	movge	r3, r6
 800aad0:	eba8 0803 	sub.w	r8, r8, r3
 800aad4:	1af6      	subs	r6, r6, r3
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	9308      	str	r3, [sp, #32]
 800aada:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aadc:	b1f3      	cbz	r3, 800ab1c <_dtoa_r+0x78c>
 800aade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 80b7 	beq.w	800ac54 <_dtoa_r+0x8c4>
 800aae6:	b18c      	cbz	r4, 800ab0c <_dtoa_r+0x77c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4622      	mov	r2, r4
 800aaec:	4658      	mov	r0, fp
 800aaee:	f001 f85d 	bl	800bbac <__pow5mult>
 800aaf2:	464a      	mov	r2, r9
 800aaf4:	4601      	mov	r1, r0
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	4658      	mov	r0, fp
 800aafa:	f000 ffad 	bl	800ba58 <__multiply>
 800aafe:	4649      	mov	r1, r9
 800ab00:	9004      	str	r0, [sp, #16]
 800ab02:	4658      	mov	r0, fp
 800ab04:	f000 fe94 	bl	800b830 <_Bfree>
 800ab08:	9b04      	ldr	r3, [sp, #16]
 800ab0a:	4699      	mov	r9, r3
 800ab0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab0e:	1b1a      	subs	r2, r3, r4
 800ab10:	d004      	beq.n	800ab1c <_dtoa_r+0x78c>
 800ab12:	4649      	mov	r1, r9
 800ab14:	4658      	mov	r0, fp
 800ab16:	f001 f849 	bl	800bbac <__pow5mult>
 800ab1a:	4681      	mov	r9, r0
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	4658      	mov	r0, fp
 800ab20:	f000 ff84 	bl	800ba2c <__i2b>
 800ab24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab26:	4604      	mov	r4, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 81cf 	beq.w	800aecc <_dtoa_r+0xb3c>
 800ab2e:	461a      	mov	r2, r3
 800ab30:	4601      	mov	r1, r0
 800ab32:	4658      	mov	r0, fp
 800ab34:	f001 f83a 	bl	800bbac <__pow5mult>
 800ab38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	4604      	mov	r4, r0
 800ab3e:	f300 8095 	bgt.w	800ac6c <_dtoa_r+0x8dc>
 800ab42:	9b02      	ldr	r3, [sp, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f040 8087 	bne.w	800ac58 <_dtoa_r+0x8c8>
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f040 8089 	bne.w	800ac68 <_dtoa_r+0x8d8>
 800ab56:	9b03      	ldr	r3, [sp, #12]
 800ab58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ab5c:	0d1b      	lsrs	r3, r3, #20
 800ab5e:	051b      	lsls	r3, r3, #20
 800ab60:	b12b      	cbz	r3, 800ab6e <_dtoa_r+0x7de>
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	3301      	adds	r3, #1
 800ab66:	9308      	str	r3, [sp, #32]
 800ab68:	f108 0801 	add.w	r8, r8, #1
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 81b0 	beq.w	800aed8 <_dtoa_r+0xb48>
 800ab78:	6923      	ldr	r3, [r4, #16]
 800ab7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab7e:	6918      	ldr	r0, [r3, #16]
 800ab80:	f000 ff08 	bl	800b994 <__hi0bits>
 800ab84:	f1c0 0020 	rsb	r0, r0, #32
 800ab88:	9b08      	ldr	r3, [sp, #32]
 800ab8a:	4418      	add	r0, r3
 800ab8c:	f010 001f 	ands.w	r0, r0, #31
 800ab90:	d077      	beq.n	800ac82 <_dtoa_r+0x8f2>
 800ab92:	f1c0 0320 	rsb	r3, r0, #32
 800ab96:	2b04      	cmp	r3, #4
 800ab98:	dd6b      	ble.n	800ac72 <_dtoa_r+0x8e2>
 800ab9a:	9b08      	ldr	r3, [sp, #32]
 800ab9c:	f1c0 001c 	rsb	r0, r0, #28
 800aba0:	4403      	add	r3, r0
 800aba2:	4480      	add	r8, r0
 800aba4:	4406      	add	r6, r0
 800aba6:	9308      	str	r3, [sp, #32]
 800aba8:	f1b8 0f00 	cmp.w	r8, #0
 800abac:	dd05      	ble.n	800abba <_dtoa_r+0x82a>
 800abae:	4649      	mov	r1, r9
 800abb0:	4642      	mov	r2, r8
 800abb2:	4658      	mov	r0, fp
 800abb4:	f001 f854 	bl	800bc60 <__lshift>
 800abb8:	4681      	mov	r9, r0
 800abba:	9b08      	ldr	r3, [sp, #32]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dd05      	ble.n	800abcc <_dtoa_r+0x83c>
 800abc0:	4621      	mov	r1, r4
 800abc2:	461a      	mov	r2, r3
 800abc4:	4658      	mov	r0, fp
 800abc6:	f001 f84b 	bl	800bc60 <__lshift>
 800abca:	4604      	mov	r4, r0
 800abcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d059      	beq.n	800ac86 <_dtoa_r+0x8f6>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4648      	mov	r0, r9
 800abd6:	f001 f8af 	bl	800bd38 <__mcmp>
 800abda:	2800      	cmp	r0, #0
 800abdc:	da53      	bge.n	800ac86 <_dtoa_r+0x8f6>
 800abde:	1e7b      	subs	r3, r7, #1
 800abe0:	9304      	str	r3, [sp, #16]
 800abe2:	4649      	mov	r1, r9
 800abe4:	2300      	movs	r3, #0
 800abe6:	220a      	movs	r2, #10
 800abe8:	4658      	mov	r0, fp
 800abea:	f000 fe43 	bl	800b874 <__multadd>
 800abee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abf0:	4681      	mov	r9, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f000 8172 	beq.w	800aedc <_dtoa_r+0xb4c>
 800abf8:	2300      	movs	r3, #0
 800abfa:	4629      	mov	r1, r5
 800abfc:	220a      	movs	r2, #10
 800abfe:	4658      	mov	r0, fp
 800ac00:	f000 fe38 	bl	800b874 <__multadd>
 800ac04:	9b00      	ldr	r3, [sp, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	4605      	mov	r5, r0
 800ac0a:	dc67      	bgt.n	800acdc <_dtoa_r+0x94c>
 800ac0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	dc41      	bgt.n	800ac96 <_dtoa_r+0x906>
 800ac12:	e063      	b.n	800acdc <_dtoa_r+0x94c>
 800ac14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ac1a:	e746      	b.n	800aaaa <_dtoa_r+0x71a>
 800ac1c:	9b07      	ldr	r3, [sp, #28]
 800ac1e:	1e5c      	subs	r4, r3, #1
 800ac20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac22:	42a3      	cmp	r3, r4
 800ac24:	bfbf      	itttt	lt
 800ac26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ac28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ac2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ac2c:	1ae3      	sublt	r3, r4, r3
 800ac2e:	bfb4      	ite	lt
 800ac30:	18d2      	addlt	r2, r2, r3
 800ac32:	1b1c      	subge	r4, r3, r4
 800ac34:	9b07      	ldr	r3, [sp, #28]
 800ac36:	bfbc      	itt	lt
 800ac38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ac3a:	2400      	movlt	r4, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bfb5      	itete	lt
 800ac40:	eba8 0603 	sublt.w	r6, r8, r3
 800ac44:	9b07      	ldrge	r3, [sp, #28]
 800ac46:	2300      	movlt	r3, #0
 800ac48:	4646      	movge	r6, r8
 800ac4a:	e730      	b.n	800aaae <_dtoa_r+0x71e>
 800ac4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ac4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ac50:	4646      	mov	r6, r8
 800ac52:	e735      	b.n	800aac0 <_dtoa_r+0x730>
 800ac54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac56:	e75c      	b.n	800ab12 <_dtoa_r+0x782>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e788      	b.n	800ab6e <_dtoa_r+0x7de>
 800ac5c:	3fe00000 	.word	0x3fe00000
 800ac60:	40240000 	.word	0x40240000
 800ac64:	40140000 	.word	0x40140000
 800ac68:	9b02      	ldr	r3, [sp, #8]
 800ac6a:	e780      	b.n	800ab6e <_dtoa_r+0x7de>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac70:	e782      	b.n	800ab78 <_dtoa_r+0x7e8>
 800ac72:	d099      	beq.n	800aba8 <_dtoa_r+0x818>
 800ac74:	9a08      	ldr	r2, [sp, #32]
 800ac76:	331c      	adds	r3, #28
 800ac78:	441a      	add	r2, r3
 800ac7a:	4498      	add	r8, r3
 800ac7c:	441e      	add	r6, r3
 800ac7e:	9208      	str	r2, [sp, #32]
 800ac80:	e792      	b.n	800aba8 <_dtoa_r+0x818>
 800ac82:	4603      	mov	r3, r0
 800ac84:	e7f6      	b.n	800ac74 <_dtoa_r+0x8e4>
 800ac86:	9b07      	ldr	r3, [sp, #28]
 800ac88:	9704      	str	r7, [sp, #16]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dc20      	bgt.n	800acd0 <_dtoa_r+0x940>
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	dd1e      	ble.n	800acd4 <_dtoa_r+0x944>
 800ac96:	9b00      	ldr	r3, [sp, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f47f aec0 	bne.w	800aa1e <_dtoa_r+0x68e>
 800ac9e:	4621      	mov	r1, r4
 800aca0:	2205      	movs	r2, #5
 800aca2:	4658      	mov	r0, fp
 800aca4:	f000 fde6 	bl	800b874 <__multadd>
 800aca8:	4601      	mov	r1, r0
 800acaa:	4604      	mov	r4, r0
 800acac:	4648      	mov	r0, r9
 800acae:	f001 f843 	bl	800bd38 <__mcmp>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	f77f aeb3 	ble.w	800aa1e <_dtoa_r+0x68e>
 800acb8:	4656      	mov	r6, sl
 800acba:	2331      	movs	r3, #49	@ 0x31
 800acbc:	f806 3b01 	strb.w	r3, [r6], #1
 800acc0:	9b04      	ldr	r3, [sp, #16]
 800acc2:	3301      	adds	r3, #1
 800acc4:	9304      	str	r3, [sp, #16]
 800acc6:	e6ae      	b.n	800aa26 <_dtoa_r+0x696>
 800acc8:	9c07      	ldr	r4, [sp, #28]
 800acca:	9704      	str	r7, [sp, #16]
 800accc:	4625      	mov	r5, r4
 800acce:	e7f3      	b.n	800acb8 <_dtoa_r+0x928>
 800acd0:	9b07      	ldr	r3, [sp, #28]
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 8104 	beq.w	800aee4 <_dtoa_r+0xb54>
 800acdc:	2e00      	cmp	r6, #0
 800acde:	dd05      	ble.n	800acec <_dtoa_r+0x95c>
 800ace0:	4629      	mov	r1, r5
 800ace2:	4632      	mov	r2, r6
 800ace4:	4658      	mov	r0, fp
 800ace6:	f000 ffbb 	bl	800bc60 <__lshift>
 800acea:	4605      	mov	r5, r0
 800acec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d05a      	beq.n	800ada8 <_dtoa_r+0xa18>
 800acf2:	6869      	ldr	r1, [r5, #4]
 800acf4:	4658      	mov	r0, fp
 800acf6:	f000 fd5b 	bl	800b7b0 <_Balloc>
 800acfa:	4606      	mov	r6, r0
 800acfc:	b928      	cbnz	r0, 800ad0a <_dtoa_r+0x97a>
 800acfe:	4b84      	ldr	r3, [pc, #528]	@ (800af10 <_dtoa_r+0xb80>)
 800ad00:	4602      	mov	r2, r0
 800ad02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ad06:	f7ff bb5a 	b.w	800a3be <_dtoa_r+0x2e>
 800ad0a:	692a      	ldr	r2, [r5, #16]
 800ad0c:	3202      	adds	r2, #2
 800ad0e:	0092      	lsls	r2, r2, #2
 800ad10:	f105 010c 	add.w	r1, r5, #12
 800ad14:	300c      	adds	r0, #12
 800ad16:	f7ff fa92 	bl	800a23e <memcpy>
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	4631      	mov	r1, r6
 800ad1e:	4658      	mov	r0, fp
 800ad20:	f000 ff9e 	bl	800bc60 <__lshift>
 800ad24:	f10a 0301 	add.w	r3, sl, #1
 800ad28:	9307      	str	r3, [sp, #28]
 800ad2a:	9b00      	ldr	r3, [sp, #0]
 800ad2c:	4453      	add	r3, sl
 800ad2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad30:	9b02      	ldr	r3, [sp, #8]
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	462f      	mov	r7, r5
 800ad38:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	9b07      	ldr	r3, [sp, #28]
 800ad3e:	4621      	mov	r1, r4
 800ad40:	3b01      	subs	r3, #1
 800ad42:	4648      	mov	r0, r9
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	f7ff fa99 	bl	800a27c <quorem>
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	9002      	str	r0, [sp, #8]
 800ad4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad52:	4648      	mov	r0, r9
 800ad54:	f000 fff0 	bl	800bd38 <__mcmp>
 800ad58:	462a      	mov	r2, r5
 800ad5a:	9008      	str	r0, [sp, #32]
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4658      	mov	r0, fp
 800ad60:	f001 f806 	bl	800bd70 <__mdiff>
 800ad64:	68c2      	ldr	r2, [r0, #12]
 800ad66:	4606      	mov	r6, r0
 800ad68:	bb02      	cbnz	r2, 800adac <_dtoa_r+0xa1c>
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4648      	mov	r0, r9
 800ad6e:	f000 ffe3 	bl	800bd38 <__mcmp>
 800ad72:	4602      	mov	r2, r0
 800ad74:	4631      	mov	r1, r6
 800ad76:	4658      	mov	r0, fp
 800ad78:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad7a:	f000 fd59 	bl	800b830 <_Bfree>
 800ad7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad82:	9e07      	ldr	r6, [sp, #28]
 800ad84:	ea43 0102 	orr.w	r1, r3, r2
 800ad88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad8a:	4319      	orrs	r1, r3
 800ad8c:	d110      	bne.n	800adb0 <_dtoa_r+0xa20>
 800ad8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad92:	d029      	beq.n	800ade8 <_dtoa_r+0xa58>
 800ad94:	9b08      	ldr	r3, [sp, #32]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dd02      	ble.n	800ada0 <_dtoa_r+0xa10>
 800ad9a:	9b02      	ldr	r3, [sp, #8]
 800ad9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ada0:	9b00      	ldr	r3, [sp, #0]
 800ada2:	f883 8000 	strb.w	r8, [r3]
 800ada6:	e63f      	b.n	800aa28 <_dtoa_r+0x698>
 800ada8:	4628      	mov	r0, r5
 800adaa:	e7bb      	b.n	800ad24 <_dtoa_r+0x994>
 800adac:	2201      	movs	r2, #1
 800adae:	e7e1      	b.n	800ad74 <_dtoa_r+0x9e4>
 800adb0:	9b08      	ldr	r3, [sp, #32]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	db04      	blt.n	800adc0 <_dtoa_r+0xa30>
 800adb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adb8:	430b      	orrs	r3, r1
 800adba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800adbc:	430b      	orrs	r3, r1
 800adbe:	d120      	bne.n	800ae02 <_dtoa_r+0xa72>
 800adc0:	2a00      	cmp	r2, #0
 800adc2:	dded      	ble.n	800ada0 <_dtoa_r+0xa10>
 800adc4:	4649      	mov	r1, r9
 800adc6:	2201      	movs	r2, #1
 800adc8:	4658      	mov	r0, fp
 800adca:	f000 ff49 	bl	800bc60 <__lshift>
 800adce:	4621      	mov	r1, r4
 800add0:	4681      	mov	r9, r0
 800add2:	f000 ffb1 	bl	800bd38 <__mcmp>
 800add6:	2800      	cmp	r0, #0
 800add8:	dc03      	bgt.n	800ade2 <_dtoa_r+0xa52>
 800adda:	d1e1      	bne.n	800ada0 <_dtoa_r+0xa10>
 800addc:	f018 0f01 	tst.w	r8, #1
 800ade0:	d0de      	beq.n	800ada0 <_dtoa_r+0xa10>
 800ade2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ade6:	d1d8      	bne.n	800ad9a <_dtoa_r+0xa0a>
 800ade8:	9a00      	ldr	r2, [sp, #0]
 800adea:	2339      	movs	r3, #57	@ 0x39
 800adec:	7013      	strb	r3, [r2, #0]
 800adee:	4633      	mov	r3, r6
 800adf0:	461e      	mov	r6, r3
 800adf2:	3b01      	subs	r3, #1
 800adf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800adf8:	2a39      	cmp	r2, #57	@ 0x39
 800adfa:	d052      	beq.n	800aea2 <_dtoa_r+0xb12>
 800adfc:	3201      	adds	r2, #1
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e612      	b.n	800aa28 <_dtoa_r+0x698>
 800ae02:	2a00      	cmp	r2, #0
 800ae04:	dd07      	ble.n	800ae16 <_dtoa_r+0xa86>
 800ae06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae0a:	d0ed      	beq.n	800ade8 <_dtoa_r+0xa58>
 800ae0c:	9a00      	ldr	r2, [sp, #0]
 800ae0e:	f108 0301 	add.w	r3, r8, #1
 800ae12:	7013      	strb	r3, [r2, #0]
 800ae14:	e608      	b.n	800aa28 <_dtoa_r+0x698>
 800ae16:	9b07      	ldr	r3, [sp, #28]
 800ae18:	9a07      	ldr	r2, [sp, #28]
 800ae1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ae1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d028      	beq.n	800ae76 <_dtoa_r+0xae6>
 800ae24:	4649      	mov	r1, r9
 800ae26:	2300      	movs	r3, #0
 800ae28:	220a      	movs	r2, #10
 800ae2a:	4658      	mov	r0, fp
 800ae2c:	f000 fd22 	bl	800b874 <__multadd>
 800ae30:	42af      	cmp	r7, r5
 800ae32:	4681      	mov	r9, r0
 800ae34:	f04f 0300 	mov.w	r3, #0
 800ae38:	f04f 020a 	mov.w	r2, #10
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	4658      	mov	r0, fp
 800ae40:	d107      	bne.n	800ae52 <_dtoa_r+0xac2>
 800ae42:	f000 fd17 	bl	800b874 <__multadd>
 800ae46:	4607      	mov	r7, r0
 800ae48:	4605      	mov	r5, r0
 800ae4a:	9b07      	ldr	r3, [sp, #28]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	9307      	str	r3, [sp, #28]
 800ae50:	e774      	b.n	800ad3c <_dtoa_r+0x9ac>
 800ae52:	f000 fd0f 	bl	800b874 <__multadd>
 800ae56:	4629      	mov	r1, r5
 800ae58:	4607      	mov	r7, r0
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	220a      	movs	r2, #10
 800ae5e:	4658      	mov	r0, fp
 800ae60:	f000 fd08 	bl	800b874 <__multadd>
 800ae64:	4605      	mov	r5, r0
 800ae66:	e7f0      	b.n	800ae4a <_dtoa_r+0xaba>
 800ae68:	9b00      	ldr	r3, [sp, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	bfcc      	ite	gt
 800ae6e:	461e      	movgt	r6, r3
 800ae70:	2601      	movle	r6, #1
 800ae72:	4456      	add	r6, sl
 800ae74:	2700      	movs	r7, #0
 800ae76:	4649      	mov	r1, r9
 800ae78:	2201      	movs	r2, #1
 800ae7a:	4658      	mov	r0, fp
 800ae7c:	f000 fef0 	bl	800bc60 <__lshift>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4681      	mov	r9, r0
 800ae84:	f000 ff58 	bl	800bd38 <__mcmp>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	dcb0      	bgt.n	800adee <_dtoa_r+0xa5e>
 800ae8c:	d102      	bne.n	800ae94 <_dtoa_r+0xb04>
 800ae8e:	f018 0f01 	tst.w	r8, #1
 800ae92:	d1ac      	bne.n	800adee <_dtoa_r+0xa5e>
 800ae94:	4633      	mov	r3, r6
 800ae96:	461e      	mov	r6, r3
 800ae98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae9c:	2a30      	cmp	r2, #48	@ 0x30
 800ae9e:	d0fa      	beq.n	800ae96 <_dtoa_r+0xb06>
 800aea0:	e5c2      	b.n	800aa28 <_dtoa_r+0x698>
 800aea2:	459a      	cmp	sl, r3
 800aea4:	d1a4      	bne.n	800adf0 <_dtoa_r+0xa60>
 800aea6:	9b04      	ldr	r3, [sp, #16]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	2331      	movs	r3, #49	@ 0x31
 800aeae:	f88a 3000 	strb.w	r3, [sl]
 800aeb2:	e5b9      	b.n	800aa28 <_dtoa_r+0x698>
 800aeb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aeb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800af14 <_dtoa_r+0xb84>
 800aeba:	b11b      	cbz	r3, 800aec4 <_dtoa_r+0xb34>
 800aebc:	f10a 0308 	add.w	r3, sl, #8
 800aec0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	4650      	mov	r0, sl
 800aec6:	b019      	add	sp, #100	@ 0x64
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aece:	2b01      	cmp	r3, #1
 800aed0:	f77f ae37 	ble.w	800ab42 <_dtoa_r+0x7b2>
 800aed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aed6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aed8:	2001      	movs	r0, #1
 800aeda:	e655      	b.n	800ab88 <_dtoa_r+0x7f8>
 800aedc:	9b00      	ldr	r3, [sp, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f77f aed6 	ble.w	800ac90 <_dtoa_r+0x900>
 800aee4:	4656      	mov	r6, sl
 800aee6:	4621      	mov	r1, r4
 800aee8:	4648      	mov	r0, r9
 800aeea:	f7ff f9c7 	bl	800a27c <quorem>
 800aeee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aef2:	f806 8b01 	strb.w	r8, [r6], #1
 800aef6:	9b00      	ldr	r3, [sp, #0]
 800aef8:	eba6 020a 	sub.w	r2, r6, sl
 800aefc:	4293      	cmp	r3, r2
 800aefe:	ddb3      	ble.n	800ae68 <_dtoa_r+0xad8>
 800af00:	4649      	mov	r1, r9
 800af02:	2300      	movs	r3, #0
 800af04:	220a      	movs	r2, #10
 800af06:	4658      	mov	r0, fp
 800af08:	f000 fcb4 	bl	800b874 <__multadd>
 800af0c:	4681      	mov	r9, r0
 800af0e:	e7ea      	b.n	800aee6 <_dtoa_r+0xb56>
 800af10:	0800cfad 	.word	0x0800cfad
 800af14:	0800cf31 	.word	0x0800cf31

0800af18 <_free_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4605      	mov	r5, r0
 800af1c:	2900      	cmp	r1, #0
 800af1e:	d041      	beq.n	800afa4 <_free_r+0x8c>
 800af20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af24:	1f0c      	subs	r4, r1, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	bfb8      	it	lt
 800af2a:	18e4      	addlt	r4, r4, r3
 800af2c:	f000 fc34 	bl	800b798 <__malloc_lock>
 800af30:	4a1d      	ldr	r2, [pc, #116]	@ (800afa8 <_free_r+0x90>)
 800af32:	6813      	ldr	r3, [r2, #0]
 800af34:	b933      	cbnz	r3, 800af44 <_free_r+0x2c>
 800af36:	6063      	str	r3, [r4, #4]
 800af38:	6014      	str	r4, [r2, #0]
 800af3a:	4628      	mov	r0, r5
 800af3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af40:	f000 bc30 	b.w	800b7a4 <__malloc_unlock>
 800af44:	42a3      	cmp	r3, r4
 800af46:	d908      	bls.n	800af5a <_free_r+0x42>
 800af48:	6820      	ldr	r0, [r4, #0]
 800af4a:	1821      	adds	r1, r4, r0
 800af4c:	428b      	cmp	r3, r1
 800af4e:	bf01      	itttt	eq
 800af50:	6819      	ldreq	r1, [r3, #0]
 800af52:	685b      	ldreq	r3, [r3, #4]
 800af54:	1809      	addeq	r1, r1, r0
 800af56:	6021      	streq	r1, [r4, #0]
 800af58:	e7ed      	b.n	800af36 <_free_r+0x1e>
 800af5a:	461a      	mov	r2, r3
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	b10b      	cbz	r3, 800af64 <_free_r+0x4c>
 800af60:	42a3      	cmp	r3, r4
 800af62:	d9fa      	bls.n	800af5a <_free_r+0x42>
 800af64:	6811      	ldr	r1, [r2, #0]
 800af66:	1850      	adds	r0, r2, r1
 800af68:	42a0      	cmp	r0, r4
 800af6a:	d10b      	bne.n	800af84 <_free_r+0x6c>
 800af6c:	6820      	ldr	r0, [r4, #0]
 800af6e:	4401      	add	r1, r0
 800af70:	1850      	adds	r0, r2, r1
 800af72:	4283      	cmp	r3, r0
 800af74:	6011      	str	r1, [r2, #0]
 800af76:	d1e0      	bne.n	800af3a <_free_r+0x22>
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	6053      	str	r3, [r2, #4]
 800af7e:	4408      	add	r0, r1
 800af80:	6010      	str	r0, [r2, #0]
 800af82:	e7da      	b.n	800af3a <_free_r+0x22>
 800af84:	d902      	bls.n	800af8c <_free_r+0x74>
 800af86:	230c      	movs	r3, #12
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	e7d6      	b.n	800af3a <_free_r+0x22>
 800af8c:	6820      	ldr	r0, [r4, #0]
 800af8e:	1821      	adds	r1, r4, r0
 800af90:	428b      	cmp	r3, r1
 800af92:	bf04      	itt	eq
 800af94:	6819      	ldreq	r1, [r3, #0]
 800af96:	685b      	ldreq	r3, [r3, #4]
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	bf04      	itt	eq
 800af9c:	1809      	addeq	r1, r1, r0
 800af9e:	6021      	streq	r1, [r4, #0]
 800afa0:	6054      	str	r4, [r2, #4]
 800afa2:	e7ca      	b.n	800af3a <_free_r+0x22>
 800afa4:	bd38      	pop	{r3, r4, r5, pc}
 800afa6:	bf00      	nop
 800afa8:	20000640 	.word	0x20000640

0800afac <rshift>:
 800afac:	6903      	ldr	r3, [r0, #16]
 800afae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afba:	f100 0414 	add.w	r4, r0, #20
 800afbe:	dd45      	ble.n	800b04c <rshift+0xa0>
 800afc0:	f011 011f 	ands.w	r1, r1, #31
 800afc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afcc:	d10c      	bne.n	800afe8 <rshift+0x3c>
 800afce:	f100 0710 	add.w	r7, r0, #16
 800afd2:	4629      	mov	r1, r5
 800afd4:	42b1      	cmp	r1, r6
 800afd6:	d334      	bcc.n	800b042 <rshift+0x96>
 800afd8:	1a9b      	subs	r3, r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	1eea      	subs	r2, r5, #3
 800afde:	4296      	cmp	r6, r2
 800afe0:	bf38      	it	cc
 800afe2:	2300      	movcc	r3, #0
 800afe4:	4423      	add	r3, r4
 800afe6:	e015      	b.n	800b014 <rshift+0x68>
 800afe8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800afec:	f1c1 0820 	rsb	r8, r1, #32
 800aff0:	40cf      	lsrs	r7, r1
 800aff2:	f105 0e04 	add.w	lr, r5, #4
 800aff6:	46a1      	mov	r9, r4
 800aff8:	4576      	cmp	r6, lr
 800affa:	46f4      	mov	ip, lr
 800affc:	d815      	bhi.n	800b02a <rshift+0x7e>
 800affe:	1a9a      	subs	r2, r3, r2
 800b000:	0092      	lsls	r2, r2, #2
 800b002:	3a04      	subs	r2, #4
 800b004:	3501      	adds	r5, #1
 800b006:	42ae      	cmp	r6, r5
 800b008:	bf38      	it	cc
 800b00a:	2200      	movcc	r2, #0
 800b00c:	18a3      	adds	r3, r4, r2
 800b00e:	50a7      	str	r7, [r4, r2]
 800b010:	b107      	cbz	r7, 800b014 <rshift+0x68>
 800b012:	3304      	adds	r3, #4
 800b014:	1b1a      	subs	r2, r3, r4
 800b016:	42a3      	cmp	r3, r4
 800b018:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b01c:	bf08      	it	eq
 800b01e:	2300      	moveq	r3, #0
 800b020:	6102      	str	r2, [r0, #16]
 800b022:	bf08      	it	eq
 800b024:	6143      	streq	r3, [r0, #20]
 800b026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b02a:	f8dc c000 	ldr.w	ip, [ip]
 800b02e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b032:	ea4c 0707 	orr.w	r7, ip, r7
 800b036:	f849 7b04 	str.w	r7, [r9], #4
 800b03a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b03e:	40cf      	lsrs	r7, r1
 800b040:	e7da      	b.n	800aff8 <rshift+0x4c>
 800b042:	f851 cb04 	ldr.w	ip, [r1], #4
 800b046:	f847 cf04 	str.w	ip, [r7, #4]!
 800b04a:	e7c3      	b.n	800afd4 <rshift+0x28>
 800b04c:	4623      	mov	r3, r4
 800b04e:	e7e1      	b.n	800b014 <rshift+0x68>

0800b050 <__hexdig_fun>:
 800b050:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b054:	2b09      	cmp	r3, #9
 800b056:	d802      	bhi.n	800b05e <__hexdig_fun+0xe>
 800b058:	3820      	subs	r0, #32
 800b05a:	b2c0      	uxtb	r0, r0
 800b05c:	4770      	bx	lr
 800b05e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b062:	2b05      	cmp	r3, #5
 800b064:	d801      	bhi.n	800b06a <__hexdig_fun+0x1a>
 800b066:	3847      	subs	r0, #71	@ 0x47
 800b068:	e7f7      	b.n	800b05a <__hexdig_fun+0xa>
 800b06a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b06e:	2b05      	cmp	r3, #5
 800b070:	d801      	bhi.n	800b076 <__hexdig_fun+0x26>
 800b072:	3827      	subs	r0, #39	@ 0x27
 800b074:	e7f1      	b.n	800b05a <__hexdig_fun+0xa>
 800b076:	2000      	movs	r0, #0
 800b078:	4770      	bx	lr
	...

0800b07c <__gethex>:
 800b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	b085      	sub	sp, #20
 800b082:	468a      	mov	sl, r1
 800b084:	9302      	str	r3, [sp, #8]
 800b086:	680b      	ldr	r3, [r1, #0]
 800b088:	9001      	str	r0, [sp, #4]
 800b08a:	4690      	mov	r8, r2
 800b08c:	1c9c      	adds	r4, r3, #2
 800b08e:	46a1      	mov	r9, r4
 800b090:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b094:	2830      	cmp	r0, #48	@ 0x30
 800b096:	d0fa      	beq.n	800b08e <__gethex+0x12>
 800b098:	eba9 0303 	sub.w	r3, r9, r3
 800b09c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b0a0:	f7ff ffd6 	bl	800b050 <__hexdig_fun>
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d168      	bne.n	800b17c <__gethex+0x100>
 800b0aa:	49a0      	ldr	r1, [pc, #640]	@ (800b32c <__gethex+0x2b0>)
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	4648      	mov	r0, r9
 800b0b0:	f7ff f83b 	bl	800a12a <strncmp>
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d167      	bne.n	800b18a <__gethex+0x10e>
 800b0ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b0be:	4626      	mov	r6, r4
 800b0c0:	f7ff ffc6 	bl	800b050 <__hexdig_fun>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d062      	beq.n	800b18e <__gethex+0x112>
 800b0c8:	4623      	mov	r3, r4
 800b0ca:	7818      	ldrb	r0, [r3, #0]
 800b0cc:	2830      	cmp	r0, #48	@ 0x30
 800b0ce:	4699      	mov	r9, r3
 800b0d0:	f103 0301 	add.w	r3, r3, #1
 800b0d4:	d0f9      	beq.n	800b0ca <__gethex+0x4e>
 800b0d6:	f7ff ffbb 	bl	800b050 <__hexdig_fun>
 800b0da:	fab0 f580 	clz	r5, r0
 800b0de:	096d      	lsrs	r5, r5, #5
 800b0e0:	f04f 0b01 	mov.w	fp, #1
 800b0e4:	464a      	mov	r2, r9
 800b0e6:	4616      	mov	r6, r2
 800b0e8:	3201      	adds	r2, #1
 800b0ea:	7830      	ldrb	r0, [r6, #0]
 800b0ec:	f7ff ffb0 	bl	800b050 <__hexdig_fun>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d1f8      	bne.n	800b0e6 <__gethex+0x6a>
 800b0f4:	498d      	ldr	r1, [pc, #564]	@ (800b32c <__gethex+0x2b0>)
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff f816 	bl	800a12a <strncmp>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d13f      	bne.n	800b182 <__gethex+0x106>
 800b102:	b944      	cbnz	r4, 800b116 <__gethex+0x9a>
 800b104:	1c74      	adds	r4, r6, #1
 800b106:	4622      	mov	r2, r4
 800b108:	4616      	mov	r6, r2
 800b10a:	3201      	adds	r2, #1
 800b10c:	7830      	ldrb	r0, [r6, #0]
 800b10e:	f7ff ff9f 	bl	800b050 <__hexdig_fun>
 800b112:	2800      	cmp	r0, #0
 800b114:	d1f8      	bne.n	800b108 <__gethex+0x8c>
 800b116:	1ba4      	subs	r4, r4, r6
 800b118:	00a7      	lsls	r7, r4, #2
 800b11a:	7833      	ldrb	r3, [r6, #0]
 800b11c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b120:	2b50      	cmp	r3, #80	@ 0x50
 800b122:	d13e      	bne.n	800b1a2 <__gethex+0x126>
 800b124:	7873      	ldrb	r3, [r6, #1]
 800b126:	2b2b      	cmp	r3, #43	@ 0x2b
 800b128:	d033      	beq.n	800b192 <__gethex+0x116>
 800b12a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b12c:	d034      	beq.n	800b198 <__gethex+0x11c>
 800b12e:	1c71      	adds	r1, r6, #1
 800b130:	2400      	movs	r4, #0
 800b132:	7808      	ldrb	r0, [r1, #0]
 800b134:	f7ff ff8c 	bl	800b050 <__hexdig_fun>
 800b138:	1e43      	subs	r3, r0, #1
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b18      	cmp	r3, #24
 800b13e:	d830      	bhi.n	800b1a2 <__gethex+0x126>
 800b140:	f1a0 0210 	sub.w	r2, r0, #16
 800b144:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b148:	f7ff ff82 	bl	800b050 <__hexdig_fun>
 800b14c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b150:	fa5f fc8c 	uxtb.w	ip, ip
 800b154:	f1bc 0f18 	cmp.w	ip, #24
 800b158:	f04f 030a 	mov.w	r3, #10
 800b15c:	d91e      	bls.n	800b19c <__gethex+0x120>
 800b15e:	b104      	cbz	r4, 800b162 <__gethex+0xe6>
 800b160:	4252      	negs	r2, r2
 800b162:	4417      	add	r7, r2
 800b164:	f8ca 1000 	str.w	r1, [sl]
 800b168:	b1ed      	cbz	r5, 800b1a6 <__gethex+0x12a>
 800b16a:	f1bb 0f00 	cmp.w	fp, #0
 800b16e:	bf0c      	ite	eq
 800b170:	2506      	moveq	r5, #6
 800b172:	2500      	movne	r5, #0
 800b174:	4628      	mov	r0, r5
 800b176:	b005      	add	sp, #20
 800b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17c:	2500      	movs	r5, #0
 800b17e:	462c      	mov	r4, r5
 800b180:	e7b0      	b.n	800b0e4 <__gethex+0x68>
 800b182:	2c00      	cmp	r4, #0
 800b184:	d1c7      	bne.n	800b116 <__gethex+0x9a>
 800b186:	4627      	mov	r7, r4
 800b188:	e7c7      	b.n	800b11a <__gethex+0x9e>
 800b18a:	464e      	mov	r6, r9
 800b18c:	462f      	mov	r7, r5
 800b18e:	2501      	movs	r5, #1
 800b190:	e7c3      	b.n	800b11a <__gethex+0x9e>
 800b192:	2400      	movs	r4, #0
 800b194:	1cb1      	adds	r1, r6, #2
 800b196:	e7cc      	b.n	800b132 <__gethex+0xb6>
 800b198:	2401      	movs	r4, #1
 800b19a:	e7fb      	b.n	800b194 <__gethex+0x118>
 800b19c:	fb03 0002 	mla	r0, r3, r2, r0
 800b1a0:	e7ce      	b.n	800b140 <__gethex+0xc4>
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	e7de      	b.n	800b164 <__gethex+0xe8>
 800b1a6:	eba6 0309 	sub.w	r3, r6, r9
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	4629      	mov	r1, r5
 800b1ae:	2b07      	cmp	r3, #7
 800b1b0:	dc0a      	bgt.n	800b1c8 <__gethex+0x14c>
 800b1b2:	9801      	ldr	r0, [sp, #4]
 800b1b4:	f000 fafc 	bl	800b7b0 <_Balloc>
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	b940      	cbnz	r0, 800b1ce <__gethex+0x152>
 800b1bc:	4b5c      	ldr	r3, [pc, #368]	@ (800b330 <__gethex+0x2b4>)
 800b1be:	4602      	mov	r2, r0
 800b1c0:	21e4      	movs	r1, #228	@ 0xe4
 800b1c2:	485c      	ldr	r0, [pc, #368]	@ (800b334 <__gethex+0x2b8>)
 800b1c4:	f001 fc32 	bl	800ca2c <__assert_func>
 800b1c8:	3101      	adds	r1, #1
 800b1ca:	105b      	asrs	r3, r3, #1
 800b1cc:	e7ef      	b.n	800b1ae <__gethex+0x132>
 800b1ce:	f100 0a14 	add.w	sl, r0, #20
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4655      	mov	r5, sl
 800b1d6:	469b      	mov	fp, r3
 800b1d8:	45b1      	cmp	r9, r6
 800b1da:	d337      	bcc.n	800b24c <__gethex+0x1d0>
 800b1dc:	f845 bb04 	str.w	fp, [r5], #4
 800b1e0:	eba5 050a 	sub.w	r5, r5, sl
 800b1e4:	10ad      	asrs	r5, r5, #2
 800b1e6:	6125      	str	r5, [r4, #16]
 800b1e8:	4658      	mov	r0, fp
 800b1ea:	f000 fbd3 	bl	800b994 <__hi0bits>
 800b1ee:	016d      	lsls	r5, r5, #5
 800b1f0:	f8d8 6000 	ldr.w	r6, [r8]
 800b1f4:	1a2d      	subs	r5, r5, r0
 800b1f6:	42b5      	cmp	r5, r6
 800b1f8:	dd54      	ble.n	800b2a4 <__gethex+0x228>
 800b1fa:	1bad      	subs	r5, r5, r6
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 ff67 	bl	800c0d2 <__any_on>
 800b204:	4681      	mov	r9, r0
 800b206:	b178      	cbz	r0, 800b228 <__gethex+0x1ac>
 800b208:	1e6b      	subs	r3, r5, #1
 800b20a:	1159      	asrs	r1, r3, #5
 800b20c:	f003 021f 	and.w	r2, r3, #31
 800b210:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b214:	f04f 0901 	mov.w	r9, #1
 800b218:	fa09 f202 	lsl.w	r2, r9, r2
 800b21c:	420a      	tst	r2, r1
 800b21e:	d003      	beq.n	800b228 <__gethex+0x1ac>
 800b220:	454b      	cmp	r3, r9
 800b222:	dc36      	bgt.n	800b292 <__gethex+0x216>
 800b224:	f04f 0902 	mov.w	r9, #2
 800b228:	4629      	mov	r1, r5
 800b22a:	4620      	mov	r0, r4
 800b22c:	f7ff febe 	bl	800afac <rshift>
 800b230:	442f      	add	r7, r5
 800b232:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b236:	42bb      	cmp	r3, r7
 800b238:	da42      	bge.n	800b2c0 <__gethex+0x244>
 800b23a:	9801      	ldr	r0, [sp, #4]
 800b23c:	4621      	mov	r1, r4
 800b23e:	f000 faf7 	bl	800b830 <_Bfree>
 800b242:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b244:	2300      	movs	r3, #0
 800b246:	6013      	str	r3, [r2, #0]
 800b248:	25a3      	movs	r5, #163	@ 0xa3
 800b24a:	e793      	b.n	800b174 <__gethex+0xf8>
 800b24c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b250:	2a2e      	cmp	r2, #46	@ 0x2e
 800b252:	d012      	beq.n	800b27a <__gethex+0x1fe>
 800b254:	2b20      	cmp	r3, #32
 800b256:	d104      	bne.n	800b262 <__gethex+0x1e6>
 800b258:	f845 bb04 	str.w	fp, [r5], #4
 800b25c:	f04f 0b00 	mov.w	fp, #0
 800b260:	465b      	mov	r3, fp
 800b262:	7830      	ldrb	r0, [r6, #0]
 800b264:	9303      	str	r3, [sp, #12]
 800b266:	f7ff fef3 	bl	800b050 <__hexdig_fun>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	f000 000f 	and.w	r0, r0, #15
 800b270:	4098      	lsls	r0, r3
 800b272:	ea4b 0b00 	orr.w	fp, fp, r0
 800b276:	3304      	adds	r3, #4
 800b278:	e7ae      	b.n	800b1d8 <__gethex+0x15c>
 800b27a:	45b1      	cmp	r9, r6
 800b27c:	d8ea      	bhi.n	800b254 <__gethex+0x1d8>
 800b27e:	492b      	ldr	r1, [pc, #172]	@ (800b32c <__gethex+0x2b0>)
 800b280:	9303      	str	r3, [sp, #12]
 800b282:	2201      	movs	r2, #1
 800b284:	4630      	mov	r0, r6
 800b286:	f7fe ff50 	bl	800a12a <strncmp>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d1e1      	bne.n	800b254 <__gethex+0x1d8>
 800b290:	e7a2      	b.n	800b1d8 <__gethex+0x15c>
 800b292:	1ea9      	subs	r1, r5, #2
 800b294:	4620      	mov	r0, r4
 800b296:	f000 ff1c 	bl	800c0d2 <__any_on>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d0c2      	beq.n	800b224 <__gethex+0x1a8>
 800b29e:	f04f 0903 	mov.w	r9, #3
 800b2a2:	e7c1      	b.n	800b228 <__gethex+0x1ac>
 800b2a4:	da09      	bge.n	800b2ba <__gethex+0x23e>
 800b2a6:	1b75      	subs	r5, r6, r5
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	9801      	ldr	r0, [sp, #4]
 800b2ac:	462a      	mov	r2, r5
 800b2ae:	f000 fcd7 	bl	800bc60 <__lshift>
 800b2b2:	1b7f      	subs	r7, r7, r5
 800b2b4:	4604      	mov	r4, r0
 800b2b6:	f100 0a14 	add.w	sl, r0, #20
 800b2ba:	f04f 0900 	mov.w	r9, #0
 800b2be:	e7b8      	b.n	800b232 <__gethex+0x1b6>
 800b2c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2c4:	42bd      	cmp	r5, r7
 800b2c6:	dd6f      	ble.n	800b3a8 <__gethex+0x32c>
 800b2c8:	1bed      	subs	r5, r5, r7
 800b2ca:	42ae      	cmp	r6, r5
 800b2cc:	dc34      	bgt.n	800b338 <__gethex+0x2bc>
 800b2ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d022      	beq.n	800b31c <__gethex+0x2a0>
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d024      	beq.n	800b324 <__gethex+0x2a8>
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d115      	bne.n	800b30a <__gethex+0x28e>
 800b2de:	42ae      	cmp	r6, r5
 800b2e0:	d113      	bne.n	800b30a <__gethex+0x28e>
 800b2e2:	2e01      	cmp	r6, #1
 800b2e4:	d10b      	bne.n	800b2fe <__gethex+0x282>
 800b2e6:	9a02      	ldr	r2, [sp, #8]
 800b2e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	f8ca 3000 	str.w	r3, [sl]
 800b2f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2f8:	2562      	movs	r5, #98	@ 0x62
 800b2fa:	601c      	str	r4, [r3, #0]
 800b2fc:	e73a      	b.n	800b174 <__gethex+0xf8>
 800b2fe:	1e71      	subs	r1, r6, #1
 800b300:	4620      	mov	r0, r4
 800b302:	f000 fee6 	bl	800c0d2 <__any_on>
 800b306:	2800      	cmp	r0, #0
 800b308:	d1ed      	bne.n	800b2e6 <__gethex+0x26a>
 800b30a:	9801      	ldr	r0, [sp, #4]
 800b30c:	4621      	mov	r1, r4
 800b30e:	f000 fa8f 	bl	800b830 <_Bfree>
 800b312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b314:	2300      	movs	r3, #0
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	2550      	movs	r5, #80	@ 0x50
 800b31a:	e72b      	b.n	800b174 <__gethex+0xf8>
 800b31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1f3      	bne.n	800b30a <__gethex+0x28e>
 800b322:	e7e0      	b.n	800b2e6 <__gethex+0x26a>
 800b324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1dd      	bne.n	800b2e6 <__gethex+0x26a>
 800b32a:	e7ee      	b.n	800b30a <__gethex+0x28e>
 800b32c:	0800ce9c 	.word	0x0800ce9c
 800b330:	0800cfad 	.word	0x0800cfad
 800b334:	0800cfbe 	.word	0x0800cfbe
 800b338:	1e6f      	subs	r7, r5, #1
 800b33a:	f1b9 0f00 	cmp.w	r9, #0
 800b33e:	d130      	bne.n	800b3a2 <__gethex+0x326>
 800b340:	b127      	cbz	r7, 800b34c <__gethex+0x2d0>
 800b342:	4639      	mov	r1, r7
 800b344:	4620      	mov	r0, r4
 800b346:	f000 fec4 	bl	800c0d2 <__any_on>
 800b34a:	4681      	mov	r9, r0
 800b34c:	117a      	asrs	r2, r7, #5
 800b34e:	2301      	movs	r3, #1
 800b350:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b354:	f007 071f 	and.w	r7, r7, #31
 800b358:	40bb      	lsls	r3, r7
 800b35a:	4213      	tst	r3, r2
 800b35c:	4629      	mov	r1, r5
 800b35e:	4620      	mov	r0, r4
 800b360:	bf18      	it	ne
 800b362:	f049 0902 	orrne.w	r9, r9, #2
 800b366:	f7ff fe21 	bl	800afac <rshift>
 800b36a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b36e:	1b76      	subs	r6, r6, r5
 800b370:	2502      	movs	r5, #2
 800b372:	f1b9 0f00 	cmp.w	r9, #0
 800b376:	d047      	beq.n	800b408 <__gethex+0x38c>
 800b378:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d015      	beq.n	800b3ac <__gethex+0x330>
 800b380:	2b03      	cmp	r3, #3
 800b382:	d017      	beq.n	800b3b4 <__gethex+0x338>
 800b384:	2b01      	cmp	r3, #1
 800b386:	d109      	bne.n	800b39c <__gethex+0x320>
 800b388:	f019 0f02 	tst.w	r9, #2
 800b38c:	d006      	beq.n	800b39c <__gethex+0x320>
 800b38e:	f8da 3000 	ldr.w	r3, [sl]
 800b392:	ea49 0903 	orr.w	r9, r9, r3
 800b396:	f019 0f01 	tst.w	r9, #1
 800b39a:	d10e      	bne.n	800b3ba <__gethex+0x33e>
 800b39c:	f045 0510 	orr.w	r5, r5, #16
 800b3a0:	e032      	b.n	800b408 <__gethex+0x38c>
 800b3a2:	f04f 0901 	mov.w	r9, #1
 800b3a6:	e7d1      	b.n	800b34c <__gethex+0x2d0>
 800b3a8:	2501      	movs	r5, #1
 800b3aa:	e7e2      	b.n	800b372 <__gethex+0x2f6>
 800b3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ae:	f1c3 0301 	rsb	r3, r3, #1
 800b3b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0f0      	beq.n	800b39c <__gethex+0x320>
 800b3ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b3be:	f104 0314 	add.w	r3, r4, #20
 800b3c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b3c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b3ca:	f04f 0c00 	mov.w	ip, #0
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b3d8:	d01b      	beq.n	800b412 <__gethex+0x396>
 800b3da:	3201      	adds	r2, #1
 800b3dc:	6002      	str	r2, [r0, #0]
 800b3de:	2d02      	cmp	r5, #2
 800b3e0:	f104 0314 	add.w	r3, r4, #20
 800b3e4:	d13c      	bne.n	800b460 <__gethex+0x3e4>
 800b3e6:	f8d8 2000 	ldr.w	r2, [r8]
 800b3ea:	3a01      	subs	r2, #1
 800b3ec:	42b2      	cmp	r2, r6
 800b3ee:	d109      	bne.n	800b404 <__gethex+0x388>
 800b3f0:	1171      	asrs	r1, r6, #5
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b3f8:	f006 061f 	and.w	r6, r6, #31
 800b3fc:	fa02 f606 	lsl.w	r6, r2, r6
 800b400:	421e      	tst	r6, r3
 800b402:	d13a      	bne.n	800b47a <__gethex+0x3fe>
 800b404:	f045 0520 	orr.w	r5, r5, #32
 800b408:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b40a:	601c      	str	r4, [r3, #0]
 800b40c:	9b02      	ldr	r3, [sp, #8]
 800b40e:	601f      	str	r7, [r3, #0]
 800b410:	e6b0      	b.n	800b174 <__gethex+0xf8>
 800b412:	4299      	cmp	r1, r3
 800b414:	f843 cc04 	str.w	ip, [r3, #-4]
 800b418:	d8d9      	bhi.n	800b3ce <__gethex+0x352>
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	459b      	cmp	fp, r3
 800b41e:	db17      	blt.n	800b450 <__gethex+0x3d4>
 800b420:	6861      	ldr	r1, [r4, #4]
 800b422:	9801      	ldr	r0, [sp, #4]
 800b424:	3101      	adds	r1, #1
 800b426:	f000 f9c3 	bl	800b7b0 <_Balloc>
 800b42a:	4681      	mov	r9, r0
 800b42c:	b918      	cbnz	r0, 800b436 <__gethex+0x3ba>
 800b42e:	4b1a      	ldr	r3, [pc, #104]	@ (800b498 <__gethex+0x41c>)
 800b430:	4602      	mov	r2, r0
 800b432:	2184      	movs	r1, #132	@ 0x84
 800b434:	e6c5      	b.n	800b1c2 <__gethex+0x146>
 800b436:	6922      	ldr	r2, [r4, #16]
 800b438:	3202      	adds	r2, #2
 800b43a:	f104 010c 	add.w	r1, r4, #12
 800b43e:	0092      	lsls	r2, r2, #2
 800b440:	300c      	adds	r0, #12
 800b442:	f7fe fefc 	bl	800a23e <memcpy>
 800b446:	4621      	mov	r1, r4
 800b448:	9801      	ldr	r0, [sp, #4]
 800b44a:	f000 f9f1 	bl	800b830 <_Bfree>
 800b44e:	464c      	mov	r4, r9
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	1c5a      	adds	r2, r3, #1
 800b454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b458:	6122      	str	r2, [r4, #16]
 800b45a:	2201      	movs	r2, #1
 800b45c:	615a      	str	r2, [r3, #20]
 800b45e:	e7be      	b.n	800b3de <__gethex+0x362>
 800b460:	6922      	ldr	r2, [r4, #16]
 800b462:	455a      	cmp	r2, fp
 800b464:	dd0b      	ble.n	800b47e <__gethex+0x402>
 800b466:	2101      	movs	r1, #1
 800b468:	4620      	mov	r0, r4
 800b46a:	f7ff fd9f 	bl	800afac <rshift>
 800b46e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b472:	3701      	adds	r7, #1
 800b474:	42bb      	cmp	r3, r7
 800b476:	f6ff aee0 	blt.w	800b23a <__gethex+0x1be>
 800b47a:	2501      	movs	r5, #1
 800b47c:	e7c2      	b.n	800b404 <__gethex+0x388>
 800b47e:	f016 061f 	ands.w	r6, r6, #31
 800b482:	d0fa      	beq.n	800b47a <__gethex+0x3fe>
 800b484:	4453      	add	r3, sl
 800b486:	f1c6 0620 	rsb	r6, r6, #32
 800b48a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b48e:	f000 fa81 	bl	800b994 <__hi0bits>
 800b492:	42b0      	cmp	r0, r6
 800b494:	dbe7      	blt.n	800b466 <__gethex+0x3ea>
 800b496:	e7f0      	b.n	800b47a <__gethex+0x3fe>
 800b498:	0800cfad 	.word	0x0800cfad

0800b49c <L_shift>:
 800b49c:	f1c2 0208 	rsb	r2, r2, #8
 800b4a0:	0092      	lsls	r2, r2, #2
 800b4a2:	b570      	push	{r4, r5, r6, lr}
 800b4a4:	f1c2 0620 	rsb	r6, r2, #32
 800b4a8:	6843      	ldr	r3, [r0, #4]
 800b4aa:	6804      	ldr	r4, [r0, #0]
 800b4ac:	fa03 f506 	lsl.w	r5, r3, r6
 800b4b0:	432c      	orrs	r4, r5
 800b4b2:	40d3      	lsrs	r3, r2
 800b4b4:	6004      	str	r4, [r0, #0]
 800b4b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b4ba:	4288      	cmp	r0, r1
 800b4bc:	d3f4      	bcc.n	800b4a8 <L_shift+0xc>
 800b4be:	bd70      	pop	{r4, r5, r6, pc}

0800b4c0 <__match>:
 800b4c0:	b530      	push	{r4, r5, lr}
 800b4c2:	6803      	ldr	r3, [r0, #0]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ca:	b914      	cbnz	r4, 800b4d2 <__match+0x12>
 800b4cc:	6003      	str	r3, [r0, #0]
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	bd30      	pop	{r4, r5, pc}
 800b4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b4da:	2d19      	cmp	r5, #25
 800b4dc:	bf98      	it	ls
 800b4de:	3220      	addls	r2, #32
 800b4e0:	42a2      	cmp	r2, r4
 800b4e2:	d0f0      	beq.n	800b4c6 <__match+0x6>
 800b4e4:	2000      	movs	r0, #0
 800b4e6:	e7f3      	b.n	800b4d0 <__match+0x10>

0800b4e8 <__hexnan>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	680b      	ldr	r3, [r1, #0]
 800b4ee:	6801      	ldr	r1, [r0, #0]
 800b4f0:	115e      	asrs	r6, r3, #5
 800b4f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b4f6:	f013 031f 	ands.w	r3, r3, #31
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	bf18      	it	ne
 800b4fe:	3604      	addne	r6, #4
 800b500:	2500      	movs	r5, #0
 800b502:	1f37      	subs	r7, r6, #4
 800b504:	4682      	mov	sl, r0
 800b506:	4690      	mov	r8, r2
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b50e:	46b9      	mov	r9, r7
 800b510:	463c      	mov	r4, r7
 800b512:	9502      	str	r5, [sp, #8]
 800b514:	46ab      	mov	fp, r5
 800b516:	784a      	ldrb	r2, [r1, #1]
 800b518:	1c4b      	adds	r3, r1, #1
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	b342      	cbz	r2, 800b570 <__hexnan+0x88>
 800b51e:	4610      	mov	r0, r2
 800b520:	9105      	str	r1, [sp, #20]
 800b522:	9204      	str	r2, [sp, #16]
 800b524:	f7ff fd94 	bl	800b050 <__hexdig_fun>
 800b528:	2800      	cmp	r0, #0
 800b52a:	d151      	bne.n	800b5d0 <__hexnan+0xe8>
 800b52c:	9a04      	ldr	r2, [sp, #16]
 800b52e:	9905      	ldr	r1, [sp, #20]
 800b530:	2a20      	cmp	r2, #32
 800b532:	d818      	bhi.n	800b566 <__hexnan+0x7e>
 800b534:	9b02      	ldr	r3, [sp, #8]
 800b536:	459b      	cmp	fp, r3
 800b538:	dd13      	ble.n	800b562 <__hexnan+0x7a>
 800b53a:	454c      	cmp	r4, r9
 800b53c:	d206      	bcs.n	800b54c <__hexnan+0x64>
 800b53e:	2d07      	cmp	r5, #7
 800b540:	dc04      	bgt.n	800b54c <__hexnan+0x64>
 800b542:	462a      	mov	r2, r5
 800b544:	4649      	mov	r1, r9
 800b546:	4620      	mov	r0, r4
 800b548:	f7ff ffa8 	bl	800b49c <L_shift>
 800b54c:	4544      	cmp	r4, r8
 800b54e:	d952      	bls.n	800b5f6 <__hexnan+0x10e>
 800b550:	2300      	movs	r3, #0
 800b552:	f1a4 0904 	sub.w	r9, r4, #4
 800b556:	f844 3c04 	str.w	r3, [r4, #-4]
 800b55a:	f8cd b008 	str.w	fp, [sp, #8]
 800b55e:	464c      	mov	r4, r9
 800b560:	461d      	mov	r5, r3
 800b562:	9903      	ldr	r1, [sp, #12]
 800b564:	e7d7      	b.n	800b516 <__hexnan+0x2e>
 800b566:	2a29      	cmp	r2, #41	@ 0x29
 800b568:	d157      	bne.n	800b61a <__hexnan+0x132>
 800b56a:	3102      	adds	r1, #2
 800b56c:	f8ca 1000 	str.w	r1, [sl]
 800b570:	f1bb 0f00 	cmp.w	fp, #0
 800b574:	d051      	beq.n	800b61a <__hexnan+0x132>
 800b576:	454c      	cmp	r4, r9
 800b578:	d206      	bcs.n	800b588 <__hexnan+0xa0>
 800b57a:	2d07      	cmp	r5, #7
 800b57c:	dc04      	bgt.n	800b588 <__hexnan+0xa0>
 800b57e:	462a      	mov	r2, r5
 800b580:	4649      	mov	r1, r9
 800b582:	4620      	mov	r0, r4
 800b584:	f7ff ff8a 	bl	800b49c <L_shift>
 800b588:	4544      	cmp	r4, r8
 800b58a:	d936      	bls.n	800b5fa <__hexnan+0x112>
 800b58c:	f1a8 0204 	sub.w	r2, r8, #4
 800b590:	4623      	mov	r3, r4
 800b592:	f853 1b04 	ldr.w	r1, [r3], #4
 800b596:	f842 1f04 	str.w	r1, [r2, #4]!
 800b59a:	429f      	cmp	r7, r3
 800b59c:	d2f9      	bcs.n	800b592 <__hexnan+0xaa>
 800b59e:	1b3b      	subs	r3, r7, r4
 800b5a0:	f023 0303 	bic.w	r3, r3, #3
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	3e03      	subs	r6, #3
 800b5aa:	42b4      	cmp	r4, r6
 800b5ac:	bf88      	it	hi
 800b5ae:	2304      	movhi	r3, #4
 800b5b0:	4443      	add	r3, r8
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f843 2b04 	str.w	r2, [r3], #4
 800b5b8:	429f      	cmp	r7, r3
 800b5ba:	d2fb      	bcs.n	800b5b4 <__hexnan+0xcc>
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	b91b      	cbnz	r3, 800b5c8 <__hexnan+0xe0>
 800b5c0:	4547      	cmp	r7, r8
 800b5c2:	d128      	bne.n	800b616 <__hexnan+0x12e>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	2005      	movs	r0, #5
 800b5ca:	b007      	add	sp, #28
 800b5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d0:	3501      	adds	r5, #1
 800b5d2:	2d08      	cmp	r5, #8
 800b5d4:	f10b 0b01 	add.w	fp, fp, #1
 800b5d8:	dd06      	ble.n	800b5e8 <__hexnan+0x100>
 800b5da:	4544      	cmp	r4, r8
 800b5dc:	d9c1      	bls.n	800b562 <__hexnan+0x7a>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5e4:	2501      	movs	r5, #1
 800b5e6:	3c04      	subs	r4, #4
 800b5e8:	6822      	ldr	r2, [r4, #0]
 800b5ea:	f000 000f 	and.w	r0, r0, #15
 800b5ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b5f2:	6020      	str	r0, [r4, #0]
 800b5f4:	e7b5      	b.n	800b562 <__hexnan+0x7a>
 800b5f6:	2508      	movs	r5, #8
 800b5f8:	e7b3      	b.n	800b562 <__hexnan+0x7a>
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d0dd      	beq.n	800b5bc <__hexnan+0xd4>
 800b600:	f1c3 0320 	rsb	r3, r3, #32
 800b604:	f04f 32ff 	mov.w	r2, #4294967295
 800b608:	40da      	lsrs	r2, r3
 800b60a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b60e:	4013      	ands	r3, r2
 800b610:	f846 3c04 	str.w	r3, [r6, #-4]
 800b614:	e7d2      	b.n	800b5bc <__hexnan+0xd4>
 800b616:	3f04      	subs	r7, #4
 800b618:	e7d0      	b.n	800b5bc <__hexnan+0xd4>
 800b61a:	2004      	movs	r0, #4
 800b61c:	e7d5      	b.n	800b5ca <__hexnan+0xe2>
	...

0800b620 <malloc>:
 800b620:	4b02      	ldr	r3, [pc, #8]	@ (800b62c <malloc+0xc>)
 800b622:	4601      	mov	r1, r0
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	f000 b825 	b.w	800b674 <_malloc_r>
 800b62a:	bf00      	nop
 800b62c:	20000210 	.word	0x20000210

0800b630 <sbrk_aligned>:
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	4e0f      	ldr	r6, [pc, #60]	@ (800b670 <sbrk_aligned+0x40>)
 800b634:	460c      	mov	r4, r1
 800b636:	6831      	ldr	r1, [r6, #0]
 800b638:	4605      	mov	r5, r0
 800b63a:	b911      	cbnz	r1, 800b642 <sbrk_aligned+0x12>
 800b63c:	f001 f9e6 	bl	800ca0c <_sbrk_r>
 800b640:	6030      	str	r0, [r6, #0]
 800b642:	4621      	mov	r1, r4
 800b644:	4628      	mov	r0, r5
 800b646:	f001 f9e1 	bl	800ca0c <_sbrk_r>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	d103      	bne.n	800b656 <sbrk_aligned+0x26>
 800b64e:	f04f 34ff 	mov.w	r4, #4294967295
 800b652:	4620      	mov	r0, r4
 800b654:	bd70      	pop	{r4, r5, r6, pc}
 800b656:	1cc4      	adds	r4, r0, #3
 800b658:	f024 0403 	bic.w	r4, r4, #3
 800b65c:	42a0      	cmp	r0, r4
 800b65e:	d0f8      	beq.n	800b652 <sbrk_aligned+0x22>
 800b660:	1a21      	subs	r1, r4, r0
 800b662:	4628      	mov	r0, r5
 800b664:	f001 f9d2 	bl	800ca0c <_sbrk_r>
 800b668:	3001      	adds	r0, #1
 800b66a:	d1f2      	bne.n	800b652 <sbrk_aligned+0x22>
 800b66c:	e7ef      	b.n	800b64e <sbrk_aligned+0x1e>
 800b66e:	bf00      	nop
 800b670:	2000063c 	.word	0x2000063c

0800b674 <_malloc_r>:
 800b674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b678:	1ccd      	adds	r5, r1, #3
 800b67a:	f025 0503 	bic.w	r5, r5, #3
 800b67e:	3508      	adds	r5, #8
 800b680:	2d0c      	cmp	r5, #12
 800b682:	bf38      	it	cc
 800b684:	250c      	movcc	r5, #12
 800b686:	2d00      	cmp	r5, #0
 800b688:	4606      	mov	r6, r0
 800b68a:	db01      	blt.n	800b690 <_malloc_r+0x1c>
 800b68c:	42a9      	cmp	r1, r5
 800b68e:	d904      	bls.n	800b69a <_malloc_r+0x26>
 800b690:	230c      	movs	r3, #12
 800b692:	6033      	str	r3, [r6, #0]
 800b694:	2000      	movs	r0, #0
 800b696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b770 <_malloc_r+0xfc>
 800b69e:	f000 f87b 	bl	800b798 <__malloc_lock>
 800b6a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b6a6:	461c      	mov	r4, r3
 800b6a8:	bb44      	cbnz	r4, 800b6fc <_malloc_r+0x88>
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	f7ff ffbf 	bl	800b630 <sbrk_aligned>
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	d158      	bne.n	800b76a <_malloc_r+0xf6>
 800b6b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b6bc:	4627      	mov	r7, r4
 800b6be:	2f00      	cmp	r7, #0
 800b6c0:	d143      	bne.n	800b74a <_malloc_r+0xd6>
 800b6c2:	2c00      	cmp	r4, #0
 800b6c4:	d04b      	beq.n	800b75e <_malloc_r+0xea>
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	eb04 0903 	add.w	r9, r4, r3
 800b6d0:	f001 f99c 	bl	800ca0c <_sbrk_r>
 800b6d4:	4581      	cmp	r9, r0
 800b6d6:	d142      	bne.n	800b75e <_malloc_r+0xea>
 800b6d8:	6821      	ldr	r1, [r4, #0]
 800b6da:	1a6d      	subs	r5, r5, r1
 800b6dc:	4629      	mov	r1, r5
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f7ff ffa6 	bl	800b630 <sbrk_aligned>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d03a      	beq.n	800b75e <_malloc_r+0xea>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	442b      	add	r3, r5
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	bb62      	cbnz	r2, 800b750 <_malloc_r+0xdc>
 800b6f6:	f8c8 7000 	str.w	r7, [r8]
 800b6fa:	e00f      	b.n	800b71c <_malloc_r+0xa8>
 800b6fc:	6822      	ldr	r2, [r4, #0]
 800b6fe:	1b52      	subs	r2, r2, r5
 800b700:	d420      	bmi.n	800b744 <_malloc_r+0xd0>
 800b702:	2a0b      	cmp	r2, #11
 800b704:	d917      	bls.n	800b736 <_malloc_r+0xc2>
 800b706:	1961      	adds	r1, r4, r5
 800b708:	42a3      	cmp	r3, r4
 800b70a:	6025      	str	r5, [r4, #0]
 800b70c:	bf18      	it	ne
 800b70e:	6059      	strne	r1, [r3, #4]
 800b710:	6863      	ldr	r3, [r4, #4]
 800b712:	bf08      	it	eq
 800b714:	f8c8 1000 	streq.w	r1, [r8]
 800b718:	5162      	str	r2, [r4, r5]
 800b71a:	604b      	str	r3, [r1, #4]
 800b71c:	4630      	mov	r0, r6
 800b71e:	f000 f841 	bl	800b7a4 <__malloc_unlock>
 800b722:	f104 000b 	add.w	r0, r4, #11
 800b726:	1d23      	adds	r3, r4, #4
 800b728:	f020 0007 	bic.w	r0, r0, #7
 800b72c:	1ac2      	subs	r2, r0, r3
 800b72e:	bf1c      	itt	ne
 800b730:	1a1b      	subne	r3, r3, r0
 800b732:	50a3      	strne	r3, [r4, r2]
 800b734:	e7af      	b.n	800b696 <_malloc_r+0x22>
 800b736:	6862      	ldr	r2, [r4, #4]
 800b738:	42a3      	cmp	r3, r4
 800b73a:	bf0c      	ite	eq
 800b73c:	f8c8 2000 	streq.w	r2, [r8]
 800b740:	605a      	strne	r2, [r3, #4]
 800b742:	e7eb      	b.n	800b71c <_malloc_r+0xa8>
 800b744:	4623      	mov	r3, r4
 800b746:	6864      	ldr	r4, [r4, #4]
 800b748:	e7ae      	b.n	800b6a8 <_malloc_r+0x34>
 800b74a:	463c      	mov	r4, r7
 800b74c:	687f      	ldr	r7, [r7, #4]
 800b74e:	e7b6      	b.n	800b6be <_malloc_r+0x4a>
 800b750:	461a      	mov	r2, r3
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	42a3      	cmp	r3, r4
 800b756:	d1fb      	bne.n	800b750 <_malloc_r+0xdc>
 800b758:	2300      	movs	r3, #0
 800b75a:	6053      	str	r3, [r2, #4]
 800b75c:	e7de      	b.n	800b71c <_malloc_r+0xa8>
 800b75e:	230c      	movs	r3, #12
 800b760:	6033      	str	r3, [r6, #0]
 800b762:	4630      	mov	r0, r6
 800b764:	f000 f81e 	bl	800b7a4 <__malloc_unlock>
 800b768:	e794      	b.n	800b694 <_malloc_r+0x20>
 800b76a:	6005      	str	r5, [r0, #0]
 800b76c:	e7d6      	b.n	800b71c <_malloc_r+0xa8>
 800b76e:	bf00      	nop
 800b770:	20000640 	.word	0x20000640

0800b774 <__ascii_mbtowc>:
 800b774:	b082      	sub	sp, #8
 800b776:	b901      	cbnz	r1, 800b77a <__ascii_mbtowc+0x6>
 800b778:	a901      	add	r1, sp, #4
 800b77a:	b142      	cbz	r2, 800b78e <__ascii_mbtowc+0x1a>
 800b77c:	b14b      	cbz	r3, 800b792 <__ascii_mbtowc+0x1e>
 800b77e:	7813      	ldrb	r3, [r2, #0]
 800b780:	600b      	str	r3, [r1, #0]
 800b782:	7812      	ldrb	r2, [r2, #0]
 800b784:	1e10      	subs	r0, r2, #0
 800b786:	bf18      	it	ne
 800b788:	2001      	movne	r0, #1
 800b78a:	b002      	add	sp, #8
 800b78c:	4770      	bx	lr
 800b78e:	4610      	mov	r0, r2
 800b790:	e7fb      	b.n	800b78a <__ascii_mbtowc+0x16>
 800b792:	f06f 0001 	mvn.w	r0, #1
 800b796:	e7f8      	b.n	800b78a <__ascii_mbtowc+0x16>

0800b798 <__malloc_lock>:
 800b798:	4801      	ldr	r0, [pc, #4]	@ (800b7a0 <__malloc_lock+0x8>)
 800b79a:	f7fe bd4e 	b.w	800a23a <__retarget_lock_acquire_recursive>
 800b79e:	bf00      	nop
 800b7a0:	20000638 	.word	0x20000638

0800b7a4 <__malloc_unlock>:
 800b7a4:	4801      	ldr	r0, [pc, #4]	@ (800b7ac <__malloc_unlock+0x8>)
 800b7a6:	f7fe bd49 	b.w	800a23c <__retarget_lock_release_recursive>
 800b7aa:	bf00      	nop
 800b7ac:	20000638 	.word	0x20000638

0800b7b0 <_Balloc>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	69c6      	ldr	r6, [r0, #28]
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	b976      	cbnz	r6, 800b7d8 <_Balloc+0x28>
 800b7ba:	2010      	movs	r0, #16
 800b7bc:	f7ff ff30 	bl	800b620 <malloc>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	61e0      	str	r0, [r4, #28]
 800b7c4:	b920      	cbnz	r0, 800b7d0 <_Balloc+0x20>
 800b7c6:	4b18      	ldr	r3, [pc, #96]	@ (800b828 <_Balloc+0x78>)
 800b7c8:	4818      	ldr	r0, [pc, #96]	@ (800b82c <_Balloc+0x7c>)
 800b7ca:	216b      	movs	r1, #107	@ 0x6b
 800b7cc:	f001 f92e 	bl	800ca2c <__assert_func>
 800b7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7d4:	6006      	str	r6, [r0, #0]
 800b7d6:	60c6      	str	r6, [r0, #12]
 800b7d8:	69e6      	ldr	r6, [r4, #28]
 800b7da:	68f3      	ldr	r3, [r6, #12]
 800b7dc:	b183      	cbz	r3, 800b800 <_Balloc+0x50>
 800b7de:	69e3      	ldr	r3, [r4, #28]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7e6:	b9b8      	cbnz	r0, 800b818 <_Balloc+0x68>
 800b7e8:	2101      	movs	r1, #1
 800b7ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b7ee:	1d72      	adds	r2, r6, #5
 800b7f0:	0092      	lsls	r2, r2, #2
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f001 f938 	bl	800ca68 <_calloc_r>
 800b7f8:	b160      	cbz	r0, 800b814 <_Balloc+0x64>
 800b7fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7fe:	e00e      	b.n	800b81e <_Balloc+0x6e>
 800b800:	2221      	movs	r2, #33	@ 0x21
 800b802:	2104      	movs	r1, #4
 800b804:	4620      	mov	r0, r4
 800b806:	f001 f92f 	bl	800ca68 <_calloc_r>
 800b80a:	69e3      	ldr	r3, [r4, #28]
 800b80c:	60f0      	str	r0, [r6, #12]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1e4      	bne.n	800b7de <_Balloc+0x2e>
 800b814:	2000      	movs	r0, #0
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	6802      	ldr	r2, [r0, #0]
 800b81a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b81e:	2300      	movs	r3, #0
 800b820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b824:	e7f7      	b.n	800b816 <_Balloc+0x66>
 800b826:	bf00      	nop
 800b828:	0800cf3e 	.word	0x0800cf3e
 800b82c:	0800d01e 	.word	0x0800d01e

0800b830 <_Bfree>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	69c6      	ldr	r6, [r0, #28]
 800b834:	4605      	mov	r5, r0
 800b836:	460c      	mov	r4, r1
 800b838:	b976      	cbnz	r6, 800b858 <_Bfree+0x28>
 800b83a:	2010      	movs	r0, #16
 800b83c:	f7ff fef0 	bl	800b620 <malloc>
 800b840:	4602      	mov	r2, r0
 800b842:	61e8      	str	r0, [r5, #28]
 800b844:	b920      	cbnz	r0, 800b850 <_Bfree+0x20>
 800b846:	4b09      	ldr	r3, [pc, #36]	@ (800b86c <_Bfree+0x3c>)
 800b848:	4809      	ldr	r0, [pc, #36]	@ (800b870 <_Bfree+0x40>)
 800b84a:	218f      	movs	r1, #143	@ 0x8f
 800b84c:	f001 f8ee 	bl	800ca2c <__assert_func>
 800b850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b854:	6006      	str	r6, [r0, #0]
 800b856:	60c6      	str	r6, [r0, #12]
 800b858:	b13c      	cbz	r4, 800b86a <_Bfree+0x3a>
 800b85a:	69eb      	ldr	r3, [r5, #28]
 800b85c:	6862      	ldr	r2, [r4, #4]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b864:	6021      	str	r1, [r4, #0]
 800b866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	0800cf3e 	.word	0x0800cf3e
 800b870:	0800d01e 	.word	0x0800d01e

0800b874 <__multadd>:
 800b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	690d      	ldr	r5, [r1, #16]
 800b87a:	4607      	mov	r7, r0
 800b87c:	460c      	mov	r4, r1
 800b87e:	461e      	mov	r6, r3
 800b880:	f101 0c14 	add.w	ip, r1, #20
 800b884:	2000      	movs	r0, #0
 800b886:	f8dc 3000 	ldr.w	r3, [ip]
 800b88a:	b299      	uxth	r1, r3
 800b88c:	fb02 6101 	mla	r1, r2, r1, r6
 800b890:	0c1e      	lsrs	r6, r3, #16
 800b892:	0c0b      	lsrs	r3, r1, #16
 800b894:	fb02 3306 	mla	r3, r2, r6, r3
 800b898:	b289      	uxth	r1, r1
 800b89a:	3001      	adds	r0, #1
 800b89c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8a0:	4285      	cmp	r5, r0
 800b8a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b8a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8aa:	dcec      	bgt.n	800b886 <__multadd+0x12>
 800b8ac:	b30e      	cbz	r6, 800b8f2 <__multadd+0x7e>
 800b8ae:	68a3      	ldr	r3, [r4, #8]
 800b8b0:	42ab      	cmp	r3, r5
 800b8b2:	dc19      	bgt.n	800b8e8 <__multadd+0x74>
 800b8b4:	6861      	ldr	r1, [r4, #4]
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	3101      	adds	r1, #1
 800b8ba:	f7ff ff79 	bl	800b7b0 <_Balloc>
 800b8be:	4680      	mov	r8, r0
 800b8c0:	b928      	cbnz	r0, 800b8ce <__multadd+0x5a>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f8 <__multadd+0x84>)
 800b8c6:	480d      	ldr	r0, [pc, #52]	@ (800b8fc <__multadd+0x88>)
 800b8c8:	21ba      	movs	r1, #186	@ 0xba
 800b8ca:	f001 f8af 	bl	800ca2c <__assert_func>
 800b8ce:	6922      	ldr	r2, [r4, #16]
 800b8d0:	3202      	adds	r2, #2
 800b8d2:	f104 010c 	add.w	r1, r4, #12
 800b8d6:	0092      	lsls	r2, r2, #2
 800b8d8:	300c      	adds	r0, #12
 800b8da:	f7fe fcb0 	bl	800a23e <memcpy>
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f7ff ffa5 	bl	800b830 <_Bfree>
 800b8e6:	4644      	mov	r4, r8
 800b8e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	615e      	str	r6, [r3, #20]
 800b8f0:	6125      	str	r5, [r4, #16]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	0800cfad 	.word	0x0800cfad
 800b8fc:	0800d01e 	.word	0x0800d01e

0800b900 <__s2b>:
 800b900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b904:	460c      	mov	r4, r1
 800b906:	4615      	mov	r5, r2
 800b908:	461f      	mov	r7, r3
 800b90a:	2209      	movs	r2, #9
 800b90c:	3308      	adds	r3, #8
 800b90e:	4606      	mov	r6, r0
 800b910:	fb93 f3f2 	sdiv	r3, r3, r2
 800b914:	2100      	movs	r1, #0
 800b916:	2201      	movs	r2, #1
 800b918:	429a      	cmp	r2, r3
 800b91a:	db09      	blt.n	800b930 <__s2b+0x30>
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff ff47 	bl	800b7b0 <_Balloc>
 800b922:	b940      	cbnz	r0, 800b936 <__s2b+0x36>
 800b924:	4602      	mov	r2, r0
 800b926:	4b19      	ldr	r3, [pc, #100]	@ (800b98c <__s2b+0x8c>)
 800b928:	4819      	ldr	r0, [pc, #100]	@ (800b990 <__s2b+0x90>)
 800b92a:	21d3      	movs	r1, #211	@ 0xd3
 800b92c:	f001 f87e 	bl	800ca2c <__assert_func>
 800b930:	0052      	lsls	r2, r2, #1
 800b932:	3101      	adds	r1, #1
 800b934:	e7f0      	b.n	800b918 <__s2b+0x18>
 800b936:	9b08      	ldr	r3, [sp, #32]
 800b938:	6143      	str	r3, [r0, #20]
 800b93a:	2d09      	cmp	r5, #9
 800b93c:	f04f 0301 	mov.w	r3, #1
 800b940:	6103      	str	r3, [r0, #16]
 800b942:	dd16      	ble.n	800b972 <__s2b+0x72>
 800b944:	f104 0909 	add.w	r9, r4, #9
 800b948:	46c8      	mov	r8, r9
 800b94a:	442c      	add	r4, r5
 800b94c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b950:	4601      	mov	r1, r0
 800b952:	3b30      	subs	r3, #48	@ 0x30
 800b954:	220a      	movs	r2, #10
 800b956:	4630      	mov	r0, r6
 800b958:	f7ff ff8c 	bl	800b874 <__multadd>
 800b95c:	45a0      	cmp	r8, r4
 800b95e:	d1f5      	bne.n	800b94c <__s2b+0x4c>
 800b960:	f1a5 0408 	sub.w	r4, r5, #8
 800b964:	444c      	add	r4, r9
 800b966:	1b2d      	subs	r5, r5, r4
 800b968:	1963      	adds	r3, r4, r5
 800b96a:	42bb      	cmp	r3, r7
 800b96c:	db04      	blt.n	800b978 <__s2b+0x78>
 800b96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b972:	340a      	adds	r4, #10
 800b974:	2509      	movs	r5, #9
 800b976:	e7f6      	b.n	800b966 <__s2b+0x66>
 800b978:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b97c:	4601      	mov	r1, r0
 800b97e:	3b30      	subs	r3, #48	@ 0x30
 800b980:	220a      	movs	r2, #10
 800b982:	4630      	mov	r0, r6
 800b984:	f7ff ff76 	bl	800b874 <__multadd>
 800b988:	e7ee      	b.n	800b968 <__s2b+0x68>
 800b98a:	bf00      	nop
 800b98c:	0800cfad 	.word	0x0800cfad
 800b990:	0800d01e 	.word	0x0800d01e

0800b994 <__hi0bits>:
 800b994:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b998:	4603      	mov	r3, r0
 800b99a:	bf36      	itet	cc
 800b99c:	0403      	lslcc	r3, r0, #16
 800b99e:	2000      	movcs	r0, #0
 800b9a0:	2010      	movcc	r0, #16
 800b9a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9a6:	bf3c      	itt	cc
 800b9a8:	021b      	lslcc	r3, r3, #8
 800b9aa:	3008      	addcc	r0, #8
 800b9ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9b0:	bf3c      	itt	cc
 800b9b2:	011b      	lslcc	r3, r3, #4
 800b9b4:	3004      	addcc	r0, #4
 800b9b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ba:	bf3c      	itt	cc
 800b9bc:	009b      	lslcc	r3, r3, #2
 800b9be:	3002      	addcc	r0, #2
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	db05      	blt.n	800b9d0 <__hi0bits+0x3c>
 800b9c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9c8:	f100 0001 	add.w	r0, r0, #1
 800b9cc:	bf08      	it	eq
 800b9ce:	2020      	moveq	r0, #32
 800b9d0:	4770      	bx	lr

0800b9d2 <__lo0bits>:
 800b9d2:	6803      	ldr	r3, [r0, #0]
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	f013 0007 	ands.w	r0, r3, #7
 800b9da:	d00b      	beq.n	800b9f4 <__lo0bits+0x22>
 800b9dc:	07d9      	lsls	r1, r3, #31
 800b9de:	d421      	bmi.n	800ba24 <__lo0bits+0x52>
 800b9e0:	0798      	lsls	r0, r3, #30
 800b9e2:	bf49      	itett	mi
 800b9e4:	085b      	lsrmi	r3, r3, #1
 800b9e6:	089b      	lsrpl	r3, r3, #2
 800b9e8:	2001      	movmi	r0, #1
 800b9ea:	6013      	strmi	r3, [r2, #0]
 800b9ec:	bf5c      	itt	pl
 800b9ee:	6013      	strpl	r3, [r2, #0]
 800b9f0:	2002      	movpl	r0, #2
 800b9f2:	4770      	bx	lr
 800b9f4:	b299      	uxth	r1, r3
 800b9f6:	b909      	cbnz	r1, 800b9fc <__lo0bits+0x2a>
 800b9f8:	0c1b      	lsrs	r3, r3, #16
 800b9fa:	2010      	movs	r0, #16
 800b9fc:	b2d9      	uxtb	r1, r3
 800b9fe:	b909      	cbnz	r1, 800ba04 <__lo0bits+0x32>
 800ba00:	3008      	adds	r0, #8
 800ba02:	0a1b      	lsrs	r3, r3, #8
 800ba04:	0719      	lsls	r1, r3, #28
 800ba06:	bf04      	itt	eq
 800ba08:	091b      	lsreq	r3, r3, #4
 800ba0a:	3004      	addeq	r0, #4
 800ba0c:	0799      	lsls	r1, r3, #30
 800ba0e:	bf04      	itt	eq
 800ba10:	089b      	lsreq	r3, r3, #2
 800ba12:	3002      	addeq	r0, #2
 800ba14:	07d9      	lsls	r1, r3, #31
 800ba16:	d403      	bmi.n	800ba20 <__lo0bits+0x4e>
 800ba18:	085b      	lsrs	r3, r3, #1
 800ba1a:	f100 0001 	add.w	r0, r0, #1
 800ba1e:	d003      	beq.n	800ba28 <__lo0bits+0x56>
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	4770      	bx	lr
 800ba24:	2000      	movs	r0, #0
 800ba26:	4770      	bx	lr
 800ba28:	2020      	movs	r0, #32
 800ba2a:	4770      	bx	lr

0800ba2c <__i2b>:
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	460c      	mov	r4, r1
 800ba30:	2101      	movs	r1, #1
 800ba32:	f7ff febd 	bl	800b7b0 <_Balloc>
 800ba36:	4602      	mov	r2, r0
 800ba38:	b928      	cbnz	r0, 800ba46 <__i2b+0x1a>
 800ba3a:	4b05      	ldr	r3, [pc, #20]	@ (800ba50 <__i2b+0x24>)
 800ba3c:	4805      	ldr	r0, [pc, #20]	@ (800ba54 <__i2b+0x28>)
 800ba3e:	f240 1145 	movw	r1, #325	@ 0x145
 800ba42:	f000 fff3 	bl	800ca2c <__assert_func>
 800ba46:	2301      	movs	r3, #1
 800ba48:	6144      	str	r4, [r0, #20]
 800ba4a:	6103      	str	r3, [r0, #16]
 800ba4c:	bd10      	pop	{r4, pc}
 800ba4e:	bf00      	nop
 800ba50:	0800cfad 	.word	0x0800cfad
 800ba54:	0800d01e 	.word	0x0800d01e

0800ba58 <__multiply>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	4614      	mov	r4, r2
 800ba5e:	690a      	ldr	r2, [r1, #16]
 800ba60:	6923      	ldr	r3, [r4, #16]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	bfa8      	it	ge
 800ba66:	4623      	movge	r3, r4
 800ba68:	460f      	mov	r7, r1
 800ba6a:	bfa4      	itt	ge
 800ba6c:	460c      	movge	r4, r1
 800ba6e:	461f      	movge	r7, r3
 800ba70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba78:	68a3      	ldr	r3, [r4, #8]
 800ba7a:	6861      	ldr	r1, [r4, #4]
 800ba7c:	eb0a 0609 	add.w	r6, sl, r9
 800ba80:	42b3      	cmp	r3, r6
 800ba82:	b085      	sub	sp, #20
 800ba84:	bfb8      	it	lt
 800ba86:	3101      	addlt	r1, #1
 800ba88:	f7ff fe92 	bl	800b7b0 <_Balloc>
 800ba8c:	b930      	cbnz	r0, 800ba9c <__multiply+0x44>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	4b44      	ldr	r3, [pc, #272]	@ (800bba4 <__multiply+0x14c>)
 800ba92:	4845      	ldr	r0, [pc, #276]	@ (800bba8 <__multiply+0x150>)
 800ba94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba98:	f000 ffc8 	bl	800ca2c <__assert_func>
 800ba9c:	f100 0514 	add.w	r5, r0, #20
 800baa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800baa4:	462b      	mov	r3, r5
 800baa6:	2200      	movs	r2, #0
 800baa8:	4543      	cmp	r3, r8
 800baaa:	d321      	bcc.n	800baf0 <__multiply+0x98>
 800baac:	f107 0114 	add.w	r1, r7, #20
 800bab0:	f104 0214 	add.w	r2, r4, #20
 800bab4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bab8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800babc:	9302      	str	r3, [sp, #8]
 800babe:	1b13      	subs	r3, r2, r4
 800bac0:	3b15      	subs	r3, #21
 800bac2:	f023 0303 	bic.w	r3, r3, #3
 800bac6:	3304      	adds	r3, #4
 800bac8:	f104 0715 	add.w	r7, r4, #21
 800bacc:	42ba      	cmp	r2, r7
 800bace:	bf38      	it	cc
 800bad0:	2304      	movcc	r3, #4
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	9b02      	ldr	r3, [sp, #8]
 800bad6:	9103      	str	r1, [sp, #12]
 800bad8:	428b      	cmp	r3, r1
 800bada:	d80c      	bhi.n	800baf6 <__multiply+0x9e>
 800badc:	2e00      	cmp	r6, #0
 800bade:	dd03      	ble.n	800bae8 <__multiply+0x90>
 800bae0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d05b      	beq.n	800bba0 <__multiply+0x148>
 800bae8:	6106      	str	r6, [r0, #16]
 800baea:	b005      	add	sp, #20
 800baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf0:	f843 2b04 	str.w	r2, [r3], #4
 800baf4:	e7d8      	b.n	800baa8 <__multiply+0x50>
 800baf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800bafa:	f1ba 0f00 	cmp.w	sl, #0
 800bafe:	d024      	beq.n	800bb4a <__multiply+0xf2>
 800bb00:	f104 0e14 	add.w	lr, r4, #20
 800bb04:	46a9      	mov	r9, r5
 800bb06:	f04f 0c00 	mov.w	ip, #0
 800bb0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb0e:	f8d9 3000 	ldr.w	r3, [r9]
 800bb12:	fa1f fb87 	uxth.w	fp, r7
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bb20:	f8d9 7000 	ldr.w	r7, [r9]
 800bb24:	4463      	add	r3, ip
 800bb26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb2a:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb38:	4572      	cmp	r2, lr
 800bb3a:	f849 3b04 	str.w	r3, [r9], #4
 800bb3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb42:	d8e2      	bhi.n	800bb0a <__multiply+0xb2>
 800bb44:	9b01      	ldr	r3, [sp, #4]
 800bb46:	f845 c003 	str.w	ip, [r5, r3]
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb50:	3104      	adds	r1, #4
 800bb52:	f1b9 0f00 	cmp.w	r9, #0
 800bb56:	d021      	beq.n	800bb9c <__multiply+0x144>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	f104 0c14 	add.w	ip, r4, #20
 800bb5e:	46ae      	mov	lr, r5
 800bb60:	f04f 0a00 	mov.w	sl, #0
 800bb64:	f8bc b000 	ldrh.w	fp, [ip]
 800bb68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb6c:	fb09 770b 	mla	r7, r9, fp, r7
 800bb70:	4457      	add	r7, sl
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb78:	f84e 3b04 	str.w	r3, [lr], #4
 800bb7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb84:	f8be 3000 	ldrh.w	r3, [lr]
 800bb88:	fb09 330a 	mla	r3, r9, sl, r3
 800bb8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb90:	4562      	cmp	r2, ip
 800bb92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb96:	d8e5      	bhi.n	800bb64 <__multiply+0x10c>
 800bb98:	9f01      	ldr	r7, [sp, #4]
 800bb9a:	51eb      	str	r3, [r5, r7]
 800bb9c:	3504      	adds	r5, #4
 800bb9e:	e799      	b.n	800bad4 <__multiply+0x7c>
 800bba0:	3e01      	subs	r6, #1
 800bba2:	e79b      	b.n	800badc <__multiply+0x84>
 800bba4:	0800cfad 	.word	0x0800cfad
 800bba8:	0800d01e 	.word	0x0800d01e

0800bbac <__pow5mult>:
 800bbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb0:	4615      	mov	r5, r2
 800bbb2:	f012 0203 	ands.w	r2, r2, #3
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	460e      	mov	r6, r1
 800bbba:	d007      	beq.n	800bbcc <__pow5mult+0x20>
 800bbbc:	4c25      	ldr	r4, [pc, #148]	@ (800bc54 <__pow5mult+0xa8>)
 800bbbe:	3a01      	subs	r2, #1
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbc6:	f7ff fe55 	bl	800b874 <__multadd>
 800bbca:	4606      	mov	r6, r0
 800bbcc:	10ad      	asrs	r5, r5, #2
 800bbce:	d03d      	beq.n	800bc4c <__pow5mult+0xa0>
 800bbd0:	69fc      	ldr	r4, [r7, #28]
 800bbd2:	b97c      	cbnz	r4, 800bbf4 <__pow5mult+0x48>
 800bbd4:	2010      	movs	r0, #16
 800bbd6:	f7ff fd23 	bl	800b620 <malloc>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	61f8      	str	r0, [r7, #28]
 800bbde:	b928      	cbnz	r0, 800bbec <__pow5mult+0x40>
 800bbe0:	4b1d      	ldr	r3, [pc, #116]	@ (800bc58 <__pow5mult+0xac>)
 800bbe2:	481e      	ldr	r0, [pc, #120]	@ (800bc5c <__pow5mult+0xb0>)
 800bbe4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbe8:	f000 ff20 	bl	800ca2c <__assert_func>
 800bbec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbf0:	6004      	str	r4, [r0, #0]
 800bbf2:	60c4      	str	r4, [r0, #12]
 800bbf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbfc:	b94c      	cbnz	r4, 800bc12 <__pow5mult+0x66>
 800bbfe:	f240 2171 	movw	r1, #625	@ 0x271
 800bc02:	4638      	mov	r0, r7
 800bc04:	f7ff ff12 	bl	800ba2c <__i2b>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc0e:	4604      	mov	r4, r0
 800bc10:	6003      	str	r3, [r0, #0]
 800bc12:	f04f 0900 	mov.w	r9, #0
 800bc16:	07eb      	lsls	r3, r5, #31
 800bc18:	d50a      	bpl.n	800bc30 <__pow5mult+0x84>
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f7ff ff1a 	bl	800ba58 <__multiply>
 800bc24:	4631      	mov	r1, r6
 800bc26:	4680      	mov	r8, r0
 800bc28:	4638      	mov	r0, r7
 800bc2a:	f7ff fe01 	bl	800b830 <_Bfree>
 800bc2e:	4646      	mov	r6, r8
 800bc30:	106d      	asrs	r5, r5, #1
 800bc32:	d00b      	beq.n	800bc4c <__pow5mult+0xa0>
 800bc34:	6820      	ldr	r0, [r4, #0]
 800bc36:	b938      	cbnz	r0, 800bc48 <__pow5mult+0x9c>
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4638      	mov	r0, r7
 800bc3e:	f7ff ff0b 	bl	800ba58 <__multiply>
 800bc42:	6020      	str	r0, [r4, #0]
 800bc44:	f8c0 9000 	str.w	r9, [r0]
 800bc48:	4604      	mov	r4, r0
 800bc4a:	e7e4      	b.n	800bc16 <__pow5mult+0x6a>
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc52:	bf00      	nop
 800bc54:	0800d078 	.word	0x0800d078
 800bc58:	0800cf3e 	.word	0x0800cf3e
 800bc5c:	0800d01e 	.word	0x0800d01e

0800bc60 <__lshift>:
 800bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc64:	460c      	mov	r4, r1
 800bc66:	6849      	ldr	r1, [r1, #4]
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc6e:	68a3      	ldr	r3, [r4, #8]
 800bc70:	4607      	mov	r7, r0
 800bc72:	4691      	mov	r9, r2
 800bc74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc78:	f108 0601 	add.w	r6, r8, #1
 800bc7c:	42b3      	cmp	r3, r6
 800bc7e:	db0b      	blt.n	800bc98 <__lshift+0x38>
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff fd95 	bl	800b7b0 <_Balloc>
 800bc86:	4605      	mov	r5, r0
 800bc88:	b948      	cbnz	r0, 800bc9e <__lshift+0x3e>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	4b28      	ldr	r3, [pc, #160]	@ (800bd30 <__lshift+0xd0>)
 800bc8e:	4829      	ldr	r0, [pc, #164]	@ (800bd34 <__lshift+0xd4>)
 800bc90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc94:	f000 feca 	bl	800ca2c <__assert_func>
 800bc98:	3101      	adds	r1, #1
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	e7ee      	b.n	800bc7c <__lshift+0x1c>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f100 0114 	add.w	r1, r0, #20
 800bca4:	f100 0210 	add.w	r2, r0, #16
 800bca8:	4618      	mov	r0, r3
 800bcaa:	4553      	cmp	r3, sl
 800bcac:	db33      	blt.n	800bd16 <__lshift+0xb6>
 800bcae:	6920      	ldr	r0, [r4, #16]
 800bcb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcb4:	f104 0314 	add.w	r3, r4, #20
 800bcb8:	f019 091f 	ands.w	r9, r9, #31
 800bcbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcc4:	d02b      	beq.n	800bd1e <__lshift+0xbe>
 800bcc6:	f1c9 0e20 	rsb	lr, r9, #32
 800bcca:	468a      	mov	sl, r1
 800bccc:	2200      	movs	r2, #0
 800bcce:	6818      	ldr	r0, [r3, #0]
 800bcd0:	fa00 f009 	lsl.w	r0, r0, r9
 800bcd4:	4310      	orrs	r0, r2
 800bcd6:	f84a 0b04 	str.w	r0, [sl], #4
 800bcda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcde:	459c      	cmp	ip, r3
 800bce0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bce4:	d8f3      	bhi.n	800bcce <__lshift+0x6e>
 800bce6:	ebac 0304 	sub.w	r3, ip, r4
 800bcea:	3b15      	subs	r3, #21
 800bcec:	f023 0303 	bic.w	r3, r3, #3
 800bcf0:	3304      	adds	r3, #4
 800bcf2:	f104 0015 	add.w	r0, r4, #21
 800bcf6:	4584      	cmp	ip, r0
 800bcf8:	bf38      	it	cc
 800bcfa:	2304      	movcc	r3, #4
 800bcfc:	50ca      	str	r2, [r1, r3]
 800bcfe:	b10a      	cbz	r2, 800bd04 <__lshift+0xa4>
 800bd00:	f108 0602 	add.w	r6, r8, #2
 800bd04:	3e01      	subs	r6, #1
 800bd06:	4638      	mov	r0, r7
 800bd08:	612e      	str	r6, [r5, #16]
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	f7ff fd90 	bl	800b830 <_Bfree>
 800bd10:	4628      	mov	r0, r5
 800bd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd16:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	e7c5      	b.n	800bcaa <__lshift+0x4a>
 800bd1e:	3904      	subs	r1, #4
 800bd20:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd24:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd28:	459c      	cmp	ip, r3
 800bd2a:	d8f9      	bhi.n	800bd20 <__lshift+0xc0>
 800bd2c:	e7ea      	b.n	800bd04 <__lshift+0xa4>
 800bd2e:	bf00      	nop
 800bd30:	0800cfad 	.word	0x0800cfad
 800bd34:	0800d01e 	.word	0x0800d01e

0800bd38 <__mcmp>:
 800bd38:	690a      	ldr	r2, [r1, #16]
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	6900      	ldr	r0, [r0, #16]
 800bd3e:	1a80      	subs	r0, r0, r2
 800bd40:	b530      	push	{r4, r5, lr}
 800bd42:	d10e      	bne.n	800bd62 <__mcmp+0x2a>
 800bd44:	3314      	adds	r3, #20
 800bd46:	3114      	adds	r1, #20
 800bd48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd58:	4295      	cmp	r5, r2
 800bd5a:	d003      	beq.n	800bd64 <__mcmp+0x2c>
 800bd5c:	d205      	bcs.n	800bd6a <__mcmp+0x32>
 800bd5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd62:	bd30      	pop	{r4, r5, pc}
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	d3f3      	bcc.n	800bd50 <__mcmp+0x18>
 800bd68:	e7fb      	b.n	800bd62 <__mcmp+0x2a>
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	e7f9      	b.n	800bd62 <__mcmp+0x2a>
	...

0800bd70 <__mdiff>:
 800bd70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	4689      	mov	r9, r1
 800bd76:	4606      	mov	r6, r0
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4648      	mov	r0, r9
 800bd7c:	4614      	mov	r4, r2
 800bd7e:	f7ff ffdb 	bl	800bd38 <__mcmp>
 800bd82:	1e05      	subs	r5, r0, #0
 800bd84:	d112      	bne.n	800bdac <__mdiff+0x3c>
 800bd86:	4629      	mov	r1, r5
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f7ff fd11 	bl	800b7b0 <_Balloc>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	b928      	cbnz	r0, 800bd9e <__mdiff+0x2e>
 800bd92:	4b3f      	ldr	r3, [pc, #252]	@ (800be90 <__mdiff+0x120>)
 800bd94:	f240 2137 	movw	r1, #567	@ 0x237
 800bd98:	483e      	ldr	r0, [pc, #248]	@ (800be94 <__mdiff+0x124>)
 800bd9a:	f000 fe47 	bl	800ca2c <__assert_func>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bda4:	4610      	mov	r0, r2
 800bda6:	b003      	add	sp, #12
 800bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdac:	bfbc      	itt	lt
 800bdae:	464b      	movlt	r3, r9
 800bdb0:	46a1      	movlt	r9, r4
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdb8:	bfba      	itte	lt
 800bdba:	461c      	movlt	r4, r3
 800bdbc:	2501      	movlt	r5, #1
 800bdbe:	2500      	movge	r5, #0
 800bdc0:	f7ff fcf6 	bl	800b7b0 <_Balloc>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	b918      	cbnz	r0, 800bdd0 <__mdiff+0x60>
 800bdc8:	4b31      	ldr	r3, [pc, #196]	@ (800be90 <__mdiff+0x120>)
 800bdca:	f240 2145 	movw	r1, #581	@ 0x245
 800bdce:	e7e3      	b.n	800bd98 <__mdiff+0x28>
 800bdd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdd4:	6926      	ldr	r6, [r4, #16]
 800bdd6:	60c5      	str	r5, [r0, #12]
 800bdd8:	f109 0310 	add.w	r3, r9, #16
 800bddc:	f109 0514 	add.w	r5, r9, #20
 800bde0:	f104 0e14 	add.w	lr, r4, #20
 800bde4:	f100 0b14 	add.w	fp, r0, #20
 800bde8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bdec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdf0:	9301      	str	r3, [sp, #4]
 800bdf2:	46d9      	mov	r9, fp
 800bdf4:	f04f 0c00 	mov.w	ip, #0
 800bdf8:	9b01      	ldr	r3, [sp, #4]
 800bdfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	fa1f f38a 	uxth.w	r3, sl
 800be08:	4619      	mov	r1, r3
 800be0a:	b283      	uxth	r3, r0
 800be0c:	1acb      	subs	r3, r1, r3
 800be0e:	0c00      	lsrs	r0, r0, #16
 800be10:	4463      	add	r3, ip
 800be12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be20:	4576      	cmp	r6, lr
 800be22:	f849 3b04 	str.w	r3, [r9], #4
 800be26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be2a:	d8e5      	bhi.n	800bdf8 <__mdiff+0x88>
 800be2c:	1b33      	subs	r3, r6, r4
 800be2e:	3b15      	subs	r3, #21
 800be30:	f023 0303 	bic.w	r3, r3, #3
 800be34:	3415      	adds	r4, #21
 800be36:	3304      	adds	r3, #4
 800be38:	42a6      	cmp	r6, r4
 800be3a:	bf38      	it	cc
 800be3c:	2304      	movcc	r3, #4
 800be3e:	441d      	add	r5, r3
 800be40:	445b      	add	r3, fp
 800be42:	461e      	mov	r6, r3
 800be44:	462c      	mov	r4, r5
 800be46:	4544      	cmp	r4, r8
 800be48:	d30e      	bcc.n	800be68 <__mdiff+0xf8>
 800be4a:	f108 0103 	add.w	r1, r8, #3
 800be4e:	1b49      	subs	r1, r1, r5
 800be50:	f021 0103 	bic.w	r1, r1, #3
 800be54:	3d03      	subs	r5, #3
 800be56:	45a8      	cmp	r8, r5
 800be58:	bf38      	it	cc
 800be5a:	2100      	movcc	r1, #0
 800be5c:	440b      	add	r3, r1
 800be5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be62:	b191      	cbz	r1, 800be8a <__mdiff+0x11a>
 800be64:	6117      	str	r7, [r2, #16]
 800be66:	e79d      	b.n	800bda4 <__mdiff+0x34>
 800be68:	f854 1b04 	ldr.w	r1, [r4], #4
 800be6c:	46e6      	mov	lr, ip
 800be6e:	0c08      	lsrs	r0, r1, #16
 800be70:	fa1c fc81 	uxtah	ip, ip, r1
 800be74:	4471      	add	r1, lr
 800be76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be7a:	b289      	uxth	r1, r1
 800be7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be80:	f846 1b04 	str.w	r1, [r6], #4
 800be84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be88:	e7dd      	b.n	800be46 <__mdiff+0xd6>
 800be8a:	3f01      	subs	r7, #1
 800be8c:	e7e7      	b.n	800be5e <__mdiff+0xee>
 800be8e:	bf00      	nop
 800be90:	0800cfad 	.word	0x0800cfad
 800be94:	0800d01e 	.word	0x0800d01e

0800be98 <__ulp>:
 800be98:	b082      	sub	sp, #8
 800be9a:	ed8d 0b00 	vstr	d0, [sp]
 800be9e:	9a01      	ldr	r2, [sp, #4]
 800bea0:	4b0f      	ldr	r3, [pc, #60]	@ (800bee0 <__ulp+0x48>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dc08      	bgt.n	800bebe <__ulp+0x26>
 800beac:	425b      	negs	r3, r3
 800beae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800beb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800beb6:	da04      	bge.n	800bec2 <__ulp+0x2a>
 800beb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bebc:	4113      	asrs	r3, r2
 800bebe:	2200      	movs	r2, #0
 800bec0:	e008      	b.n	800bed4 <__ulp+0x3c>
 800bec2:	f1a2 0314 	sub.w	r3, r2, #20
 800bec6:	2b1e      	cmp	r3, #30
 800bec8:	bfda      	itte	le
 800beca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bece:	40da      	lsrle	r2, r3
 800bed0:	2201      	movgt	r2, #1
 800bed2:	2300      	movs	r3, #0
 800bed4:	4619      	mov	r1, r3
 800bed6:	4610      	mov	r0, r2
 800bed8:	ec41 0b10 	vmov	d0, r0, r1
 800bedc:	b002      	add	sp, #8
 800bede:	4770      	bx	lr
 800bee0:	7ff00000 	.word	0x7ff00000

0800bee4 <__b2d>:
 800bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	6906      	ldr	r6, [r0, #16]
 800beea:	f100 0814 	add.w	r8, r0, #20
 800beee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bef2:	1f37      	subs	r7, r6, #4
 800bef4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bef8:	4610      	mov	r0, r2
 800befa:	f7ff fd4b 	bl	800b994 <__hi0bits>
 800befe:	f1c0 0320 	rsb	r3, r0, #32
 800bf02:	280a      	cmp	r0, #10
 800bf04:	600b      	str	r3, [r1, #0]
 800bf06:	491b      	ldr	r1, [pc, #108]	@ (800bf74 <__b2d+0x90>)
 800bf08:	dc15      	bgt.n	800bf36 <__b2d+0x52>
 800bf0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bf0e:	fa22 f30c 	lsr.w	r3, r2, ip
 800bf12:	45b8      	cmp	r8, r7
 800bf14:	ea43 0501 	orr.w	r5, r3, r1
 800bf18:	bf34      	ite	cc
 800bf1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf1e:	2300      	movcs	r3, #0
 800bf20:	3015      	adds	r0, #21
 800bf22:	fa02 f000 	lsl.w	r0, r2, r0
 800bf26:	fa23 f30c 	lsr.w	r3, r3, ip
 800bf2a:	4303      	orrs	r3, r0
 800bf2c:	461c      	mov	r4, r3
 800bf2e:	ec45 4b10 	vmov	d0, r4, r5
 800bf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf36:	45b8      	cmp	r8, r7
 800bf38:	bf3a      	itte	cc
 800bf3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bf3e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bf42:	2300      	movcs	r3, #0
 800bf44:	380b      	subs	r0, #11
 800bf46:	d012      	beq.n	800bf6e <__b2d+0x8a>
 800bf48:	f1c0 0120 	rsb	r1, r0, #32
 800bf4c:	fa23 f401 	lsr.w	r4, r3, r1
 800bf50:	4082      	lsls	r2, r0
 800bf52:	4322      	orrs	r2, r4
 800bf54:	4547      	cmp	r7, r8
 800bf56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bf5a:	bf8c      	ite	hi
 800bf5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bf60:	2200      	movls	r2, #0
 800bf62:	4083      	lsls	r3, r0
 800bf64:	40ca      	lsrs	r2, r1
 800bf66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	e7de      	b.n	800bf2c <__b2d+0x48>
 800bf6e:	ea42 0501 	orr.w	r5, r2, r1
 800bf72:	e7db      	b.n	800bf2c <__b2d+0x48>
 800bf74:	3ff00000 	.word	0x3ff00000

0800bf78 <__d2b>:
 800bf78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf7c:	460f      	mov	r7, r1
 800bf7e:	2101      	movs	r1, #1
 800bf80:	ec59 8b10 	vmov	r8, r9, d0
 800bf84:	4616      	mov	r6, r2
 800bf86:	f7ff fc13 	bl	800b7b0 <_Balloc>
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	b930      	cbnz	r0, 800bf9c <__d2b+0x24>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	4b23      	ldr	r3, [pc, #140]	@ (800c020 <__d2b+0xa8>)
 800bf92:	4824      	ldr	r0, [pc, #144]	@ (800c024 <__d2b+0xac>)
 800bf94:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf98:	f000 fd48 	bl	800ca2c <__assert_func>
 800bf9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfa4:	b10d      	cbz	r5, 800bfaa <__d2b+0x32>
 800bfa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfaa:	9301      	str	r3, [sp, #4]
 800bfac:	f1b8 0300 	subs.w	r3, r8, #0
 800bfb0:	d023      	beq.n	800bffa <__d2b+0x82>
 800bfb2:	4668      	mov	r0, sp
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	f7ff fd0c 	bl	800b9d2 <__lo0bits>
 800bfba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfbe:	b1d0      	cbz	r0, 800bff6 <__d2b+0x7e>
 800bfc0:	f1c0 0320 	rsb	r3, r0, #32
 800bfc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	40c2      	lsrs	r2, r0
 800bfcc:	6163      	str	r3, [r4, #20]
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	9b01      	ldr	r3, [sp, #4]
 800bfd2:	61a3      	str	r3, [r4, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	bf0c      	ite	eq
 800bfd8:	2201      	moveq	r2, #1
 800bfda:	2202      	movne	r2, #2
 800bfdc:	6122      	str	r2, [r4, #16]
 800bfde:	b1a5      	cbz	r5, 800c00a <__d2b+0x92>
 800bfe0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bfe4:	4405      	add	r5, r0
 800bfe6:	603d      	str	r5, [r7, #0]
 800bfe8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bfec:	6030      	str	r0, [r6, #0]
 800bfee:	4620      	mov	r0, r4
 800bff0:	b003      	add	sp, #12
 800bff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bff6:	6161      	str	r1, [r4, #20]
 800bff8:	e7ea      	b.n	800bfd0 <__d2b+0x58>
 800bffa:	a801      	add	r0, sp, #4
 800bffc:	f7ff fce9 	bl	800b9d2 <__lo0bits>
 800c000:	9b01      	ldr	r3, [sp, #4]
 800c002:	6163      	str	r3, [r4, #20]
 800c004:	3020      	adds	r0, #32
 800c006:	2201      	movs	r2, #1
 800c008:	e7e8      	b.n	800bfdc <__d2b+0x64>
 800c00a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c00e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c012:	6038      	str	r0, [r7, #0]
 800c014:	6918      	ldr	r0, [r3, #16]
 800c016:	f7ff fcbd 	bl	800b994 <__hi0bits>
 800c01a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c01e:	e7e5      	b.n	800bfec <__d2b+0x74>
 800c020:	0800cfad 	.word	0x0800cfad
 800c024:	0800d01e 	.word	0x0800d01e

0800c028 <__ratio>:
 800c028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	b085      	sub	sp, #20
 800c02e:	e9cd 1000 	strd	r1, r0, [sp]
 800c032:	a902      	add	r1, sp, #8
 800c034:	f7ff ff56 	bl	800bee4 <__b2d>
 800c038:	9800      	ldr	r0, [sp, #0]
 800c03a:	a903      	add	r1, sp, #12
 800c03c:	ec55 4b10 	vmov	r4, r5, d0
 800c040:	f7ff ff50 	bl	800bee4 <__b2d>
 800c044:	9b01      	ldr	r3, [sp, #4]
 800c046:	6919      	ldr	r1, [r3, #16]
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	1ac9      	subs	r1, r1, r3
 800c04e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c052:	1a9b      	subs	r3, r3, r2
 800c054:	ec5b ab10 	vmov	sl, fp, d0
 800c058:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bfce      	itee	gt
 800c060:	462a      	movgt	r2, r5
 800c062:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c066:	465a      	movle	r2, fp
 800c068:	462f      	mov	r7, r5
 800c06a:	46d9      	mov	r9, fp
 800c06c:	bfcc      	ite	gt
 800c06e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c072:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c076:	464b      	mov	r3, r9
 800c078:	4652      	mov	r2, sl
 800c07a:	4620      	mov	r0, r4
 800c07c:	4639      	mov	r1, r7
 800c07e:	f7f4 fc05 	bl	800088c <__aeabi_ddiv>
 800c082:	ec41 0b10 	vmov	d0, r0, r1
 800c086:	b005      	add	sp, #20
 800c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c08c <__copybits>:
 800c08c:	3901      	subs	r1, #1
 800c08e:	b570      	push	{r4, r5, r6, lr}
 800c090:	1149      	asrs	r1, r1, #5
 800c092:	6914      	ldr	r4, [r2, #16]
 800c094:	3101      	adds	r1, #1
 800c096:	f102 0314 	add.w	r3, r2, #20
 800c09a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c09e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c0a2:	1f05      	subs	r5, r0, #4
 800c0a4:	42a3      	cmp	r3, r4
 800c0a6:	d30c      	bcc.n	800c0c2 <__copybits+0x36>
 800c0a8:	1aa3      	subs	r3, r4, r2
 800c0aa:	3b11      	subs	r3, #17
 800c0ac:	f023 0303 	bic.w	r3, r3, #3
 800c0b0:	3211      	adds	r2, #17
 800c0b2:	42a2      	cmp	r2, r4
 800c0b4:	bf88      	it	hi
 800c0b6:	2300      	movhi	r3, #0
 800c0b8:	4418      	add	r0, r3
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	4288      	cmp	r0, r1
 800c0be:	d305      	bcc.n	800c0cc <__copybits+0x40>
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c0c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c0ca:	e7eb      	b.n	800c0a4 <__copybits+0x18>
 800c0cc:	f840 3b04 	str.w	r3, [r0], #4
 800c0d0:	e7f4      	b.n	800c0bc <__copybits+0x30>

0800c0d2 <__any_on>:
 800c0d2:	f100 0214 	add.w	r2, r0, #20
 800c0d6:	6900      	ldr	r0, [r0, #16]
 800c0d8:	114b      	asrs	r3, r1, #5
 800c0da:	4298      	cmp	r0, r3
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	db11      	blt.n	800c104 <__any_on+0x32>
 800c0e0:	dd0a      	ble.n	800c0f8 <__any_on+0x26>
 800c0e2:	f011 011f 	ands.w	r1, r1, #31
 800c0e6:	d007      	beq.n	800c0f8 <__any_on+0x26>
 800c0e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0ec:	fa24 f001 	lsr.w	r0, r4, r1
 800c0f0:	fa00 f101 	lsl.w	r1, r0, r1
 800c0f4:	428c      	cmp	r4, r1
 800c0f6:	d10b      	bne.n	800c110 <__any_on+0x3e>
 800c0f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d803      	bhi.n	800c108 <__any_on+0x36>
 800c100:	2000      	movs	r0, #0
 800c102:	bd10      	pop	{r4, pc}
 800c104:	4603      	mov	r3, r0
 800c106:	e7f7      	b.n	800c0f8 <__any_on+0x26>
 800c108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c10c:	2900      	cmp	r1, #0
 800c10e:	d0f5      	beq.n	800c0fc <__any_on+0x2a>
 800c110:	2001      	movs	r0, #1
 800c112:	e7f6      	b.n	800c102 <__any_on+0x30>

0800c114 <_strtol_l.constprop.0>:
 800c114:	2b24      	cmp	r3, #36	@ 0x24
 800c116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c11a:	4686      	mov	lr, r0
 800c11c:	4690      	mov	r8, r2
 800c11e:	d801      	bhi.n	800c124 <_strtol_l.constprop.0+0x10>
 800c120:	2b01      	cmp	r3, #1
 800c122:	d106      	bne.n	800c132 <_strtol_l.constprop.0+0x1e>
 800c124:	f7fe f85e 	bl	800a1e4 <__errno>
 800c128:	2316      	movs	r3, #22
 800c12a:	6003      	str	r3, [r0, #0]
 800c12c:	2000      	movs	r0, #0
 800c12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c132:	4834      	ldr	r0, [pc, #208]	@ (800c204 <_strtol_l.constprop.0+0xf0>)
 800c134:	460d      	mov	r5, r1
 800c136:	462a      	mov	r2, r5
 800c138:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c13c:	5d06      	ldrb	r6, [r0, r4]
 800c13e:	f016 0608 	ands.w	r6, r6, #8
 800c142:	d1f8      	bne.n	800c136 <_strtol_l.constprop.0+0x22>
 800c144:	2c2d      	cmp	r4, #45	@ 0x2d
 800c146:	d12d      	bne.n	800c1a4 <_strtol_l.constprop.0+0x90>
 800c148:	782c      	ldrb	r4, [r5, #0]
 800c14a:	2601      	movs	r6, #1
 800c14c:	1c95      	adds	r5, r2, #2
 800c14e:	f033 0210 	bics.w	r2, r3, #16
 800c152:	d109      	bne.n	800c168 <_strtol_l.constprop.0+0x54>
 800c154:	2c30      	cmp	r4, #48	@ 0x30
 800c156:	d12a      	bne.n	800c1ae <_strtol_l.constprop.0+0x9a>
 800c158:	782a      	ldrb	r2, [r5, #0]
 800c15a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c15e:	2a58      	cmp	r2, #88	@ 0x58
 800c160:	d125      	bne.n	800c1ae <_strtol_l.constprop.0+0x9a>
 800c162:	786c      	ldrb	r4, [r5, #1]
 800c164:	2310      	movs	r3, #16
 800c166:	3502      	adds	r5, #2
 800c168:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c16c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c170:	2200      	movs	r2, #0
 800c172:	fbbc f9f3 	udiv	r9, ip, r3
 800c176:	4610      	mov	r0, r2
 800c178:	fb03 ca19 	mls	sl, r3, r9, ip
 800c17c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c180:	2f09      	cmp	r7, #9
 800c182:	d81b      	bhi.n	800c1bc <_strtol_l.constprop.0+0xa8>
 800c184:	463c      	mov	r4, r7
 800c186:	42a3      	cmp	r3, r4
 800c188:	dd27      	ble.n	800c1da <_strtol_l.constprop.0+0xc6>
 800c18a:	1c57      	adds	r7, r2, #1
 800c18c:	d007      	beq.n	800c19e <_strtol_l.constprop.0+0x8a>
 800c18e:	4581      	cmp	r9, r0
 800c190:	d320      	bcc.n	800c1d4 <_strtol_l.constprop.0+0xc0>
 800c192:	d101      	bne.n	800c198 <_strtol_l.constprop.0+0x84>
 800c194:	45a2      	cmp	sl, r4
 800c196:	db1d      	blt.n	800c1d4 <_strtol_l.constprop.0+0xc0>
 800c198:	fb00 4003 	mla	r0, r0, r3, r4
 800c19c:	2201      	movs	r2, #1
 800c19e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1a2:	e7eb      	b.n	800c17c <_strtol_l.constprop.0+0x68>
 800c1a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c1a6:	bf04      	itt	eq
 800c1a8:	782c      	ldrbeq	r4, [r5, #0]
 800c1aa:	1c95      	addeq	r5, r2, #2
 800c1ac:	e7cf      	b.n	800c14e <_strtol_l.constprop.0+0x3a>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1da      	bne.n	800c168 <_strtol_l.constprop.0+0x54>
 800c1b2:	2c30      	cmp	r4, #48	@ 0x30
 800c1b4:	bf0c      	ite	eq
 800c1b6:	2308      	moveq	r3, #8
 800c1b8:	230a      	movne	r3, #10
 800c1ba:	e7d5      	b.n	800c168 <_strtol_l.constprop.0+0x54>
 800c1bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c1c0:	2f19      	cmp	r7, #25
 800c1c2:	d801      	bhi.n	800c1c8 <_strtol_l.constprop.0+0xb4>
 800c1c4:	3c37      	subs	r4, #55	@ 0x37
 800c1c6:	e7de      	b.n	800c186 <_strtol_l.constprop.0+0x72>
 800c1c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c1cc:	2f19      	cmp	r7, #25
 800c1ce:	d804      	bhi.n	800c1da <_strtol_l.constprop.0+0xc6>
 800c1d0:	3c57      	subs	r4, #87	@ 0x57
 800c1d2:	e7d8      	b.n	800c186 <_strtol_l.constprop.0+0x72>
 800c1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d8:	e7e1      	b.n	800c19e <_strtol_l.constprop.0+0x8a>
 800c1da:	1c53      	adds	r3, r2, #1
 800c1dc:	d108      	bne.n	800c1f0 <_strtol_l.constprop.0+0xdc>
 800c1de:	2322      	movs	r3, #34	@ 0x22
 800c1e0:	f8ce 3000 	str.w	r3, [lr]
 800c1e4:	4660      	mov	r0, ip
 800c1e6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ea:	d0a0      	beq.n	800c12e <_strtol_l.constprop.0+0x1a>
 800c1ec:	1e69      	subs	r1, r5, #1
 800c1ee:	e006      	b.n	800c1fe <_strtol_l.constprop.0+0xea>
 800c1f0:	b106      	cbz	r6, 800c1f4 <_strtol_l.constprop.0+0xe0>
 800c1f2:	4240      	negs	r0, r0
 800c1f4:	f1b8 0f00 	cmp.w	r8, #0
 800c1f8:	d099      	beq.n	800c12e <_strtol_l.constprop.0+0x1a>
 800c1fa:	2a00      	cmp	r2, #0
 800c1fc:	d1f6      	bne.n	800c1ec <_strtol_l.constprop.0+0xd8>
 800c1fe:	f8c8 1000 	str.w	r1, [r8]
 800c202:	e794      	b.n	800c12e <_strtol_l.constprop.0+0x1a>
 800c204:	0800d179 	.word	0x0800d179

0800c208 <_strtol_r>:
 800c208:	f7ff bf84 	b.w	800c114 <_strtol_l.constprop.0>

0800c20c <__ascii_wctomb>:
 800c20c:	4603      	mov	r3, r0
 800c20e:	4608      	mov	r0, r1
 800c210:	b141      	cbz	r1, 800c224 <__ascii_wctomb+0x18>
 800c212:	2aff      	cmp	r2, #255	@ 0xff
 800c214:	d904      	bls.n	800c220 <__ascii_wctomb+0x14>
 800c216:	228a      	movs	r2, #138	@ 0x8a
 800c218:	601a      	str	r2, [r3, #0]
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	4770      	bx	lr
 800c220:	700a      	strb	r2, [r1, #0]
 800c222:	2001      	movs	r0, #1
 800c224:	4770      	bx	lr

0800c226 <__ssputs_r>:
 800c226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c22a:	688e      	ldr	r6, [r1, #8]
 800c22c:	461f      	mov	r7, r3
 800c22e:	42be      	cmp	r6, r7
 800c230:	680b      	ldr	r3, [r1, #0]
 800c232:	4682      	mov	sl, r0
 800c234:	460c      	mov	r4, r1
 800c236:	4690      	mov	r8, r2
 800c238:	d82d      	bhi.n	800c296 <__ssputs_r+0x70>
 800c23a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c23e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c242:	d026      	beq.n	800c292 <__ssputs_r+0x6c>
 800c244:	6965      	ldr	r5, [r4, #20]
 800c246:	6909      	ldr	r1, [r1, #16]
 800c248:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c24c:	eba3 0901 	sub.w	r9, r3, r1
 800c250:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c254:	1c7b      	adds	r3, r7, #1
 800c256:	444b      	add	r3, r9
 800c258:	106d      	asrs	r5, r5, #1
 800c25a:	429d      	cmp	r5, r3
 800c25c:	bf38      	it	cc
 800c25e:	461d      	movcc	r5, r3
 800c260:	0553      	lsls	r3, r2, #21
 800c262:	d527      	bpl.n	800c2b4 <__ssputs_r+0x8e>
 800c264:	4629      	mov	r1, r5
 800c266:	f7ff fa05 	bl	800b674 <_malloc_r>
 800c26a:	4606      	mov	r6, r0
 800c26c:	b360      	cbz	r0, 800c2c8 <__ssputs_r+0xa2>
 800c26e:	6921      	ldr	r1, [r4, #16]
 800c270:	464a      	mov	r2, r9
 800c272:	f7fd ffe4 	bl	800a23e <memcpy>
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c27c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c280:	81a3      	strh	r3, [r4, #12]
 800c282:	6126      	str	r6, [r4, #16]
 800c284:	6165      	str	r5, [r4, #20]
 800c286:	444e      	add	r6, r9
 800c288:	eba5 0509 	sub.w	r5, r5, r9
 800c28c:	6026      	str	r6, [r4, #0]
 800c28e:	60a5      	str	r5, [r4, #8]
 800c290:	463e      	mov	r6, r7
 800c292:	42be      	cmp	r6, r7
 800c294:	d900      	bls.n	800c298 <__ssputs_r+0x72>
 800c296:	463e      	mov	r6, r7
 800c298:	6820      	ldr	r0, [r4, #0]
 800c29a:	4632      	mov	r2, r6
 800c29c:	4641      	mov	r1, r8
 800c29e:	f000 fb9b 	bl	800c9d8 <memmove>
 800c2a2:	68a3      	ldr	r3, [r4, #8]
 800c2a4:	1b9b      	subs	r3, r3, r6
 800c2a6:	60a3      	str	r3, [r4, #8]
 800c2a8:	6823      	ldr	r3, [r4, #0]
 800c2aa:	4433      	add	r3, r6
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	f000 fbeb 	bl	800ca90 <_realloc_r>
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d1e0      	bne.n	800c282 <__ssputs_r+0x5c>
 800c2c0:	6921      	ldr	r1, [r4, #16]
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	f7fe fe28 	bl	800af18 <_free_r>
 800c2c8:	230c      	movs	r3, #12
 800c2ca:	f8ca 3000 	str.w	r3, [sl]
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2da:	e7e9      	b.n	800c2b0 <__ssputs_r+0x8a>

0800c2dc <_svfiprintf_r>:
 800c2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	4698      	mov	r8, r3
 800c2e2:	898b      	ldrh	r3, [r1, #12]
 800c2e4:	061b      	lsls	r3, r3, #24
 800c2e6:	b09d      	sub	sp, #116	@ 0x74
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	4614      	mov	r4, r2
 800c2ee:	d510      	bpl.n	800c312 <_svfiprintf_r+0x36>
 800c2f0:	690b      	ldr	r3, [r1, #16]
 800c2f2:	b973      	cbnz	r3, 800c312 <_svfiprintf_r+0x36>
 800c2f4:	2140      	movs	r1, #64	@ 0x40
 800c2f6:	f7ff f9bd 	bl	800b674 <_malloc_r>
 800c2fa:	6028      	str	r0, [r5, #0]
 800c2fc:	6128      	str	r0, [r5, #16]
 800c2fe:	b930      	cbnz	r0, 800c30e <_svfiprintf_r+0x32>
 800c300:	230c      	movs	r3, #12
 800c302:	603b      	str	r3, [r7, #0]
 800c304:	f04f 30ff 	mov.w	r0, #4294967295
 800c308:	b01d      	add	sp, #116	@ 0x74
 800c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30e:	2340      	movs	r3, #64	@ 0x40
 800c310:	616b      	str	r3, [r5, #20]
 800c312:	2300      	movs	r3, #0
 800c314:	9309      	str	r3, [sp, #36]	@ 0x24
 800c316:	2320      	movs	r3, #32
 800c318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c320:	2330      	movs	r3, #48	@ 0x30
 800c322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c4c0 <_svfiprintf_r+0x1e4>
 800c326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c32a:	f04f 0901 	mov.w	r9, #1
 800c32e:	4623      	mov	r3, r4
 800c330:	469a      	mov	sl, r3
 800c332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c336:	b10a      	cbz	r2, 800c33c <_svfiprintf_r+0x60>
 800c338:	2a25      	cmp	r2, #37	@ 0x25
 800c33a:	d1f9      	bne.n	800c330 <_svfiprintf_r+0x54>
 800c33c:	ebba 0b04 	subs.w	fp, sl, r4
 800c340:	d00b      	beq.n	800c35a <_svfiprintf_r+0x7e>
 800c342:	465b      	mov	r3, fp
 800c344:	4622      	mov	r2, r4
 800c346:	4629      	mov	r1, r5
 800c348:	4638      	mov	r0, r7
 800c34a:	f7ff ff6c 	bl	800c226 <__ssputs_r>
 800c34e:	3001      	adds	r0, #1
 800c350:	f000 80a7 	beq.w	800c4a2 <_svfiprintf_r+0x1c6>
 800c354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c356:	445a      	add	r2, fp
 800c358:	9209      	str	r2, [sp, #36]	@ 0x24
 800c35a:	f89a 3000 	ldrb.w	r3, [sl]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	f000 809f 	beq.w	800c4a2 <_svfiprintf_r+0x1c6>
 800c364:	2300      	movs	r3, #0
 800c366:	f04f 32ff 	mov.w	r2, #4294967295
 800c36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c36e:	f10a 0a01 	add.w	sl, sl, #1
 800c372:	9304      	str	r3, [sp, #16]
 800c374:	9307      	str	r3, [sp, #28]
 800c376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c37a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c37c:	4654      	mov	r4, sl
 800c37e:	2205      	movs	r2, #5
 800c380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c384:	484e      	ldr	r0, [pc, #312]	@ (800c4c0 <_svfiprintf_r+0x1e4>)
 800c386:	f7f3 ff43 	bl	8000210 <memchr>
 800c38a:	9a04      	ldr	r2, [sp, #16]
 800c38c:	b9d8      	cbnz	r0, 800c3c6 <_svfiprintf_r+0xea>
 800c38e:	06d0      	lsls	r0, r2, #27
 800c390:	bf44      	itt	mi
 800c392:	2320      	movmi	r3, #32
 800c394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c398:	0711      	lsls	r1, r2, #28
 800c39a:	bf44      	itt	mi
 800c39c:	232b      	movmi	r3, #43	@ 0x2b
 800c39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3a8:	d015      	beq.n	800c3d6 <_svfiprintf_r+0xfa>
 800c3aa:	9a07      	ldr	r2, [sp, #28]
 800c3ac:	4654      	mov	r4, sl
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	f04f 0c0a 	mov.w	ip, #10
 800c3b4:	4621      	mov	r1, r4
 800c3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ba:	3b30      	subs	r3, #48	@ 0x30
 800c3bc:	2b09      	cmp	r3, #9
 800c3be:	d94b      	bls.n	800c458 <_svfiprintf_r+0x17c>
 800c3c0:	b1b0      	cbz	r0, 800c3f0 <_svfiprintf_r+0x114>
 800c3c2:	9207      	str	r2, [sp, #28]
 800c3c4:	e014      	b.n	800c3f0 <_svfiprintf_r+0x114>
 800c3c6:	eba0 0308 	sub.w	r3, r0, r8
 800c3ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	46a2      	mov	sl, r4
 800c3d4:	e7d2      	b.n	800c37c <_svfiprintf_r+0xa0>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	1d19      	adds	r1, r3, #4
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	9103      	str	r1, [sp, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	bfbb      	ittet	lt
 800c3e2:	425b      	neglt	r3, r3
 800c3e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3e8:	9307      	strge	r3, [sp, #28]
 800c3ea:	9307      	strlt	r3, [sp, #28]
 800c3ec:	bfb8      	it	lt
 800c3ee:	9204      	strlt	r2, [sp, #16]
 800c3f0:	7823      	ldrb	r3, [r4, #0]
 800c3f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3f4:	d10a      	bne.n	800c40c <_svfiprintf_r+0x130>
 800c3f6:	7863      	ldrb	r3, [r4, #1]
 800c3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3fa:	d132      	bne.n	800c462 <_svfiprintf_r+0x186>
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	1d1a      	adds	r2, r3, #4
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	9203      	str	r2, [sp, #12]
 800c404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c408:	3402      	adds	r4, #2
 800c40a:	9305      	str	r3, [sp, #20]
 800c40c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c4d0 <_svfiprintf_r+0x1f4>
 800c410:	7821      	ldrb	r1, [r4, #0]
 800c412:	2203      	movs	r2, #3
 800c414:	4650      	mov	r0, sl
 800c416:	f7f3 fefb 	bl	8000210 <memchr>
 800c41a:	b138      	cbz	r0, 800c42c <_svfiprintf_r+0x150>
 800c41c:	9b04      	ldr	r3, [sp, #16]
 800c41e:	eba0 000a 	sub.w	r0, r0, sl
 800c422:	2240      	movs	r2, #64	@ 0x40
 800c424:	4082      	lsls	r2, r0
 800c426:	4313      	orrs	r3, r2
 800c428:	3401      	adds	r4, #1
 800c42a:	9304      	str	r3, [sp, #16]
 800c42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c430:	4824      	ldr	r0, [pc, #144]	@ (800c4c4 <_svfiprintf_r+0x1e8>)
 800c432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c436:	2206      	movs	r2, #6
 800c438:	f7f3 feea 	bl	8000210 <memchr>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d036      	beq.n	800c4ae <_svfiprintf_r+0x1d2>
 800c440:	4b21      	ldr	r3, [pc, #132]	@ (800c4c8 <_svfiprintf_r+0x1ec>)
 800c442:	bb1b      	cbnz	r3, 800c48c <_svfiprintf_r+0x1b0>
 800c444:	9b03      	ldr	r3, [sp, #12]
 800c446:	3307      	adds	r3, #7
 800c448:	f023 0307 	bic.w	r3, r3, #7
 800c44c:	3308      	adds	r3, #8
 800c44e:	9303      	str	r3, [sp, #12]
 800c450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c452:	4433      	add	r3, r6
 800c454:	9309      	str	r3, [sp, #36]	@ 0x24
 800c456:	e76a      	b.n	800c32e <_svfiprintf_r+0x52>
 800c458:	fb0c 3202 	mla	r2, ip, r2, r3
 800c45c:	460c      	mov	r4, r1
 800c45e:	2001      	movs	r0, #1
 800c460:	e7a8      	b.n	800c3b4 <_svfiprintf_r+0xd8>
 800c462:	2300      	movs	r3, #0
 800c464:	3401      	adds	r4, #1
 800c466:	9305      	str	r3, [sp, #20]
 800c468:	4619      	mov	r1, r3
 800c46a:	f04f 0c0a 	mov.w	ip, #10
 800c46e:	4620      	mov	r0, r4
 800c470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c474:	3a30      	subs	r2, #48	@ 0x30
 800c476:	2a09      	cmp	r2, #9
 800c478:	d903      	bls.n	800c482 <_svfiprintf_r+0x1a6>
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0c6      	beq.n	800c40c <_svfiprintf_r+0x130>
 800c47e:	9105      	str	r1, [sp, #20]
 800c480:	e7c4      	b.n	800c40c <_svfiprintf_r+0x130>
 800c482:	fb0c 2101 	mla	r1, ip, r1, r2
 800c486:	4604      	mov	r4, r0
 800c488:	2301      	movs	r3, #1
 800c48a:	e7f0      	b.n	800c46e <_svfiprintf_r+0x192>
 800c48c:	ab03      	add	r3, sp, #12
 800c48e:	9300      	str	r3, [sp, #0]
 800c490:	462a      	mov	r2, r5
 800c492:	4b0e      	ldr	r3, [pc, #56]	@ (800c4cc <_svfiprintf_r+0x1f0>)
 800c494:	a904      	add	r1, sp, #16
 800c496:	4638      	mov	r0, r7
 800c498:	f7fc ff08 	bl	80092ac <_printf_float>
 800c49c:	1c42      	adds	r2, r0, #1
 800c49e:	4606      	mov	r6, r0
 800c4a0:	d1d6      	bne.n	800c450 <_svfiprintf_r+0x174>
 800c4a2:	89ab      	ldrh	r3, [r5, #12]
 800c4a4:	065b      	lsls	r3, r3, #25
 800c4a6:	f53f af2d 	bmi.w	800c304 <_svfiprintf_r+0x28>
 800c4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4ac:	e72c      	b.n	800c308 <_svfiprintf_r+0x2c>
 800c4ae:	ab03      	add	r3, sp, #12
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	462a      	mov	r2, r5
 800c4b4:	4b05      	ldr	r3, [pc, #20]	@ (800c4cc <_svfiprintf_r+0x1f0>)
 800c4b6:	a904      	add	r1, sp, #16
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	f7fd f98f 	bl	80097dc <_printf_i>
 800c4be:	e7ed      	b.n	800c49c <_svfiprintf_r+0x1c0>
 800c4c0:	0800d279 	.word	0x0800d279
 800c4c4:	0800d283 	.word	0x0800d283
 800c4c8:	080092ad 	.word	0x080092ad
 800c4cc:	0800c227 	.word	0x0800c227
 800c4d0:	0800d27f 	.word	0x0800d27f

0800c4d4 <__sfputc_r>:
 800c4d4:	6893      	ldr	r3, [r2, #8]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	b410      	push	{r4}
 800c4dc:	6093      	str	r3, [r2, #8]
 800c4de:	da08      	bge.n	800c4f2 <__sfputc_r+0x1e>
 800c4e0:	6994      	ldr	r4, [r2, #24]
 800c4e2:	42a3      	cmp	r3, r4
 800c4e4:	db01      	blt.n	800c4ea <__sfputc_r+0x16>
 800c4e6:	290a      	cmp	r1, #10
 800c4e8:	d103      	bne.n	800c4f2 <__sfputc_r+0x1e>
 800c4ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ee:	f000 b9df 	b.w	800c8b0 <__swbuf_r>
 800c4f2:	6813      	ldr	r3, [r2, #0]
 800c4f4:	1c58      	adds	r0, r3, #1
 800c4f6:	6010      	str	r0, [r2, #0]
 800c4f8:	7019      	strb	r1, [r3, #0]
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <__sfputs_r>:
 800c502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c504:	4606      	mov	r6, r0
 800c506:	460f      	mov	r7, r1
 800c508:	4614      	mov	r4, r2
 800c50a:	18d5      	adds	r5, r2, r3
 800c50c:	42ac      	cmp	r4, r5
 800c50e:	d101      	bne.n	800c514 <__sfputs_r+0x12>
 800c510:	2000      	movs	r0, #0
 800c512:	e007      	b.n	800c524 <__sfputs_r+0x22>
 800c514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c518:	463a      	mov	r2, r7
 800c51a:	4630      	mov	r0, r6
 800c51c:	f7ff ffda 	bl	800c4d4 <__sfputc_r>
 800c520:	1c43      	adds	r3, r0, #1
 800c522:	d1f3      	bne.n	800c50c <__sfputs_r+0xa>
 800c524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c528 <_vfiprintf_r>:
 800c528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52c:	460d      	mov	r5, r1
 800c52e:	b09d      	sub	sp, #116	@ 0x74
 800c530:	4614      	mov	r4, r2
 800c532:	4698      	mov	r8, r3
 800c534:	4606      	mov	r6, r0
 800c536:	b118      	cbz	r0, 800c540 <_vfiprintf_r+0x18>
 800c538:	6a03      	ldr	r3, [r0, #32]
 800c53a:	b90b      	cbnz	r3, 800c540 <_vfiprintf_r+0x18>
 800c53c:	f7fd fd0e 	bl	8009f5c <__sinit>
 800c540:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c542:	07d9      	lsls	r1, r3, #31
 800c544:	d405      	bmi.n	800c552 <_vfiprintf_r+0x2a>
 800c546:	89ab      	ldrh	r3, [r5, #12]
 800c548:	059a      	lsls	r2, r3, #22
 800c54a:	d402      	bmi.n	800c552 <_vfiprintf_r+0x2a>
 800c54c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c54e:	f7fd fe74 	bl	800a23a <__retarget_lock_acquire_recursive>
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	071b      	lsls	r3, r3, #28
 800c556:	d501      	bpl.n	800c55c <_vfiprintf_r+0x34>
 800c558:	692b      	ldr	r3, [r5, #16]
 800c55a:	b99b      	cbnz	r3, 800c584 <_vfiprintf_r+0x5c>
 800c55c:	4629      	mov	r1, r5
 800c55e:	4630      	mov	r0, r6
 800c560:	f000 f9e4 	bl	800c92c <__swsetup_r>
 800c564:	b170      	cbz	r0, 800c584 <_vfiprintf_r+0x5c>
 800c566:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c568:	07dc      	lsls	r4, r3, #31
 800c56a:	d504      	bpl.n	800c576 <_vfiprintf_r+0x4e>
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	b01d      	add	sp, #116	@ 0x74
 800c572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c576:	89ab      	ldrh	r3, [r5, #12]
 800c578:	0598      	lsls	r0, r3, #22
 800c57a:	d4f7      	bmi.n	800c56c <_vfiprintf_r+0x44>
 800c57c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c57e:	f7fd fe5d 	bl	800a23c <__retarget_lock_release_recursive>
 800c582:	e7f3      	b.n	800c56c <_vfiprintf_r+0x44>
 800c584:	2300      	movs	r3, #0
 800c586:	9309      	str	r3, [sp, #36]	@ 0x24
 800c588:	2320      	movs	r3, #32
 800c58a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c58e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c592:	2330      	movs	r3, #48	@ 0x30
 800c594:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c744 <_vfiprintf_r+0x21c>
 800c598:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c59c:	f04f 0901 	mov.w	r9, #1
 800c5a0:	4623      	mov	r3, r4
 800c5a2:	469a      	mov	sl, r3
 800c5a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5a8:	b10a      	cbz	r2, 800c5ae <_vfiprintf_r+0x86>
 800c5aa:	2a25      	cmp	r2, #37	@ 0x25
 800c5ac:	d1f9      	bne.n	800c5a2 <_vfiprintf_r+0x7a>
 800c5ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c5b2:	d00b      	beq.n	800c5cc <_vfiprintf_r+0xa4>
 800c5b4:	465b      	mov	r3, fp
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7ff ffa1 	bl	800c502 <__sfputs_r>
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	f000 80a7 	beq.w	800c714 <_vfiprintf_r+0x1ec>
 800c5c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5c8:	445a      	add	r2, fp
 800c5ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 809f 	beq.w	800c714 <_vfiprintf_r+0x1ec>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5e0:	f10a 0a01 	add.w	sl, sl, #1
 800c5e4:	9304      	str	r3, [sp, #16]
 800c5e6:	9307      	str	r3, [sp, #28]
 800c5e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5ee:	4654      	mov	r4, sl
 800c5f0:	2205      	movs	r2, #5
 800c5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5f6:	4853      	ldr	r0, [pc, #332]	@ (800c744 <_vfiprintf_r+0x21c>)
 800c5f8:	f7f3 fe0a 	bl	8000210 <memchr>
 800c5fc:	9a04      	ldr	r2, [sp, #16]
 800c5fe:	b9d8      	cbnz	r0, 800c638 <_vfiprintf_r+0x110>
 800c600:	06d1      	lsls	r1, r2, #27
 800c602:	bf44      	itt	mi
 800c604:	2320      	movmi	r3, #32
 800c606:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c60a:	0713      	lsls	r3, r2, #28
 800c60c:	bf44      	itt	mi
 800c60e:	232b      	movmi	r3, #43	@ 0x2b
 800c610:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c614:	f89a 3000 	ldrb.w	r3, [sl]
 800c618:	2b2a      	cmp	r3, #42	@ 0x2a
 800c61a:	d015      	beq.n	800c648 <_vfiprintf_r+0x120>
 800c61c:	9a07      	ldr	r2, [sp, #28]
 800c61e:	4654      	mov	r4, sl
 800c620:	2000      	movs	r0, #0
 800c622:	f04f 0c0a 	mov.w	ip, #10
 800c626:	4621      	mov	r1, r4
 800c628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c62c:	3b30      	subs	r3, #48	@ 0x30
 800c62e:	2b09      	cmp	r3, #9
 800c630:	d94b      	bls.n	800c6ca <_vfiprintf_r+0x1a2>
 800c632:	b1b0      	cbz	r0, 800c662 <_vfiprintf_r+0x13a>
 800c634:	9207      	str	r2, [sp, #28]
 800c636:	e014      	b.n	800c662 <_vfiprintf_r+0x13a>
 800c638:	eba0 0308 	sub.w	r3, r0, r8
 800c63c:	fa09 f303 	lsl.w	r3, r9, r3
 800c640:	4313      	orrs	r3, r2
 800c642:	9304      	str	r3, [sp, #16]
 800c644:	46a2      	mov	sl, r4
 800c646:	e7d2      	b.n	800c5ee <_vfiprintf_r+0xc6>
 800c648:	9b03      	ldr	r3, [sp, #12]
 800c64a:	1d19      	adds	r1, r3, #4
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	9103      	str	r1, [sp, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	bfbb      	ittet	lt
 800c654:	425b      	neglt	r3, r3
 800c656:	f042 0202 	orrlt.w	r2, r2, #2
 800c65a:	9307      	strge	r3, [sp, #28]
 800c65c:	9307      	strlt	r3, [sp, #28]
 800c65e:	bfb8      	it	lt
 800c660:	9204      	strlt	r2, [sp, #16]
 800c662:	7823      	ldrb	r3, [r4, #0]
 800c664:	2b2e      	cmp	r3, #46	@ 0x2e
 800c666:	d10a      	bne.n	800c67e <_vfiprintf_r+0x156>
 800c668:	7863      	ldrb	r3, [r4, #1]
 800c66a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c66c:	d132      	bne.n	800c6d4 <_vfiprintf_r+0x1ac>
 800c66e:	9b03      	ldr	r3, [sp, #12]
 800c670:	1d1a      	adds	r2, r3, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	9203      	str	r2, [sp, #12]
 800c676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c67a:	3402      	adds	r4, #2
 800c67c:	9305      	str	r3, [sp, #20]
 800c67e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c754 <_vfiprintf_r+0x22c>
 800c682:	7821      	ldrb	r1, [r4, #0]
 800c684:	2203      	movs	r2, #3
 800c686:	4650      	mov	r0, sl
 800c688:	f7f3 fdc2 	bl	8000210 <memchr>
 800c68c:	b138      	cbz	r0, 800c69e <_vfiprintf_r+0x176>
 800c68e:	9b04      	ldr	r3, [sp, #16]
 800c690:	eba0 000a 	sub.w	r0, r0, sl
 800c694:	2240      	movs	r2, #64	@ 0x40
 800c696:	4082      	lsls	r2, r0
 800c698:	4313      	orrs	r3, r2
 800c69a:	3401      	adds	r4, #1
 800c69c:	9304      	str	r3, [sp, #16]
 800c69e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a2:	4829      	ldr	r0, [pc, #164]	@ (800c748 <_vfiprintf_r+0x220>)
 800c6a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6a8:	2206      	movs	r2, #6
 800c6aa:	f7f3 fdb1 	bl	8000210 <memchr>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d03f      	beq.n	800c732 <_vfiprintf_r+0x20a>
 800c6b2:	4b26      	ldr	r3, [pc, #152]	@ (800c74c <_vfiprintf_r+0x224>)
 800c6b4:	bb1b      	cbnz	r3, 800c6fe <_vfiprintf_r+0x1d6>
 800c6b6:	9b03      	ldr	r3, [sp, #12]
 800c6b8:	3307      	adds	r3, #7
 800c6ba:	f023 0307 	bic.w	r3, r3, #7
 800c6be:	3308      	adds	r3, #8
 800c6c0:	9303      	str	r3, [sp, #12]
 800c6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c4:	443b      	add	r3, r7
 800c6c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6c8:	e76a      	b.n	800c5a0 <_vfiprintf_r+0x78>
 800c6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	2001      	movs	r0, #1
 800c6d2:	e7a8      	b.n	800c626 <_vfiprintf_r+0xfe>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	3401      	adds	r4, #1
 800c6d8:	9305      	str	r3, [sp, #20]
 800c6da:	4619      	mov	r1, r3
 800c6dc:	f04f 0c0a 	mov.w	ip, #10
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e6:	3a30      	subs	r2, #48	@ 0x30
 800c6e8:	2a09      	cmp	r2, #9
 800c6ea:	d903      	bls.n	800c6f4 <_vfiprintf_r+0x1cc>
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0c6      	beq.n	800c67e <_vfiprintf_r+0x156>
 800c6f0:	9105      	str	r1, [sp, #20]
 800c6f2:	e7c4      	b.n	800c67e <_vfiprintf_r+0x156>
 800c6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e7f0      	b.n	800c6e0 <_vfiprintf_r+0x1b8>
 800c6fe:	ab03      	add	r3, sp, #12
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	462a      	mov	r2, r5
 800c704:	4b12      	ldr	r3, [pc, #72]	@ (800c750 <_vfiprintf_r+0x228>)
 800c706:	a904      	add	r1, sp, #16
 800c708:	4630      	mov	r0, r6
 800c70a:	f7fc fdcf 	bl	80092ac <_printf_float>
 800c70e:	4607      	mov	r7, r0
 800c710:	1c78      	adds	r0, r7, #1
 800c712:	d1d6      	bne.n	800c6c2 <_vfiprintf_r+0x19a>
 800c714:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c716:	07d9      	lsls	r1, r3, #31
 800c718:	d405      	bmi.n	800c726 <_vfiprintf_r+0x1fe>
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	059a      	lsls	r2, r3, #22
 800c71e:	d402      	bmi.n	800c726 <_vfiprintf_r+0x1fe>
 800c720:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c722:	f7fd fd8b 	bl	800a23c <__retarget_lock_release_recursive>
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	065b      	lsls	r3, r3, #25
 800c72a:	f53f af1f 	bmi.w	800c56c <_vfiprintf_r+0x44>
 800c72e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c730:	e71e      	b.n	800c570 <_vfiprintf_r+0x48>
 800c732:	ab03      	add	r3, sp, #12
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	462a      	mov	r2, r5
 800c738:	4b05      	ldr	r3, [pc, #20]	@ (800c750 <_vfiprintf_r+0x228>)
 800c73a:	a904      	add	r1, sp, #16
 800c73c:	4630      	mov	r0, r6
 800c73e:	f7fd f84d 	bl	80097dc <_printf_i>
 800c742:	e7e4      	b.n	800c70e <_vfiprintf_r+0x1e6>
 800c744:	0800d279 	.word	0x0800d279
 800c748:	0800d283 	.word	0x0800d283
 800c74c:	080092ad 	.word	0x080092ad
 800c750:	0800c503 	.word	0x0800c503
 800c754:	0800d27f 	.word	0x0800d27f

0800c758 <__sflush_r>:
 800c758:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c760:	0716      	lsls	r6, r2, #28
 800c762:	4605      	mov	r5, r0
 800c764:	460c      	mov	r4, r1
 800c766:	d454      	bmi.n	800c812 <__sflush_r+0xba>
 800c768:	684b      	ldr	r3, [r1, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	dc02      	bgt.n	800c774 <__sflush_r+0x1c>
 800c76e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c770:	2b00      	cmp	r3, #0
 800c772:	dd48      	ble.n	800c806 <__sflush_r+0xae>
 800c774:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c776:	2e00      	cmp	r6, #0
 800c778:	d045      	beq.n	800c806 <__sflush_r+0xae>
 800c77a:	2300      	movs	r3, #0
 800c77c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c780:	682f      	ldr	r7, [r5, #0]
 800c782:	6a21      	ldr	r1, [r4, #32]
 800c784:	602b      	str	r3, [r5, #0]
 800c786:	d030      	beq.n	800c7ea <__sflush_r+0x92>
 800c788:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	0759      	lsls	r1, r3, #29
 800c78e:	d505      	bpl.n	800c79c <__sflush_r+0x44>
 800c790:	6863      	ldr	r3, [r4, #4]
 800c792:	1ad2      	subs	r2, r2, r3
 800c794:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c796:	b10b      	cbz	r3, 800c79c <__sflush_r+0x44>
 800c798:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c79a:	1ad2      	subs	r2, r2, r3
 800c79c:	2300      	movs	r3, #0
 800c79e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c7a0:	6a21      	ldr	r1, [r4, #32]
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b0      	blx	r6
 800c7a6:	1c43      	adds	r3, r0, #1
 800c7a8:	89a3      	ldrh	r3, [r4, #12]
 800c7aa:	d106      	bne.n	800c7ba <__sflush_r+0x62>
 800c7ac:	6829      	ldr	r1, [r5, #0]
 800c7ae:	291d      	cmp	r1, #29
 800c7b0:	d82b      	bhi.n	800c80a <__sflush_r+0xb2>
 800c7b2:	4a2a      	ldr	r2, [pc, #168]	@ (800c85c <__sflush_r+0x104>)
 800c7b4:	410a      	asrs	r2, r1
 800c7b6:	07d6      	lsls	r6, r2, #31
 800c7b8:	d427      	bmi.n	800c80a <__sflush_r+0xb2>
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	6062      	str	r2, [r4, #4]
 800c7be:	04d9      	lsls	r1, r3, #19
 800c7c0:	6922      	ldr	r2, [r4, #16]
 800c7c2:	6022      	str	r2, [r4, #0]
 800c7c4:	d504      	bpl.n	800c7d0 <__sflush_r+0x78>
 800c7c6:	1c42      	adds	r2, r0, #1
 800c7c8:	d101      	bne.n	800c7ce <__sflush_r+0x76>
 800c7ca:	682b      	ldr	r3, [r5, #0]
 800c7cc:	b903      	cbnz	r3, 800c7d0 <__sflush_r+0x78>
 800c7ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800c7d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7d2:	602f      	str	r7, [r5, #0]
 800c7d4:	b1b9      	cbz	r1, 800c806 <__sflush_r+0xae>
 800c7d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7da:	4299      	cmp	r1, r3
 800c7dc:	d002      	beq.n	800c7e4 <__sflush_r+0x8c>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f7fe fb9a 	bl	800af18 <_free_r>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7e8:	e00d      	b.n	800c806 <__sflush_r+0xae>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	47b0      	blx	r6
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	1c50      	adds	r0, r2, #1
 800c7f4:	d1c9      	bne.n	800c78a <__sflush_r+0x32>
 800c7f6:	682b      	ldr	r3, [r5, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d0c6      	beq.n	800c78a <__sflush_r+0x32>
 800c7fc:	2b1d      	cmp	r3, #29
 800c7fe:	d001      	beq.n	800c804 <__sflush_r+0xac>
 800c800:	2b16      	cmp	r3, #22
 800c802:	d11e      	bne.n	800c842 <__sflush_r+0xea>
 800c804:	602f      	str	r7, [r5, #0]
 800c806:	2000      	movs	r0, #0
 800c808:	e022      	b.n	800c850 <__sflush_r+0xf8>
 800c80a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c80e:	b21b      	sxth	r3, r3
 800c810:	e01b      	b.n	800c84a <__sflush_r+0xf2>
 800c812:	690f      	ldr	r7, [r1, #16]
 800c814:	2f00      	cmp	r7, #0
 800c816:	d0f6      	beq.n	800c806 <__sflush_r+0xae>
 800c818:	0793      	lsls	r3, r2, #30
 800c81a:	680e      	ldr	r6, [r1, #0]
 800c81c:	bf08      	it	eq
 800c81e:	694b      	ldreq	r3, [r1, #20]
 800c820:	600f      	str	r7, [r1, #0]
 800c822:	bf18      	it	ne
 800c824:	2300      	movne	r3, #0
 800c826:	eba6 0807 	sub.w	r8, r6, r7
 800c82a:	608b      	str	r3, [r1, #8]
 800c82c:	f1b8 0f00 	cmp.w	r8, #0
 800c830:	dde9      	ble.n	800c806 <__sflush_r+0xae>
 800c832:	6a21      	ldr	r1, [r4, #32]
 800c834:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c836:	4643      	mov	r3, r8
 800c838:	463a      	mov	r2, r7
 800c83a:	4628      	mov	r0, r5
 800c83c:	47b0      	blx	r6
 800c83e:	2800      	cmp	r0, #0
 800c840:	dc08      	bgt.n	800c854 <__sflush_r+0xfc>
 800c842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c84a:	81a3      	strh	r3, [r4, #12]
 800c84c:	f04f 30ff 	mov.w	r0, #4294967295
 800c850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c854:	4407      	add	r7, r0
 800c856:	eba8 0800 	sub.w	r8, r8, r0
 800c85a:	e7e7      	b.n	800c82c <__sflush_r+0xd4>
 800c85c:	dfbffffe 	.word	0xdfbffffe

0800c860 <_fflush_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	690b      	ldr	r3, [r1, #16]
 800c864:	4605      	mov	r5, r0
 800c866:	460c      	mov	r4, r1
 800c868:	b913      	cbnz	r3, 800c870 <_fflush_r+0x10>
 800c86a:	2500      	movs	r5, #0
 800c86c:	4628      	mov	r0, r5
 800c86e:	bd38      	pop	{r3, r4, r5, pc}
 800c870:	b118      	cbz	r0, 800c87a <_fflush_r+0x1a>
 800c872:	6a03      	ldr	r3, [r0, #32]
 800c874:	b90b      	cbnz	r3, 800c87a <_fflush_r+0x1a>
 800c876:	f7fd fb71 	bl	8009f5c <__sinit>
 800c87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d0f3      	beq.n	800c86a <_fflush_r+0xa>
 800c882:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c884:	07d0      	lsls	r0, r2, #31
 800c886:	d404      	bmi.n	800c892 <_fflush_r+0x32>
 800c888:	0599      	lsls	r1, r3, #22
 800c88a:	d402      	bmi.n	800c892 <_fflush_r+0x32>
 800c88c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c88e:	f7fd fcd4 	bl	800a23a <__retarget_lock_acquire_recursive>
 800c892:	4628      	mov	r0, r5
 800c894:	4621      	mov	r1, r4
 800c896:	f7ff ff5f 	bl	800c758 <__sflush_r>
 800c89a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c89c:	07da      	lsls	r2, r3, #31
 800c89e:	4605      	mov	r5, r0
 800c8a0:	d4e4      	bmi.n	800c86c <_fflush_r+0xc>
 800c8a2:	89a3      	ldrh	r3, [r4, #12]
 800c8a4:	059b      	lsls	r3, r3, #22
 800c8a6:	d4e1      	bmi.n	800c86c <_fflush_r+0xc>
 800c8a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c8aa:	f7fd fcc7 	bl	800a23c <__retarget_lock_release_recursive>
 800c8ae:	e7dd      	b.n	800c86c <_fflush_r+0xc>

0800c8b0 <__swbuf_r>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	460e      	mov	r6, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b118      	cbz	r0, 800c8c2 <__swbuf_r+0x12>
 800c8ba:	6a03      	ldr	r3, [r0, #32]
 800c8bc:	b90b      	cbnz	r3, 800c8c2 <__swbuf_r+0x12>
 800c8be:	f7fd fb4d 	bl	8009f5c <__sinit>
 800c8c2:	69a3      	ldr	r3, [r4, #24]
 800c8c4:	60a3      	str	r3, [r4, #8]
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	071a      	lsls	r2, r3, #28
 800c8ca:	d501      	bpl.n	800c8d0 <__swbuf_r+0x20>
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	b943      	cbnz	r3, 800c8e2 <__swbuf_r+0x32>
 800c8d0:	4621      	mov	r1, r4
 800c8d2:	4628      	mov	r0, r5
 800c8d4:	f000 f82a 	bl	800c92c <__swsetup_r>
 800c8d8:	b118      	cbz	r0, 800c8e2 <__swbuf_r+0x32>
 800c8da:	f04f 37ff 	mov.w	r7, #4294967295
 800c8de:	4638      	mov	r0, r7
 800c8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e2:	6823      	ldr	r3, [r4, #0]
 800c8e4:	6922      	ldr	r2, [r4, #16]
 800c8e6:	1a98      	subs	r0, r3, r2
 800c8e8:	6963      	ldr	r3, [r4, #20]
 800c8ea:	b2f6      	uxtb	r6, r6
 800c8ec:	4283      	cmp	r3, r0
 800c8ee:	4637      	mov	r7, r6
 800c8f0:	dc05      	bgt.n	800c8fe <__swbuf_r+0x4e>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f7ff ffb3 	bl	800c860 <_fflush_r>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d1ed      	bne.n	800c8da <__swbuf_r+0x2a>
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	3b01      	subs	r3, #1
 800c902:	60a3      	str	r3, [r4, #8]
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	1c5a      	adds	r2, r3, #1
 800c908:	6022      	str	r2, [r4, #0]
 800c90a:	701e      	strb	r6, [r3, #0]
 800c90c:	6962      	ldr	r2, [r4, #20]
 800c90e:	1c43      	adds	r3, r0, #1
 800c910:	429a      	cmp	r2, r3
 800c912:	d004      	beq.n	800c91e <__swbuf_r+0x6e>
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	07db      	lsls	r3, r3, #31
 800c918:	d5e1      	bpl.n	800c8de <__swbuf_r+0x2e>
 800c91a:	2e0a      	cmp	r6, #10
 800c91c:	d1df      	bne.n	800c8de <__swbuf_r+0x2e>
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f7ff ff9d 	bl	800c860 <_fflush_r>
 800c926:	2800      	cmp	r0, #0
 800c928:	d0d9      	beq.n	800c8de <__swbuf_r+0x2e>
 800c92a:	e7d6      	b.n	800c8da <__swbuf_r+0x2a>

0800c92c <__swsetup_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	4b29      	ldr	r3, [pc, #164]	@ (800c9d4 <__swsetup_r+0xa8>)
 800c930:	4605      	mov	r5, r0
 800c932:	6818      	ldr	r0, [r3, #0]
 800c934:	460c      	mov	r4, r1
 800c936:	b118      	cbz	r0, 800c940 <__swsetup_r+0x14>
 800c938:	6a03      	ldr	r3, [r0, #32]
 800c93a:	b90b      	cbnz	r3, 800c940 <__swsetup_r+0x14>
 800c93c:	f7fd fb0e 	bl	8009f5c <__sinit>
 800c940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c944:	0719      	lsls	r1, r3, #28
 800c946:	d422      	bmi.n	800c98e <__swsetup_r+0x62>
 800c948:	06da      	lsls	r2, r3, #27
 800c94a:	d407      	bmi.n	800c95c <__swsetup_r+0x30>
 800c94c:	2209      	movs	r2, #9
 800c94e:	602a      	str	r2, [r5, #0]
 800c950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c954:	81a3      	strh	r3, [r4, #12]
 800c956:	f04f 30ff 	mov.w	r0, #4294967295
 800c95a:	e033      	b.n	800c9c4 <__swsetup_r+0x98>
 800c95c:	0758      	lsls	r0, r3, #29
 800c95e:	d512      	bpl.n	800c986 <__swsetup_r+0x5a>
 800c960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c962:	b141      	cbz	r1, 800c976 <__swsetup_r+0x4a>
 800c964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c968:	4299      	cmp	r1, r3
 800c96a:	d002      	beq.n	800c972 <__swsetup_r+0x46>
 800c96c:	4628      	mov	r0, r5
 800c96e:	f7fe fad3 	bl	800af18 <_free_r>
 800c972:	2300      	movs	r3, #0
 800c974:	6363      	str	r3, [r4, #52]	@ 0x34
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c97c:	81a3      	strh	r3, [r4, #12]
 800c97e:	2300      	movs	r3, #0
 800c980:	6063      	str	r3, [r4, #4]
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	89a3      	ldrh	r3, [r4, #12]
 800c988:	f043 0308 	orr.w	r3, r3, #8
 800c98c:	81a3      	strh	r3, [r4, #12]
 800c98e:	6923      	ldr	r3, [r4, #16]
 800c990:	b94b      	cbnz	r3, 800c9a6 <__swsetup_r+0x7a>
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c99c:	d003      	beq.n	800c9a6 <__swsetup_r+0x7a>
 800c99e:	4621      	mov	r1, r4
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f000 f8db 	bl	800cb5c <__smakebuf_r>
 800c9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9aa:	f013 0201 	ands.w	r2, r3, #1
 800c9ae:	d00a      	beq.n	800c9c6 <__swsetup_r+0x9a>
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	60a2      	str	r2, [r4, #8]
 800c9b4:	6962      	ldr	r2, [r4, #20]
 800c9b6:	4252      	negs	r2, r2
 800c9b8:	61a2      	str	r2, [r4, #24]
 800c9ba:	6922      	ldr	r2, [r4, #16]
 800c9bc:	b942      	cbnz	r2, 800c9d0 <__swsetup_r+0xa4>
 800c9be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c9c2:	d1c5      	bne.n	800c950 <__swsetup_r+0x24>
 800c9c4:	bd38      	pop	{r3, r4, r5, pc}
 800c9c6:	0799      	lsls	r1, r3, #30
 800c9c8:	bf58      	it	pl
 800c9ca:	6962      	ldrpl	r2, [r4, #20]
 800c9cc:	60a2      	str	r2, [r4, #8]
 800c9ce:	e7f4      	b.n	800c9ba <__swsetup_r+0x8e>
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	e7f7      	b.n	800c9c4 <__swsetup_r+0x98>
 800c9d4:	20000210 	.word	0x20000210

0800c9d8 <memmove>:
 800c9d8:	4288      	cmp	r0, r1
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	eb01 0402 	add.w	r4, r1, r2
 800c9e0:	d902      	bls.n	800c9e8 <memmove+0x10>
 800c9e2:	4284      	cmp	r4, r0
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	d807      	bhi.n	800c9f8 <memmove+0x20>
 800c9e8:	1e43      	subs	r3, r0, #1
 800c9ea:	42a1      	cmp	r1, r4
 800c9ec:	d008      	beq.n	800ca00 <memmove+0x28>
 800c9ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9f6:	e7f8      	b.n	800c9ea <memmove+0x12>
 800c9f8:	4402      	add	r2, r0
 800c9fa:	4601      	mov	r1, r0
 800c9fc:	428a      	cmp	r2, r1
 800c9fe:	d100      	bne.n	800ca02 <memmove+0x2a>
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca0a:	e7f7      	b.n	800c9fc <memmove+0x24>

0800ca0c <_sbrk_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4d06      	ldr	r5, [pc, #24]	@ (800ca28 <_sbrk_r+0x1c>)
 800ca10:	2300      	movs	r3, #0
 800ca12:	4604      	mov	r4, r0
 800ca14:	4608      	mov	r0, r1
 800ca16:	602b      	str	r3, [r5, #0]
 800ca18:	f7f6 fb16 	bl	8003048 <_sbrk>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	d102      	bne.n	800ca26 <_sbrk_r+0x1a>
 800ca20:	682b      	ldr	r3, [r5, #0]
 800ca22:	b103      	cbz	r3, 800ca26 <_sbrk_r+0x1a>
 800ca24:	6023      	str	r3, [r4, #0]
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	20000634 	.word	0x20000634

0800ca2c <__assert_func>:
 800ca2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca2e:	4614      	mov	r4, r2
 800ca30:	461a      	mov	r2, r3
 800ca32:	4b09      	ldr	r3, [pc, #36]	@ (800ca58 <__assert_func+0x2c>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4605      	mov	r5, r0
 800ca38:	68d8      	ldr	r0, [r3, #12]
 800ca3a:	b954      	cbnz	r4, 800ca52 <__assert_func+0x26>
 800ca3c:	4b07      	ldr	r3, [pc, #28]	@ (800ca5c <__assert_func+0x30>)
 800ca3e:	461c      	mov	r4, r3
 800ca40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca44:	9100      	str	r1, [sp, #0]
 800ca46:	462b      	mov	r3, r5
 800ca48:	4905      	ldr	r1, [pc, #20]	@ (800ca60 <__assert_func+0x34>)
 800ca4a:	f000 f84f 	bl	800caec <fiprintf>
 800ca4e:	f000 f8e3 	bl	800cc18 <abort>
 800ca52:	4b04      	ldr	r3, [pc, #16]	@ (800ca64 <__assert_func+0x38>)
 800ca54:	e7f4      	b.n	800ca40 <__assert_func+0x14>
 800ca56:	bf00      	nop
 800ca58:	20000210 	.word	0x20000210
 800ca5c:	0800d2c5 	.word	0x0800d2c5
 800ca60:	0800d297 	.word	0x0800d297
 800ca64:	0800d28a 	.word	0x0800d28a

0800ca68 <_calloc_r>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	fba1 5402 	umull	r5, r4, r1, r2
 800ca6e:	b93c      	cbnz	r4, 800ca80 <_calloc_r+0x18>
 800ca70:	4629      	mov	r1, r5
 800ca72:	f7fe fdff 	bl	800b674 <_malloc_r>
 800ca76:	4606      	mov	r6, r0
 800ca78:	b928      	cbnz	r0, 800ca86 <_calloc_r+0x1e>
 800ca7a:	2600      	movs	r6, #0
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}
 800ca80:	220c      	movs	r2, #12
 800ca82:	6002      	str	r2, [r0, #0]
 800ca84:	e7f9      	b.n	800ca7a <_calloc_r+0x12>
 800ca86:	462a      	mov	r2, r5
 800ca88:	4621      	mov	r1, r4
 800ca8a:	f7fd fb46 	bl	800a11a <memset>
 800ca8e:	e7f5      	b.n	800ca7c <_calloc_r+0x14>

0800ca90 <_realloc_r>:
 800ca90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca94:	4680      	mov	r8, r0
 800ca96:	4615      	mov	r5, r2
 800ca98:	460c      	mov	r4, r1
 800ca9a:	b921      	cbnz	r1, 800caa6 <_realloc_r+0x16>
 800ca9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caa0:	4611      	mov	r1, r2
 800caa2:	f7fe bde7 	b.w	800b674 <_malloc_r>
 800caa6:	b92a      	cbnz	r2, 800cab4 <_realloc_r+0x24>
 800caa8:	f7fe fa36 	bl	800af18 <_free_r>
 800caac:	2400      	movs	r4, #0
 800caae:	4620      	mov	r0, r4
 800cab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cab4:	f000 f8b7 	bl	800cc26 <_malloc_usable_size_r>
 800cab8:	4285      	cmp	r5, r0
 800caba:	4606      	mov	r6, r0
 800cabc:	d802      	bhi.n	800cac4 <_realloc_r+0x34>
 800cabe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cac2:	d8f4      	bhi.n	800caae <_realloc_r+0x1e>
 800cac4:	4629      	mov	r1, r5
 800cac6:	4640      	mov	r0, r8
 800cac8:	f7fe fdd4 	bl	800b674 <_malloc_r>
 800cacc:	4607      	mov	r7, r0
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0ec      	beq.n	800caac <_realloc_r+0x1c>
 800cad2:	42b5      	cmp	r5, r6
 800cad4:	462a      	mov	r2, r5
 800cad6:	4621      	mov	r1, r4
 800cad8:	bf28      	it	cs
 800cada:	4632      	movcs	r2, r6
 800cadc:	f7fd fbaf 	bl	800a23e <memcpy>
 800cae0:	4621      	mov	r1, r4
 800cae2:	4640      	mov	r0, r8
 800cae4:	f7fe fa18 	bl	800af18 <_free_r>
 800cae8:	463c      	mov	r4, r7
 800caea:	e7e0      	b.n	800caae <_realloc_r+0x1e>

0800caec <fiprintf>:
 800caec:	b40e      	push	{r1, r2, r3}
 800caee:	b503      	push	{r0, r1, lr}
 800caf0:	4601      	mov	r1, r0
 800caf2:	ab03      	add	r3, sp, #12
 800caf4:	4805      	ldr	r0, [pc, #20]	@ (800cb0c <fiprintf+0x20>)
 800caf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cafa:	6800      	ldr	r0, [r0, #0]
 800cafc:	9301      	str	r3, [sp, #4]
 800cafe:	f7ff fd13 	bl	800c528 <_vfiprintf_r>
 800cb02:	b002      	add	sp, #8
 800cb04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb08:	b003      	add	sp, #12
 800cb0a:	4770      	bx	lr
 800cb0c:	20000210 	.word	0x20000210

0800cb10 <__swhatbuf_r>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	460c      	mov	r4, r1
 800cb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb18:	2900      	cmp	r1, #0
 800cb1a:	b096      	sub	sp, #88	@ 0x58
 800cb1c:	4615      	mov	r5, r2
 800cb1e:	461e      	mov	r6, r3
 800cb20:	da0d      	bge.n	800cb3e <__swhatbuf_r+0x2e>
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb28:	f04f 0100 	mov.w	r1, #0
 800cb2c:	bf14      	ite	ne
 800cb2e:	2340      	movne	r3, #64	@ 0x40
 800cb30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb34:	2000      	movs	r0, #0
 800cb36:	6031      	str	r1, [r6, #0]
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	b016      	add	sp, #88	@ 0x58
 800cb3c:	bd70      	pop	{r4, r5, r6, pc}
 800cb3e:	466a      	mov	r2, sp
 800cb40:	f000 f848 	bl	800cbd4 <_fstat_r>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	dbec      	blt.n	800cb22 <__swhatbuf_r+0x12>
 800cb48:	9901      	ldr	r1, [sp, #4]
 800cb4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb52:	4259      	negs	r1, r3
 800cb54:	4159      	adcs	r1, r3
 800cb56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb5a:	e7eb      	b.n	800cb34 <__swhatbuf_r+0x24>

0800cb5c <__smakebuf_r>:
 800cb5c:	898b      	ldrh	r3, [r1, #12]
 800cb5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb60:	079d      	lsls	r5, r3, #30
 800cb62:	4606      	mov	r6, r0
 800cb64:	460c      	mov	r4, r1
 800cb66:	d507      	bpl.n	800cb78 <__smakebuf_r+0x1c>
 800cb68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	6123      	str	r3, [r4, #16]
 800cb70:	2301      	movs	r3, #1
 800cb72:	6163      	str	r3, [r4, #20]
 800cb74:	b003      	add	sp, #12
 800cb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb78:	ab01      	add	r3, sp, #4
 800cb7a:	466a      	mov	r2, sp
 800cb7c:	f7ff ffc8 	bl	800cb10 <__swhatbuf_r>
 800cb80:	9f00      	ldr	r7, [sp, #0]
 800cb82:	4605      	mov	r5, r0
 800cb84:	4639      	mov	r1, r7
 800cb86:	4630      	mov	r0, r6
 800cb88:	f7fe fd74 	bl	800b674 <_malloc_r>
 800cb8c:	b948      	cbnz	r0, 800cba2 <__smakebuf_r+0x46>
 800cb8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb92:	059a      	lsls	r2, r3, #22
 800cb94:	d4ee      	bmi.n	800cb74 <__smakebuf_r+0x18>
 800cb96:	f023 0303 	bic.w	r3, r3, #3
 800cb9a:	f043 0302 	orr.w	r3, r3, #2
 800cb9e:	81a3      	strh	r3, [r4, #12]
 800cba0:	e7e2      	b.n	800cb68 <__smakebuf_r+0xc>
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	6020      	str	r0, [r4, #0]
 800cba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	9b01      	ldr	r3, [sp, #4]
 800cbae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbb2:	b15b      	cbz	r3, 800cbcc <__smakebuf_r+0x70>
 800cbb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f000 f81d 	bl	800cbf8 <_isatty_r>
 800cbbe:	b128      	cbz	r0, 800cbcc <__smakebuf_r+0x70>
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	f023 0303 	bic.w	r3, r3, #3
 800cbc6:	f043 0301 	orr.w	r3, r3, #1
 800cbca:	81a3      	strh	r3, [r4, #12]
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	431d      	orrs	r5, r3
 800cbd0:	81a5      	strh	r5, [r4, #12]
 800cbd2:	e7cf      	b.n	800cb74 <__smakebuf_r+0x18>

0800cbd4 <_fstat_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d07      	ldr	r5, [pc, #28]	@ (800cbf4 <_fstat_r+0x20>)
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4608      	mov	r0, r1
 800cbde:	4611      	mov	r1, r2
 800cbe0:	602b      	str	r3, [r5, #0]
 800cbe2:	f7f6 fa09 	bl	8002ff8 <_fstat>
 800cbe6:	1c43      	adds	r3, r0, #1
 800cbe8:	d102      	bne.n	800cbf0 <_fstat_r+0x1c>
 800cbea:	682b      	ldr	r3, [r5, #0]
 800cbec:	b103      	cbz	r3, 800cbf0 <_fstat_r+0x1c>
 800cbee:	6023      	str	r3, [r4, #0]
 800cbf0:	bd38      	pop	{r3, r4, r5, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20000634 	.word	0x20000634

0800cbf8 <_isatty_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d06      	ldr	r5, [pc, #24]	@ (800cc14 <_isatty_r+0x1c>)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	f7f6 fa08 	bl	8003018 <_isatty>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	d102      	bne.n	800cc12 <_isatty_r+0x1a>
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	b103      	cbz	r3, 800cc12 <_isatty_r+0x1a>
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	bd38      	pop	{r3, r4, r5, pc}
 800cc14:	20000634 	.word	0x20000634

0800cc18 <abort>:
 800cc18:	b508      	push	{r3, lr}
 800cc1a:	2006      	movs	r0, #6
 800cc1c:	f000 f834 	bl	800cc88 <raise>
 800cc20:	2001      	movs	r0, #1
 800cc22:	f7f6 f9b5 	bl	8002f90 <_exit>

0800cc26 <_malloc_usable_size_r>:
 800cc26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc2a:	1f18      	subs	r0, r3, #4
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	bfbc      	itt	lt
 800cc30:	580b      	ldrlt	r3, [r1, r0]
 800cc32:	18c0      	addlt	r0, r0, r3
 800cc34:	4770      	bx	lr

0800cc36 <_raise_r>:
 800cc36:	291f      	cmp	r1, #31
 800cc38:	b538      	push	{r3, r4, r5, lr}
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	d904      	bls.n	800cc4a <_raise_r+0x14>
 800cc40:	2316      	movs	r3, #22
 800cc42:	6003      	str	r3, [r0, #0]
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295
 800cc48:	bd38      	pop	{r3, r4, r5, pc}
 800cc4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cc4c:	b112      	cbz	r2, 800cc54 <_raise_r+0x1e>
 800cc4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc52:	b94b      	cbnz	r3, 800cc68 <_raise_r+0x32>
 800cc54:	4628      	mov	r0, r5
 800cc56:	f000 f831 	bl	800ccbc <_getpid_r>
 800cc5a:	4622      	mov	r2, r4
 800cc5c:	4601      	mov	r1, r0
 800cc5e:	4628      	mov	r0, r5
 800cc60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc64:	f000 b818 	b.w	800cc98 <_kill_r>
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d00a      	beq.n	800cc82 <_raise_r+0x4c>
 800cc6c:	1c59      	adds	r1, r3, #1
 800cc6e:	d103      	bne.n	800cc78 <_raise_r+0x42>
 800cc70:	2316      	movs	r3, #22
 800cc72:	6003      	str	r3, [r0, #0]
 800cc74:	2001      	movs	r0, #1
 800cc76:	e7e7      	b.n	800cc48 <_raise_r+0x12>
 800cc78:	2100      	movs	r1, #0
 800cc7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cc7e:	4620      	mov	r0, r4
 800cc80:	4798      	blx	r3
 800cc82:	2000      	movs	r0, #0
 800cc84:	e7e0      	b.n	800cc48 <_raise_r+0x12>
	...

0800cc88 <raise>:
 800cc88:	4b02      	ldr	r3, [pc, #8]	@ (800cc94 <raise+0xc>)
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	6818      	ldr	r0, [r3, #0]
 800cc8e:	f7ff bfd2 	b.w	800cc36 <_raise_r>
 800cc92:	bf00      	nop
 800cc94:	20000210 	.word	0x20000210

0800cc98 <_kill_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d07      	ldr	r5, [pc, #28]	@ (800ccb8 <_kill_r+0x20>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	4611      	mov	r1, r2
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	f7f6 f963 	bl	8002f70 <_kill>
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	d102      	bne.n	800ccb4 <_kill_r+0x1c>
 800ccae:	682b      	ldr	r3, [r5, #0]
 800ccb0:	b103      	cbz	r3, 800ccb4 <_kill_r+0x1c>
 800ccb2:	6023      	str	r3, [r4, #0]
 800ccb4:	bd38      	pop	{r3, r4, r5, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20000634 	.word	0x20000634

0800ccbc <_getpid_r>:
 800ccbc:	f7f6 b950 	b.w	8002f60 <_getpid>

0800ccc0 <fmaxf>:
 800ccc0:	b508      	push	{r3, lr}
 800ccc2:	ed2d 8b02 	vpush	{d8}
 800ccc6:	eeb0 8a40 	vmov.f32	s16, s0
 800ccca:	eef0 8a60 	vmov.f32	s17, s1
 800ccce:	f000 f831 	bl	800cd34 <__fpclassifyf>
 800ccd2:	b930      	cbnz	r0, 800cce2 <fmaxf+0x22>
 800ccd4:	eeb0 8a68 	vmov.f32	s16, s17
 800ccd8:	eeb0 0a48 	vmov.f32	s0, s16
 800ccdc:	ecbd 8b02 	vpop	{d8}
 800cce0:	bd08      	pop	{r3, pc}
 800cce2:	eeb0 0a68 	vmov.f32	s0, s17
 800cce6:	f000 f825 	bl	800cd34 <__fpclassifyf>
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d0f4      	beq.n	800ccd8 <fmaxf+0x18>
 800ccee:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ccf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf6:	dded      	ble.n	800ccd4 <fmaxf+0x14>
 800ccf8:	e7ee      	b.n	800ccd8 <fmaxf+0x18>

0800ccfa <fminf>:
 800ccfa:	b508      	push	{r3, lr}
 800ccfc:	ed2d 8b02 	vpush	{d8}
 800cd00:	eeb0 8a40 	vmov.f32	s16, s0
 800cd04:	eef0 8a60 	vmov.f32	s17, s1
 800cd08:	f000 f814 	bl	800cd34 <__fpclassifyf>
 800cd0c:	b930      	cbnz	r0, 800cd1c <fminf+0x22>
 800cd0e:	eeb0 8a68 	vmov.f32	s16, s17
 800cd12:	eeb0 0a48 	vmov.f32	s0, s16
 800cd16:	ecbd 8b02 	vpop	{d8}
 800cd1a:	bd08      	pop	{r3, pc}
 800cd1c:	eeb0 0a68 	vmov.f32	s0, s17
 800cd20:	f000 f808 	bl	800cd34 <__fpclassifyf>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d0f4      	beq.n	800cd12 <fminf+0x18>
 800cd28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd30:	d5ed      	bpl.n	800cd0e <fminf+0x14>
 800cd32:	e7ee      	b.n	800cd12 <fminf+0x18>

0800cd34 <__fpclassifyf>:
 800cd34:	ee10 3a10 	vmov	r3, s0
 800cd38:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800cd3c:	d00d      	beq.n	800cd5a <__fpclassifyf+0x26>
 800cd3e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800cd42:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800cd46:	d30a      	bcc.n	800cd5e <__fpclassifyf+0x2a>
 800cd48:	4b07      	ldr	r3, [pc, #28]	@ (800cd68 <__fpclassifyf+0x34>)
 800cd4a:	1e42      	subs	r2, r0, #1
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d908      	bls.n	800cd62 <__fpclassifyf+0x2e>
 800cd50:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800cd54:	4258      	negs	r0, r3
 800cd56:	4158      	adcs	r0, r3
 800cd58:	4770      	bx	lr
 800cd5a:	2002      	movs	r0, #2
 800cd5c:	4770      	bx	lr
 800cd5e:	2004      	movs	r0, #4
 800cd60:	4770      	bx	lr
 800cd62:	2003      	movs	r0, #3
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	007ffffe 	.word	0x007ffffe

0800cd6c <_init>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	bf00      	nop
 800cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd72:	bc08      	pop	{r3}
 800cd74:	469e      	mov	lr, r3
 800cd76:	4770      	bx	lr

0800cd78 <_fini>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr
