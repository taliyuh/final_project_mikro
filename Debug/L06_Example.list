
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a68  08010e68  08010e68  00011e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080118d0  080118d0  00013280  2**0
                  CONTENTS
  4 .ARM          00000008  080118d0  080118d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118d8  080118d8  00013280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118d8  080118d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080118dc  080118dc  000128dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000280  20000000  080118e0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002768  20000280  08011b60  00013280  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200029e8  08011b60  000139e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf4c  00000000  00000000  000132b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f2  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124d  00000000  00000000  000362e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba5d  00000000  00000000  0003752d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025db1  00000000  00000000  00062f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9e4d  00000000  00000000  00088d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182b88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000773c  00000000  00000000  00182bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0018a308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010e4c 	.word	0x08010e4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	08010e4c 	.word	0x08010e4c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 fa47 	bl	80014c0 <null_ptr_check>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d117      	bne.n	800106e <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	20d0      	movs	r0, #208	@ 0xd0
 8001046:	f000 f818 	bl	800107a <bmp2_get_regs>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10b      	bne.n	800106e <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b58      	cmp	r3, #88	@ 0x58
 800105c:	d105      	bne.n	800106a <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fa79 	bl	8001556 <get_calib_param>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800106a:	23fc      	movs	r3, #252	@ 0xfc
 800106c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f000 fa18 	bl	80014c0 <null_ptr_check>
 8001090:	4603      	mov	r3, r0
 8001092:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11e      	bne.n	80010da <bmp2_get_regs+0x60>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01b      	beq.n	80010da <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010b0:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68dc      	ldr	r4, [r3, #12]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	7bf8      	ldrb	r0, [r7, #15]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	47a0      	blx	r4
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010d4:	23fe      	movs	r3, #254	@ 0xfe
 80010d6:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010d8:	e001      	b.n	80010de <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010da:	23ff      	movs	r3, #255	@ 0xff
 80010dc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b08b      	sub	sp, #44	@ 0x2c
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d901      	bls.n	8001102 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80010fe:	2304      	movs	r3, #4
 8001100:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f000 f9dc 	bl	80014c0 <null_ptr_check>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800110e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001112:	2b00      	cmp	r3, #0
 8001114:	d150      	bne.n	80011b8 <bmp2_set_regs+0xce>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d04d      	beq.n	80011b8 <bmp2_set_regs+0xce>
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d04a      	beq.n	80011b8 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d043      	beq.n	80011b0 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d114      	bne.n	8001160 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001136:	2300      	movs	r3, #0
 8001138:	77fb      	strb	r3, [r7, #31]
 800113a:	e00d      	b.n	8001158 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	440b      	add	r3, r1
 800114a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	3301      	adds	r3, #1
 8001156:	77fb      	strb	r3, [r7, #31]
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8ed      	bhi.n	800113c <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d90b      	bls.n	800117e <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001166:	f107 0114 	add.w	r1, r7, #20
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f9c6 	bl	8001500 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	3b01      	subs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	e001      	b.n	8001182 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691c      	ldr	r4, [r3, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	7818      	ldrb	r0, [r3, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f107 0114 	add.w	r1, r7, #20
 8001192:	6a3a      	ldr	r2, [r7, #32]
 8001194:	47a0      	blx	r4
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80011a8:	23fe      	movs	r3, #254	@ 0xfe
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80011ae:	e007      	b.n	80011c0 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80011b0:	23fd      	movs	r3, #253	@ 0xfd
 80011b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80011b6:	e003      	b.n	80011c0 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011b8:	23ff      	movs	r3, #255	@ 0xff
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80011be:	e000      	b.n	80011c2 <bmp2_set_regs+0xd8>
        if (len > 0)
 80011c0:	bf00      	nop
    }

    return rslt;
 80011c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	372c      	adds	r7, #44	@ 0x2c
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}

080011ce <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011d6:	23e0      	movs	r3, #224	@ 0xe0
 80011d8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011da:	23b6      	movs	r3, #182	@ 0xb6
 80011dc:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011de:	f107 010d 	add.w	r1, r7, #13
 80011e2:	f107 000e 	add.w	r0, r7, #14
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f7ff ff7e 	bl	80010ea <bmp2_set_regs>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001208:	2300      	movs	r3, #0
 800120a:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d02d      	beq.n	800126e <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001212:	f107 010c 	add.w	r1, r7, #12
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2202      	movs	r2, #2
 800121a:	20f4      	movs	r0, #244	@ 0xf4
 800121c:	f7ff ff2d 	bl	800107a <bmp2_get_regs>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d122      	bne.n	8001272 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	109b      	asrs	r3, r3, #2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001246:	7b7b      	ldrb	r3, [r7, #13]
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	109b      	asrs	r3, r3, #2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	b2da      	uxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001260:	7b7b      	ldrb	r3, [r7, #13]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	715a      	strb	r2, [r3, #5]
 800126c:	e001      	b.n	8001272 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800126e:	23ff      	movs	r3, #255	@ 0xff
 8001270:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f9fd 	bl	800168c <conf_sensor>
 8001292:	4603      	mov	r3, r0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01b      	beq.n	80012e4 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80012ac:	f107 010e 	add.w	r1, r7, #14
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	20f3      	movs	r0, #243	@ 0xf3
 80012b6:	f7ff fee0 	bl	800107a <bmp2_get_regs>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d110      	bne.n	80012e8 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	10db      	asrs	r3, r3, #3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	705a      	strb	r2, [r3, #1]
 80012e2:	e001      	b.n	80012e8 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012e4:	23ff      	movs	r3, #255	@ 0xff
 80012e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f9bf 	bl	800168c <conf_sensor>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	2300      	movs	r3, #0
 800132e:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d024      	beq.n	800138a <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001340:	f107 0110 	add.w	r1, r7, #16
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2206      	movs	r2, #6
 8001348:	20f7      	movs	r0, #247	@ 0xf7
 800134a:	f7ff fe96 	bl	800107a <bmp2_get_regs>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800135a:	f107 0208 	add.w	r2, r7, #8
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fab9 	bl	80018dc <parse_sensor_data>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800136e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10b      	bne.n	800138e <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f80b 	bl	800139a <bmp2_compensate_data>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	e001      	b.n	800138e <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800138a:	23ff      	movs	r3, #255	@ 0xff
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800138e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f88a 	bl	80014c0 <null_ptr_check>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80013b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d129      	bne.n	800140c <bmp2_compensate_data+0x72>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d026      	beq.n	800140c <bmp2_compensate_data+0x72>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d023      	beq.n	800140c <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3308      	adds	r3, #8
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fabb 	bl	8001964 <compensate_temperature>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80013f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10a      	bne.n	8001410 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fba5 	bl	8001b50 <compensate_pressure>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800140a:	e001      	b.n	8001410 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800140c:	23ff      	movs	r3, #255	@ 0xff
 800140e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b092      	sub	sp, #72	@ 0x48
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <bmp2_compute_meas_time+0x9c>)
 800142a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800142e:	461d      	mov	r5, r3
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <bmp2_compute_meas_time+0xa0>)
 800143a:	f107 0410 	add.w	r4, r7, #16
 800143e:	461d      	mov	r5, r3
 8001440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001444:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f837 	bl	80014c0 <null_ptr_check>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001458:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800145c:	2b00      	cmp	r3, #0
 800145e:	d122      	bne.n	80014a6 <bmp2_compute_meas_time+0x8a>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01f      	beq.n	80014a6 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7e1b      	ldrb	r3, [r3, #24]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d111      	bne.n	8001492 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	78db      	ldrb	r3, [r3, #3]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	3348      	adds	r3, #72	@ 0x48
 8001476:	443b      	add	r3, r7
 8001478:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3348      	adds	r3, #72	@ 0x48
 8001484:	443b      	add	r3, r7
 8001486:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800148a:	441a      	add	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001490:	e00c      	b.n	80014ac <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3348      	adds	r3, #72	@ 0x48
 800149a:	443b      	add	r3, r7
 800149c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014a4:	e002      	b.n	80014ac <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014a6:	23ff      	movs	r3, #255	@ 0xff
 80014a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80014ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3748      	adds	r7, #72	@ 0x48
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	08010e68 	.word	0x08010e68
 80014bc:	08010e7c 	.word	0x08010e7c

080014c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <null_ptr_check+0x26>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <null_ptr_check+0x26>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <null_ptr_check+0x26>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014e6:	23ff      	movs	r3, #255	@ 0xff
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e001      	b.n	80014f0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e015      	b.n	8001540 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	441a      	add	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	440b      	add	r3, r1
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	441a      	add	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	440b      	add	r3, r1
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3e5      	bcc.n	8001514 <interleave_data+0x14>
    }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b08a      	sub	sp, #40	@ 0x28
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001574:	f107 010c 	add.w	r1, r7, #12
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2219      	movs	r2, #25
 800157c:	2088      	movs	r0, #136	@ 0x88
 800157e:	f7ff fd7c 	bl	800107a <bmp2_get_regs>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 8001588:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800158c:	2b00      	cmp	r3, #0
 800158e:	d177      	bne.n	8001680 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001590:	7b7b      	ldrb	r3, [r7, #13]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80015b6:	7c7b      	ldrb	r3, [r7, #17]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7c3b      	ldrb	r3, [r7, #16]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80015c8:	7cfb      	ldrb	r3, [r7, #19]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7cbb      	ldrb	r3, [r7, #18]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015dc:	7d7b      	ldrb	r3, [r7, #21]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	7dbb      	ldrb	r3, [r7, #22]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001600:	7e7b      	ldrb	r3, [r7, #25]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	7e3b      	ldrb	r3, [r7, #24]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21a      	sxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001612:	7efb      	ldrb	r3, [r7, #27]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7ebb      	ldrb	r3, [r7, #26]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001624:	7f7b      	ldrb	r3, [r7, #29]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	7f3b      	ldrb	r3, [r7, #28]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21a      	sxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	7fbb      	ldrb	r3, [r7, #30]
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001648:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21a      	sxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800165e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21a      	sxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001674:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001678:	b25a      	sxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001680:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001684:	4618      	mov	r0, r3
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800169a:	2300      	movs	r3, #0
 800169c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800169e:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80016a2:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d074      	beq.n	8001794 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80016aa:	f107 0114 	add.w	r1, r7, #20
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	20f4      	movs	r0, #244	@ 0xf4
 80016b4:	f7ff fce1 	bl	800107a <bmp2_get_regs>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80016bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d169      	bne.n	8001798 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fd82 	bl	80011ce <bmp2_soft_reset>
 80016ca:	4603      	mov	r3, r0
 80016cc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80016ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d160      	bne.n	8001798 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f861 	bl	80017a4 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016e2:	7d7b      	ldrb	r3, [r7, #21]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80016fc:	7d7b      	ldrb	r3, [r7, #21]
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	f023 031c 	bic.w	r3, r3, #28
 8001704:	b25a      	sxtb	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f003 031c 	and.w	r3, r3, #28
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 800171c:	7d7b      	ldrb	r3, [r7, #21]
 800171e:	b25b      	sxtb	r3, r3
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	b25a      	sxtb	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	795b      	ldrb	r3, [r3, #5]
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800173a:	f107 0114 	add.w	r1, r7, #20
 800173e:	f107 0010 	add.w	r0, r7, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f7ff fcd0 	bl	80010ea <bmp2_set_regs>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800174e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d120      	bne.n	8001798 <conf_sensor+0x10c>
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01d      	beq.n	8001798 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001762:	7d3b      	ldrb	r3, [r7, #20]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	b25a      	sxtb	r2, r3
 800176c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	b25b      	sxtb	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800177e:	f107 0114 	add.w	r1, r7, #20
 8001782:	f107 0010 	add.w	r0, r7, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f7ff fcae 	bl	80010ea <bmp2_set_regs>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
 8001792:	e001      	b.n	8001798 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001794:	23ff      	movs	r3, #255	@ 0xff
 8001796:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001798:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	78db      	ldrb	r3, [r3, #3]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	f200 808b 	bhi.w	80018ce <set_os_mode+0x12a>
 80017b8:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <set_os_mode+0x1c>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017d5 	.word	0x080017d5
 80017c4:	08001807 	.word	0x08001807
 80017c8:	08001839 	.word	0x08001839
 80017cc:	0800186b 	.word	0x0800186b
 80017d0:	0800189d 	.word	0x0800189d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f023 031c 	bic.w	r3, r3, #28
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	701a      	strb	r2, [r3, #0]
            break;
 8001804:	e064      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	b25b      	sxtb	r3, r3
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	b25b      	sxtb	r3, r3
 8001818:	b2da      	uxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f023 031c 	bic.w	r3, r3, #28
 8001828:	b25b      	sxtb	r3, r3
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	701a      	strb	r2, [r3, #0]
            break;
 8001836:	e04b      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	b25b      	sxtb	r3, r3
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	f023 031c 	bic.w	r3, r3, #28
 800185a:	b25b      	sxtb	r3, r3
 800185c:	f043 030c 	orr.w	r3, r3, #12
 8001860:	b25b      	sxtb	r3, r3
 8001862:	b2da      	uxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	701a      	strb	r2, [r3, #0]
            break;
 8001868:	e032      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f043 0320 	orr.w	r3, r3, #32
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2da      	uxtb	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	f023 031c 	bic.w	r3, r3, #28
 800188c:	b25b      	sxtb	r3, r3
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	b25b      	sxtb	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	701a      	strb	r2, [r3, #0]
            break;
 800189a:	e019      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	f023 031c 	bic.w	r3, r3, #28
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f043 0314 	orr.w	r3, r3, #20
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	701a      	strb	r2, [r3, #0]
            break;
 80018cc:	e000      	b.n	80018d0 <set_os_mode+0x12c>
        default:
            break;
 80018ce:	bf00      	nop
    }
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	031b      	lsls	r3, r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3302      	adds	r3, #2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	b2db      	uxtb	r3, r3
 8001902:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	431a      	orrs	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3303      	adds	r3, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	031b      	lsls	r3, r3, #12
 800191a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3305      	adds	r3, #5
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	b2db      	uxtb	r3, r3
 8001930:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	431a      	orrs	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f000 fae3 	bl	8001f18 <st_check_boundaries>
 8001952:	4603      	mov	r3, r0
 8001954:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001956:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001968:	b08c      	sub	sp, #48	@ 0x30
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdf1 	bl	8000564 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <compensate_temperature+0x1d4>)
 8001988:	f7fe ff80 	bl	800088c <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8b9b      	ldrh	r3, [r3, #28]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdd3 	bl	8000544 <__aeabi_ui2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <compensate_temperature+0x1d8>)
 80019a4:	f7fe ff72 	bl	800088c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fc8a 	bl	80002c8 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdce 	bl	8000564 <__aeabi_i2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fe32 	bl	8000638 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdbf 	bl	8000564 <__aeabi_i2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80019ee:	f7fe ff4d 	bl	800088c <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8b9b      	ldrh	r3, [r3, #28]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda0 	bl	8000544 <__aeabi_ui2d>
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b4d      	ldr	r3, [pc, #308]	@ (8001b40 <compensate_temperature+0x1dc>)
 8001a0a:	f7fe ff3f 	bl	800088c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f7fe fc57 	bl	80002c8 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd9c 	bl	8000564 <__aeabi_i2d>
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001a34:	f7fe ff2a 	bl	800088c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8b9b      	ldrh	r3, [r3, #28]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd7d 	bl	8000544 <__aeabi_ui2d>
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <compensate_temperature+0x1dc>)
 8001a50:	f7fe ff1c 	bl	800088c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4640      	mov	r0, r8
 8001a5a:	4649      	mov	r1, r9
 8001a5c:	f7fe fc34 	bl	80002c8 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fde6 	bl	8000638 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4614      	mov	r4, r2
 8001a72:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd72 	bl	8000564 <__aeabi_i2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
    var2 =
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fdd6 	bl	8000638 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a9c:	f7fe fc16 	bl	80002cc <__adddf3>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f876 	bl	8000b98 <__aeabi_d2iz>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001ab2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aba:	f7fe fc07 	bl	80002cc <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <compensate_temperature+0x1e0>)
 8001acc:	f7fe fede 	bl	800088c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <compensate_temperature+0x1e4>)
 8001ade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ae2:	f7ff f81b 	bl	8000b1c <__aeabi_dcmplt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <compensate_temperature+0x1e4>)
 8001af2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <compensate_temperature+0x1e8>)
 8001b02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b06:	f7ff f827 	bl	8000b58 <__aeabi_dcmpgt>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <compensate_temperature+0x1e8>)
 8001b16:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3730      	adds	r7, #48	@ 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b38:	40d00000 	.word	0x40d00000
 8001b3c:	40900000 	.word	0x40900000
 8001b40:	40c00000 	.word	0x40c00000
 8001b44:	40b40000 	.word	0x40b40000
 8001b48:	c0440000 	.word	0xc0440000
 8001b4c:	40554000 	.word	0x40554000

08001b50 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b08c      	sub	sp, #48	@ 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcf6 	bl	8000564 <__aeabi_i2d>
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b80:	f7fe fe84 	bl	800088c <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4bcb      	ldr	r3, [pc, #812]	@ (8001ec0 <compensate_pressure+0x370>)
 8001b92:	f7fe fb99 	bl	80002c8 <__aeabi_dsub>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ba6:	f7fe fd47 	bl	8000638 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcd3 	bl	8000564 <__aeabi_i2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7fe fd37 	bl	8000638 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4bbb      	ldr	r3, [pc, #748]	@ (8001ec4 <compensate_pressure+0x374>)
 8001bd8:	f7fe fe58 	bl	800088c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcba 	bl	8000564 <__aeabi_i2d>
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fd20 	bl	8000638 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	f7fe fb62 	bl	80002cc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c10:	f7fe fb5c 	bl	80002cc <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4ba9      	ldr	r3, [pc, #676]	@ (8001ec8 <compensate_pressure+0x378>)
 8001c22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c26:	f7fe fe31 	bl	800088c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4614      	mov	r4, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc93 	bl	8000564 <__aeabi_i2d>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4ba2      	ldr	r3, [pc, #648]	@ (8001ecc <compensate_pressure+0x37c>)
 8001c44:	f7fe fcf8 	bl	8000638 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fb3c 	bl	80002cc <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc7e 	bl	8000564 <__aeabi_i2d>
 8001c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6c:	f7fe fce4 	bl	8000638 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7c:	f7fe fcdc 	bl	8000638 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b90      	ldr	r3, [pc, #576]	@ (8001ed0 <compensate_pressure+0x380>)
 8001c8e:	f7fe fdfd 	bl	800088c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc5f 	bl	8000564 <__aeabi_i2d>
 8001ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001caa:	f7fe fcc5 	bl	8000638 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fb09 	bl	80002cc <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4b82      	ldr	r3, [pc, #520]	@ (8001ed0 <compensate_pressure+0x380>)
 8001cc8:	f7fe fde0 	bl	800088c <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec4 <compensate_pressure+0x374>)
 8001cda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cde:	f7fe fdd5 	bl	800088c <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b79      	ldr	r3, [pc, #484]	@ (8001ed4 <compensate_pressure+0x384>)
 8001cf0:	f7fe faec 	bl	80002cc <__adddf3>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc1f 	bl	8000544 <__aeabi_ui2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fc93 	bl	8000638 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d26:	f7fe fef9 	bl	8000b1c <__aeabi_dcmplt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <compensate_pressure+0x1f8>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d3c:	f7fe ff0c 	bl	8000b58 <__aeabi_dcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80de 	beq.w	8001f04 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbf9 	bl	8000544 <__aeabi_ui2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	495f      	ldr	r1, [pc, #380]	@ (8001ed8 <compensate_pressure+0x388>)
 8001d5c:	f7fe fab4 	bl	80002c8 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <compensate_pressure+0x38c>)
 8001d6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d72:	f7fe fd8b 	bl	800088c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d7e:	f7fe faa3 	bl	80002c8 <__aeabi_dsub>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	a347      	add	r3, pc, #284	@ (adr r3, 8001ea8 <compensate_pressure+0x358>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc52 	bl	8000638 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da0:	f7fe fd74 	bl	800088c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd6 	bl	8000564 <__aeabi_i2d>
 8001db8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dbc:	f7fe fc3c 	bl	8000638 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dcc:	f7fe fc34 	bl	8000638 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <compensate_pressure+0x390>)
 8001dde:	f7fe fd55 	bl	800088c <__aeabi_ddiv>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb7 	bl	8000564 <__aeabi_i2d>
 8001df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dfa:	f7fe fc1d 	bl	8000638 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <compensate_pressure+0x374>)
 8001e0c:	f7fe fd3e 	bl	800088c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e20:	f7fe fa54 	bl	80002cc <__adddf3>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb96 	bl	8000564 <__aeabi_i2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe fa44 	bl	80002cc <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <compensate_pressure+0x394>)
 8001e52:	f7fe fd1b 	bl	800088c <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e5e:	f7fe fa35 	bl	80002cc <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e6a:	a311      	add	r3, pc, #68	@ (adr r3, 8001eb0 <compensate_pressure+0x360>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e74:	f7fe fe52 	bl	8000b1c <__aeabi_dcmplt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001eb0 <compensate_pressure+0x360>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001eb8 <compensate_pressure+0x368>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e98:	f7fe fe5e 	bl	8000b58 <__aeabi_dcmpgt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	e022      	b.n	8001ee8 <compensate_pressure+0x398>
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40b86a00 	.word	0x40b86a00
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40dd4c00 	.word	0x40dd4c00
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40fadb00 	.word	0x40fadb00
 8001ec0:	40ef4000 	.word	0x40ef4000
 8001ec4:	40e00000 	.word	0x40e00000
 8001ec8:	40100000 	.word	0x40100000
 8001ecc:	40f00000 	.word	0x40f00000
 8001ed0:	41200000 	.word	0x41200000
 8001ed4:	3ff00000 	.word	0x3ff00000
 8001ed8:	41300000 	.word	0x41300000
 8001edc:	40b00000 	.word	0x40b00000
 8001ee0:	41e00000 	.word	0x41e00000
 8001ee4:	40300000 	.word	0x40300000
 8001ee8:	d007      	beq.n	8001efa <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001eea:	a309      	add	r3, pc, #36	@ (adr r3, 8001f10 <compensate_pressure+0x3c0>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f00:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3730      	adds	r7, #48	@ 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40fadb00 	.word	0x40fadb00

08001f18 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db03      	blt.n	8001f34 <st_check_boundaries+0x1c>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	dd09      	ble.n	8001f48 <st_check_boundaries+0x30>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db06      	blt.n	8001f48 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	dc02      	bgt.n	8001f48 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f42:	23fa      	movs	r3, #250	@ 0xfa
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e023      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db03      	blt.n	8001f56 <st_check_boundaries+0x3e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	dd09      	ble.n	8001f6a <st_check_boundaries+0x52>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db06      	blt.n	8001f6a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	dc02      	bgt.n	8001f6a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f64:	23fb      	movs	r3, #251	@ 0xfb
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e012      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db03      	blt.n	8001f78 <st_check_boundaries+0x60>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	dd09      	ble.n	8001f8c <st_check_boundaries+0x74>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db03      	blt.n	8001f86 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	dd02      	ble.n	8001f8c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f86:	23f9      	movs	r3, #249	@ 0xf9
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	e001      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	000ffff0 	.word	0x000ffff0

08001fa4 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff f839 	bl	8001024 <bmp2_init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f91e 	bl	80011fe <bmp2_get_config>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f950 	bl	800127e <bmp2_set_config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2003      	movs	r0, #3
 8001fec:	f7ff f982 	bl	80012f4 <bmp2_set_power_mode>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001ff4:	f107 0108 	add.w	r1, r7, #8
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa0c 	bl	800141c <bmp2_compute_meas_time>
 8002004:	4603      	mov	r3, r0
 8002006:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6858      	ldr	r0, [r3, #4]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	891b      	ldrh	r3, [r3, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	f002 fe9a 	bl	8004d74 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f107 010f 	add.w	r1, r7, #15
 8002048:	2305      	movs	r3, #5
 800204a:	2201      	movs	r2, #1
 800204c:	f004 f88b 	bl	8006166 <HAL_SPI_Transmit>
 8002050:	4603      	mov	r3, r0
 8002052:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2305      	movs	r3, #5
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	f004 f9f6 	bl	8006450 <HAL_SPI_Receive>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	7dbb      	ldrb	r3, [r7, #22]
 800206a:	4413      	add	r3, r2
 800206c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6858      	ldr	r0, [r3, #4]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	891b      	ldrh	r3, [r3, #8]
 8002076:	2201      	movs	r2, #1
 8002078:	4619      	mov	r1, r3
 800207a:	f002 fe7b 	bl	8004d74 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800207e:	7dbb      	ldrb	r3, [r7, #22]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <bmp2_spi_read+0x74>
    iError = -1;
 8002084:	23ff      	movs	r3, #255	@ 0xff
 8002086:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6858      	ldr	r0, [r3, #4]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	891b      	ldrh	r3, [r3, #8]
 80020b8:	2200      	movs	r2, #0
 80020ba:	4619      	mov	r1, r3
 80020bc:	f002 fe5a 	bl	8004d74 <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f107 010f 	add.w	r1, r7, #15
 80020c8:	2305      	movs	r3, #5
 80020ca:	2201      	movs	r2, #1
 80020cc:	f004 f84b 	bl	8006166 <HAL_SPI_Transmit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2305      	movs	r3, #5
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	f004 f841 	bl	8006166 <HAL_SPI_Transmit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	7dbb      	ldrb	r3, [r7, #22]
 80020ea:	4413      	add	r3, r2
 80020ec:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6858      	ldr	r0, [r3, #4]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	891b      	ldrh	r3, [r3, #8]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	f002 fe3b 	bl	8004d74 <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80020fe:	7dbb      	ldrb	r3, [r7, #22]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <bmp2_spi_write+0x74>
    iError = -1;
 8002104:	23ff      	movs	r3, #255	@ 0xff
 8002106:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <bmp2_delay_us+0x24>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	4618      	mov	r0, r3
 800212a:	f002 fa97 	bl	800465c <HAL_Delay>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08b      	sub	sp, #44	@ 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002148:	23ff      	movs	r3, #255	@ 0xff
 800214a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	899b      	ldrh	r3, [r3, #12]
 8002154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f89c 	bl	800129c <bmp2_get_status>
 8002164:	4603      	mov	r3, r0
 8002166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8d4 	bl	800131e <bmp2_get_sensor_data>
 8002176:	4603      	mov	r3, r0
 8002178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 800217c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 8002186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <BMP2_ReadData+0xc4>)
 8002190:	f7fe fb7c 	bl	800088c <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 800219e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80021ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <BMP2_ReadData+0x80>
 80021b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dccd      	bgt.n	8002158 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	684c      	ldr	r4, [r1, #4]
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fd2d 	bl	8000c28 <__aeabi_d2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	684c      	ldr	r4, [r1, #4]
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fd22 	bl	8000c28 <__aeabi_d2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80021f0:	729a      	strb	r2, [r3, #10]

  return rslt;
 80021f2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	372c      	adds	r7, #44	@ 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	40590000 	.word	0x40590000

08002204 <FAN_PWM_Init>:
  * @brief Initialize PWM fan control
  * @param[in] hfan   : Fan PWM handler
  * @retval None
  */
void FAN_PWM_Init(FAN_PWM_Handle_TypeDef* hfan)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  hfan->Output.Duty = (hfan->ActiveState == FAN_ON_HIGH) ? (hfan->Output.Duty) : (100.0f - hfan->Output.Duty);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7b1b      	ldrb	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d103      	bne.n	800221c <FAN_PWM_Init+0x18>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edd3 7a02 	vldr	s15, [r3, #8]
 800221a:	e006      	b.n	800222a <FAN_PWM_Init+0x26>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002222:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002240 <FAN_PWM_Init+0x3c>
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hfan->Output));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8aa 	bl	800238c <PWM_Init>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	42c80000 	.word	0x42c80000

08002244 <FAN_PWM_WriteDuty>:
  * @param[in/out] hfan   : Fan PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void FAN_PWM_WriteDuty(FAN_PWM_Handle_TypeDef* hfan, float duty)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	ed87 0a00 	vstr	s0, [r7]
  const float minDuty = 60.0f; // Minimum duty cycle for the fan to start
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <FAN_PWM_WriteDuty+0xac>)
 8002252:	60fb      	str	r3, [r7, #12]

  // Clamp the duty cycle to the valid range [0.0, 100.0]
  if (duty < 0.0f) {
 8002254:	edd7 7a00 	vldr	s15, [r7]
 8002258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d503      	bpl.n	800226a <FAN_PWM_WriteDuty+0x26>
    duty = 0.0f;
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	e00a      	b.n	8002280 <FAN_PWM_WriteDuty+0x3c>
  } else if (duty > 99.0f) {
 800226a:	edd7 7a00 	vldr	s15, [r7]
 800226e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 8002272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	dd01      	ble.n	8002280 <FAN_PWM_WriteDuty+0x3c>
    duty = 99.0f;
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <FAN_PWM_WriteDuty+0xb4>)
 800227e:	603b      	str	r3, [r7, #0]
  }

  // Map the duty cycle to the new range [minDuty, 100.0]
  if (duty > 0.0f) {
 8002280:	edd7 7a00 	vldr	s15, [r7]
 8002284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	dd13      	ble.n	80022b6 <FAN_PWM_WriteDuty+0x72>
      duty = minDuty + (duty * (100.0f - minDuty) / 100.0f);
 800228e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80022fc <FAN_PWM_WriteDuty+0xb8>
 8002292:	edd7 7a03 	vldr	s15, [r7, #12]
 8002296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800229a:	edd7 7a00 	vldr	s15, [r7]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80022fc <FAN_PWM_WriteDuty+0xb8>
 80022a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	edc7 7a00 	vstr	s15, [r7]
  }

  hfan->Output.Duty = (hfan->ActiveState == FAN_ON_HIGH) ? (duty) : (100.0f - duty);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7b1b      	ldrb	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d006      	beq.n	80022cc <FAN_PWM_WriteDuty+0x88>
 80022be:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80022fc <FAN_PWM_WriteDuty+0xb8>
 80022c2:	edd7 7a00 	vldr	s15, [r7]
 80022c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ca:	e001      	b.n	80022d0 <FAN_PWM_WriteDuty+0x8c>
 80022cc:	edd7 7a00 	vldr	s15, [r7]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hfan->Output), hfan->Output.Duty);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	edd3 7a02 	vldr	s15, [r3, #8]
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 f86a 	bl	80023bc <PWM_WriteDuty>
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	42700000 	.word	0x42700000
 80022f4:	42c60000 	.word	0x42c60000
 80022f8:	42c60000 	.word	0x42c60000
 80022fc:	42c80000 	.word	0x42c80000

08002300 <HEATER_PWM_Init>:
  * @brief Initialize PWM heater control
  * @param[in] hhtr   : Heater PWM handler
  * @retval None
  */
void HEATER_PWM_Init(HEATER_PWM_Handle_TypeDef* hhtr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (hhtr->Output.Duty) : (100.0f - hhtr->Output.Duty);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7b1b      	ldrb	r3, [r3, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d103      	bne.n	8002318 <HEATER_PWM_Init+0x18>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	edd3 7a02 	vldr	s15, [r3, #8]
 8002316:	e006      	b.n	8002326 <HEATER_PWM_Init+0x26>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	edd3 7a02 	vldr	s15, [r3, #8]
 800231e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800233c <HEATER_PWM_Init+0x3c>
 8002322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hhtr->Output));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f82c 	bl	800238c <PWM_Init>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	42c80000 	.word	0x42c80000

08002340 <HEATER_PWM_WriteDuty>:
  * @param[in/out] hhtr   : Heater PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void HEATER_PWM_WriteDuty(HEATER_PWM_Handle_TypeDef* hhtr, float duty)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	ed87 0a00 	vstr	s0, [r7]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (duty) : (100.0f - duty);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7b1b      	ldrb	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d006      	beq.n	8002362 <HEATER_PWM_WriteDuty+0x22>
 8002354:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002388 <HEATER_PWM_WriteDuty+0x48>
 8002358:	edd7 7a00 	vldr	s15, [r7]
 800235c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002360:	e001      	b.n	8002366 <HEATER_PWM_WriteDuty+0x26>
 8002362:	edd7 7a00 	vldr	s15, [r7]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hhtr->Output), hhtr->Output.Duty);
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edd3 7a02 	vldr	s15, [r3, #8]
 8002374:	eeb0 0a67 	vmov.f32	s0, s15
 8002378:	4610      	mov	r0, r2
 800237a:	f000 f81f 	bl	80023bc <PWM_WriteDuty>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	42c80000 	.word	0x42c80000

0800238c <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	edd3 7a02 	vldr	s15, [r3, #8]
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f80c 	bl	80023bc <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f004 fecc 	bl	800714c <HAL_TIM_PWM_Start>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80023c8:	edd7 7a00 	vldr	s15, [r7]
 80023cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d503      	bpl.n	80023de <PWM_WriteDuty+0x22>
    duty = 0.0;
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	e00a      	b.n	80023f4 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80023de:	edd7 7a00 	vldr	s15, [r7]
 80023e2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80024a0 <PWM_WriteDuty+0xe4>
 80023e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ee:	dd01      	ble.n	80023f4 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80023f0:	4b2c      	ldr	r3, [pc, #176]	@ (80024a4 <PWM_WriteDuty+0xe8>)
 80023f2:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	3301      	adds	r3, #1
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800240c:	edd7 7a00 	vldr	s15, [r7]
 8002410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002414:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80024a0 <PWM_WriteDuty+0xe4>
 8002418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d105      	bne.n	800243a <PWM_WriteDuty+0x7e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002438:	e02c      	b.n	8002494 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d105      	bne.n	800244e <PWM_WriteDuty+0x92>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800244c:	e022      	b.n	8002494 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d105      	bne.n	8002462 <PWM_WriteDuty+0xa6>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002460:	e018      	b.n	8002494 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d105      	bne.n	8002476 <PWM_WriteDuty+0xba>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002474:	e00e      	b.n	8002494 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d105      	bne.n	800248a <PWM_WriteDuty+0xce>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002488:	e004      	b.n	8002494 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	42c80000 	.word	0x42c80000
 80024a4:	42c80000 	.word	0x42c80000

080024a8 <LCD_Init>:
/**
  * @brief  Initialize the LCD in 4-bit mode.
  * @retval None
  */
void LCD_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Wait for LCD to power up
 80024ac:	2032      	movs	r0, #50	@ 0x32
 80024ae:	f002 f8d5 	bl	800465c <HAL_Delay>

    // Initialize in 4-bit mode
    LCD_SendNibble(0x3);
 80024b2:	2003      	movs	r0, #3
 80024b4:	f000 f856 	bl	8002564 <LCD_SendNibble>
    HAL_Delay(5);
 80024b8:	2005      	movs	r0, #5
 80024ba:	f002 f8cf 	bl	800465c <HAL_Delay>
    LCD_SendNibble(0x3);
 80024be:	2003      	movs	r0, #3
 80024c0:	f000 f850 	bl	8002564 <LCD_SendNibble>
    HAL_Delay(1);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f002 f8c9 	bl	800465c <HAL_Delay>
    LCD_SendNibble(0x3);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f000 f84a 	bl	8002564 <LCD_SendNibble>
    HAL_Delay(1);
 80024d0:	2001      	movs	r0, #1
 80024d2:	f002 f8c3 	bl	800465c <HAL_Delay>
    LCD_SendNibble(0x2);
 80024d6:	2002      	movs	r0, #2
 80024d8:	f000 f844 	bl	8002564 <LCD_SendNibble>
    HAL_Delay(1);
 80024dc:	2001      	movs	r0, #1
 80024de:	f002 f8bd 	bl	800465c <HAL_Delay>

    // Function set: 4-bit, 2 lines, 5x8 dots
    LCD_Command(0x28);
 80024e2:	2028      	movs	r0, #40	@ 0x28
 80024e4:	f000 f80e 	bl	8002504 <LCD_Command>
    // Display on, cursor off, blink off
    LCD_Command(0x0C);
 80024e8:	200c      	movs	r0, #12
 80024ea:	f000 f80b 	bl	8002504 <LCD_Command>
    // Clear display
    LCD_Command(0x01);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f000 f808 	bl	8002504 <LCD_Command>
    HAL_Delay(2);
 80024f4:	2002      	movs	r0, #2
 80024f6:	f002 f8b1 	bl	800465c <HAL_Delay>
    // Entry mode set: Increment cursor
    LCD_Command(0x06);
 80024fa:	2006      	movs	r0, #6
 80024fc:	f000 f802 	bl	8002504 <LCD_Command>
}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}

08002504 <LCD_Command>:
  * @brief  Send a command byte to the LCD.
  * @param  cmd: Command byte
  * @retval None
  */
void LCD_Command(uint8_t cmd)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
    // RS = 0 for command
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	2140      	movs	r1, #64	@ 0x40
 8002512:	4807      	ldr	r0, [pc, #28]	@ (8002530 <LCD_Command+0x2c>)
 8002514:	f002 fc2e 	bl	8004d74 <HAL_GPIO_WritePin>
    LCD_SendByte(cmd);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f874 	bl	8002608 <LCD_SendByte>
    HAL_Delay(2);
 8002520:	2002      	movs	r0, #2
 8002522:	f002 f89b 	bl	800465c <HAL_Delay>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40020800 	.word	0x40020800

08002534 <LCD_WriteData>:
  * @brief  Send a data byte to the LCD.
  * @param  data: Data byte
  * @retval None
  */
void LCD_WriteData(uint8_t data)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
    // RS = 1 for data
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800253e:	2201      	movs	r2, #1
 8002540:	2140      	movs	r1, #64	@ 0x40
 8002542:	4807      	ldr	r0, [pc, #28]	@ (8002560 <LCD_WriteData+0x2c>)
 8002544:	f002 fc16 	bl	8004d74 <HAL_GPIO_WritePin>
    LCD_SendByte(data);
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f85c 	bl	8002608 <LCD_SendByte>
    HAL_Delay(1);
 8002550:	2001      	movs	r0, #1
 8002552:	f002 f883 	bl	800465c <HAL_Delay>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40020800 	.word	0x40020800

08002564 <LCD_SendNibble>:
  * @brief  Send a 4-bit nibble to the LCD.
  * @param  nibble: Lower 4 bits of the byte
  * @retval None
  */
void LCD_SendNibble(uint8_t nibble)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
    // Set data pins D4-D7
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (nibble & 0x1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800257c:	481e      	ldr	r0, [pc, #120]	@ (80025f8 <LCD_SendNibble+0x94>)
 800257e:	f002 fbf9 	bl	8004d74 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (nibble & 0x2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	105b      	asrs	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002594:	4819      	ldr	r0, [pc, #100]	@ (80025fc <LCD_SendNibble+0x98>)
 8002596:	f002 fbed 	bl	8004d74 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (nibble & 0x4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	109b      	asrs	r3, r3, #2
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025ac:	4814      	ldr	r0, [pc, #80]	@ (8002600 <LCD_SendNibble+0x9c>)
 80025ae:	f002 fbe1 	bl	8004d74 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (nibble & 0x8) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025c4:	480f      	ldr	r0, [pc, #60]	@ (8002604 <LCD_SendNibble+0xa0>)
 80025c6:	f002 fbd5 	bl	8004d74 <HAL_GPIO_WritePin>

    // Toggle E pin
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025d0:	4809      	ldr	r0, [pc, #36]	@ (80025f8 <LCD_SendNibble+0x94>)
 80025d2:	f002 fbcf 	bl	8004d74 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Enable pulse width
 80025d6:	2001      	movs	r0, #1
 80025d8:	f002 f840 	bl	800465c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025e2:	4805      	ldr	r0, [pc, #20]	@ (80025f8 <LCD_SendNibble+0x94>)
 80025e4:	f002 fbc6 	bl	8004d74 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Command processing time
 80025e8:	2001      	movs	r0, #1
 80025ea:	f002 f837 	bl	800465c <HAL_Delay>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021400 	.word	0x40021400

08002608 <LCD_SendByte>:
  * @brief  Send a full byte to the LCD by splitting into two nibbles.
  * @param  byte: Byte to send
  * @retval None
  */
void LCD_SendByte(uint8_t byte)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
    // Send higher nibble
    LCD_SendNibble((byte >> 4) & 0x0F);
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ffa3 	bl	8002564 <LCD_SendNibble>
    // Send lower nibble
    LCD_SendNibble(byte & 0x0F);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff9c 	bl	8002564 <LCD_SendNibble>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <LCD_Clear>:
/**
  * @brief  Clear the LCD display.
  * @retval None
  */
void LCD_Clear(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
    LCD_Command(0x01);
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff ff63 	bl	8002504 <LCD_Command>
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}

08002642 <LCD_SetCursor>:
  * @param  row: Row number (0 or 1)
  * @param  col: Column number (0 to 15)
  * @retval None
  */
void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	460a      	mov	r2, r1
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	4613      	mov	r3, r2
 8002650:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    if (row == 0)
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d103      	bne.n	8002660 <LCD_SetCursor+0x1e>
        address = 0x80 + col;
 8002658:	79bb      	ldrb	r3, [r7, #6]
 800265a:	3b80      	subs	r3, #128	@ 0x80
 800265c:	73fb      	strb	r3, [r7, #15]
 800265e:	e002      	b.n	8002666 <LCD_SetCursor+0x24>
    else
        address = 0xC0 + col;
 8002660:	79bb      	ldrb	r3, [r7, #6]
 8002662:	3b40      	subs	r3, #64	@ 0x40
 8002664:	73fb      	strb	r3, [r7, #15]
    LCD_Command(address);
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff4b 	bl	8002504 <LCD_Command>
}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <LCD_Print>:
  * @brief  Print a string on the LCD.
  * @param  str: Null-terminated string
  * @retval None
  */
void LCD_Print(char* str)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
    while(*str)
 800267e:	e006      	b.n	800268e <LCD_Print+0x18>
    {
        LCD_WriteData(*str++);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff53 	bl	8002534 <LCD_WriteData>
    while(*str)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f4      	bne.n	8002680 <LCD_Print+0xa>
    }
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <LCD_CreateCustomChar>:
void LCD_CreateCustomChar(uint8_t* cg_char, uint8_t location)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    // Set CGRAM address
    LCD_Command(0x40 + (location << 3));
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3340      	adds	r3, #64	@ 0x40
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff ff24 	bl	8002504 <LCD_Command>

    // Write character data
    for (i = 0; i < 8; i++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e009      	b.n	80026d6 <LCD_CreateCustomChar+0x36>
        LCD_WriteData(cg_char[i]);
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff32 	bl	8002534 <LCD_WriteData>
    for (i = 0; i < 8; i++) {
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	3301      	adds	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b07      	cmp	r3, #7
 80026da:	d9f2      	bls.n	80026c2 <LCD_CreateCustomChar+0x22>
    }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2110      	movs	r1, #16
 80026f0:	4803      	ldr	r0, [pc, #12]	@ (8002700 <SELECT+0x18>)
 80026f2:	f002 fb3f 	bl	8004d74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80026f6:	2001      	movs	r0, #1
 80026f8:	f001 ffb0 	bl	800465c <HAL_Delay>
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40020000 	.word	0x40020000

08002704 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	2110      	movs	r1, #16
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <DESELECT+0x18>)
 800270e:	f002 fb31 	bl	8004d74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002712:	2001      	movs	r0, #1
 8002714:	f001 ffa2 	bl	800465c <HAL_Delay>
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40020000 	.word	0x40020000

08002720 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800272a:	bf00      	nop
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <SPI_TxByte+0x30>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d1f8      	bne.n	800272c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800273a:	1df9      	adds	r1, r7, #7
 800273c:	2364      	movs	r3, #100	@ 0x64
 800273e:	2201      	movs	r2, #1
 8002740:	4803      	ldr	r0, [pc, #12]	@ (8002750 <SPI_TxByte+0x30>)
 8002742:	f003 fd10 	bl	8006166 <HAL_SPI_Transmit>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000324 	.word	0x20000324

08002754 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002760:	bf00      	nop
 8002762:	4b08      	ldr	r3, [pc, #32]	@ (8002784 <SPI_TxBuffer+0x30>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d1f8      	bne.n	8002762 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002770:	887a      	ldrh	r2, [r7, #2]
 8002772:	2364      	movs	r3, #100	@ 0x64
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4803      	ldr	r0, [pc, #12]	@ (8002784 <SPI_TxBuffer+0x30>)
 8002778:	f003 fcf5 	bl	8006166 <HAL_SPI_Transmit>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000324 	.word	0x20000324

08002788 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800278e:	23ff      	movs	r3, #255	@ 0xff
 8002790:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002792:	bf00      	nop
 8002794:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <SPI_RxByte+0x34>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d1f8      	bne.n	8002794 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80027a2:	1dba      	adds	r2, r7, #6
 80027a4:	1df9      	adds	r1, r7, #7
 80027a6:	2364      	movs	r3, #100	@ 0x64
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2301      	movs	r3, #1
 80027ac:	4803      	ldr	r0, [pc, #12]	@ (80027bc <SPI_RxByte+0x34>)
 80027ae:	f003 ff86 	bl	80066be <HAL_SPI_TransmitReceive>

	return data;
 80027b2:	79bb      	ldrb	r3, [r7, #6]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000324 	.word	0x20000324

080027c0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80027c8:	f7ff ffde 	bl	8002788 <SPI_RxByte>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	701a      	strb	r2, [r3, #0]
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <SD_ReadyWait+0x30>)
 80027e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80027e8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80027ea:	f7ff ffcd 	bl	8002788 <SPI_RxByte>
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2bff      	cmp	r3, #255	@ 0xff
 80027f6:	d003      	beq.n	8002800 <SD_ReadyWait+0x24>
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <SD_ReadyWait+0x30>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f4      	bne.n	80027ea <SD_ReadyWait+0xe>

	return res;
 8002800:	79fb      	ldrb	r3, [r7, #7]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000029e 	.word	0x2000029e

08002810 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8002816:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800281a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800281c:	f7ff ff72 	bl	8002704 <DESELECT>
	for(int i = 0; i < 10; i++)
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	e005      	b.n	8002832 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8002826:	20ff      	movs	r0, #255	@ 0xff
 8002828:	f7ff ff7a 	bl	8002720 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b09      	cmp	r3, #9
 8002836:	ddf6      	ble.n	8002826 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002838:	f7ff ff56 	bl	80026e8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800283c:	2340      	movs	r3, #64	@ 0x40
 800283e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8002850:	2395      	movs	r3, #149	@ 0x95
 8002852:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8002854:	463b      	mov	r3, r7
 8002856:	2106      	movs	r1, #6
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff7b 	bl	8002754 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800285e:	e002      	b.n	8002866 <SD_PowerOn+0x56>
	{
		cnt--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3b01      	subs	r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8002866:	f7ff ff8f 	bl	8002788 <SPI_RxByte>
 800286a:	4603      	mov	r3, r0
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <SD_PowerOn+0x66>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f4      	bne.n	8002860 <SD_PowerOn+0x50>
	}

	DESELECT();
 8002876:	f7ff ff45 	bl	8002704 <DESELECT>
	SPI_TxByte(0XFF);
 800287a:	20ff      	movs	r0, #255	@ 0xff
 800287c:	f7ff ff50 	bl	8002720 <SPI_TxByte>

	PowerFlag = 1;
 8002880:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <SD_PowerOn+0x80>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200002a1 	.word	0x200002a1

08002894 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <SD_PowerOff+0x14>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	200002a1 	.word	0x200002a1

080028ac <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
	return PowerFlag;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <SD_CheckPower+0x14>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200002a1 	.word	0x200002a1

080028c4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80028ce:	4b13      	ldr	r3, [pc, #76]	@ (800291c <SD_RxDataBlock+0x58>)
 80028d0:	22c8      	movs	r2, #200	@ 0xc8
 80028d2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80028d4:	f7ff ff58 	bl	8002788 <SPI_RxByte>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2bff      	cmp	r3, #255	@ 0xff
 80028e0:	d103      	bne.n	80028ea <SD_RxDataBlock+0x26>
 80028e2:	4b0e      	ldr	r3, [pc, #56]	@ (800291c <SD_RxDataBlock+0x58>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f4      	bne.n	80028d4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2bfe      	cmp	r3, #254	@ 0xfe
 80028ee:	d001      	beq.n	80028f4 <SD_RxDataBlock+0x30>
 80028f0:	2300      	movs	r3, #0
 80028f2:	e00f      	b.n	8002914 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff60 	bl	80027c0 <SPI_RxBytePtr>
	} while(len--);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	603a      	str	r2, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f4      	bne.n	80028f4 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800290a:	f7ff ff3d 	bl	8002788 <SPI_RxByte>
	SPI_RxByte();
 800290e:	f7ff ff3b 	bl	8002788 <SPI_RxByte>

	return TRUE;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000029c 	.word	0x2000029c

08002920 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8002930:	f7ff ff54 	bl	80027dc <SD_ReadyWait>
 8002934:	4603      	mov	r3, r0
 8002936:	2bff      	cmp	r3, #255	@ 0xff
 8002938:	d001      	beq.n	800293e <SD_TxDataBlock+0x1e>
 800293a:	2300      	movs	r3, #0
 800293c:	e02f      	b.n	800299e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff feed 	bl	8002720 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	2bfd      	cmp	r3, #253	@ 0xfd
 800294a:	d020      	beq.n	800298e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800294c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff feff 	bl	8002754 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8002956:	f7ff ff17 	bl	8002788 <SPI_RxByte>
		SPI_RxByte();
 800295a:	f7ff ff15 	bl	8002788 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800295e:	e00b      	b.n	8002978 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8002960:	f7ff ff12 	bl	8002788 <SPI_RxByte>
 8002964:	4603      	mov	r3, r0
 8002966:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2b05      	cmp	r3, #5
 8002970:	d006      	beq.n	8002980 <SD_TxDataBlock+0x60>
			i++;
 8002972:	7bbb      	ldrb	r3, [r7, #14]
 8002974:	3301      	adds	r3, #1
 8002976:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002978:	7bbb      	ldrb	r3, [r7, #14]
 800297a:	2b40      	cmp	r3, #64	@ 0x40
 800297c:	d9f0      	bls.n	8002960 <SD_TxDataBlock+0x40>
 800297e:	e000      	b.n	8002982 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8002980:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8002982:	bf00      	nop
 8002984:	f7ff ff00 	bl	8002788 <SPI_RxByte>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0fa      	beq.n	8002984 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2b05      	cmp	r3, #5
 8002996:	d101      	bne.n	800299c <SD_TxDataBlock+0x7c>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <SD_TxDataBlock+0x7e>

	return FALSE;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	6039      	str	r1, [r7, #0]
 80029b0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80029b2:	f7ff ff13 	bl	80027dc <SD_ReadyWait>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2bff      	cmp	r3, #255	@ 0xff
 80029ba:	d001      	beq.n	80029c0 <SD_SendCmd+0x1a>
 80029bc:	23ff      	movs	r3, #255	@ 0xff
 80029be:	e042      	b.n	8002a46 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff feac 	bl	8002720 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	0e1b      	lsrs	r3, r3, #24
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fea6 	bl	8002720 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fea0 	bl	8002720 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fe9a 	bl	8002720 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fe95 	bl	8002720 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b40      	cmp	r3, #64	@ 0x40
 80029fa:	d102      	bne.n	8002a02 <SD_SendCmd+0x5c>
 80029fc:	2395      	movs	r3, #149	@ 0x95
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	e007      	b.n	8002a12 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b48      	cmp	r3, #72	@ 0x48
 8002a06:	d102      	bne.n	8002a0e <SD_SendCmd+0x68>
 8002a08:	2387      	movs	r3, #135	@ 0x87
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e001      	b.n	8002a12 <SD_SendCmd+0x6c>
	else crc = 1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe83 	bl	8002720 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2b4c      	cmp	r3, #76	@ 0x4c
 8002a1e:	d101      	bne.n	8002a24 <SD_SendCmd+0x7e>
 8002a20:	f7ff feb2 	bl	8002788 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002a24:	230a      	movs	r3, #10
 8002a26:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002a28:	f7ff feae 	bl	8002788 <SPI_RxByte>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002a30:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	da05      	bge.n	8002a44 <SD_SendCmd+0x9e>
 8002a38:	7bbb      	ldrb	r3, [r7, #14]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	73bb      	strb	r3, [r7, #14]
 8002a3e:	7bbb      	ldrb	r3, [r7, #14]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f1      	bne.n	8002a28 <SD_SendCmd+0x82>

	return res;
 8002a44:	7b7b      	ldrb	r3, [r7, #13]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <SD_disk_initialize+0x14>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0d1      	b.n	8002c08 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8002a64:	4b6a      	ldr	r3, [pc, #424]	@ (8002c10 <SD_disk_initialize+0x1c0>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <SD_disk_initialize+0x2a>
 8002a72:	4b67      	ldr	r3, [pc, #412]	@ (8002c10 <SD_disk_initialize+0x1c0>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	e0c6      	b.n	8002c08 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8002a7a:	f7ff fec9 	bl	8002810 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002a7e:	f7ff fe33 	bl	80026e8 <SELECT>

	/* check disk type */
	type = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8002a86:	2100      	movs	r1, #0
 8002a88:	2040      	movs	r0, #64	@ 0x40
 8002a8a:	f7ff ff8c 	bl	80029a6 <SD_SendCmd>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 80a1 	bne.w	8002bd8 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8002a96:	4b5f      	ldr	r3, [pc, #380]	@ (8002c14 <SD_disk_initialize+0x1c4>)
 8002a98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a9c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002a9e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8002aa2:	2048      	movs	r0, #72	@ 0x48
 8002aa4:	f7ff ff7f 	bl	80029a6 <SD_SendCmd>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d155      	bne.n	8002b5a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
 8002ab2:	e00c      	b.n	8002ace <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002ab4:	7bfc      	ldrb	r4, [r7, #15]
 8002ab6:	f7ff fe67 	bl	8002788 <SPI_RxByte>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	f104 0310 	add.w	r3, r4, #16
 8002ac2:	443b      	add	r3, r7
 8002ac4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	3301      	adds	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	7bfb      	ldrb	r3, [r7, #15]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d9ef      	bls.n	8002ab4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002ad4:	7abb      	ldrb	r3, [r7, #10]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d17e      	bne.n	8002bd8 <SD_disk_initialize+0x188>
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	2baa      	cmp	r3, #170	@ 0xaa
 8002ade:	d17b      	bne.n	8002bd8 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2077      	movs	r0, #119	@ 0x77
 8002ae4:	f7ff ff5f 	bl	80029a6 <SD_SendCmd>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d807      	bhi.n	8002afe <SD_disk_initialize+0xae>
 8002aee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002af2:	2069      	movs	r0, #105	@ 0x69
 8002af4:	f7ff ff57 	bl	80029a6 <SD_SendCmd>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8002afe:	4b45      	ldr	r3, [pc, #276]	@ (8002c14 <SD_disk_initialize+0x1c4>)
 8002b00:	881b      	ldrh	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ec      	bne.n	8002ae0 <SD_disk_initialize+0x90>
 8002b06:	e000      	b.n	8002b0a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002b08:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002b0a:	4b42      	ldr	r3, [pc, #264]	@ (8002c14 <SD_disk_initialize+0x1c4>)
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d062      	beq.n	8002bd8 <SD_disk_initialize+0x188>
 8002b12:	2100      	movs	r1, #0
 8002b14:	207a      	movs	r0, #122	@ 0x7a
 8002b16:	f7ff ff46 	bl	80029a6 <SD_SendCmd>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d15b      	bne.n	8002bd8 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e00c      	b.n	8002b40 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8002b26:	7bfc      	ldrb	r4, [r7, #15]
 8002b28:	f7ff fe2e 	bl	8002788 <SPI_RxByte>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f104 0310 	add.w	r3, r4, #16
 8002b34:	443b      	add	r3, r7
 8002b36:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d9ef      	bls.n	8002b26 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002b46:	7a3b      	ldrb	r3, [r7, #8]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <SD_disk_initialize+0x104>
 8002b50:	230c      	movs	r3, #12
 8002b52:	e000      	b.n	8002b56 <SD_disk_initialize+0x106>
 8002b54:	2304      	movs	r3, #4
 8002b56:	73bb      	strb	r3, [r7, #14]
 8002b58:	e03e      	b.n	8002bd8 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2077      	movs	r0, #119	@ 0x77
 8002b5e:	f7ff ff22 	bl	80029a6 <SD_SendCmd>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d808      	bhi.n	8002b7a <SD_disk_initialize+0x12a>
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2069      	movs	r0, #105	@ 0x69
 8002b6c:	f7ff ff1b 	bl	80029a6 <SD_SendCmd>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d801      	bhi.n	8002b7a <SD_disk_initialize+0x12a>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e000      	b.n	8002b7c <SD_disk_initialize+0x12c>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8002b7e:	7bbb      	ldrb	r3, [r7, #14]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d10e      	bne.n	8002ba2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002b84:	2100      	movs	r1, #0
 8002b86:	2077      	movs	r0, #119	@ 0x77
 8002b88:	f7ff ff0d 	bl	80029a6 <SD_SendCmd>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d80e      	bhi.n	8002bb0 <SD_disk_initialize+0x160>
 8002b92:	2100      	movs	r1, #0
 8002b94:	2069      	movs	r0, #105	@ 0x69
 8002b96:	f7ff ff06 	bl	80029a6 <SD_SendCmd>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <SD_disk_initialize+0x160>
 8002ba0:	e00c      	b.n	8002bbc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2041      	movs	r0, #65	@ 0x41
 8002ba6:	f7ff fefe 	bl	80029a6 <SD_SendCmd>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8002bb0:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <SD_disk_initialize+0x1c4>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e2      	bne.n	8002b7e <SD_disk_initialize+0x12e>
 8002bb8:	e000      	b.n	8002bbc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002bba:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <SD_disk_initialize+0x1c4>)
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <SD_disk_initialize+0x184>
 8002bc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bc8:	2050      	movs	r0, #80	@ 0x50
 8002bca:	f7ff feec 	bl	80029a6 <SD_SendCmd>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <SD_disk_initialize+0x188>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c18 <SD_disk_initialize+0x1c8>)
 8002bda:	7bbb      	ldrb	r3, [r7, #14]
 8002bdc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002bde:	f7ff fd91 	bl	8002704 <DESELECT>
	SPI_RxByte();
 8002be2:	f7ff fdd1 	bl	8002788 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <SD_disk_initialize+0x1c0>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <SD_disk_initialize+0x1c0>)
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e001      	b.n	8002c02 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002bfe:	f7ff fe49 	bl	8002894 <SD_PowerOff>
	}

	return Stat;
 8002c02:	4b03      	ldr	r3, [pc, #12]	@ (8002c10 <SD_disk_initialize+0x1c0>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	b2db      	uxtb	r3, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	20000074 	.word	0x20000074
 8002c14:	2000029c 	.word	0x2000029c
 8002c18:	200002a0 	.word	0x200002a0

08002c1c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <SD_disk_status+0x14>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e002      	b.n	8002c36 <SD_disk_status+0x1a>
	return Stat;
 8002c30:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <SD_disk_status+0x28>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000074 	.word	0x20000074

08002c48 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	4603      	mov	r3, r0
 8002c56:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <SD_disk_read+0x1c>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <SD_disk_read+0x20>
 8002c64:	2304      	movs	r3, #4
 8002c66:	e051      	b.n	8002d0c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002c68:	4b2a      	ldr	r3, [pc, #168]	@ (8002d14 <SD_disk_read+0xcc>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <SD_disk_read+0x32>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e048      	b.n	8002d0c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002c7a:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <SD_disk_read+0xd0>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <SD_disk_read+0x44>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	025b      	lsls	r3, r3, #9
 8002c8a:	607b      	str	r3, [r7, #4]

	SELECT();
 8002c8c:	f7ff fd2c 	bl	80026e8 <SELECT>

	if (count == 1)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d111      	bne.n	8002cba <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	2051      	movs	r0, #81	@ 0x51
 8002c9a:	f7ff fe84 	bl	80029a6 <SD_SendCmd>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d129      	bne.n	8002cf8 <SD_disk_read+0xb0>
 8002ca4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ca8:	68b8      	ldr	r0, [r7, #8]
 8002caa:	f7ff fe0b 	bl	80028c4 <SD_RxDataBlock>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d021      	beq.n	8002cf8 <SD_disk_read+0xb0>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	e01e      	b.n	8002cf8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	2052      	movs	r0, #82	@ 0x52
 8002cbe:	f7ff fe72 	bl	80029a6 <SD_SendCmd>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d117      	bne.n	8002cf8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002cc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ccc:	68b8      	ldr	r0, [r7, #8]
 8002cce:	f7ff fdf9 	bl	80028c4 <SD_RxDataBlock>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <SD_disk_read+0xa6>
				buff += 512;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002cde:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ed      	bne.n	8002cc8 <SD_disk_read+0x80>
 8002cec:	e000      	b.n	8002cf0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002cee:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	204c      	movs	r0, #76	@ 0x4c
 8002cf4:	f7ff fe57 	bl	80029a6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002cf8:	f7ff fd04 	bl	8002704 <DESELECT>
	SPI_RxByte();
 8002cfc:	f7ff fd44 	bl	8002788 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000074 	.word	0x20000074
 8002d18:	200002a0 	.word	0x200002a0

08002d1c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	4603      	mov	r3, r0
 8002d2a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <SD_disk_write+0x1c>
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <SD_disk_write+0x20>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	e06b      	b.n	8002e14 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002d3c:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <SD_disk_write+0x100>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <SD_disk_write+0x32>
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e062      	b.n	8002e14 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002d4e:	4b33      	ldr	r3, [pc, #204]	@ (8002e1c <SD_disk_write+0x100>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <SD_disk_write+0x44>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e059      	b.n	8002e14 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002d60:	4b2f      	ldr	r3, [pc, #188]	@ (8002e20 <SD_disk_write+0x104>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <SD_disk_write+0x56>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	025b      	lsls	r3, r3, #9
 8002d70:	607b      	str	r3, [r7, #4]

	SELECT();
 8002d72:	f7ff fcb9 	bl	80026e8 <SELECT>

	if (count == 1)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d110      	bne.n	8002d9e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	2058      	movs	r0, #88	@ 0x58
 8002d80:	f7ff fe11 	bl	80029a6 <SD_SendCmd>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d13a      	bne.n	8002e00 <SD_disk_write+0xe4>
 8002d8a:	21fe      	movs	r1, #254	@ 0xfe
 8002d8c:	68b8      	ldr	r0, [r7, #8]
 8002d8e:	f7ff fdc7 	bl	8002920 <SD_TxDataBlock>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d033      	beq.n	8002e00 <SD_disk_write+0xe4>
			count = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	e030      	b.n	8002e00 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8002d9e:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <SD_disk_write+0x104>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002daa:	2100      	movs	r1, #0
 8002dac:	2077      	movs	r0, #119	@ 0x77
 8002dae:	f7ff fdfa 	bl	80029a6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002db2:	6839      	ldr	r1, [r7, #0]
 8002db4:	2057      	movs	r0, #87	@ 0x57
 8002db6:	f7ff fdf6 	bl	80029a6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	2059      	movs	r0, #89	@ 0x59
 8002dbe:	f7ff fdf2 	bl	80029a6 <SD_SendCmd>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11b      	bne.n	8002e00 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002dc8:	21fc      	movs	r1, #252	@ 0xfc
 8002dca:	68b8      	ldr	r0, [r7, #8]
 8002dcc:	f7ff fda8 	bl	8002920 <SD_TxDataBlock>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <SD_disk_write+0xd0>
				buff += 512;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ddc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1ee      	bne.n	8002dc8 <SD_disk_write+0xac>
 8002dea:	e000      	b.n	8002dee <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002dec:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002dee:	21fd      	movs	r1, #253	@ 0xfd
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7ff fd95 	bl	8002920 <SD_TxDataBlock>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <SD_disk_write+0xe4>
			{
				count = 1;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002e00:	f7ff fc80 	bl	8002704 <DESELECT>
	SPI_RxByte();
 8002e04:	f7ff fcc0 	bl	8002788 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	bf14      	ite	ne
 8002e0e:	2301      	movne	r3, #1
 8002e10:	2300      	moveq	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000074 	.word	0x20000074
 8002e20:	200002a0 	.word	0x200002a0

08002e24 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b08b      	sub	sp, #44	@ 0x2c
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	603a      	str	r2, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
 8002e30:	460b      	mov	r3, r1
 8002e32:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <SD_disk_ioctl+0x1e>
 8002e3e:	2304      	movs	r3, #4
 8002e40:	e113      	b.n	800306a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d124      	bne.n	8002e98 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d012      	beq.n	8002e7c <SD_disk_ioctl+0x58>
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	dc1a      	bgt.n	8002e90 <SD_disk_ioctl+0x6c>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <SD_disk_ioctl+0x40>
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d006      	beq.n	8002e70 <SD_disk_ioctl+0x4c>
 8002e62:	e015      	b.n	8002e90 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002e64:	f7ff fd16 	bl	8002894 <SD_PowerOff>
			res = RES_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002e6e:	e0fa      	b.n	8003066 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8002e70:	f7ff fcce 	bl	8002810 <SD_PowerOn>
			res = RES_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002e7a:	e0f4      	b.n	8003066 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	1c5c      	adds	r4, r3, #1
 8002e80:	f7ff fd14 	bl	80028ac <SD_CheckPower>
 8002e84:	4603      	mov	r3, r0
 8002e86:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002e8e:	e0ea      	b.n	8003066 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8002e90:	2304      	movs	r3, #4
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002e96:	e0e6      	b.n	8003066 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002e98:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <SD_disk_ioctl+0x250>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SD_disk_ioctl+0x86>
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e0df      	b.n	800306a <SD_disk_ioctl+0x246>

		SELECT();
 8002eaa:	f7ff fc1d 	bl	80026e8 <SELECT>

		switch (ctrl)
 8002eae:	79bb      	ldrb	r3, [r7, #6]
 8002eb0:	2b0d      	cmp	r3, #13
 8002eb2:	f200 80c9 	bhi.w	8003048 <SD_disk_ioctl+0x224>
 8002eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ebc <SD_disk_ioctl+0x98>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002fb3 	.word	0x08002fb3
 8002ec0:	08002ef5 	.word	0x08002ef5
 8002ec4:	08002fa3 	.word	0x08002fa3
 8002ec8:	08003049 	.word	0x08003049
 8002ecc:	08003049 	.word	0x08003049
 8002ed0:	08003049 	.word	0x08003049
 8002ed4:	08003049 	.word	0x08003049
 8002ed8:	08003049 	.word	0x08003049
 8002edc:	08003049 	.word	0x08003049
 8002ee0:	08003049 	.word	0x08003049
 8002ee4:	08003049 	.word	0x08003049
 8002ee8:	08002fc5 	.word	0x08002fc5
 8002eec:	08002fe9 	.word	0x08002fe9
 8002ef0:	0800300d 	.word	0x0800300d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2049      	movs	r0, #73	@ 0x49
 8002ef8:	f7ff fd55 	bl	80029a6 <SD_SendCmd>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 80a6 	bne.w	8003050 <SD_disk_ioctl+0x22c>
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2110      	movs	r1, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fcda 	bl	80028c4 <SD_RxDataBlock>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 809c 	beq.w	8003050 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8002f18:	7b3b      	ldrb	r3, [r7, #12]
 8002f1a:	099b      	lsrs	r3, r3, #6
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d10d      	bne.n	8002f3e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f22:	7d7b      	ldrb	r3, [r7, #21]
 8002f24:	461a      	mov	r2, r3
 8002f26:	7d3b      	ldrb	r3, [r7, #20]
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002f34:	8bfb      	ldrh	r3, [r7, #30]
 8002f36:	029a      	lsls	r2, r3, #10
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e02d      	b.n	8002f9a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002f3e:	7c7b      	ldrb	r3, [r7, #17]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	7dbb      	ldrb	r3, [r7, #22]
 8002f48:	09db      	lsrs	r3, r3, #7
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	7d7b      	ldrb	r3, [r7, #21]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f003 0306 	and.w	r3, r3, #6
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3302      	adds	r3, #2
 8002f62:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002f66:	7d3b      	ldrb	r3, [r7, #20]
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	7cbb      	ldrb	r3, [r7, #18]
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002f8c:	8bfa      	ldrh	r2, [r7, #30]
 8002f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f92:	3b09      	subs	r3, #9
 8002f94:	409a      	lsls	r2, r3
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8002fa0:	e056      	b.n	8003050 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002fb0:	e055      	b.n	800305e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002fb2:	f7ff fc13 	bl	80027dc <SD_ReadyWait>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2bff      	cmp	r3, #255	@ 0xff
 8002fba:	d14b      	bne.n	8003054 <SD_disk_ioctl+0x230>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002fc2:	e047      	b.n	8003054 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2049      	movs	r0, #73	@ 0x49
 8002fc8:	f7ff fced 	bl	80029a6 <SD_SendCmd>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d142      	bne.n	8003058 <SD_disk_ioctl+0x234>
 8002fd2:	2110      	movs	r1, #16
 8002fd4:	6a38      	ldr	r0, [r7, #32]
 8002fd6:	f7ff fc75 	bl	80028c4 <SD_RxDataBlock>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d03b      	beq.n	8003058 <SD_disk_ioctl+0x234>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002fe6:	e037      	b.n	8003058 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002fe8:	2100      	movs	r1, #0
 8002fea:	204a      	movs	r0, #74	@ 0x4a
 8002fec:	f7ff fcdb 	bl	80029a6 <SD_SendCmd>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d132      	bne.n	800305c <SD_disk_ioctl+0x238>
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	6a38      	ldr	r0, [r7, #32]
 8002ffa:	f7ff fc63 	bl	80028c4 <SD_RxDataBlock>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02b      	beq.n	800305c <SD_disk_ioctl+0x238>
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800300a:	e027      	b.n	800305c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800300c:	2100      	movs	r1, #0
 800300e:	207a      	movs	r0, #122	@ 0x7a
 8003010:	f7ff fcc9 	bl	80029a6 <SD_SendCmd>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800301a:	2300      	movs	r3, #0
 800301c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003020:	e00b      	b.n	800303a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8003022:	6a3c      	ldr	r4, [r7, #32]
 8003024:	1c63      	adds	r3, r4, #1
 8003026:	623b      	str	r3, [r7, #32]
 8003028:	f7ff fbae 	bl	8002788 <SPI_RxByte>
 800302c:	4603      	mov	r3, r0
 800302e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8003030:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003034:	3301      	adds	r3, #1
 8003036:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800303a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800303e:	2b03      	cmp	r3, #3
 8003040:	d9ef      	bls.n	8003022 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8003048:	2304      	movs	r3, #4
 800304a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800304e:	e006      	b.n	800305e <SD_disk_ioctl+0x23a>
			break;
 8003050:	bf00      	nop
 8003052:	e004      	b.n	800305e <SD_disk_ioctl+0x23a>
			break;
 8003054:	bf00      	nop
 8003056:	e002      	b.n	800305e <SD_disk_ioctl+0x23a>
			break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <SD_disk_ioctl+0x23a>
			break;
 800305c:	bf00      	nop
		}

		DESELECT();
 800305e:	f7ff fb51 	bl	8002704 <DESELECT>
		SPI_RxByte();
 8003062:	f7ff fb91 	bl	8002788 <SPI_RxByte>
	}

	return res;
 8003066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800306a:	4618      	mov	r0, r3
 800306c:	372c      	adds	r7, #44	@ 0x2c
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	bf00      	nop
 8003074:	20000074 	.word	0x20000074

08003078 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	@ 0x38
 800307c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800308e:	4bb4      	ldr	r3, [pc, #720]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	4ab3      	ldr	r2, [pc, #716]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003094:	f043 0310 	orr.w	r3, r3, #16
 8003098:	6313      	str	r3, [r2, #48]	@ 0x30
 800309a:	4bb1      	ldr	r3, [pc, #708]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	623b      	str	r3, [r7, #32]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030a6:	4bae      	ldr	r3, [pc, #696]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	4aad      	ldr	r2, [pc, #692]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b2:	4bab      	ldr	r3, [pc, #684]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030be:	4ba8      	ldr	r3, [pc, #672]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4aa7      	ldr	r2, [pc, #668]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030c4:	f043 0320 	orr.w	r3, r3, #32
 80030c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ca:	4ba5      	ldr	r3, [pc, #660]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030d6:	4ba2      	ldr	r3, [pc, #648]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4aa1      	ldr	r2, [pc, #644]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b9f      	ldr	r3, [pc, #636]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b9c      	ldr	r3, [pc, #624]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	4a9b      	ldr	r2, [pc, #620]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030fa:	4b99      	ldr	r3, [pc, #612]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003106:	4b96      	ldr	r3, [pc, #600]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	4a95      	ldr	r2, [pc, #596]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6313      	str	r3, [r2, #48]	@ 0x30
 8003112:	4b93      	ldr	r3, [pc, #588]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800311e:	4b90      	ldr	r3, [pc, #576]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a8f      	ldr	r2, [pc, #572]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b8d      	ldr	r3, [pc, #564]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003136:	4b8a      	ldr	r3, [pc, #552]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	4a89      	ldr	r2, [pc, #548]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 800313c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003140:	6313      	str	r3, [r2, #48]	@ 0x30
 8003142:	4b87      	ldr	r3, [pc, #540]	@ (8003360 <MX_GPIO_Init+0x2e8>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_SPI_CS1_GPIO_Port, BMP280_SPI_CS1_Pin, GPIO_PIN_RESET);
 800314e:	2200      	movs	r2, #0
 8003150:	2110      	movs	r1, #16
 8003152:	4884      	ldr	r0, [pc, #528]	@ (8003364 <MX_GPIO_Init+0x2ec>)
 8003154:	f001 fe0e 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	f248 0110 	movw	r1, #32784	@ 0x8010
 800315e:	4882      	ldr	r0, [pc, #520]	@ (8003368 <MX_GPIO_Init+0x2f0>)
 8003160:	f001 fe08 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|Fan_Pin|LCD_D4_Pin|LD3_Pin
 8003164:	2200      	movs	r2, #0
 8003166:	f24d 4181 	movw	r1, #54401	@ 0xd481
 800316a:	4880      	ldr	r0, [pc, #512]	@ (800336c <MX_GPIO_Init+0x2f4>)
 800316c:	f001 fe02 	bl	8004d74 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8003170:	2200      	movs	r2, #0
 8003172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003176:	487e      	ldr	r0, [pc, #504]	@ (8003370 <MX_GPIO_Init+0x2f8>)
 8003178:	f001 fdfc 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003182:	487c      	ldr	r0, [pc, #496]	@ (8003374 <MX_GPIO_Init+0x2fc>)
 8003184:	f001 fdf6 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	@ 0x40
 800318c:	487a      	ldr	r0, [pc, #488]	@ (8003378 <MX_GPIO_Init+0x300>)
 800318e:	f001 fdf1 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8003192:	2200      	movs	r2, #0
 8003194:	2140      	movs	r1, #64	@ 0x40
 8003196:	4879      	ldr	r0, [pc, #484]	@ (800337c <MX_GPIO_Init+0x304>)
 8003198:	f001 fdec 	bl	8004d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_SPI_CS1_Pin;
 800319c:	2310      	movs	r3, #16
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BMP280_SPI_CS1_GPIO_Port, &GPIO_InitStruct);
 80031ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b0:	4619      	mov	r1, r3
 80031b2:	486c      	ldr	r0, [pc, #432]	@ (8003364 <MX_GPIO_Init+0x2ec>)
 80031b4:	f001 fc1a 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80031b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80031c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031cc:	4619      	mov	r1, r3
 80031ce:	486b      	ldr	r0, [pc, #428]	@ (800337c <MX_GPIO_Init+0x304>)
 80031d0:	f001 fc0c 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80031d4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80031d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80031e6:	2305      	movs	r3, #5
 80031e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ee:	4619      	mov	r1, r3
 80031f0:	485f      	ldr	r0, [pc, #380]	@ (8003370 <MX_GPIO_Init+0x2f8>)
 80031f2:	f001 fbfb 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80031f6:	2332      	movs	r3, #50	@ 0x32
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003206:	230b      	movs	r3, #11
 8003208:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800320a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800320e:	4619      	mov	r1, r3
 8003210:	485a      	ldr	r0, [pc, #360]	@ (800337c <MX_GPIO_Init+0x304>)
 8003212:	f001 fbeb 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003216:	2386      	movs	r3, #134	@ 0x86
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003226:	230b      	movs	r3, #11
 8003228:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	484d      	ldr	r0, [pc, #308]	@ (8003368 <MX_GPIO_Init+0x2f0>)
 8003232:	f001 fbdb 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LCD_D5_Pin;
 8003236:	f248 0310 	movw	r3, #32784	@ 0x8010
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800323c:	2301      	movs	r3, #1
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003244:	2300      	movs	r3, #0
 8003246:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800324c:	4619      	mov	r1, r3
 800324e:	4846      	ldr	r0, [pc, #280]	@ (8003368 <MX_GPIO_Init+0x2f0>)
 8003250:	f001 fbcc 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|Fan_Pin|LCD_D4_Pin|LD3_Pin
 8003254:	f24d 4381 	movw	r3, #54401	@ 0xd481
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_E_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325a:	2301      	movs	r3, #1
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	483f      	ldr	r0, [pc, #252]	@ (800336c <MX_GPIO_Init+0x2f4>)
 800326e:	f001 fbbd 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8003272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	2301      	movs	r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8003284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	4839      	ldr	r0, [pc, #228]	@ (8003370 <MX_GPIO_Init+0x2f8>)
 800328c:	f001 fbae 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003290:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032a2:	230b      	movs	r3, #11
 80032a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032aa:	4619      	mov	r1, r3
 80032ac:	482f      	ldr	r0, [pc, #188]	@ (800336c <MX_GPIO_Init+0x2f4>)
 80032ae:	f001 fb9d 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin;
 80032b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 80032c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c8:	4619      	mov	r1, r3
 80032ca:	482a      	ldr	r0, [pc, #168]	@ (8003374 <MX_GPIO_Init+0x2fc>)
 80032cc:	f001 fb8e 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80032d0:	2340      	movs	r3, #64	@ 0x40
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d4:	2301      	movs	r3, #1
 80032d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032dc:	2300      	movs	r3, #0
 80032de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e4:	4619      	mov	r1, r3
 80032e6:	4824      	ldr	r0, [pc, #144]	@ (8003378 <MX_GPIO_Init+0x300>)
 80032e8:	f001 fb80 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80032ec:	2380      	movs	r3, #128	@ 0x80
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f0:	2300      	movs	r3, #0
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80032f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032fc:	4619      	mov	r1, r3
 80032fe:	481e      	ldr	r0, [pc, #120]	@ (8003378 <MX_GPIO_Init+0x300>)
 8003300:	f001 fb74 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin;
 8003304:	2340      	movs	r3, #64	@ 0x40
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003308:	2301      	movs	r3, #1
 800330a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8003314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003318:	4619      	mov	r1, r3
 800331a:	4818      	ldr	r0, [pc, #96]	@ (800337c <MX_GPIO_Init+0x304>)
 800331c:	f001 fb66 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003320:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003332:	230a      	movs	r3, #10
 8003334:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800333a:	4619      	mov	r1, r3
 800333c:	480a      	ldr	r0, [pc, #40]	@ (8003368 <MX_GPIO_Init+0x2f0>)
 800333e:	f001 fb55 	bl	80049ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003348:	2300      	movs	r3, #0
 800334a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003354:	4619      	mov	r1, r3
 8003356:	4804      	ldr	r0, [pc, #16]	@ (8003368 <MX_GPIO_Init+0x2f0>)
 8003358:	f001 fb48 	bl	80049ec <HAL_GPIO_Init>
 800335c:	e010      	b.n	8003380 <MX_GPIO_Init+0x308>
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40021000 	.word	0x40021000
 8003368:	40020000 	.word	0x40020000
 800336c:	40020400 	.word	0x40020400
 8003370:	40021400 	.word	0x40021400
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40021800 	.word	0x40021800
 800337c:	40020800 	.word	0x40020800

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003380:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003392:	230b      	movs	r3, #11
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800339a:	4619      	mov	r1, r3
 800339c:	4803      	ldr	r0, [pc, #12]	@ (80033ac <MX_GPIO_Init+0x334>)
 800339e:	f001 fb25 	bl	80049ec <HAL_GPIO_Init>

}
 80033a2:	bf00      	nop
 80033a4:	3738      	adds	r7, #56	@ 0x38
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40021800 	.word	0x40021800

080033b0 <__io_putchar>:
uint16_t calculate_crc(const uint8_t *data, size_t length);
void process_user_input(void);

/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80033b8:	1d39      	adds	r1, r7, #4
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	2201      	movs	r2, #1
 80033c0:	4803      	ldr	r0, [pc, #12]	@ (80033d0 <__io_putchar+0x20>)
 80033c2:	f004 fe41 	bl	8008048 <HAL_UART_Transmit>
  return ch;
 80033c6:	687b      	ldr	r3, [r7, #4]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200025d4 	.word	0x200025d4

080033d4 <_write>:

// If the above doesn't work, you might need this instead (or in addition):
int _write(int file, char *ptr, int len)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e009      	b.n	80033fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	60ba      	str	r2, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ffde 	bl	80033b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3301      	adds	r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	dbf1      	blt.n	80033e6 <_write+0x12>
  }
  return len;
 8003402:	687b      	ldr	r3, [r7, #4]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a07      	ldr	r2, [pc, #28]	@ (8003434 <HAL_UART_RxCpltCallback+0x28>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d106      	bne.n	800342a <HAL_UART_RxCpltCallback+0x1e>
    {
        process_user_input();
 800341c:	f000 f84a 	bl	80034b4 <process_user_input>
        HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer)); // Restart reception
 8003420:	2214      	movs	r2, #20
 8003422:	4905      	ldr	r1, [pc, #20]	@ (8003438 <HAL_UART_RxCpltCallback+0x2c>)
 8003424:	4803      	ldr	r0, [pc, #12]	@ (8003434 <HAL_UART_RxCpltCallback+0x28>)
 8003426:	f004 fe98 	bl	800815a <HAL_UART_Receive_IT>
    }
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200025d4 	.word	0x200025d4
 8003438:	200002a4 	.word	0x200002a4

0800343c <calculate_crc>:

uint16_t calculate_crc(const uint8_t *data, size_t length)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8003446:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800344a:	82fb      	strh	r3, [r7, #22]
    for (size_t i = 0; i < length; i++) {
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e022      	b.n	8003498 <calculate_crc+0x5c>
        crc ^= data[i];
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	8afb      	ldrh	r3, [r7, #22]
 800345e:	4053      	eors	r3, r2
 8003460:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e011      	b.n	800348c <calculate_crc+0x50>
            if (crc & 0x0001) {
 8003468:	8afb      	ldrh	r3, [r7, #22]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d006      	beq.n	8003480 <calculate_crc+0x44>
                crc = (crc >> 1) ^ 0xA001;
 8003472:	8afb      	ldrh	r3, [r7, #22]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <calculate_crc+0x74>)
 800347a:	4053      	eors	r3, r2
 800347c:	82fb      	strh	r3, [r7, #22]
 800347e:	e002      	b.n	8003486 <calculate_crc+0x4a>
            } else {
                crc >>= 1;
 8003480:	8afb      	ldrh	r3, [r7, #22]
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	3301      	adds	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b07      	cmp	r3, #7
 8003490:	d9ea      	bls.n	8003468 <calculate_crc+0x2c>
    for (size_t i = 0; i < length; i++) {
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	3301      	adds	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	429a      	cmp	r2, r3
 800349e:	d3d8      	bcc.n	8003452 <calculate_crc+0x16>
            }
        }
    }
    return crc;
 80034a0:	8afb      	ldrh	r3, [r7, #22]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	ffffa001 	.word	0xffffa001

080034b4 <process_user_input>:

void process_user_input(void)
{
 80034b4:	b5b0      	push	{r4, r5, r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af02      	add	r7, sp, #8
    char input[20];
    memcpy(input, rx_buffer, sizeof(rx_buffer));
 80034ba:	4b21      	ldr	r3, [pc, #132]	@ (8003540 <process_user_input+0x8c>)
 80034bc:	463c      	mov	r4, r7
 80034be:	461d      	mov	r5, r3
 80034c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	6023      	str	r3, [r4, #0]
    float new_temp = atof(input);
 80034c8:	463b      	mov	r3, r7
 80034ca:	4618      	mov	r0, r3
 80034cc:	f009 f8a5 	bl	800c61a <atof>
 80034d0:	ec53 2b10 	vmov	r2, r3, d0
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7fd fba6 	bl	8000c28 <__aeabi_d2f>
 80034dc:	4603      	mov	r3, r0
 80034de:	617b      	str	r3, [r7, #20]

    if (new_temp >= MIN_TEMP && new_temp <= MAX_TEMP) {
 80034e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80034e4:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 80034e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	db16      	blt.n	8003520 <process_user_input+0x6c>
 80034f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003544 <process_user_input+0x90>
 80034fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	d80d      	bhi.n	8003520 <process_user_input+0x6c>
        target_temperature = new_temp;
 8003504:	4a10      	ldr	r2, [pc, #64]	@ (8003548 <process_user_input+0x94>)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6013      	str	r3, [r2, #0]
        printf("Target temperature set to: %.2f\r\n", target_temperature);
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <process_user_input+0x94>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f83a 	bl	8000588 <__aeabi_f2d>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	480c      	ldr	r0, [pc, #48]	@ (800354c <process_user_input+0x98>)
 800351a:	f00a fdc5 	bl	800e0a8 <iprintf>
 800351e:	e00b      	b.n	8003538 <process_user_input+0x84>
    } else {
        printf("Invalid temperature! Please enter a value between %.1f and %.1f\r\n", MIN_TEMP, MAX_TEMP);
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <process_user_input+0x9c>)
 8003526:	e9cd 2300 	strd	r2, r3, [sp]
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	4b09      	ldr	r3, [pc, #36]	@ (8003554 <process_user_input+0xa0>)
 8003530:	4809      	ldr	r0, [pc, #36]	@ (8003558 <process_user_input+0xa4>)
 8003532:	f00a fdb9 	bl	800e0a8 <iprintf>
    }
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bdb0      	pop	{r4, r5, r7, pc}
 8003540:	200002a4 	.word	0x200002a4
 8003544:	42120000 	.word	0x42120000
 8003548:	20000078 	.word	0x20000078
 800354c:	08010e9c 	.word	0x08010e9c
 8003550:	40424000 	.word	0x40424000
 8003554:	40360000 	.word	0x40360000
 8003558:	08010ec0 	.word	0x08010ec0

0800355c <format_time>:

void format_time(uint32_t ticks, char *time_buffer, size_t buffer_size)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08a      	sub	sp, #40	@ 0x28
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
    uint32_t total_seconds = ticks / 1000;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a19      	ldr	r2, [pc, #100]	@ (80035d0 <format_time+0x74>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	61fb      	str	r3, [r7, #28]
    uint32_t hours = total_seconds / 3600;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4a17      	ldr	r2, [pc, #92]	@ (80035d4 <format_time+0x78>)
 8003578:	fba2 2303 	umull	r2, r3, r2, r3
 800357c:	0adb      	lsrs	r3, r3, #11
 800357e:	61bb      	str	r3, [r7, #24]
    uint32_t minutes = (total_seconds % 3600) / 60;
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <format_time+0x78>)
 8003584:	fba3 1302 	umull	r1, r3, r3, r2
 8003588:	0adb      	lsrs	r3, r3, #11
 800358a:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	4a10      	ldr	r2, [pc, #64]	@ (80035d8 <format_time+0x7c>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	617b      	str	r3, [r7, #20]
    uint32_t seconds = total_seconds % 60;
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <format_time+0x7c>)
 80035a2:	fba3 1302 	umull	r1, r3, r3, r2
 80035a6:	0959      	lsrs	r1, r3, #5
 80035a8:	460b      	mov	r3, r1
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a5b      	subs	r3, r3, r1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	613b      	str	r3, [r7, #16]

    snprintf(time_buffer, buffer_size, "%02lu:%02lu:%02lu", hours, minutes, seconds);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4a07      	ldr	r2, [pc, #28]	@ (80035dc <format_time+0x80>)
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68b8      	ldr	r0, [r7, #8]
 80035c4:	f00a fd82 	bl	800e0cc <sniprintf>
}
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	10624dd3 	.word	0x10624dd3
 80035d4:	91a2b3c5 	.word	0x91a2b3c5
 80035d8:	88888889 	.word	0x88888889
 80035dc:	08010f04 	.word	0x08010f04

080035e0 <send_temperature_data_with_time>:

void send_temperature_data_with_time()
{
 80035e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035e4:	b08a      	sub	sp, #40	@ 0x28
 80035e6:	af06      	add	r7, sp, #24
    if (HAL_GetTick() - last_temp_print_time >= 1000) {
 80035e8:	f001 f82c 	bl	8004644 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <send_temperature_data_with_time+0xbc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035f8:	d34a      	bcc.n	8003690 <send_temperature_data_with_time+0xb0>
        char time_buffer[10];
        format_time(HAL_GetTick(), time_buffer, sizeof(time_buffer)); // Get formatted time string
 80035fa:	f001 f823 	bl	8004644 <HAL_GetTick>
 80035fe:	463b      	mov	r3, r7
 8003600:	220a      	movs	r2, #10
 8003602:	4619      	mov	r1, r3
 8003604:	f7ff ffaa 	bl	800355c <format_time>

        int msg_len = snprintf((char *)temp_msg_buffer, sizeof(temp_msg_buffer),
 8003608:	4b25      	ldr	r3, [pc, #148]	@ (80036a0 <send_temperature_data_with_time+0xc0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ffbb 	bl	8000588 <__aeabi_f2d>
 8003612:	4604      	mov	r4, r0
 8003614:	460d      	mov	r5, r1
 8003616:	4b23      	ldr	r3, [pc, #140]	@ (80036a4 <send_temperature_data_with_time+0xc4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ffb4 	bl	8000588 <__aeabi_f2d>
 8003620:	4680      	mov	r8, r0
 8003622:	4689      	mov	r9, r1
                               "{\"id\":1, \"time\":\"%s\", \"target_temp\":%.2f, \"temp\":%.2f, \"pid_output\":%.2f",
                               time_buffer, target_temperature, current_temperature, pid_controller.output);
 8003624:	4b20      	ldr	r3, [pc, #128]	@ (80036a8 <send_temperature_data_with_time+0xc8>)
 8003626:	699b      	ldr	r3, [r3, #24]
        int msg_len = snprintf((char *)temp_msg_buffer, sizeof(temp_msg_buffer),
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc ffad 	bl	8000588 <__aeabi_f2d>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4639      	mov	r1, r7
 8003634:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003638:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800363c:	e9cd 4500 	strd	r4, r5, [sp]
 8003640:	460b      	mov	r3, r1
 8003642:	4a1a      	ldr	r2, [pc, #104]	@ (80036ac <send_temperature_data_with_time+0xcc>)
 8003644:	2164      	movs	r1, #100	@ 0x64
 8003646:	481a      	ldr	r0, [pc, #104]	@ (80036b0 <send_temperature_data_with_time+0xd0>)
 8003648:	f00a fd40 	bl	800e0cc <sniprintf>
 800364c:	60f8      	str	r0, [r7, #12]

        uint16_t crc = calculate_crc(temp_msg_buffer, msg_len);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4619      	mov	r1, r3
 8003652:	4817      	ldr	r0, [pc, #92]	@ (80036b0 <send_temperature_data_with_time+0xd0>)
 8003654:	f7ff fef2 	bl	800343c <calculate_crc>
 8003658:	4603      	mov	r3, r0
 800365a:	817b      	strh	r3, [r7, #10]
        snprintf((char *)temp_msg_buffer + msg_len, sizeof(temp_msg_buffer) - msg_len, ", \"crc\":%04X}\r\n", crc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a14      	ldr	r2, [pc, #80]	@ (80036b0 <send_temperature_data_with_time+0xd0>)
 8003660:	1898      	adds	r0, r3, r2
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 8003668:	897b      	ldrh	r3, [r7, #10]
 800366a:	4a12      	ldr	r2, [pc, #72]	@ (80036b4 <send_temperature_data_with_time+0xd4>)
 800366c:	f00a fd2e 	bl	800e0cc <sniprintf>

        HAL_UART_Transmit(&huart3, temp_msg_buffer, strlen((char *)temp_msg_buffer), HAL_MAX_DELAY);
 8003670:	480f      	ldr	r0, [pc, #60]	@ (80036b0 <send_temperature_data_with_time+0xd0>)
 8003672:	f7fc fe1d 	bl	80002b0 <strlen>
 8003676:	4603      	mov	r3, r0
 8003678:	b29a      	uxth	r2, r3
 800367a:	f04f 33ff 	mov.w	r3, #4294967295
 800367e:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <send_temperature_data_with_time+0xd0>)
 8003680:	480d      	ldr	r0, [pc, #52]	@ (80036b8 <send_temperature_data_with_time+0xd8>)
 8003682:	f004 fce1 	bl	8008048 <HAL_UART_Transmit>
        last_temp_print_time = HAL_GetTick();
 8003686:	f000 ffdd 	bl	8004644 <HAL_GetTick>
 800368a:	4603      	mov	r3, r0
 800368c:	4a03      	ldr	r2, [pc, #12]	@ (800369c <send_temperature_data_with_time+0xbc>)
 800368e:	6013      	str	r3, [r2, #0]
    }
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800369a:	bf00      	nop
 800369c:	20000320 	.word	0x20000320
 80036a0:	20000078 	.word	0x20000078
 80036a4:	200002b8 	.word	0x200002b8
 80036a8:	20002464 	.word	0x20002464
 80036ac:	08010f18 	.word	0x08010f18
 80036b0:	200002bc 	.word	0x200002bc
 80036b4:	08010f64 	.word	0x08010f64
 80036b8:	200025d4 	.word	0x200025d4
 80036bc:	00000000 	.word	0x00000000

080036c0 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 80036c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036c4:	b095      	sub	sp, #84	@ 0x54
 80036c6:	af06      	add	r7, sp, #24
    HAL_Init();
 80036c8:	f000 ff6b 	bl	80045a2 <HAL_Init>
    SystemClock_Config();
 80036cc:	f000 f9fc 	bl	8003ac8 <SystemClock_Config>
    MX_GPIO_Init();
 80036d0:	f7ff fcd2 	bl	8003078 <MX_GPIO_Init>
    MX_USART3_UART_Init();
 80036d4:	f000 feaa 	bl	800442c <MX_USART3_UART_Init>
    MX_FATFS_Init();
 80036d8:	f005 ff52 	bl	8009580 <MX_FATFS_Init>
    MX_SPI4_Init();
 80036dc:	f000 fb56 	bl	8003d8c <MX_SPI4_Init>
    MX_TIM2_Init();
 80036e0:	f000 fcf0 	bl	80040c4 <MX_TIM2_Init>
    MX_TIM7_Init();
 80036e4:	f000 fdbe 	bl	8004264 <MX_TIM7_Init>
    MX_TIM3_Init();
 80036e8:	f000 fd62 	bl	80041b0 <MX_TIM3_Init>

    BMP2_Init(&bmp2dev);
 80036ec:	4861      	ldr	r0, [pc, #388]	@ (8003874 <main+0x1b4>)
 80036ee:	f7fe fc59 	bl	8001fa4 <BMP2_Init>
    HEATER_PWM_Init(&hheater);
 80036f2:	4861      	ldr	r0, [pc, #388]	@ (8003878 <main+0x1b8>)
 80036f4:	f7fe fe04 	bl	8002300 <HEATER_PWM_Init>
    FAN_PWM_Init(&hfan);
 80036f8:	4860      	ldr	r0, [pc, #384]	@ (800387c <main+0x1bc>)
 80036fa:	f7fe fd83 	bl	8002204 <FAN_PWM_Init>
    HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80036fe:	2214      	movs	r2, #20
 8003700:	495f      	ldr	r1, [pc, #380]	@ (8003880 <main+0x1c0>)
 8003702:	4860      	ldr	r0, [pc, #384]	@ (8003884 <main+0x1c4>)
 8003704:	f004 fd29 	bl	800815a <HAL_UART_Receive_IT>
    HAL_TIM_Base_Start(&htim7);
 8003708:	485f      	ldr	r0, [pc, #380]	@ (8003888 <main+0x1c8>)
 800370a:	f003 fc57 	bl	8006fbc <HAL_TIM_Base_Start>
    PID_Init();
 800370e:	f000 fa4f 	bl	8003bb0 <PID_Init>
    pid_controller.target_temperature = target_temperature;
 8003712:	4b5e      	ldr	r3, [pc, #376]	@ (800388c <main+0x1cc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a5e      	ldr	r2, [pc, #376]	@ (8003890 <main+0x1d0>)
 8003718:	6013      	str	r3, [r2, #0]

    LCD_Init();
 800371a:	f7fe fec5 	bl	80024a8 <LCD_Init>
    LCD_Clear();
 800371e:	f7fe ff89 	bl	8002634 <LCD_Clear>
    LCD_CreateCustomChar(degree_symbol, 0);
 8003722:	2100      	movs	r1, #0
 8003724:	485b      	ldr	r0, [pc, #364]	@ (8003894 <main+0x1d4>)
 8003726:	f7fe ffbb 	bl	80026a0 <LCD_CreateCustomChar>

    HAL_Delay(500);
 800372a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800372e:	f000 ff95 	bl	800465c <HAL_Delay>

      fres = f_mount(&fs, "", 0); //mounting SD
 8003732:	2200      	movs	r2, #0
 8003734:	4958      	ldr	r1, [pc, #352]	@ (8003898 <main+0x1d8>)
 8003736:	4859      	ldr	r0, [pc, #356]	@ (800389c <main+0x1dc>)
 8003738:	f008 fa2e 	bl	800bb98 <f_mount>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	4b57      	ldr	r3, [pc, #348]	@ (80038a0 <main+0x1e0>)
 8003742:	701a      	strb	r2, [r3, #0]
      fres = f_open(&fil, "temp_log.csv", FA_CREATE_ALWAYS | FA_WRITE); // creating file
 8003744:	220a      	movs	r2, #10
 8003746:	4957      	ldr	r1, [pc, #348]	@ (80038a4 <main+0x1e4>)
 8003748:	4857      	ldr	r0, [pc, #348]	@ (80038a8 <main+0x1e8>)
 800374a:	f008 fa6b 	bl	800bc24 <f_open>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	4b53      	ldr	r3, [pc, #332]	@ (80038a0 <main+0x1e0>)
 8003754:	701a      	strb	r2, [r3, #0]
      sprintf(buffer, "#,Time Duration[sek],Targer Temp[C],Current Temp[C]\n"); //creating heders
 8003756:	4955      	ldr	r1, [pc, #340]	@ (80038ac <main+0x1ec>)
 8003758:	4855      	ldr	r0, [pc, #340]	@ (80038b0 <main+0x1f0>)
 800375a:	f00a fceb 	bl	800e134 <siprintf>
      f_puts(buffer, &fil); //printing
 800375e:	4952      	ldr	r1, [pc, #328]	@ (80038a8 <main+0x1e8>)
 8003760:	4853      	ldr	r0, [pc, #332]	@ (80038b0 <main+0x1f0>)
 8003762:	f008 feda 	bl	800c51a <f_puts>

    char line1[17];
     char line2[17];

    while (1) {
        if (__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE)) {
 8003766:	4b48      	ldr	r3, [pc, #288]	@ (8003888 <main+0x1c8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 80d9 	bne.w	8003928 <main+0x268>
            __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8003776:	4b44      	ldr	r3, [pc, #272]	@ (8003888 <main+0x1c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0201 	mvn.w	r2, #1
 800377e:	611a      	str	r2, [r3, #16]

            double temp;
            BMP2_ReadData(&bmp2dev, NULL, &temp);
 8003780:	463b      	mov	r3, r7
 8003782:	461a      	mov	r2, r3
 8003784:	2100      	movs	r1, #0
 8003786:	483b      	ldr	r0, [pc, #236]	@ (8003874 <main+0x1b4>)
 8003788:	f7fe fcd8 	bl	800213c <BMP2_ReadData>
            current_temperature = (float)temp;
 800378c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	f7fd fa48 	bl	8000c28 <__aeabi_d2f>
 8003798:	4603      	mov	r3, r0
 800379a:	4a46      	ldr	r2, [pc, #280]	@ (80038b4 <main+0x1f4>)
 800379c:	6013      	str	r3, [r2, #0]

            __io_putchar('H');
 800379e:	2048      	movs	r0, #72	@ 0x48
 80037a0:	f7ff fe06 	bl	80033b0 <__io_putchar>
            __io_putchar('e');
 80037a4:	2065      	movs	r0, #101	@ 0x65
 80037a6:	f7ff fe03 	bl	80033b0 <__io_putchar>
            __io_putchar('l');
 80037aa:	206c      	movs	r0, #108	@ 0x6c
 80037ac:	f7ff fe00 	bl	80033b0 <__io_putchar>
            __io_putchar('l');
 80037b0:	206c      	movs	r0, #108	@ 0x6c
 80037b2:	f7ff fdfd 	bl	80033b0 <__io_putchar>
            __io_putchar('o');
 80037b6:	206f      	movs	r0, #111	@ 0x6f
 80037b8:	f7ff fdfa 	bl	80033b0 <__io_putchar>
            __io_putchar('\r');
 80037bc:	200d      	movs	r0, #13
 80037be:	f7ff fdf7 	bl	80033b0 <__io_putchar>
            __io_putchar('\n');
 80037c2:	200a      	movs	r0, #10
 80037c4:	f7ff fdf4 	bl	80033b0 <__io_putchar>

            // Update target temperature for the single controller
            pid_controller.target_temperature = target_temperature;
 80037c8:	4b30      	ldr	r3, [pc, #192]	@ (800388c <main+0x1cc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a30      	ldr	r2, [pc, #192]	@ (8003890 <main+0x1d0>)
 80037ce:	6013      	str	r3, [r2, #0]

            // Feedforward
            float feedforward = 0.5f * (target_temperature - MIN_TEMP);
 80037d0:	4b2e      	ldr	r3, [pc, #184]	@ (800388c <main+0x1cc>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 80037da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80037e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037e6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

            // PID Control
            PID_Update(current_temperature);
 80037ea:	4b32      	ldr	r3, [pc, #200]	@ (80038b4 <main+0x1f4>)
 80037ec:	edd3 7a00 	vldr	s15, [r3]
 80037f0:	eeb0 0a67 	vmov.f32	s0, s15
 80037f4:	f000 fa06 	bl	8003c04 <PID_Update>
            pid_controller.output = PID_Calculate();
 80037f8:	f000 fa1e 	bl	8003c38 <PID_Calculate>
 80037fc:	eef0 7a40 	vmov.f32	s15, s0
 8003800:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <main+0x1d0>)
 8003802:	edc3 7a06 	vstr	s15, [r3, #24]

            if (current_temperature < target_temperature) {
 8003806:	4b2b      	ldr	r3, [pc, #172]	@ (80038b4 <main+0x1f4>)
 8003808:	ed93 7a00 	vldr	s14, [r3]
 800380c:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <main+0x1cc>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381a:	d551      	bpl.n	80038c0 <main+0x200>
                // Heating
                pid_controller.output_saturated = fminf(fmaxf(pid_controller.output + feedforward, 0.0f), 100.0f);
 800381c:	4b1c      	ldr	r3, [pc, #112]	@ (8003890 <main+0x1d0>)
 800381e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003822:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382a:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80038b8 <main+0x1f8>
 800382e:	eeb0 0a67 	vmov.f32	s0, s15
 8003832:	f00d fab5 	bl	8010da0 <fmaxf>
 8003836:	eef0 7a40 	vmov.f32	s15, s0
 800383a:	eddf 0a20 	vldr	s1, [pc, #128]	@ 80038bc <main+0x1fc>
 800383e:	eeb0 0a67 	vmov.f32	s0, s15
 8003842:	f00d faca 	bl	8010dda <fminf>
 8003846:	eef0 7a40 	vmov.f32	s15, s0
 800384a:	4b11      	ldr	r3, [pc, #68]	@ (8003890 <main+0x1d0>)
 800384c:	edc3 7a07 	vstr	s15, [r3, #28]
                HEATER_PWM_WriteDuty(&hheater, 5 * pid_controller.output_saturated);
 8003850:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <main+0x1d0>)
 8003852:	edd3 7a07 	vldr	s15, [r3, #28]
 8003856:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800385a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385e:	eeb0 0a67 	vmov.f32	s0, s15
 8003862:	4805      	ldr	r0, [pc, #20]	@ (8003878 <main+0x1b8>)
 8003864:	f7fe fd6c 	bl	8002340 <HEATER_PWM_WriteDuty>
                FAN_PWM_WriteDuty(&hfan, 0.0f); // Fan off during heating
 8003868:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80038b8 <main+0x1f8>
 800386c:	4803      	ldr	r0, [pc, #12]	@ (800387c <main+0x1bc>)
 800386e:	f7fe fce9 	bl	8002244 <FAN_PWM_WriteDuty>
 8003872:	e057      	b.n	8003924 <main+0x264>
 8003874:	20000018 	.word	0x20000018
 8003878:	20000064 	.word	0x20000064
 800387c:	20000054 	.word	0x20000054
 8003880:	200002a4 	.word	0x200002a4
 8003884:	200025d4 	.word	0x200025d4
 8003888:	20002588 	.word	0x20002588
 800388c:	20000078 	.word	0x20000078
 8003890:	20002464 	.word	0x20002464
 8003894:	2000007c 	.word	0x2000007c
 8003898:	08010f74 	.word	0x08010f74
 800389c:	20000388 	.word	0x20000388
 80038a0:	200023f0 	.word	0x200023f0
 80038a4:	08010f78 	.word	0x08010f78
 80038a8:	200013c0 	.word	0x200013c0
 80038ac:	08010f88 	.word	0x08010f88
 80038b0:	200023f4 	.word	0x200023f4
 80038b4:	200002b8 	.word	0x200002b8
 80038b8:	00000000 	.word	0x00000000
 80038bc:	42c80000 	.word	0x42c80000
            } else {
                // Cooling
                pid_controller.output_saturated = fminf(fmaxf(abs(pid_controller.output), 0.0f), 100.0f);
 80038c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003a78 <main+0x3b8>)
 80038c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80038c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038ca:	ee17 3a90 	vmov	r3, s15
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bfb8      	it	lt
 80038d2:	425b      	neglt	r3, r3
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038dc:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8003a7c <main+0x3bc>
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	f00d fa5c 	bl	8010da0 <fmaxf>
 80038e8:	eef0 7a40 	vmov.f32	s15, s0
 80038ec:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8003a80 <main+0x3c0>
 80038f0:	eeb0 0a67 	vmov.f32	s0, s15
 80038f4:	f00d fa71 	bl	8010dda <fminf>
 80038f8:	eef0 7a40 	vmov.f32	s15, s0
 80038fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003a78 <main+0x3b8>)
 80038fe:	edc3 7a07 	vstr	s15, [r3, #28]
                FAN_PWM_WriteDuty(&hfan, 3 * pid_controller.output_saturated);
 8003902:	4b5d      	ldr	r3, [pc, #372]	@ (8003a78 <main+0x3b8>)
 8003904:	edd3 7a07 	vldr	s15, [r3, #28]
 8003908:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800390c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003910:	eeb0 0a67 	vmov.f32	s0, s15
 8003914:	485b      	ldr	r0, [pc, #364]	@ (8003a84 <main+0x3c4>)
 8003916:	f7fe fc95 	bl	8002244 <FAN_PWM_WriteDuty>
                HEATER_PWM_WriteDuty(&hheater, 0.0f); // Heater off during cooling
 800391a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8003a7c <main+0x3bc>
 800391e:	485a      	ldr	r0, [pc, #360]	@ (8003a88 <main+0x3c8>)
 8003920:	f7fe fd0e 	bl	8002340 <HEATER_PWM_WriteDuty>
            }

            // Send Temperature Data with CRC
            send_temperature_data_with_time();
 8003924:	f7ff fe5c 	bl	80035e0 <send_temperature_data_with_time>
        }

      snprintf(line1, sizeof(line1), "TarTemp: %.1f ", target_temperature);
 8003928:	4b58      	ldr	r3, [pc, #352]	@ (8003a8c <main+0x3cc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fe2b 	bl	8000588 <__aeabi_f2d>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	f107 0020 	add.w	r0, r7, #32
 800393a:	e9cd 2300 	strd	r2, r3, [sp]
 800393e:	4a54      	ldr	r2, [pc, #336]	@ (8003a90 <main+0x3d0>)
 8003940:	2111      	movs	r1, #17
 8003942:	f00a fbc3 	bl	800e0cc <sniprintf>
      snprintf(line2, sizeof(line2), "CurTemp: %.1f ", current_temperature);
 8003946:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <main+0x3d4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fe1c 	bl	8000588 <__aeabi_f2d>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	f107 000c 	add.w	r0, r7, #12
 8003958:	e9cd 2300 	strd	r2, r3, [sp]
 800395c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a98 <main+0x3d8>)
 800395e:	2111      	movs	r1, #17
 8003960:	f00a fbb4 	bl	800e0cc <sniprintf>
      LCD_SetCursor(0, 0);
 8003964:	2100      	movs	r1, #0
 8003966:	2000      	movs	r0, #0
 8003968:	f7fe fe6b 	bl	8002642 <LCD_SetCursor>
      LCD_Print(line1);
 800396c:	f107 0320 	add.w	r3, r7, #32
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fe80 	bl	8002676 <LCD_Print>
      LCD_WriteData(0);
 8003976:	2000      	movs	r0, #0
 8003978:	f7fe fddc 	bl	8002534 <LCD_WriteData>
      LCD_Print("C");
 800397c:	4847      	ldr	r0, [pc, #284]	@ (8003a9c <main+0x3dc>)
 800397e:	f7fe fe7a 	bl	8002676 <LCD_Print>
      LCD_SetCursor(1, 0);
 8003982:	2100      	movs	r1, #0
 8003984:	2001      	movs	r0, #1
 8003986:	f7fe fe5c 	bl	8002642 <LCD_SetCursor>
      LCD_Print(line2);
 800398a:	f107 030c 	add.w	r3, r7, #12
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fe71 	bl	8002676 <LCD_Print>
      LCD_WriteData(0);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fe fdcd 	bl	8002534 <LCD_WriteData>
      LCD_Print("C");
 800399a:	4840      	ldr	r0, [pc, #256]	@ (8003a9c <main+0x3dc>)
 800399c:	f7fe fe6b 	bl	8002676 <LCD_Print>

      sprintf(buffer, "%ld,%.1f,%.1f,%.1f\n", Numbah, dur, target_temperature, current_temperature);
 80039a0:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa0 <main+0x3e0>)
 80039a2:	681e      	ldr	r6, [r3, #0]
 80039a4:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <main+0x3e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fded 	bl	8000588 <__aeabi_f2d>
 80039ae:	4604      	mov	r4, r0
 80039b0:	460d      	mov	r5, r1
 80039b2:	4b36      	ldr	r3, [pc, #216]	@ (8003a8c <main+0x3cc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fde6 	bl	8000588 <__aeabi_f2d>
 80039bc:	4680      	mov	r8, r0
 80039be:	4689      	mov	r9, r1
 80039c0:	4b34      	ldr	r3, [pc, #208]	@ (8003a94 <main+0x3d4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fddf 	bl	8000588 <__aeabi_f2d>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80039d6:	e9cd 4500 	strd	r4, r5, [sp]
 80039da:	4632      	mov	r2, r6
 80039dc:	4932      	ldr	r1, [pc, #200]	@ (8003aa8 <main+0x3e8>)
 80039de:	4833      	ldr	r0, [pc, #204]	@ (8003aac <main+0x3ec>)
 80039e0:	f00a fba8 	bl	800e134 <siprintf>
    f_puts(buffer, &fil);
 80039e4:	4932      	ldr	r1, [pc, #200]	@ (8003ab0 <main+0x3f0>)
 80039e6:	4831      	ldr	r0, [pc, #196]	@ (8003aac <main+0x3ec>)
 80039e8:	f008 fd97 	bl	800c51a <f_puts>

    Numbah += 1;
 80039ec:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa0 <main+0x3e0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa0 <main+0x3e0>)
 80039f4:	6013      	str	r3, [r2, #0]
    dur += 0.1;
 80039f6:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa4 <main+0x3e4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fdc4 	bl	8000588 <__aeabi_f2d>
 8003a00:	a31b      	add	r3, pc, #108	@ (adr r3, 8003a70 <main+0x3b0>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fc61 	bl	80002cc <__adddf3>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fd f909 	bl	8000c28 <__aeabi_d2f>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <main+0x3e4>)
 8003a1a:	6013      	str	r3, [r2, #0]

    if(USER_Btn_RisingEdgeDetected) //saving and dismounting card
 8003a1c:	4b25      	ldr	r3, [pc, #148]	@ (8003ab4 <main+0x3f4>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01d      	beq.n	8003a62 <main+0x3a2>
      {
      HAL_Delay(10);
 8003a26:	200a      	movs	r0, #10
 8003a28:	f000 fe18 	bl	800465c <HAL_Delay>
      USER_Btn_RisingEdgeDetected = 0;
 8003a2c:	4b21      	ldr	r3, [pc, #132]	@ (8003ab4 <main+0x3f4>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
      if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) //button pressed
 8003a32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003a36:	4820      	ldr	r0, [pc, #128]	@ (8003ab8 <main+0x3f8>)
 8003a38:	f001 f984 	bl	8004d44 <HAL_GPIO_ReadPin>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10f      	bne.n	8003a62 <main+0x3a2>
      {
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //led1 on
 8003a42:	2101      	movs	r1, #1
 8003a44:	481d      	ldr	r0, [pc, #116]	@ (8003abc <main+0x3fc>)
 8003a46:	f001 f9ae 	bl	8004da6 <HAL_GPIO_TogglePin>
        fres = f_close(&fil); //file closed
 8003a4a:	4819      	ldr	r0, [pc, #100]	@ (8003ab0 <main+0x3f0>)
 8003a4c:	f008 fcc4 	bl	800c3d8 <f_close>
 8003a50:	4603      	mov	r3, r0
 8003a52:	461a      	mov	r2, r3
 8003a54:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <main+0x400>)
 8003a56:	701a      	strb	r2, [r3, #0]
        f_mount(NULL, "", 1); //card dismounted
 8003a58:	2201      	movs	r2, #1
 8003a5a:	491a      	ldr	r1, [pc, #104]	@ (8003ac4 <main+0x404>)
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f008 f89b 	bl	800bb98 <f_mount>
      }
      }

        HAL_Delay(100);
 8003a62:	2064      	movs	r0, #100	@ 0x64
 8003a64:	f000 fdfa 	bl	800465c <HAL_Delay>
        if (__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE)) {
 8003a68:	e67d      	b.n	8003766 <main+0xa6>
 8003a6a:	bf00      	nop
 8003a6c:	f3af 8000 	nop.w
 8003a70:	9999999a 	.word	0x9999999a
 8003a74:	3fb99999 	.word	0x3fb99999
 8003a78:	20002464 	.word	0x20002464
 8003a7c:	00000000 	.word	0x00000000
 8003a80:	42c80000 	.word	0x42c80000
 8003a84:	20000054 	.word	0x20000054
 8003a88:	20000064 	.word	0x20000064
 8003a8c:	20000078 	.word	0x20000078
 8003a90:	08010fc0 	.word	0x08010fc0
 8003a94:	200002b8 	.word	0x200002b8
 8003a98:	08010fd0 	.word	0x08010fd0
 8003a9c:	08010fe0 	.word	0x08010fe0
 8003aa0:	20002458 	.word	0x20002458
 8003aa4:	2000245c 	.word	0x2000245c
 8003aa8:	08010fe4 	.word	0x08010fe4
 8003aac:	200023f4 	.word	0x200023f4
 8003ab0:	200013c0 	.word	0x200013c0
 8003ab4:	20002460 	.word	0x20002460
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020400 	.word	0x40020400
 8003ac0:	200023f0 	.word	0x200023f0
 8003ac4:	08010f74 	.word	0x08010f74

08003ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b094      	sub	sp, #80	@ 0x50
 8003acc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ace:	f107 0320 	add.w	r3, r7, #32
 8003ad2:	2230      	movs	r2, #48	@ 0x30
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f00a fb8f 	bl	800e1fa <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	605a      	str	r2, [r3, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	611a      	str	r2, [r3, #16]

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8003aec:	f001 f976 	bl	8004ddc <HAL_PWR_EnableBkUpAccess>

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8003af0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b9c <SystemClock_Config+0xd4>)
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	4a29      	ldr	r2, [pc, #164]	@ (8003b9c <SystemClock_Config+0xd4>)
 8003af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afc:	4b27      	ldr	r3, [pc, #156]	@ (8003b9c <SystemClock_Config+0xd4>)
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b08:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <SystemClock_Config+0xd8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ba0 <SystemClock_Config+0xd8>)
 8003b0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <SystemClock_Config+0xd8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003b24:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 8003b34:	2304      	movs	r3, #4
 8003b36:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 216;
 8003b38:	23d8      	movs	r3, #216	@ 0xd8
 8003b3a:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8003b40:	2303      	movs	r3, #3
 8003b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b44:	f107 0320 	add.w	r3, r7, #32
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 f9a7 	bl	8004e9c <HAL_RCC_OscConfig>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <SystemClock_Config+0x90>
    {
        Error_Handler();
 8003b54:	f000 f826 	bl	8003ba4 <Error_Handler>
    }

    /** Activate the Over-Drive mode
    */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003b58:	f001 f950 	bl	8004dfc <HAL_PWREx_EnableOverDrive>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <SystemClock_Config+0x9e>
    {
        Error_Handler();
 8003b62:	f000 f81f 	bl	8003ba4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b66:	230f      	movs	r3, #15
 8003b68:	60fb      	str	r3, [r7, #12]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b76:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003b78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003b7c:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003b7e:	f107 030c 	add.w	r3, r7, #12
 8003b82:	2107      	movs	r1, #7
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fc2d 	bl	80053e4 <HAL_RCC_ClockConfig>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <SystemClock_Config+0xcc>
    {
        Error_Handler();
 8003b90:	f000 f808 	bl	8003ba4 <Error_Handler>
    }
}
 8003b94:	bf00      	nop
 8003b96:	3750      	adds	r7, #80	@ 0x50
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000

08003ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba8:	b672      	cpsid	i
}
 8003baa:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8003bac:	bf00      	nop
 8003bae:	e7fd      	b.n	8003bac <Error_Handler+0x8>

08003bb0 <PID_Init>:
PID_Control_t pid_controller;

/**
 * @brief Initializes the PID controller.
 */
void PID_Init(void) {
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
    pid_controller.target_temperature = 0.0f;
 8003bb4:	4b12      	ldr	r3, [pc, #72]	@ (8003c00 <PID_Init+0x50>)
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
    pid_controller.current_temperature = 0.0f;
 8003bbc:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <PID_Init+0x50>)
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]
    pid_controller.error = 0.0f;
 8003bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <PID_Init+0x50>)
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
    pid_controller.integral = 0.0f;
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <PID_Init+0x50>)
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	60da      	str	r2, [r3, #12]
    pid_controller.derivative = 0.0f;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <PID_Init+0x50>)
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
    pid_controller.previous_error = 0.0f;
 8003bdc:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <PID_Init+0x50>)
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	615a      	str	r2, [r3, #20]
    pid_controller.output = 0.0f;
 8003be4:	4b06      	ldr	r3, [pc, #24]	@ (8003c00 <PID_Init+0x50>)
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
    pid_controller.output_saturated = 0.0f;
 8003bec:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <PID_Init+0x50>)
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	61da      	str	r2, [r3, #28]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20002464 	.word	0x20002464

08003c04 <PID_Update>:

/**
 * @brief Updates the PID controller with the current temperature.
 * @param current_temperature The current measured temperature.
 */
void PID_Update(float current_temperature) {
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	ed87 0a01 	vstr	s0, [r7, #4]
    pid_controller.current_temperature = current_temperature;
 8003c0e:	4a09      	ldr	r2, [pc, #36]	@ (8003c34 <PID_Update+0x30>)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6053      	str	r3, [r2, #4]
    pid_controller.error = pid_controller.target_temperature - current_temperature;
 8003c14:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <PID_Update+0x30>)
 8003c16:	ed93 7a00 	vldr	s14, [r3]
 8003c1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c22:	4b04      	ldr	r3, [pc, #16]	@ (8003c34 <PID_Update+0x30>)
 8003c24:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20002464 	.word	0x20002464

08003c38 <PID_Calculate>:

/**
 * @brief Calculates the PID output.
 * @return The calculated PID output.
 */
float PID_Calculate(void) {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
    // Derivative Filter Parameters
    const float derivative_filter_constant = 0.9f;
 8003c3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003d78 <PID_Calculate+0x140>)
 8003c40:	607b      	str	r3, [r7, #4]
    static float previous_derivative = 0.0f;
    const float back_calculation_gain = 0.1f;
 8003c42:	4b4e      	ldr	r3, [pc, #312]	@ (8003d7c <PID_Calculate+0x144>)
 8003c44:	603b      	str	r3, [r7, #0]

    // Integral term with anti-windup
    pid_controller.integral += pid_controller.error;
 8003c46:	4b4e      	ldr	r3, [pc, #312]	@ (8003d80 <PID_Calculate+0x148>)
 8003c48:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003d80 <PID_Calculate+0x148>)
 8003c4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c56:	4b4a      	ldr	r3, [pc, #296]	@ (8003d80 <PID_Calculate+0x148>)
 8003c58:	edc3 7a03 	vstr	s15, [r3, #12]
    if (pid_controller.output_saturated != pid_controller.output) {
 8003c5c:	4b48      	ldr	r3, [pc, #288]	@ (8003d80 <PID_Calculate+0x148>)
 8003c5e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003c62:	4b47      	ldr	r3, [pc, #284]	@ (8003d80 <PID_Calculate+0x148>)
 8003c64:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c68:	eeb4 7a67 	vcmp.f32	s14, s15
 8003c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c70:	d013      	beq.n	8003c9a <PID_Calculate+0x62>
        pid_controller.integral -= back_calculation_gain * (pid_controller.output_saturated - pid_controller.output);
 8003c72:	4b43      	ldr	r3, [pc, #268]	@ (8003d80 <PID_Calculate+0x148>)
 8003c74:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c78:	4b41      	ldr	r3, [pc, #260]	@ (8003d80 <PID_Calculate+0x148>)
 8003c7a:	edd3 6a07 	vldr	s13, [r3, #28]
 8003c7e:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <PID_Calculate+0x148>)
 8003c80:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c88:	edd7 7a00 	vldr	s15, [r7]
 8003c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c94:	4b3a      	ldr	r3, [pc, #232]	@ (8003d80 <PID_Calculate+0x148>)
 8003c96:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    pid_controller.integral = fminf(fmaxf(pid_controller.integral, pid_params.integral_min), pid_params.integral_max);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <PID_Calculate+0x148>)
 8003c9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ca0:	4b38      	ldr	r3, [pc, #224]	@ (8003d84 <PID_Calculate+0x14c>)
 8003ca2:	ed93 7a04 	vldr	s14, [r3, #16]
 8003ca6:	eef0 0a47 	vmov.f32	s1, s14
 8003caa:	eeb0 0a67 	vmov.f32	s0, s15
 8003cae:	f00d f877 	bl	8010da0 <fmaxf>
 8003cb2:	eeb0 7a40 	vmov.f32	s14, s0
 8003cb6:	4b33      	ldr	r3, [pc, #204]	@ (8003d84 <PID_Calculate+0x14c>)
 8003cb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cbc:	eef0 0a67 	vmov.f32	s1, s15
 8003cc0:	eeb0 0a47 	vmov.f32	s0, s14
 8003cc4:	f00d f889 	bl	8010dda <fminf>
 8003cc8:	eef0 7a40 	vmov.f32	s15, s0
 8003ccc:	4b2c      	ldr	r3, [pc, #176]	@ (8003d80 <PID_Calculate+0x148>)
 8003cce:	edc3 7a03 	vstr	s15, [r3, #12]

    // Derivative term with filtering
    pid_controller.derivative = (pid_controller.error - pid_controller.previous_error);
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d80 <PID_Calculate+0x148>)
 8003cd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8003cd8:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <PID_Calculate+0x148>)
 8003cda:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce2:	4b27      	ldr	r3, [pc, #156]	@ (8003d80 <PID_Calculate+0x148>)
 8003ce4:	edc3 7a04 	vstr	s15, [r3, #16]
    pid_controller.derivative = derivative_filter_constant * previous_derivative + (1.0f - derivative_filter_constant) * pid_controller.derivative;
 8003ce8:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <PID_Calculate+0x150>)
 8003cea:	ed93 7a00 	vldr	s14, [r3]
 8003cee:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cfe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d02:	4b1f      	ldr	r3, [pc, #124]	@ (8003d80 <PID_Calculate+0x148>)
 8003d04:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d10:	4b1b      	ldr	r3, [pc, #108]	@ (8003d80 <PID_Calculate+0x148>)
 8003d12:	edc3 7a04 	vstr	s15, [r3, #16]

    // Calculate PID output
    pid_controller.output = (pid_params.kp * pid_controller.error) + (pid_params.ki * pid_controller.integral) + (pid_params.kd * pid_controller.derivative);
 8003d16:	4b1b      	ldr	r3, [pc, #108]	@ (8003d84 <PID_Calculate+0x14c>)
 8003d18:	ed93 7a00 	vldr	s14, [r3]
 8003d1c:	4b18      	ldr	r3, [pc, #96]	@ (8003d80 <PID_Calculate+0x148>)
 8003d1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d26:	4b17      	ldr	r3, [pc, #92]	@ (8003d84 <PID_Calculate+0x14c>)
 8003d28:	edd3 6a01 	vldr	s13, [r3, #4]
 8003d2c:	4b14      	ldr	r3, [pc, #80]	@ (8003d80 <PID_Calculate+0x148>)
 8003d2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d3a:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <PID_Calculate+0x14c>)
 8003d3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003d40:	4b0f      	ldr	r3, [pc, #60]	@ (8003d80 <PID_Calculate+0x148>)
 8003d42:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <PID_Calculate+0x148>)
 8003d50:	edc3 7a06 	vstr	s15, [r3, #24]

    // Update previous values
    pid_controller.previous_error = pid_controller.error;
 8003d54:	4b0a      	ldr	r3, [pc, #40]	@ (8003d80 <PID_Calculate+0x148>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a09      	ldr	r2, [pc, #36]	@ (8003d80 <PID_Calculate+0x148>)
 8003d5a:	6153      	str	r3, [r2, #20]
    previous_derivative = pid_controller.derivative;
 8003d5c:	4b08      	ldr	r3, [pc, #32]	@ (8003d80 <PID_Calculate+0x148>)
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <PID_Calculate+0x150>)
 8003d62:	6013      	str	r3, [r2, #0]

    return pid_controller.output;
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <PID_Calculate+0x148>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	ee07 3a90 	vmov	s15, r3
}
 8003d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	3f666666 	.word	0x3f666666
 8003d7c:	3dcccccd 	.word	0x3dcccccd
 8003d80:	20002464 	.word	0x20002464
 8003d84:	20000084 	.word	0x20000084
 8003d88:	20002484 	.word	0x20002484

08003d8c <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003d92:	4a1c      	ldr	r2, [pc, #112]	@ (8003e04 <MX_SPI4_Init+0x78>)
 8003d94:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003d96:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003d98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d9c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003d9e:	4b18      	ldr	r3, [pc, #96]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003da4:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003da6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003daa:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dae:	2202      	movs	r2, #2
 8003db0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003db2:	4b13      	ldr	r3, [pc, #76]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dbe:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003dd8:	4b09      	ldr	r3, [pc, #36]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dda:	2207      	movs	r2, #7
 8003ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003dde:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003de4:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003dea:	4805      	ldr	r0, [pc, #20]	@ (8003e00 <MX_SPI4_Init+0x74>)
 8003dec:	f002 f910 	bl	8006010 <HAL_SPI_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003df6:	f7ff fed5 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20002488 	.word	0x20002488
 8003e04:	40013400 	.word	0x40013400

08003e08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	@ 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a17      	ldr	r2, [pc, #92]	@ (8003e84 <HAL_SPI_MspInit+0x7c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d127      	bne.n	8003e7a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003e2a:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <HAL_SPI_MspInit+0x80>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	4a16      	ldr	r2, [pc, #88]	@ (8003e88 <HAL_SPI_MspInit+0x80>)
 8003e30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e36:	4b14      	ldr	r3, [pc, #80]	@ (8003e88 <HAL_SPI_MspInit+0x80>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e42:	4b11      	ldr	r3, [pc, #68]	@ (8003e88 <HAL_SPI_MspInit+0x80>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	4a10      	ldr	r2, [pc, #64]	@ (8003e88 <HAL_SPI_MspInit+0x80>)
 8003e48:	f043 0310 	orr.w	r3, r3, #16
 8003e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <HAL_SPI_MspInit+0x80>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SPI_SCK_Pin|BMP280_SPI_MISO_Pin|BMP280_SPI_MOSI_Pin;
 8003e5a:	2364      	movs	r3, #100	@ 0x64
 8003e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e66:	2303      	movs	r3, #3
 8003e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003e6a:	2305      	movs	r3, #5
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	4619      	mov	r1, r3
 8003e74:	4805      	ldr	r0, [pc, #20]	@ (8003e8c <HAL_SPI_MspInit+0x84>)
 8003e76:	f000 fdb9 	bl	80049ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	3728      	adds	r7, #40	@ 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40013400 	.word	0x40013400
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40021000 	.word	0x40021000

08003e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <HAL_MspInit+0x44>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed4 <HAL_MspInit+0x44>)
 8003e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <HAL_MspInit+0x44>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eae:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <HAL_MspInit+0x44>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	4a08      	ldr	r2, [pc, #32]	@ (8003ed4 <HAL_MspInit+0x44>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eba:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <HAL_MspInit+0x44>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800

08003ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003edc:	bf00      	nop
 8003ede:	e7fd      	b.n	8003edc <NMI_Handler+0x4>

08003ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <HardFault_Handler+0x4>

08003ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <MemManage_Handler+0x4>

08003ef0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <BusFault_Handler+0x4>

08003ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <UsageFault_Handler+0x4>

08003f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f2e:	f000 fb75 	bl	800461c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f3c:	4802      	ldr	r0, [pc, #8]	@ (8003f48 <USART3_IRQHandler+0x10>)
 8003f3e:	f004 f951 	bl	80081e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	200025d4 	.word	0x200025d4

08003f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return 1;
 8003f50:	2301      	movs	r3, #1
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_kill>:

int _kill(int pid, int sig)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f66:	f00a f9ad 	bl	800e2c4 <__errno>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2216      	movs	r2, #22
 8003f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_exit>:

void _exit (int status)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f84:	f04f 31ff 	mov.w	r1, #4294967295
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ffe7 	bl	8003f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <_exit+0x12>

08003f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e00a      	b.n	8003fba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fa4:	f3af 8000 	nop.w
 8003fa8:	4601      	mov	r1, r0
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	60ba      	str	r2, [r7, #8]
 8003fb0:	b2ca      	uxtb	r2, r1
 8003fb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	dbf0      	blt.n	8003fa4 <_read+0x12>
  }

  return len;
 8003fc2:	687b      	ldr	r3, [r7, #4]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <_close>:
  }
  return len;
}

int _close(int file)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <_isatty>:

int _isatty(int file)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800400c:	2301      	movs	r3, #1
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <_sbrk+0x5c>)
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <_sbrk+0x60>)
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004048:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <_sbrk+0x64>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <_sbrk+0x64>)
 8004052:	4a12      	ldr	r2, [pc, #72]	@ (800409c <_sbrk+0x68>)
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004056:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <_sbrk+0x64>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	429a      	cmp	r2, r3
 8004062:	d207      	bcs.n	8004074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004064:	f00a f92e 	bl	800e2c4 <__errno>
 8004068:	4603      	mov	r3, r0
 800406a:	220c      	movs	r2, #12
 800406c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	e009      	b.n	8004088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004074:	4b08      	ldr	r3, [pc, #32]	@ (8004098 <_sbrk+0x64>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <_sbrk+0x64>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	4a05      	ldr	r2, [pc, #20]	@ (8004098 <_sbrk+0x64>)
 8004084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20050000 	.word	0x20050000
 8004094:	00000400 	.word	0x00000400
 8004098:	200024ec 	.word	0x200024ec
 800409c:	200029e8 	.word	0x200029e8

080040a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040a4:	4b06      	ldr	r3, [pc, #24]	@ (80040c0 <SystemInit+0x20>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	4a05      	ldr	r2, [pc, #20]	@ (80040c0 <SystemInit+0x20>)
 80040ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	@ 0x38
 80040c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	605a      	str	r2, [r3, #4]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d8:	f107 031c 	add.w	r3, r7, #28
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e4:	463b      	mov	r3, r7
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	611a      	str	r2, [r3, #16]
 80040f2:	615a      	str	r2, [r3, #20]
 80040f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80040f6:	4b2d      	ldr	r3, [pc, #180]	@ (80041ac <MX_TIM2_Init+0xe8>)
 80040f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80040fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80040fe:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <MX_TIM2_Init+0xe8>)
 8004100:	226b      	movs	r2, #107	@ 0x6b
 8004102:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004104:	4b29      	ldr	r3, [pc, #164]	@ (80041ac <MX_TIM2_Init+0xe8>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800410a:	4b28      	ldr	r3, [pc, #160]	@ (80041ac <MX_TIM2_Init+0xe8>)
 800410c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004110:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004112:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <MX_TIM2_Init+0xe8>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004118:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <MX_TIM2_Init+0xe8>)
 800411a:	2200      	movs	r2, #0
 800411c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800411e:	4823      	ldr	r0, [pc, #140]	@ (80041ac <MX_TIM2_Init+0xe8>)
 8004120:	f002 fef4 	bl	8006f0c <HAL_TIM_Base_Init>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800412a:	f7ff fd3b 	bl	8003ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800412e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004132:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004134:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004138:	4619      	mov	r1, r3
 800413a:	481c      	ldr	r0, [pc, #112]	@ (80041ac <MX_TIM2_Init+0xe8>)
 800413c:	f003 fa14 	bl	8007568 <HAL_TIM_ConfigClockSource>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004146:	f7ff fd2d 	bl	8003ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800414a:	4818      	ldr	r0, [pc, #96]	@ (80041ac <MX_TIM2_Init+0xe8>)
 800414c:	f002 ffa6 	bl	800709c <HAL_TIM_PWM_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004156:	f7ff fd25 	bl	8003ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004162:	f107 031c 	add.w	r3, r7, #28
 8004166:	4619      	mov	r1, r3
 8004168:	4810      	ldr	r0, [pc, #64]	@ (80041ac <MX_TIM2_Init+0xe8>)
 800416a:	f003 fe91 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004174:	f7ff fd16 	bl	8003ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004178:	2360      	movs	r3, #96	@ 0x60
 800417a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004180:	2300      	movs	r3, #0
 8004182:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004188:	463b      	mov	r3, r7
 800418a:	220c      	movs	r2, #12
 800418c:	4619      	mov	r1, r3
 800418e:	4807      	ldr	r0, [pc, #28]	@ (80041ac <MX_TIM2_Init+0xe8>)
 8004190:	f003 f8d6 	bl	8007340 <HAL_TIM_PWM_ConfigChannel>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800419a:	f7ff fd03 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800419e:	4803      	ldr	r0, [pc, #12]	@ (80041ac <MX_TIM2_Init+0xe8>)
 80041a0:	f000 f8ea 	bl	8004378 <HAL_TIM_MspPostInit>

}
 80041a4:	bf00      	nop
 80041a6:	3738      	adds	r7, #56	@ 0x38
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	200024f0 	.word	0x200024f0

080041b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	@ 0x28
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041b6:	f107 031c 	add.w	r3, r7, #28
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	605a      	str	r2, [r3, #4]
 80041c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041c2:	463b      	mov	r3, r7
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	611a      	str	r2, [r3, #16]
 80041d0:	615a      	str	r2, [r3, #20]
 80041d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041d4:	4b21      	ldr	r3, [pc, #132]	@ (800425c <MX_TIM3_Init+0xac>)
 80041d6:	4a22      	ldr	r2, [pc, #136]	@ (8004260 <MX_TIM3_Init+0xb0>)
 80041d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <MX_TIM3_Init+0xac>)
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e0:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <MX_TIM3_Init+0xac>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80041e6:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <MX_TIM3_Init+0xac>)
 80041e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ee:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <MX_TIM3_Init+0xac>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041f4:	4b19      	ldr	r3, [pc, #100]	@ (800425c <MX_TIM3_Init+0xac>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80041fa:	4818      	ldr	r0, [pc, #96]	@ (800425c <MX_TIM3_Init+0xac>)
 80041fc:	f002 ff4e 	bl	800709c <HAL_TIM_PWM_Init>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004206:	f7ff fccd 	bl	8003ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004212:	f107 031c 	add.w	r3, r7, #28
 8004216:	4619      	mov	r1, r3
 8004218:	4810      	ldr	r0, [pc, #64]	@ (800425c <MX_TIM3_Init+0xac>)
 800421a:	f003 fe39 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004224:	f7ff fcbe 	bl	8003ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004228:	2360      	movs	r3, #96	@ 0x60
 800422a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004238:	463b      	mov	r3, r7
 800423a:	2200      	movs	r2, #0
 800423c:	4619      	mov	r1, r3
 800423e:	4807      	ldr	r0, [pc, #28]	@ (800425c <MX_TIM3_Init+0xac>)
 8004240:	f003 f87e 	bl	8007340 <HAL_TIM_PWM_ConfigChannel>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800424a:	f7ff fcab 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800424e:	4803      	ldr	r0, [pc, #12]	@ (800425c <MX_TIM3_Init+0xac>)
 8004250:	f000 f892 	bl	8004378 <HAL_TIM_MspPostInit>

}
 8004254:	bf00      	nop
 8004256:	3728      	adds	r7, #40	@ 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	2000253c 	.word	0x2000253c
 8004260:	40000400 	.word	0x40000400

08004264 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004274:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <MX_TIM7_Init+0x68>)
 8004276:	4a16      	ldr	r2, [pc, #88]	@ (80042d0 <MX_TIM7_Init+0x6c>)
 8004278:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 800427a:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <MX_TIM7_Init+0x68>)
 800427c:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8004280:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004282:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <MX_TIM7_Init+0x68>)
 8004284:	2200      	movs	r2, #0
 8004286:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8004288:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <MX_TIM7_Init+0x68>)
 800428a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800428e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004290:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <MX_TIM7_Init+0x68>)
 8004292:	2200      	movs	r2, #0
 8004294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004296:	480d      	ldr	r0, [pc, #52]	@ (80042cc <MX_TIM7_Init+0x68>)
 8004298:	f002 fe38 	bl	8006f0c <HAL_TIM_Base_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80042a2:	f7ff fc7f 	bl	8003ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042ae:	1d3b      	adds	r3, r7, #4
 80042b0:	4619      	mov	r1, r3
 80042b2:	4806      	ldr	r0, [pc, #24]	@ (80042cc <MX_TIM7_Init+0x68>)
 80042b4:	f003 fdec 	bl	8007e90 <HAL_TIMEx_MasterConfigSynchronization>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80042be:	f7ff fc71 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20002588 	.word	0x20002588
 80042d0:	40001400 	.word	0x40001400

080042d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e4:	d10c      	bne.n	8004300 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042e6:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <HAL_TIM_Base_MspInit+0x5c>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	4a11      	ldr	r2, [pc, #68]	@ (8004330 <HAL_TIM_Base_MspInit+0x5c>)
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004330 <HAL_TIM_Base_MspInit+0x5c>)
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80042fe:	e010      	b.n	8004322 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0b      	ldr	r2, [pc, #44]	@ (8004334 <HAL_TIM_Base_MspInit+0x60>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10b      	bne.n	8004322 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800430a:	4b09      	ldr	r3, [pc, #36]	@ (8004330 <HAL_TIM_Base_MspInit+0x5c>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	4a08      	ldr	r2, [pc, #32]	@ (8004330 <HAL_TIM_Base_MspInit+0x5c>)
 8004310:	f043 0320 	orr.w	r3, r3, #32
 8004314:	6413      	str	r3, [r2, #64]	@ 0x40
 8004316:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <HAL_TIM_Base_MspInit+0x5c>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	60bb      	str	r3, [r7, #8]
 8004320:	68bb      	ldr	r3, [r7, #8]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40023800 	.word	0x40023800
 8004334:	40001400 	.word	0x40001400

08004338 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0a      	ldr	r2, [pc, #40]	@ (8004370 <HAL_TIM_PWM_MspInit+0x38>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10b      	bne.n	8004362 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800434a:	4b0a      	ldr	r3, [pc, #40]	@ (8004374 <HAL_TIM_PWM_MspInit+0x3c>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	4a09      	ldr	r2, [pc, #36]	@ (8004374 <HAL_TIM_PWM_MspInit+0x3c>)
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	6413      	str	r3, [r2, #64]	@ 0x40
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <HAL_TIM_PWM_MspInit+0x3c>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40000400 	.word	0x40000400
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	@ 0x28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004398:	d11c      	bne.n	80043d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439a:	4b21      	ldr	r3, [pc, #132]	@ (8004420 <HAL_TIM_MspPostInit+0xa8>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	4a20      	ldr	r2, [pc, #128]	@ (8004420 <HAL_TIM_MspPostInit+0xa8>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <HAL_TIM_MspPostInit+0xa8>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 80043b2:	2308      	movs	r3, #8
 80043b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b6:	2302      	movs	r3, #2
 80043b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043c2:	2301      	movs	r3, #1
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 80043c6:	f107 0314 	add.w	r3, r7, #20
 80043ca:	4619      	mov	r1, r3
 80043cc:	4815      	ldr	r0, [pc, #84]	@ (8004424 <HAL_TIM_MspPostInit+0xac>)
 80043ce:	f000 fb0d 	bl	80049ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80043d2:	e020      	b.n	8004416 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a13      	ldr	r2, [pc, #76]	@ (8004428 <HAL_TIM_MspPostInit+0xb0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d11b      	bne.n	8004416 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <HAL_TIM_MspPostInit+0xa8>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004420 <HAL_TIM_MspPostInit+0xa8>)
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <HAL_TIM_MspPostInit+0xa8>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043f6:	2340      	movs	r3, #64	@ 0x40
 80043f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fa:	2302      	movs	r3, #2
 80043fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004406:	2302      	movs	r3, #2
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440a:	f107 0314 	add.w	r3, r7, #20
 800440e:	4619      	mov	r1, r3
 8004410:	4804      	ldr	r0, [pc, #16]	@ (8004424 <HAL_TIM_MspPostInit+0xac>)
 8004412:	f000 faeb 	bl	80049ec <HAL_GPIO_Init>
}
 8004416:	bf00      	nop
 8004418:	3728      	adds	r7, #40	@ 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	40020000 	.word	0x40020000
 8004428:	40000400 	.word	0x40000400

0800442c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004430:	4b11      	ldr	r3, [pc, #68]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 8004432:	4a12      	ldr	r2, [pc, #72]	@ (800447c <MX_USART3_UART_Init+0x50>)
 8004434:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004436:	4b10      	ldr	r3, [pc, #64]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 8004438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800443c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800443e:	4b0e      	ldr	r3, [pc, #56]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 8004446:	2200      	movs	r2, #0
 8004448:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 800444c:	2200      	movs	r2, #0
 800444e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004450:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 8004452:	220c      	movs	r2, #12
 8004454:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004456:	4b08      	ldr	r3, [pc, #32]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800445c:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 800445e:	2200      	movs	r2, #0
 8004460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004462:	4805      	ldr	r0, [pc, #20]	@ (8004478 <MX_USART3_UART_Init+0x4c>)
 8004464:	f003 fda2 	bl	8007fac <HAL_UART_Init>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800446e:	f7ff fb99 	bl	8003ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200025d4 	.word	0x200025d4
 800447c:	40004800 	.word	0x40004800

08004480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b0aa      	sub	sp, #168	@ 0xa8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004498:	f107 0310 	add.w	r3, r7, #16
 800449c:	2284      	movs	r2, #132	@ 0x84
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f009 feaa 	bl	800e1fa <memset>
  if(uartHandle->Instance==USART3)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a26      	ldr	r2, [pc, #152]	@ (8004544 <HAL_UART_MspInit+0xc4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d144      	bne.n	800453a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80044b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80044b6:	2300      	movs	r3, #0
 80044b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044ba:	f107 0310 	add.w	r3, r7, #16
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f9b6 	bl	8005830 <HAL_RCCEx_PeriphCLKConfig>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80044ca:	f7ff fb6b 	bl	8003ba4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80044ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004548 <HAL_UART_MspInit+0xc8>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004548 <HAL_UART_MspInit+0xc8>)
 80044d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044da:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <HAL_UART_MspInit+0xc8>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044e6:	4b18      	ldr	r3, [pc, #96]	@ (8004548 <HAL_UART_MspInit+0xc8>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ea:	4a17      	ldr	r2, [pc, #92]	@ (8004548 <HAL_UART_MspInit+0xc8>)
 80044ec:	f043 0308 	orr.w	r3, r3, #8
 80044f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044f2:	4b15      	ldr	r3, [pc, #84]	@ (8004548 <HAL_UART_MspInit+0xc8>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80044fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004502:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800450c:	2301      	movs	r3, #1
 800450e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004512:	2303      	movs	r3, #3
 8004514:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004518:	2307      	movs	r3, #7
 800451a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800451e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004522:	4619      	mov	r1, r3
 8004524:	4809      	ldr	r0, [pc, #36]	@ (800454c <HAL_UART_MspInit+0xcc>)
 8004526:	f000 fa61 	bl	80049ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	2027      	movs	r0, #39	@ 0x27
 8004530:	f000 f993 	bl	800485a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004534:	2027      	movs	r0, #39	@ 0x27
 8004536:	f000 f9ac 	bl	8004892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800453a:	bf00      	nop
 800453c:	37a8      	adds	r7, #168	@ 0xa8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40004800 	.word	0x40004800
 8004548:	40023800 	.word	0x40023800
 800454c:	40020c00 	.word	0x40020c00

08004550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004588 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004554:	f7ff fda4 	bl	80040a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004558:	480c      	ldr	r0, [pc, #48]	@ (800458c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800455a:	490d      	ldr	r1, [pc, #52]	@ (8004590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800455c:	4a0d      	ldr	r2, [pc, #52]	@ (8004594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004560:	e002      	b.n	8004568 <LoopCopyDataInit>

08004562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004566:	3304      	adds	r3, #4

08004568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800456c:	d3f9      	bcc.n	8004562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004570:	4c0a      	ldr	r4, [pc, #40]	@ (800459c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004574:	e001      	b.n	800457a <LoopFillZerobss>

08004576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004578:	3204      	adds	r2, #4

0800457a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800457c:	d3fb      	bcc.n	8004576 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800457e:	f009 fea7 	bl	800e2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004582:	f7ff f89d 	bl	80036c0 <main>
  bx  lr    
 8004586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004588:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800458c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004590:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8004594:	080118e0 	.word	0x080118e0
  ldr r2, =_sbss
 8004598:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 800459c:	200029e8 	.word	0x200029e8

080045a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a0:	e7fe      	b.n	80045a0 <ADC_IRQHandler>

080045a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045a6:	2003      	movs	r0, #3
 80045a8:	f000 f94c 	bl	8004844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ac:	2000      	movs	r0, #0
 80045ae:	f000 f805 	bl	80045bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045b2:	f7ff fc6d 	bl	8003e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_InitTick+0x54>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <HAL_InitTick+0x58>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	4619      	mov	r1, r3
 80045ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 f967 	bl	80048ae <HAL_SYSTICK_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e00e      	b.n	8004608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b0f      	cmp	r3, #15
 80045ee:	d80a      	bhi.n	8004606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045f0:	2200      	movs	r2, #0
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	f000 f92f 	bl	800485a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045fc:	4a06      	ldr	r2, [pc, #24]	@ (8004618 <HAL_InitTick+0x5c>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
}
 8004608:	4618      	mov	r0, r3
 800460a:	3708      	adds	r7, #8
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000098 	.word	0x20000098
 8004614:	200000a0 	.word	0x200000a0
 8004618:	2000009c 	.word	0x2000009c

0800461c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <HAL_IncTick+0x20>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	4b06      	ldr	r3, [pc, #24]	@ (8004640 <HAL_IncTick+0x24>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4413      	add	r3, r2
 800462c:	4a04      	ldr	r2, [pc, #16]	@ (8004640 <HAL_IncTick+0x24>)
 800462e:	6013      	str	r3, [r2, #0]
}
 8004630:	bf00      	nop
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	200000a0 	.word	0x200000a0
 8004640:	2000265c 	.word	0x2000265c

08004644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return uwTick;
 8004648:	4b03      	ldr	r3, [pc, #12]	@ (8004658 <HAL_GetTick+0x14>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	2000265c 	.word	0x2000265c

0800465c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004664:	f7ff ffee 	bl	8004644 <HAL_GetTick>
 8004668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d005      	beq.n	8004682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004676:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <HAL_Delay+0x44>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004682:	bf00      	nop
 8004684:	f7ff ffde 	bl	8004644 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d8f7      	bhi.n	8004684 <HAL_Delay+0x28>
  {
  }
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	200000a0 	.word	0x200000a0

080046a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b4:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <__NVIC_SetPriorityGrouping+0x40>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046c0:	4013      	ands	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80046cc:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <__NVIC_SetPriorityGrouping+0x44>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046d2:	4a04      	ldr	r2, [pc, #16]	@ (80046e4 <__NVIC_SetPriorityGrouping+0x40>)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	60d3      	str	r3, [r2, #12]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	e000ed00 	.word	0xe000ed00
 80046e8:	05fa0000 	.word	0x05fa0000

080046ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f0:	4b04      	ldr	r3, [pc, #16]	@ (8004704 <__NVIC_GetPriorityGrouping+0x18>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 0307 	and.w	r3, r3, #7
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	2b00      	cmp	r3, #0
 8004718:	db0b      	blt.n	8004732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	f003 021f 	and.w	r2, r3, #31
 8004720:	4907      	ldr	r1, [pc, #28]	@ (8004740 <__NVIC_EnableIRQ+0x38>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2001      	movs	r0, #1
 800472a:	fa00 f202 	lsl.w	r2, r0, r2
 800472e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	e000e100 	.word	0xe000e100

08004744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004754:	2b00      	cmp	r3, #0
 8004756:	db0a      	blt.n	800476e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	490c      	ldr	r1, [pc, #48]	@ (8004790 <__NVIC_SetPriority+0x4c>)
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	0112      	lsls	r2, r2, #4
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	440b      	add	r3, r1
 8004768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800476c:	e00a      	b.n	8004784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	4908      	ldr	r1, [pc, #32]	@ (8004794 <__NVIC_SetPriority+0x50>)
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	3b04      	subs	r3, #4
 800477c:	0112      	lsls	r2, r2, #4
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	440b      	add	r3, r1
 8004782:	761a      	strb	r2, [r3, #24]
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000e100 	.word	0xe000e100
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	@ 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f1c3 0307 	rsb	r3, r3, #7
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	bf28      	it	cs
 80047b6:	2304      	movcs	r3, #4
 80047b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	3304      	adds	r3, #4
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d902      	bls.n	80047c8 <NVIC_EncodePriority+0x30>
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3b03      	subs	r3, #3
 80047c6:	e000      	b.n	80047ca <NVIC_EncodePriority+0x32>
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43da      	mvns	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	401a      	ands	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047e0:	f04f 31ff 	mov.w	r1, #4294967295
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	43d9      	mvns	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f0:	4313      	orrs	r3, r2
         );
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	@ 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3b01      	subs	r3, #1
 800480c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004810:	d301      	bcc.n	8004816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004812:	2301      	movs	r3, #1
 8004814:	e00f      	b.n	8004836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004816:	4a0a      	ldr	r2, [pc, #40]	@ (8004840 <SysTick_Config+0x40>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3b01      	subs	r3, #1
 800481c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800481e:	210f      	movs	r1, #15
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	f7ff ff8e 	bl	8004744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <SysTick_Config+0x40>)
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800482e:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <SysTick_Config+0x40>)
 8004830:	2207      	movs	r2, #7
 8004832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	e000e010 	.word	0xe000e010

08004844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff29 	bl	80046a4 <__NVIC_SetPriorityGrouping>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	4603      	mov	r3, r0
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800486c:	f7ff ff3e 	bl	80046ec <__NVIC_GetPriorityGrouping>
 8004870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	6978      	ldr	r0, [r7, #20]
 8004878:	f7ff ff8e 	bl	8004798 <NVIC_EncodePriority>
 800487c:	4602      	mov	r2, r0
 800487e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ff5d 	bl	8004744 <__NVIC_SetPriority>
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	4603      	mov	r3, r0
 800489a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff ff31 	bl	8004708 <__NVIC_EnableIRQ>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ffa2 	bl	8004800 <SysTick_Config>
 80048bc:	4603      	mov	r3, r0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048d4:	f7ff feb6 	bl	8004644 <HAL_GetTick>
 80048d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d008      	beq.n	80048f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2280      	movs	r2, #128	@ 0x80
 80048ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e052      	b.n	800499e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0216 	bic.w	r2, r2, #22
 8004906:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004916:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <HAL_DMA_Abort+0x62>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0208 	bic.w	r2, r2, #8
 8004936:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004948:	e013      	b.n	8004972 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800494a:	f7ff fe7b 	bl	8004644 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b05      	cmp	r3, #5
 8004956:	d90c      	bls.n	8004972 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2203      	movs	r2, #3
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e015      	b.n	800499e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e4      	bne.n	800494a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004984:	223f      	movs	r2, #63	@ 0x3f
 8004986:	409a      	lsls	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d004      	beq.n	80049c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2280      	movs	r2, #128	@ 0x80
 80049be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e00c      	b.n	80049de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2205      	movs	r2, #5
 80049c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0201 	bic.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b089      	sub	sp, #36	@ 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	e175      	b.n	8004cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	f040 8164 	bne.w	8004cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d005      	beq.n	8004a42 <HAL_GPIO_Init+0x56>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d130      	bne.n	8004aa4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a78:	2201      	movs	r2, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 0201 	and.w	r2, r3, #1
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d017      	beq.n	8004ae0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	2203      	movs	r2, #3
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d123      	bne.n	8004b34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	08da      	lsrs	r2, r3, #3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3208      	adds	r2, #8
 8004af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	220f      	movs	r2, #15
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	08da      	lsrs	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3208      	adds	r2, #8
 8004b2e:	69b9      	ldr	r1, [r7, #24]
 8004b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2203      	movs	r2, #3
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0203 	and.w	r2, r3, #3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80be 	beq.w	8004cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b76:	4b66      	ldr	r3, [pc, #408]	@ (8004d10 <HAL_GPIO_Init+0x324>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7a:	4a65      	ldr	r2, [pc, #404]	@ (8004d10 <HAL_GPIO_Init+0x324>)
 8004b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b82:	4b63      	ldr	r3, [pc, #396]	@ (8004d10 <HAL_GPIO_Init+0x324>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b8e:	4a61      	ldr	r2, [pc, #388]	@ (8004d14 <HAL_GPIO_Init+0x328>)
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	3302      	adds	r3, #2
 8004b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	220f      	movs	r2, #15
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43db      	mvns	r3, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a58      	ldr	r2, [pc, #352]	@ (8004d18 <HAL_GPIO_Init+0x32c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d037      	beq.n	8004c2a <HAL_GPIO_Init+0x23e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a57      	ldr	r2, [pc, #348]	@ (8004d1c <HAL_GPIO_Init+0x330>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d031      	beq.n	8004c26 <HAL_GPIO_Init+0x23a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a56      	ldr	r2, [pc, #344]	@ (8004d20 <HAL_GPIO_Init+0x334>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d02b      	beq.n	8004c22 <HAL_GPIO_Init+0x236>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a55      	ldr	r2, [pc, #340]	@ (8004d24 <HAL_GPIO_Init+0x338>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d025      	beq.n	8004c1e <HAL_GPIO_Init+0x232>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a54      	ldr	r2, [pc, #336]	@ (8004d28 <HAL_GPIO_Init+0x33c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d01f      	beq.n	8004c1a <HAL_GPIO_Init+0x22e>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a53      	ldr	r2, [pc, #332]	@ (8004d2c <HAL_GPIO_Init+0x340>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d019      	beq.n	8004c16 <HAL_GPIO_Init+0x22a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a52      	ldr	r2, [pc, #328]	@ (8004d30 <HAL_GPIO_Init+0x344>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_GPIO_Init+0x226>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a51      	ldr	r2, [pc, #324]	@ (8004d34 <HAL_GPIO_Init+0x348>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00d      	beq.n	8004c0e <HAL_GPIO_Init+0x222>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a50      	ldr	r2, [pc, #320]	@ (8004d38 <HAL_GPIO_Init+0x34c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <HAL_GPIO_Init+0x21e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a4f      	ldr	r2, [pc, #316]	@ (8004d3c <HAL_GPIO_Init+0x350>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_GPIO_Init+0x21a>
 8004c02:	2309      	movs	r3, #9
 8004c04:	e012      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c06:	230a      	movs	r3, #10
 8004c08:	e010      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	e00e      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c0e:	2307      	movs	r3, #7
 8004c10:	e00c      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c12:	2306      	movs	r3, #6
 8004c14:	e00a      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c16:	2305      	movs	r3, #5
 8004c18:	e008      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	e006      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e004      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e002      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_GPIO_Init+0x240>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	69fa      	ldr	r2, [r7, #28]
 8004c2e:	f002 0203 	and.w	r2, r2, #3
 8004c32:	0092      	lsls	r2, r2, #2
 8004c34:	4093      	lsls	r3, r2
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c3c:	4935      	ldr	r1, [pc, #212]	@ (8004d14 <HAL_GPIO_Init+0x328>)
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	3302      	adds	r3, #2
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	43db      	mvns	r3, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c6e:	4a34      	ldr	r2, [pc, #208]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c74:	4b32      	ldr	r3, [pc, #200]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c98:	4a29      	ldr	r2, [pc, #164]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c9e:	4b28      	ldr	r3, [pc, #160]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cec:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <HAL_GPIO_Init+0x354>)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	2b0f      	cmp	r3, #15
 8004cfc:	f67f ae86 	bls.w	8004a0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3724      	adds	r7, #36	@ 0x24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40013800 	.word	0x40013800
 8004d18:	40020000 	.word	0x40020000
 8004d1c:	40020400 	.word	0x40020400
 8004d20:	40020800 	.word	0x40020800
 8004d24:	40020c00 	.word	0x40020c00
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40021400 	.word	0x40021400
 8004d30:	40021800 	.word	0x40021800
 8004d34:	40021c00 	.word	0x40021c00
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40022400 	.word	0x40022400
 8004d40:	40013c00 	.word	0x40013c00

08004d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	887b      	ldrh	r3, [r7, #2]
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e001      	b.n	8004d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	807b      	strh	r3, [r7, #2]
 8004d80:	4613      	mov	r3, r2
 8004d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d84:	787b      	ldrb	r3, [r7, #1]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d8a:	887a      	ldrh	r2, [r7, #2]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d90:	e003      	b.n	8004d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d92:	887b      	ldrh	r3, [r7, #2]
 8004d94:	041a      	lsls	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	619a      	str	r2, [r3, #24]
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004db8:	887a      	ldrh	r2, [r7, #2]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	041a      	lsls	r2, r3, #16
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43d9      	mvns	r1, r3
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	400b      	ands	r3, r1
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	619a      	str	r2, [r3, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de0:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a04      	ldr	r2, [pc, #16]	@ (8004df8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dea:	6013      	str	r3, [r2, #0]
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40007000 	.word	0x40007000

08004dfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e06:	4b23      	ldr	r3, [pc, #140]	@ (8004e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0a:	4a22      	ldr	r2, [pc, #136]	@ (8004e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e12:	4b20      	ldr	r3, [pc, #128]	@ (8004e94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1d      	ldr	r2, [pc, #116]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e2a:	f7ff fc0b 	bl	8004644 <HAL_GetTick>
 8004e2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e30:	e009      	b.n	8004e46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e32:	f7ff fc07 	bl	8004644 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e40:	d901      	bls.n	8004e46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e022      	b.n	8004e8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e46:	4b14      	ldr	r3, [pc, #80]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e52:	d1ee      	bne.n	8004e32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e54:	4b10      	ldr	r3, [pc, #64]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a0f      	ldr	r2, [pc, #60]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e60:	f7ff fbf0 	bl	8004644 <HAL_GetTick>
 8004e64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e66:	e009      	b.n	8004e7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e68:	f7ff fbec 	bl	8004644 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e76:	d901      	bls.n	8004e7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e007      	b.n	8004e8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e7c:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e88:	d1ee      	bne.n	8004e68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40007000 	.word	0x40007000

08004e9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e291      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8087 	beq.w	8004fce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ec0:	4b96      	ldr	r3, [pc, #600]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d00c      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ecc:	4b93      	ldr	r3, [pc, #588]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 030c 	and.w	r3, r3, #12
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d112      	bne.n	8004efe <HAL_RCC_OscConfig+0x62>
 8004ed8:	4b90      	ldr	r3, [pc, #576]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ee4:	d10b      	bne.n	8004efe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d06c      	beq.n	8004fcc <HAL_RCC_OscConfig+0x130>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d168      	bne.n	8004fcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e26b      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f06:	d106      	bne.n	8004f16 <HAL_RCC_OscConfig+0x7a>
 8004f08:	4b84      	ldr	r3, [pc, #528]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a83      	ldr	r2, [pc, #524]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	e02e      	b.n	8004f74 <HAL_RCC_OscConfig+0xd8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x9c>
 8004f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a7e      	ldr	r2, [pc, #504]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a7b      	ldr	r2, [pc, #492]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e01d      	b.n	8004f74 <HAL_RCC_OscConfig+0xd8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCC_OscConfig+0xc0>
 8004f42:	4b76      	ldr	r3, [pc, #472]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a75      	ldr	r2, [pc, #468]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4b73      	ldr	r3, [pc, #460]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a72      	ldr	r2, [pc, #456]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0xd8>
 8004f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a6e      	ldr	r2, [pc, #440]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b6c      	ldr	r3, [pc, #432]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7ff fb62 	bl	8004644 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f84:	f7ff fb5e 	bl	8004644 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e21f      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	4b61      	ldr	r3, [pc, #388]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0xe8>
 8004fa2:	e014      	b.n	8004fce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7ff fb4e 	bl	8004644 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fac:	f7ff fb4a 	bl	8004644 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	@ 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e20b      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbe:	4b57      	ldr	r3, [pc, #348]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x110>
 8004fca:	e000      	b.n	8004fce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d069      	beq.n	80050ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fda:	4b50      	ldr	r3, [pc, #320]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe6:	4b4d      	ldr	r3, [pc, #308]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d11c      	bne.n	800502c <HAL_RCC_OscConfig+0x190>
 8004ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d116      	bne.n	800502c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	4b47      	ldr	r3, [pc, #284]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_RCC_OscConfig+0x17a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e1df      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	493d      	ldr	r1, [pc, #244]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502a:	e040      	b.n	80050ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d023      	beq.n	800507c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005034:	4b39      	ldr	r3, [pc, #228]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a38      	ldr	r2, [pc, #224]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7ff fb00 	bl	8004644 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005048:	f7ff fafc 	bl	8004644 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e1bd      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b30      	ldr	r3, [pc, #192]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005066:	4b2d      	ldr	r3, [pc, #180]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4929      	ldr	r1, [pc, #164]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8005076:	4313      	orrs	r3, r2
 8005078:	600b      	str	r3, [r1, #0]
 800507a:	e018      	b.n	80050ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507c:	4b27      	ldr	r3, [pc, #156]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a26      	ldr	r2, [pc, #152]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7ff fadc 	bl	8004644 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005090:	f7ff fad8 	bl	8004644 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e199      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a2:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d038      	beq.n	800512c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d019      	beq.n	80050f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c2:	4b16      	ldr	r3, [pc, #88]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 80050c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c6:	4a15      	ldr	r2, [pc, #84]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ce:	f7ff fab9 	bl	8004644 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d6:	f7ff fab5 	bl	8004644 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e176      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e8:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 80050ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x23a>
 80050f4:	e01a      	b.n	800512c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f6:	4b09      	ldr	r3, [pc, #36]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 80050f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050fa:	4a08      	ldr	r2, [pc, #32]	@ (800511c <HAL_RCC_OscConfig+0x280>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005102:	f7ff fa9f 	bl	8004644 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005108:	e00a      	b.n	8005120 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510a:	f7ff fa9b 	bl	8004644 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d903      	bls.n	8005120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e15c      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
 800511c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005120:	4b91      	ldr	r3, [pc, #580]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ee      	bne.n	800510a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80a4 	beq.w	8005282 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513a:	4b8b      	ldr	r3, [pc, #556]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10d      	bne.n	8005162 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005146:	4b88      	ldr	r3, [pc, #544]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	4a87      	ldr	r2, [pc, #540]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800514c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005150:	6413      	str	r3, [r2, #64]	@ 0x40
 8005152:	4b85      	ldr	r3, [pc, #532]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800515a:	60bb      	str	r3, [r7, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800515e:	2301      	movs	r3, #1
 8005160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005162:	4b82      	ldr	r3, [pc, #520]	@ (800536c <HAL_RCC_OscConfig+0x4d0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d118      	bne.n	80051a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800516e:	4b7f      	ldr	r3, [pc, #508]	@ (800536c <HAL_RCC_OscConfig+0x4d0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7e      	ldr	r2, [pc, #504]	@ (800536c <HAL_RCC_OscConfig+0x4d0>)
 8005174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800517a:	f7ff fa63 	bl	8004644 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005182:	f7ff fa5f 	bl	8004644 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b64      	cmp	r3, #100	@ 0x64
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e120      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005194:	4b75      	ldr	r3, [pc, #468]	@ (800536c <HAL_RCC_OscConfig+0x4d0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x31a>
 80051a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b4:	e02d      	b.n	8005212 <HAL_RCC_OscConfig+0x376>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10c      	bne.n	80051d8 <HAL_RCC_OscConfig+0x33c>
 80051be:	4b6a      	ldr	r3, [pc, #424]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	4a69      	ldr	r2, [pc, #420]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ca:	4b67      	ldr	r3, [pc, #412]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	4a66      	ldr	r2, [pc, #408]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051d0:	f023 0304 	bic.w	r3, r3, #4
 80051d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d6:	e01c      	b.n	8005212 <HAL_RCC_OscConfig+0x376>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2b05      	cmp	r3, #5
 80051de:	d10c      	bne.n	80051fa <HAL_RCC_OscConfig+0x35e>
 80051e0:	4b61      	ldr	r3, [pc, #388]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	4a60      	ldr	r2, [pc, #384]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051e6:	f043 0304 	orr.w	r3, r3, #4
 80051ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f8:	e00b      	b.n	8005212 <HAL_RCC_OscConfig+0x376>
 80051fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	4a5a      	ldr	r2, [pc, #360]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	6713      	str	r3, [r2, #112]	@ 0x70
 8005206:	4b58      	ldr	r3, [pc, #352]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520a:	4a57      	ldr	r2, [pc, #348]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800520c:	f023 0304 	bic.w	r3, r3, #4
 8005210:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d015      	beq.n	8005246 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7ff fa13 	bl	8004644 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7ff fa0f 	bl	8004644 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e0ce      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005238:	4b4b      	ldr	r3, [pc, #300]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0ee      	beq.n	8005222 <HAL_RCC_OscConfig+0x386>
 8005244:	e014      	b.n	8005270 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005246:	f7ff f9fd 	bl	8004644 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524c:	e00a      	b.n	8005264 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7ff f9f9 	bl	8004644 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e0b8      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005264:	4b40      	ldr	r3, [pc, #256]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ee      	bne.n	800524e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005276:	4b3c      	ldr	r3, [pc, #240]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	4a3b      	ldr	r2, [pc, #236]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800527c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005280:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80a4 	beq.w	80053d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800528c:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 030c 	and.w	r3, r3, #12
 8005294:	2b08      	cmp	r3, #8
 8005296:	d06b      	beq.n	8005370 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d149      	bne.n	8005334 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a0:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a30      	ldr	r2, [pc, #192]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80052a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7ff f9ca 	bl	8004644 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b4:	f7ff f9c6 	bl	8004644 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e087      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	4b28      	ldr	r3, [pc, #160]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	019b      	lsls	r3, r3, #6
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	085b      	lsrs	r3, r3, #1
 80052ea:	3b01      	subs	r3, #1
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	061b      	lsls	r3, r3, #24
 80052f6:	4313      	orrs	r3, r2
 80052f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 80052fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005300:	4b19      	ldr	r3, [pc, #100]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a18      	ldr	r2, [pc, #96]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800530a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7ff f99a 	bl	8004644 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005314:	f7ff f996 	bl	8004644 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e057      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005326:	4b10      	ldr	r3, [pc, #64]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x478>
 8005332:	e04f      	b.n	80053d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005334:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a0b      	ldr	r2, [pc, #44]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800533a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800533e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7ff f980 	bl	8004644 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005348:	f7ff f97c 	bl	8004644 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e03d      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535a:	4b03      	ldr	r3, [pc, #12]	@ (8005368 <HAL_RCC_OscConfig+0x4cc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x4ac>
 8005366:	e035      	b.n	80053d4 <HAL_RCC_OscConfig+0x538>
 8005368:	40023800 	.word	0x40023800
 800536c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005370:	4b1b      	ldr	r3, [pc, #108]	@ (80053e0 <HAL_RCC_OscConfig+0x544>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d028      	beq.n	80053d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005388:	429a      	cmp	r2, r3
 800538a:	d121      	bne.n	80053d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005396:	429a      	cmp	r2, r3
 8005398:	d11a      	bne.n	80053d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053a0:	4013      	ands	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d111      	bne.n	80053d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b6:	085b      	lsrs	r3, r3, #1
 80053b8:	3b01      	subs	r3, #1
 80053ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053bc:	429a      	cmp	r2, r3
 80053be:	d107      	bne.n	80053d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800

080053e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0d0      	b.n	800559e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053fc:	4b6a      	ldr	r3, [pc, #424]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 030f 	and.w	r3, r3, #15
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d910      	bls.n	800542c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b67      	ldr	r3, [pc, #412]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f023 020f 	bic.w	r2, r3, #15
 8005412:	4965      	ldr	r1, [pc, #404]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800541a:	4b63      	ldr	r3, [pc, #396]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d001      	beq.n	800542c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e0b8      	b.n	800559e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d020      	beq.n	800547a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005444:	4b59      	ldr	r3, [pc, #356]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a58      	ldr	r2, [pc, #352]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 800544a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800544e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0308 	and.w	r3, r3, #8
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800545c:	4b53      	ldr	r3, [pc, #332]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a52      	ldr	r2, [pc, #328]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005466:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005468:	4b50      	ldr	r3, [pc, #320]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	494d      	ldr	r1, [pc, #308]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d040      	beq.n	8005508 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d107      	bne.n	800549e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800548e:	4b47      	ldr	r3, [pc, #284]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d115      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e07f      	b.n	800559e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d107      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a6:	4b41      	ldr	r3, [pc, #260]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e073      	b.n	800559e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b6:	4b3d      	ldr	r3, [pc, #244]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e06b      	b.n	800559e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054c6:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f023 0203 	bic.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4936      	ldr	r1, [pc, #216]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d8:	f7ff f8b4 	bl	8004644 <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e0:	f7ff f8b0 	bl	8004644 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e053      	b.n	800559e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	4b2d      	ldr	r3, [pc, #180]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 020c 	and.w	r2, r3, #12
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	429a      	cmp	r2, r3
 8005506:	d1eb      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005508:	4b27      	ldr	r3, [pc, #156]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d210      	bcs.n	8005538 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005516:	4b24      	ldr	r3, [pc, #144]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 020f 	bic.w	r2, r3, #15
 800551e:	4922      	ldr	r1, [pc, #136]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	4313      	orrs	r3, r2
 8005524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005526:	4b20      	ldr	r3, [pc, #128]	@ (80055a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d001      	beq.n	8005538 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e032      	b.n	800559e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005544:	4b19      	ldr	r3, [pc, #100]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4916      	ldr	r1, [pc, #88]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005552:	4313      	orrs	r3, r2
 8005554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d009      	beq.n	8005576 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005562:	4b12      	ldr	r3, [pc, #72]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	490e      	ldr	r1, [pc, #56]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005576:	f000 f821 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 800557a:	4602      	mov	r2, r0
 800557c:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <HAL_RCC_ClockConfig+0x1c8>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	091b      	lsrs	r3, r3, #4
 8005582:	f003 030f 	and.w	r3, r3, #15
 8005586:	490a      	ldr	r1, [pc, #40]	@ (80055b0 <HAL_RCC_ClockConfig+0x1cc>)
 8005588:	5ccb      	ldrb	r3, [r1, r3]
 800558a:	fa22 f303 	lsr.w	r3, r2, r3
 800558e:	4a09      	ldr	r2, [pc, #36]	@ (80055b4 <HAL_RCC_ClockConfig+0x1d0>)
 8005590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005592:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <HAL_RCC_ClockConfig+0x1d4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f810 	bl	80045bc <HAL_InitTick>

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40023c00 	.word	0x40023c00
 80055ac:	40023800 	.word	0x40023800
 80055b0:	08011050 	.word	0x08011050
 80055b4:	20000098 	.word	0x20000098
 80055b8:	2000009c 	.word	0x2000009c

080055bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c0:	b094      	sub	sp, #80	@ 0x50
 80055c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055c8:	2300      	movs	r3, #0
 80055ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055cc:	2300      	movs	r3, #0
 80055ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d4:	4b79      	ldr	r3, [pc, #484]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x200>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d00d      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x40>
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	f200 80e1 	bhi.w	80057a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x34>
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ee:	e0db      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055f0:	4b73      	ldr	r3, [pc, #460]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80055f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055f4:	e0db      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055f6:	4b73      	ldr	r3, [pc, #460]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80055f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055fa:	e0d8      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055fc:	4b6f      	ldr	r3, [pc, #444]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x200>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005604:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005606:	4b6d      	ldr	r3, [pc, #436]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d063      	beq.n	80056da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005612:	4b6a      	ldr	r3, [pc, #424]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	2200      	movs	r2, #0
 800561a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800561c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005624:	633b      	str	r3, [r7, #48]	@ 0x30
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
 800562a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800562e:	4622      	mov	r2, r4
 8005630:	462b      	mov	r3, r5
 8005632:	f04f 0000 	mov.w	r0, #0
 8005636:	f04f 0100 	mov.w	r1, #0
 800563a:	0159      	lsls	r1, r3, #5
 800563c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005640:	0150      	lsls	r0, r2, #5
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4621      	mov	r1, r4
 8005648:	1a51      	subs	r1, r2, r1
 800564a:	6139      	str	r1, [r7, #16]
 800564c:	4629      	mov	r1, r5
 800564e:	eb63 0301 	sbc.w	r3, r3, r1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005660:	4659      	mov	r1, fp
 8005662:	018b      	lsls	r3, r1, #6
 8005664:	4651      	mov	r1, sl
 8005666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800566a:	4651      	mov	r1, sl
 800566c:	018a      	lsls	r2, r1, #6
 800566e:	4651      	mov	r1, sl
 8005670:	ebb2 0801 	subs.w	r8, r2, r1
 8005674:	4659      	mov	r1, fp
 8005676:	eb63 0901 	sbc.w	r9, r3, r1
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800568a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568e:	4690      	mov	r8, r2
 8005690:	4699      	mov	r9, r3
 8005692:	4623      	mov	r3, r4
 8005694:	eb18 0303 	adds.w	r3, r8, r3
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	462b      	mov	r3, r5
 800569c:	eb49 0303 	adc.w	r3, r9, r3
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ae:	4629      	mov	r1, r5
 80056b0:	024b      	lsls	r3, r1, #9
 80056b2:	4621      	mov	r1, r4
 80056b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056b8:	4621      	mov	r1, r4
 80056ba:	024a      	lsls	r2, r1, #9
 80056bc:	4610      	mov	r0, r2
 80056be:	4619      	mov	r1, r3
 80056c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c2:	2200      	movs	r2, #0
 80056c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056cc:	f7fb fafc 	bl	8000cc8 <__aeabi_uldivmod>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4613      	mov	r3, r2
 80056d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d8:	e058      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056da:	4b38      	ldr	r3, [pc, #224]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x200>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	099b      	lsrs	r3, r3, #6
 80056e0:	2200      	movs	r2, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	4611      	mov	r1, r2
 80056e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	2300      	movs	r3, #0
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	f04f 0000 	mov.w	r0, #0
 80056fc:	f04f 0100 	mov.w	r1, #0
 8005700:	0159      	lsls	r1, r3, #5
 8005702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005706:	0150      	lsls	r0, r2, #5
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4641      	mov	r1, r8
 800570e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005712:	4649      	mov	r1, r9
 8005714:	eb63 0b01 	sbc.w	fp, r3, r1
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005724:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005728:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800572c:	ebb2 040a 	subs.w	r4, r2, sl
 8005730:	eb63 050b 	sbc.w	r5, r3, fp
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	00eb      	lsls	r3, r5, #3
 800573e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005742:	00e2      	lsls	r2, r4, #3
 8005744:	4614      	mov	r4, r2
 8005746:	461d      	mov	r5, r3
 8005748:	4643      	mov	r3, r8
 800574a:	18e3      	adds	r3, r4, r3
 800574c:	603b      	str	r3, [r7, #0]
 800574e:	464b      	mov	r3, r9
 8005750:	eb45 0303 	adc.w	r3, r5, r3
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005762:	4629      	mov	r1, r5
 8005764:	028b      	lsls	r3, r1, #10
 8005766:	4621      	mov	r1, r4
 8005768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800576c:	4621      	mov	r1, r4
 800576e:	028a      	lsls	r2, r1, #10
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005776:	2200      	movs	r2, #0
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	61fa      	str	r2, [r7, #28]
 800577c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005780:	f7fb faa2 	bl	8000cc8 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4613      	mov	r3, r2
 800578a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800578c:	4b0b      	ldr	r3, [pc, #44]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x200>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	3301      	adds	r3, #1
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800579c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800579e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057a6:	e002      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057a8:	4b05      	ldr	r3, [pc, #20]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80057aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80057ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3750      	adds	r7, #80	@ 0x50
 80057b4:	46bd      	mov	sp, r7
 80057b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800
 80057c0:	00f42400 	.word	0x00f42400
 80057c4:	007a1200 	.word	0x007a1200

080057c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057cc:	4b03      	ldr	r3, [pc, #12]	@ (80057dc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000098 	.word	0x20000098

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057e4:	f7ff fff0 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0a9b      	lsrs	r3, r3, #10
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4903      	ldr	r1, [pc, #12]	@ (8005804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40023800 	.word	0x40023800
 8005804:	08011060 	.word	0x08011060

08005808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800580c:	f7ff ffdc 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 8005810:	4602      	mov	r2, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0b5b      	lsrs	r3, r3, #13
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4903      	ldr	r1, [pc, #12]	@ (800582c <HAL_RCC_GetPCLK2Freq+0x24>)
 800581e:	5ccb      	ldrb	r3, [r1, r3]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	08011060 	.word	0x08011060

08005830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b088      	sub	sp, #32
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d012      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005858:	4b69      	ldr	r3, [pc, #420]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4a68      	ldr	r2, [pc, #416]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005862:	6093      	str	r3, [r2, #8]
 8005864:	4b66      	ldr	r3, [pc, #408]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586c:	4964      	ldr	r1, [pc, #400]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800587a:	2301      	movs	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800588a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005890:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005898:	4959      	ldr	r1, [pc, #356]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a8:	d101      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80058aa:	2301      	movs	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058b6:	2301      	movs	r3, #1
 80058b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d017      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d4:	494a      	ldr	r1, [pc, #296]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058e4:	d101      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058f2:	2301      	movs	r3, #1
 80058f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005902:	2301      	movs	r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 808b 	beq.w	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005914:	4b3a      	ldr	r3, [pc, #232]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	4a39      	ldr	r2, [pc, #228]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800591e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005920:	4b37      	ldr	r3, [pc, #220]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800592c:	4b35      	ldr	r3, [pc, #212]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a34      	ldr	r2, [pc, #208]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005938:	f7fe fe84 	bl	8004644 <HAL_GetTick>
 800593c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005940:	f7fe fe80 	bl	8004644 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b64      	cmp	r3, #100	@ 0x64
 800594c:	d901      	bls.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e357      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005952:	4b2c      	ldr	r3, [pc, #176]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800595e:	4b28      	ldr	r3, [pc, #160]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005966:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d035      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	429a      	cmp	r2, r3
 800597a:	d02e      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800597c:	4b20      	ldr	r3, [pc, #128]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005984:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005986:	4b1e      	ldr	r3, [pc, #120]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005990:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005992:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005996:	4a1a      	ldr	r2, [pc, #104]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800599c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800599e:	4a18      	ldr	r2, [pc, #96]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80059a4:	4b16      	ldr	r3, [pc, #88]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d114      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b0:	f7fe fe48 	bl	8004644 <HAL_GetTick>
 80059b4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b6:	e00a      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7fe fe44 	bl	8004644 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e319      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0ee      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059e6:	d111      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059e8:	4b05      	ldr	r3, [pc, #20]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059f4:	4b04      	ldr	r3, [pc, #16]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059f6:	400b      	ands	r3, r1
 80059f8:	4901      	ldr	r1, [pc, #4]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
 80059fe:	e00b      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40007000 	.word	0x40007000
 8005a08:	0ffffcff 	.word	0x0ffffcff
 8005a0c:	4baa      	ldr	r3, [pc, #680]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4aa9      	ldr	r2, [pc, #676]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a16:	6093      	str	r3, [r2, #8]
 8005a18:	4ba7      	ldr	r3, [pc, #668]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a24:	49a4      	ldr	r1, [pc, #656]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0310 	and.w	r3, r3, #16
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d010      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a36:	4ba0      	ldr	r3, [pc, #640]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a3c:	4a9e      	ldr	r2, [pc, #632]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a46:	4b9c      	ldr	r3, [pc, #624]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a50:	4999      	ldr	r1, [pc, #612]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a64:	4b94      	ldr	r3, [pc, #592]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a72:	4991      	ldr	r1, [pc, #580]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a86:	4b8c      	ldr	r3, [pc, #560]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a94:	4988      	ldr	r1, [pc, #544]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d00a      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005aa8:	4b83      	ldr	r3, [pc, #524]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ab6:	4980      	ldr	r1, [pc, #512]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aca:	4b7b      	ldr	r3, [pc, #492]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad8:	4977      	ldr	r1, [pc, #476]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aec:	4b72      	ldr	r3, [pc, #456]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af2:	f023 0203 	bic.w	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	496f      	ldr	r1, [pc, #444]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b14:	f023 020c 	bic.w	r2, r3, #12
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b1c:	4966      	ldr	r1, [pc, #408]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b30:	4b61      	ldr	r3, [pc, #388]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b3e:	495e      	ldr	r1, [pc, #376]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b52:	4b59      	ldr	r3, [pc, #356]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b58:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b60:	4955      	ldr	r1, [pc, #340]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b74:	4b50      	ldr	r3, [pc, #320]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	494d      	ldr	r1, [pc, #308]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b96:	4b48      	ldr	r3, [pc, #288]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba4:	4944      	ldr	r1, [pc, #272]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc6:	493c      	ldr	r1, [pc, #240]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bda:	4b37      	ldr	r3, [pc, #220]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be8:	4933      	ldr	r1, [pc, #204]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c0a:	492b      	ldr	r1, [pc, #172]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d011      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c1e:	4b26      	ldr	r3, [pc, #152]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c24:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c2c:	4922      	ldr	r1, [pc, #136]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c5e:	4b16      	ldr	r3, [pc, #88]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c64:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6c:	4912      	ldr	r1, [pc, #72]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00b      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c80:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c90:	4909      	ldr	r1, [pc, #36]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d006      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80d9 	beq.w	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cac:	4b02      	ldr	r3, [pc, #8]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a01      	ldr	r2, [pc, #4]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cb6:	e001      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cbe:	f7fe fcc1 	bl	8004644 <HAL_GetTick>
 8005cc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cc6:	f7fe fcbd 	bl	8004644 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b64      	cmp	r3, #100	@ 0x64
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e194      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f0      	bne.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d021      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11d      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cf8:	4b64      	ldr	r3, [pc, #400]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cfe:	0c1b      	lsrs	r3, r3, #16
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d06:	4b61      	ldr	r3, [pc, #388]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d0c:	0e1b      	lsrs	r3, r3, #24
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	019a      	lsls	r2, r3, #6
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	431a      	orrs	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	071b      	lsls	r3, r3, #28
 8005d2c:	4957      	ldr	r1, [pc, #348]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d004      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d48:	d00a      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d02e      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d5e:	d129      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d60:	4b4a      	ldr	r3, [pc, #296]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d66:	0c1b      	lsrs	r3, r3, #16
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d6e:	4b47      	ldr	r3, [pc, #284]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d74:	0f1b      	lsrs	r3, r3, #28
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	019a      	lsls	r2, r3, #6
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	041b      	lsls	r3, r3, #16
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	061b      	lsls	r3, r3, #24
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	071b      	lsls	r3, r3, #28
 8005d94:	493d      	ldr	r1, [pc, #244]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005da2:	f023 021f 	bic.w	r2, r3, #31
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	3b01      	subs	r3, #1
 8005dac:	4937      	ldr	r1, [pc, #220]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d01d      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dc0:	4b32      	ldr	r3, [pc, #200]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dc6:	0e1b      	lsrs	r3, r3, #24
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dce:	4b2f      	ldr	r3, [pc, #188]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dd4:	0f1b      	lsrs	r3, r3, #28
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	019a      	lsls	r2, r3, #6
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	431a      	orrs	r2, r3
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	061b      	lsls	r3, r3, #24
 8005dee:	431a      	orrs	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	071b      	lsls	r3, r3, #28
 8005df4:	4925      	ldr	r1, [pc, #148]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d011      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	019a      	lsls	r2, r3, #6
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	061b      	lsls	r3, r3, #24
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	071b      	lsls	r3, r3, #28
 8005e24:	4919      	ldr	r1, [pc, #100]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e2c:	4b17      	ldr	r3, [pc, #92]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e38:	f7fe fc04 	bl	8004644 <HAL_GetTick>
 8005e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e40:	f7fe fc00 	bl	8004644 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	@ 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e0d7      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	f040 80cd 	bne.w	8006000 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e66:	4b09      	ldr	r3, [pc, #36]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a08      	ldr	r2, [pc, #32]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e72:	f7fe fbe7 	bl	8004644 <HAL_GetTick>
 8005e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e78:	e00a      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e7a:	f7fe fbe3 	bl	8004644 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b64      	cmp	r3, #100	@ 0x64
 8005e86:	d903      	bls.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e0ba      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005e8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e90:	4b5e      	ldr	r3, [pc, #376]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e9c:	d0ed      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d02e      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d12a      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ec6:	4b51      	ldr	r3, [pc, #324]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f003 0303 	and.w	r3, r3, #3
 8005ed2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eda:	0f1b      	lsrs	r3, r3, #28
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	019a      	lsls	r2, r3, #6
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	061b      	lsls	r3, r3, #24
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	071b      	lsls	r3, r3, #28
 8005efa:	4944      	ldr	r1, [pc, #272]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f02:	4b42      	ldr	r3, [pc, #264]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	3b01      	subs	r3, #1
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	493d      	ldr	r1, [pc, #244]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d022      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f30:	d11d      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f32:	4b36      	ldr	r3, [pc, #216]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f38:	0e1b      	lsrs	r3, r3, #24
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f40:	4b32      	ldr	r3, [pc, #200]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f46:	0f1b      	lsrs	r3, r3, #28
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	019a      	lsls	r2, r3, #6
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	041b      	lsls	r3, r3, #16
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	061b      	lsls	r3, r3, #24
 8005f60:	431a      	orrs	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	071b      	lsls	r3, r3, #28
 8005f66:	4929      	ldr	r1, [pc, #164]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d028      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f7a:	4b24      	ldr	r3, [pc, #144]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f80:	0e1b      	lsrs	r3, r3, #24
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f88:	4b20      	ldr	r3, [pc, #128]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	019a      	lsls	r2, r3, #6
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	041b      	lsls	r3, r3, #16
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	061b      	lsls	r3, r3, #24
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	071b      	lsls	r3, r3, #28
 8005fae:	4917      	ldr	r1, [pc, #92]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fb6:	4b15      	ldr	r3, [pc, #84]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	4911      	ldr	r1, [pc, #68]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd8:	f7fe fb34 	bl	8004644 <HAL_GetTick>
 8005fdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fe0:	f7fe fb30 	bl	8004644 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b64      	cmp	r3, #100	@ 0x64
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e007      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ff2:	4b06      	ldr	r3, [pc, #24]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ffe:	d1ef      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3720      	adds	r7, #32
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40023800 	.word	0x40023800

08006010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e09d      	b.n	800615e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d108      	bne.n	800603c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006032:	d009      	beq.n	8006048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
 800603a:	e005      	b.n	8006048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fd fed0 	bl	8003e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800607e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006088:	d902      	bls.n	8006090 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	e002      	b.n	8006096 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006090:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006094:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800609e:	d007      	beq.n	80060b0 <HAL_SPI_Init+0xa0>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060a8:	d002      	beq.n	80060b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	431a      	orrs	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f2:	ea42 0103 	orr.w	r1, r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	0c1b      	lsrs	r3, r3, #16
 800610c:	f003 0204 	and.w	r2, r3, #4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800612c:	ea42 0103 	orr.w	r1, r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69da      	ldr	r2, [r3, #28]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800614c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b088      	sub	sp, #32
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006176:	2300      	movs	r3, #0
 8006178:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_SPI_Transmit+0x22>
 8006184:	2302      	movs	r3, #2
 8006186:	e15f      	b.n	8006448 <HAL_SPI_Transmit+0x2e2>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006190:	f7fe fa58 	bl	8004644 <HAL_GetTick>
 8006194:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d002      	beq.n	80061ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061a6:	2302      	movs	r3, #2
 80061a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061aa:	e148      	b.n	800643e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_SPI_Transmit+0x52>
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061bc:	e13f      	b.n	800643e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2203      	movs	r2, #3
 80061c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	88fa      	ldrh	r2, [r7, #6]
 80061d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	88fa      	ldrh	r2, [r7, #6]
 80061dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006208:	d10f      	bne.n	800622a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006218:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006228:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006234:	2b40      	cmp	r3, #64	@ 0x40
 8006236:	d007      	beq.n	8006248 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006246:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006250:	d94f      	bls.n	80062f2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_SPI_Transmit+0xfa>
 800625a:	8afb      	ldrh	r3, [r7, #22]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d142      	bne.n	80062e6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006270:	1c9a      	adds	r2, r3, #2
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006284:	e02f      	b.n	80062e6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b02      	cmp	r3, #2
 8006292:	d112      	bne.n	80062ba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	881a      	ldrh	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	1c9a      	adds	r2, r3, #2
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062b8:	e015      	b.n	80062e6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ba:	f7fe f9c3 	bl	8004644 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d803      	bhi.n	80062d2 <HAL_SPI_Transmit+0x16c>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d102      	bne.n	80062d8 <HAL_SPI_Transmit+0x172>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80062e4:	e0ab      	b.n	800643e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ca      	bne.n	8006286 <HAL_SPI_Transmit+0x120>
 80062f0:	e080      	b.n	80063f4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_SPI_Transmit+0x19a>
 80062fa:	8afb      	ldrh	r3, [r7, #22]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d174      	bne.n	80063ea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b01      	cmp	r3, #1
 8006308:	d912      	bls.n	8006330 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	881a      	ldrh	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	1c9a      	adds	r2, r3, #2
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006324:	b29b      	uxth	r3, r3
 8006326:	3b02      	subs	r3, #2
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800632e:	e05c      	b.n	80063ea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	330c      	adds	r3, #12
 800633a:	7812      	ldrb	r2, [r2, #0]
 800633c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006356:	e048      	b.n	80063ea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	2b02      	cmp	r3, #2
 8006364:	d12b      	bne.n	80063be <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d912      	bls.n	8006396 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	881a      	ldrh	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	1c9a      	adds	r2, r3, #2
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	3b02      	subs	r3, #2
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006394:	e029      	b.n	80063ea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	330c      	adds	r3, #12
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063bc:	e015      	b.n	80063ea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063be:	f7fe f941 	bl	8004644 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d803      	bhi.n	80063d6 <HAL_SPI_Transmit+0x270>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d102      	bne.n	80063dc <HAL_SPI_Transmit+0x276>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d106      	bne.n	80063ea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80063e8:	e029      	b.n	800643e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1b1      	bne.n	8006358 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fd1d 	bl	8006e38 <SPI_EndRxTxTransaction>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800642c:	2b00      	cmp	r3, #0
 800642e:	d002      	beq.n	8006436 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	77fb      	strb	r3, [r7, #31]
 8006434:	e003      	b.n	800643e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006446:	7ffb      	ldrb	r3, [r7, #31]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b01      	cmp	r3, #1
 800646e:	d002      	beq.n	8006476 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006470:	2302      	movs	r3, #2
 8006472:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006474:	e11a      	b.n	80066ac <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800647e:	d112      	bne.n	80064a6 <HAL_SPI_Receive+0x56>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10e      	bne.n	80064a6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2204      	movs	r2, #4
 800648c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4613      	mov	r3, r2
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f90e 	bl	80066be <HAL_SPI_TransmitReceive>
 80064a2:	4603      	mov	r3, r0
 80064a4:	e107      	b.n	80066b6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_SPI_Receive+0x64>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e100      	b.n	80066b6 <HAL_SPI_Receive+0x266>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064bc:	f7fe f8c2 	bl	8004644 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_SPI_Receive+0x7e>
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d102      	bne.n	80064d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064d2:	e0eb      	b.n	80066ac <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2204      	movs	r2, #4
 80064d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800651e:	d908      	bls.n	8006532 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	e007      	b.n	8006542 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800654a:	d10f      	bne.n	800656c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800655a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800656a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006576:	2b40      	cmp	r3, #64	@ 0x40
 8006578:	d007      	beq.n	800658a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006588:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006592:	d86f      	bhi.n	8006674 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006594:	e034      	b.n	8006600 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d117      	bne.n	80065d4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f103 020c 	add.w	r2, r3, #12
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80065d2:	e015      	b.n	8006600 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d4:	f7fe f836 	bl	8004644 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d803      	bhi.n	80065ec <HAL_SPI_Receive+0x19c>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ea:	d102      	bne.n	80065f2 <HAL_SPI_Receive+0x1a2>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80065fe:	e055      	b.n	80066ac <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1c4      	bne.n	8006596 <HAL_SPI_Receive+0x146>
 800660c:	e038      	b.n	8006680 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d115      	bne.n	8006648 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006626:	b292      	uxth	r2, r2
 8006628:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	1c9a      	adds	r2, r3, #2
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006646:	e015      	b.n	8006674 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006648:	f7fd fffc 	bl	8004644 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	d803      	bhi.n	8006660 <HAL_SPI_Receive+0x210>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d102      	bne.n	8006666 <HAL_SPI_Receive+0x216>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006672:	e01b      	b.n	80066ac <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1c6      	bne.n	800660e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fb5b 	bl	8006d40 <SPI_EndRxTransaction>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
 80066a2:	e003      	b.n	80066ac <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b08a      	sub	sp, #40	@ 0x28
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	607a      	str	r2, [r7, #4]
 80066ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066cc:	2301      	movs	r3, #1
 80066ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x26>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e20a      	b.n	8006afa <HAL_SPI_TransmitReceive+0x43c>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066ec:	f7fd ffaa 	bl	8004644 <HAL_GetTick>
 80066f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80066f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006700:	887b      	ldrh	r3, [r7, #2]
 8006702:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006704:	887b      	ldrh	r3, [r7, #2]
 8006706:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006708:	7efb      	ldrb	r3, [r7, #27]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d00e      	beq.n	800672c <HAL_SPI_TransmitReceive+0x6e>
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006714:	d106      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <HAL_SPI_TransmitReceive+0x66>
 800671e:	7efb      	ldrb	r3, [r7, #27]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d003      	beq.n	800672c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006724:	2302      	movs	r3, #2
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800672a:	e1e0      	b.n	8006aee <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_SPI_TransmitReceive+0x80>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HAL_SPI_TransmitReceive+0x80>
 8006738:	887b      	ldrh	r3, [r7, #2]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006744:	e1d3      	b.n	8006aee <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b04      	cmp	r3, #4
 8006750:	d003      	beq.n	800675a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2205      	movs	r2, #5
 8006756:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	887a      	ldrh	r2, [r7, #2]
 800676a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	887a      	ldrh	r2, [r7, #2]
 8006772:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	887a      	ldrh	r2, [r7, #2]
 8006780:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	887a      	ldrh	r2, [r7, #2]
 8006786:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800679c:	d802      	bhi.n	80067a4 <HAL_SPI_TransmitReceive+0xe6>
 800679e:	8a3b      	ldrh	r3, [r7, #16]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d908      	bls.n	80067b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80067b2:	605a      	str	r2, [r3, #4]
 80067b4:	e007      	b.n	80067c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d0:	2b40      	cmp	r3, #64	@ 0x40
 80067d2:	d007      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067ec:	f240 8081 	bls.w	80068f2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <HAL_SPI_TransmitReceive+0x140>
 80067f8:	8a7b      	ldrh	r3, [r7, #18]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d16d      	bne.n	80068da <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006802:	881a      	ldrh	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	1c9a      	adds	r2, r3, #2
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006822:	e05a      	b.n	80068da <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d11b      	bne.n	800686a <HAL_SPI_TransmitReceive+0x1ac>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d016      	beq.n	800686a <HAL_SPI_TransmitReceive+0x1ac>
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	2b01      	cmp	r3, #1
 8006840:	d113      	bne.n	800686a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	1c9a      	adds	r2, r3, #2
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b01      	cmp	r3, #1
 8006876:	d11c      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x1f4>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d016      	beq.n	80068b2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800688e:	b292      	uxth	r2, r2
 8006890:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006896:	1c9a      	adds	r2, r3, #2
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068ae:	2301      	movs	r3, #1
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068b2:	f7fd fec7 	bl	8004644 <HAL_GetTick>
 80068b6:	4602      	mov	r2, r0
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068be:	429a      	cmp	r2, r3
 80068c0:	d80b      	bhi.n	80068da <HAL_SPI_TransmitReceive+0x21c>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d007      	beq.n	80068da <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80068d8:	e109      	b.n	8006aee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d19f      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x166>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d199      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x166>
 80068f0:	e0e3      	b.n	8006aba <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_SPI_TransmitReceive+0x244>
 80068fa:	8a7b      	ldrh	r3, [r7, #18]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	f040 80cf 	bne.w	8006aa0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	d912      	bls.n	8006932 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	881a      	ldrh	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	1c9a      	adds	r2, r3, #2
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b02      	subs	r3, #2
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006930:	e0b6      	b.n	8006aa0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	330c      	adds	r3, #12
 800693c:	7812      	ldrb	r2, [r2, #0]
 800693e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006958:	e0a2      	b.n	8006aa0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b02      	cmp	r3, #2
 8006966:	d134      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x314>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d02f      	beq.n	80069d2 <HAL_SPI_TransmitReceive+0x314>
 8006972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006974:	2b01      	cmp	r3, #1
 8006976:	d12c      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b01      	cmp	r3, #1
 8006980:	d912      	bls.n	80069a8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006986:	881a      	ldrh	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	1c9a      	adds	r2, r3, #2
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b02      	subs	r3, #2
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80069a6:	e012      	b.n	80069ce <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	7812      	ldrb	r2, [r2, #0]
 80069b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d148      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x3b4>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d042      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d923      	bls.n	8006a40 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a02:	b292      	uxth	r2, r2
 8006a04:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	1c9a      	adds	r2, r3, #2
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b02      	subs	r3, #2
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d81f      	bhi.n	8006a6e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006a3c:	605a      	str	r2, [r3, #4]
 8006a3e:	e016      	b.n	8006a6e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f103 020c 	add.w	r2, r3, #12
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a72:	f7fd fde7 	bl	8004644 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d803      	bhi.n	8006a8a <HAL_SPI_TransmitReceive+0x3cc>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d102      	bne.n	8006a90 <HAL_SPI_TransmitReceive+0x3d2>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d107      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006a9e:	e026      	b.n	8006aee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f47f af57 	bne.w	800695a <HAL_SPI_TransmitReceive+0x29c>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f47f af50 	bne.w	800695a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f9ba 	bl	8006e38 <SPI_EndRxTxTransaction>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ae4:	e003      	b.n	8006aee <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006af6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3728      	adds	r7, #40	@ 0x28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b14:	f7fd fd96 	bl	8004644 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	4413      	add	r3, r2
 8006b22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b24:	f7fd fd8e 	bl	8004644 <HAL_GetTick>
 8006b28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b2a:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	015b      	lsls	r3, r3, #5
 8006b30:	0d1b      	lsrs	r3, r3, #20
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	fb02 f303 	mul.w	r3, r2, r3
 8006b38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b3a:	e054      	b.n	8006be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d050      	beq.n	8006be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b44:	f7fd fd7e 	bl	8004644 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d902      	bls.n	8006b5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d13d      	bne.n	8006bd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006b68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b72:	d111      	bne.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b7c:	d004      	beq.n	8006b88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b86:	d107      	bne.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba0:	d10f      	bne.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e017      	b.n	8006c06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d19b      	bne.n	8006b3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000098 	.word	0x20000098

08006c14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	@ 0x28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c26:	f7fd fd0d 	bl	8004644 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	4413      	add	r3, r2
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006c36:	f7fd fd05 	bl	8004644 <HAL_GetTick>
 8006c3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c44:	4b3d      	ldr	r3, [pc, #244]	@ (8006d3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	00da      	lsls	r2, r3, #3
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	0d1b      	lsrs	r3, r3, #20
 8006c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c5c:	e060      	b.n	8006d20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006c64:	d107      	bne.n	8006c76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d104      	bne.n	8006c76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d050      	beq.n	8006d20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c7e:	f7fd fce1 	bl	8004644 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d902      	bls.n	8006c94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d13d      	bne.n	8006d10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006ca2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cac:	d111      	bne.n	8006cd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb6:	d004      	beq.n	8006cc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc0:	d107      	bne.n	8006cd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cda:	d10f      	bne.n	8006cfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e010      	b.n	8006d32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d196      	bne.n	8006c5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3728      	adds	r7, #40	@ 0x28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000098 	.word	0x20000098

08006d40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d54:	d111      	bne.n	8006d7a <SPI_EndRxTransaction+0x3a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d5e:	d004      	beq.n	8006d6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d68:	d107      	bne.n	8006d7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d82:	d112      	bne.n	8006daa <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2180      	movs	r1, #128	@ 0x80
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff feb8 	bl	8006b04 <SPI_WaitFlagStateUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d021      	beq.n	8006dde <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d9e:	f043 0220 	orr.w	r2, r3, #32
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e03d      	b.n	8006e26 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006daa:	4b21      	ldr	r3, [pc, #132]	@ (8006e30 <SPI_EndRxTransaction+0xf0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a21      	ldr	r2, [pc, #132]	@ (8006e34 <SPI_EndRxTransaction+0xf4>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	0d5b      	lsrs	r3, r3, #21
 8006db6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dd6:	2b80      	cmp	r3, #128	@ 0x80
 8006dd8:	d0f2      	beq.n	8006dc0 <SPI_EndRxTransaction+0x80>
 8006dda:	e000      	b.n	8006dde <SPI_EndRxTransaction+0x9e>
        break;
 8006ddc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006de6:	d11d      	bne.n	8006e24 <SPI_EndRxTransaction+0xe4>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df0:	d004      	beq.n	8006dfc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfa:	d113      	bne.n	8006e24 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f7ff ff03 	bl	8006c14 <SPI_WaitFifoStateUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e000      	b.n	8006e26 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000098 	.word	0x20000098
 8006e34:	165e9f81 	.word	0x165e9f81

08006e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f7ff fedf 	bl	8006c14 <SPI_WaitFifoStateUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d007      	beq.n	8006e6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e046      	b.n	8006efa <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e6c:	4b25      	ldr	r3, [pc, #148]	@ (8006f04 <SPI_EndRxTxTransaction+0xcc>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a25      	ldr	r2, [pc, #148]	@ (8006f08 <SPI_EndRxTxTransaction+0xd0>)
 8006e72:	fba2 2303 	umull	r2, r3, r2, r3
 8006e76:	0d5b      	lsrs	r3, r3, #21
 8006e78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e7c:	fb02 f303 	mul.w	r3, r2, r3
 8006e80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e8a:	d112      	bne.n	8006eb2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2200      	movs	r2, #0
 8006e94:	2180      	movs	r1, #128	@ 0x80
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f7ff fe34 	bl	8006b04 <SPI_WaitFlagStateUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea6:	f043 0220 	orr.w	r2, r3, #32
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e023      	b.n	8006efa <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec8:	2b80      	cmp	r3, #128	@ 0x80
 8006eca:	d0f2      	beq.n	8006eb2 <SPI_EndRxTxTransaction+0x7a>
 8006ecc:	e000      	b.n	8006ed0 <SPI_EndRxTxTransaction+0x98>
        break;
 8006ece:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f7ff fe99 	bl	8006c14 <SPI_WaitFifoStateUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eec:	f043 0220 	orr.w	r2, r3, #32
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e000      	b.n	8006efa <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000098 	.word	0x20000098
 8006f08:	165e9f81 	.word	0x165e9f81

08006f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e049      	b.n	8006fb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fd f9ce 	bl	80042d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f000 fbd6 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d001      	beq.n	8006fd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e04c      	b.n	800706e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a26      	ldr	r2, [pc, #152]	@ (800707c <HAL_TIM_Base_Start+0xc0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d022      	beq.n	800702c <HAL_TIM_Base_Start+0x70>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fee:	d01d      	beq.n	800702c <HAL_TIM_Base_Start+0x70>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a22      	ldr	r2, [pc, #136]	@ (8007080 <HAL_TIM_Base_Start+0xc4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d018      	beq.n	800702c <HAL_TIM_Base_Start+0x70>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a21      	ldr	r2, [pc, #132]	@ (8007084 <HAL_TIM_Base_Start+0xc8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <HAL_TIM_Base_Start+0x70>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1f      	ldr	r2, [pc, #124]	@ (8007088 <HAL_TIM_Base_Start+0xcc>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00e      	beq.n	800702c <HAL_TIM_Base_Start+0x70>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1e      	ldr	r2, [pc, #120]	@ (800708c <HAL_TIM_Base_Start+0xd0>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d009      	beq.n	800702c <HAL_TIM_Base_Start+0x70>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1c      	ldr	r2, [pc, #112]	@ (8007090 <HAL_TIM_Base_Start+0xd4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d004      	beq.n	800702c <HAL_TIM_Base_Start+0x70>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1b      	ldr	r2, [pc, #108]	@ (8007094 <HAL_TIM_Base_Start+0xd8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d115      	bne.n	8007058 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689a      	ldr	r2, [r3, #8]
 8007032:	4b19      	ldr	r3, [pc, #100]	@ (8007098 <HAL_TIM_Base_Start+0xdc>)
 8007034:	4013      	ands	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b06      	cmp	r3, #6
 800703c:	d015      	beq.n	800706a <HAL_TIM_Base_Start+0xae>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007044:	d011      	beq.n	800706a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0201 	orr.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007056:	e008      	b.n	800706a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	e000      	b.n	800706c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40010400 	.word	0x40010400
 8007090:	40014000 	.word	0x40014000
 8007094:	40001800 	.word	0x40001800
 8007098:	00010007 	.word	0x00010007

0800709c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e049      	b.n	8007142 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fd f938 	bl	8004338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f000 fb0e 	bl	80076fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d109      	bne.n	8007170 <HAL_TIM_PWM_Start+0x24>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	bf14      	ite	ne
 8007168:	2301      	movne	r3, #1
 800716a:	2300      	moveq	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	e03c      	b.n	80071ea <HAL_TIM_PWM_Start+0x9e>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b04      	cmp	r3, #4
 8007174:	d109      	bne.n	800718a <HAL_TIM_PWM_Start+0x3e>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b01      	cmp	r3, #1
 8007180:	bf14      	ite	ne
 8007182:	2301      	movne	r3, #1
 8007184:	2300      	moveq	r3, #0
 8007186:	b2db      	uxtb	r3, r3
 8007188:	e02f      	b.n	80071ea <HAL_TIM_PWM_Start+0x9e>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b08      	cmp	r3, #8
 800718e:	d109      	bne.n	80071a4 <HAL_TIM_PWM_Start+0x58>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	bf14      	ite	ne
 800719c:	2301      	movne	r3, #1
 800719e:	2300      	moveq	r3, #0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	e022      	b.n	80071ea <HAL_TIM_PWM_Start+0x9e>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b0c      	cmp	r3, #12
 80071a8:	d109      	bne.n	80071be <HAL_TIM_PWM_Start+0x72>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	bf14      	ite	ne
 80071b6:	2301      	movne	r3, #1
 80071b8:	2300      	moveq	r3, #0
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	e015      	b.n	80071ea <HAL_TIM_PWM_Start+0x9e>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d109      	bne.n	80071d8 <HAL_TIM_PWM_Start+0x8c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	bf14      	ite	ne
 80071d0:	2301      	movne	r3, #1
 80071d2:	2300      	moveq	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	e008      	b.n	80071ea <HAL_TIM_PWM_Start+0x9e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	bf14      	ite	ne
 80071e4:	2301      	movne	r3, #1
 80071e6:	2300      	moveq	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e092      	b.n	8007318 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_PWM_Start+0xb6>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007200:	e023      	b.n	800724a <HAL_TIM_PWM_Start+0xfe>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b04      	cmp	r3, #4
 8007206:	d104      	bne.n	8007212 <HAL_TIM_PWM_Start+0xc6>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007210:	e01b      	b.n	800724a <HAL_TIM_PWM_Start+0xfe>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b08      	cmp	r3, #8
 8007216:	d104      	bne.n	8007222 <HAL_TIM_PWM_Start+0xd6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007220:	e013      	b.n	800724a <HAL_TIM_PWM_Start+0xfe>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b0c      	cmp	r3, #12
 8007226:	d104      	bne.n	8007232 <HAL_TIM_PWM_Start+0xe6>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007230:	e00b      	b.n	800724a <HAL_TIM_PWM_Start+0xfe>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b10      	cmp	r3, #16
 8007236:	d104      	bne.n	8007242 <HAL_TIM_PWM_Start+0xf6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007240:	e003      	b.n	800724a <HAL_TIM_PWM_Start+0xfe>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2201      	movs	r2, #1
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fdf6 	bl	8007e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a30      	ldr	r2, [pc, #192]	@ (8007320 <HAL_TIM_PWM_Start+0x1d4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIM_PWM_Start+0x120>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a2f      	ldr	r2, [pc, #188]	@ (8007324 <HAL_TIM_PWM_Start+0x1d8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d101      	bne.n	8007270 <HAL_TIM_PWM_Start+0x124>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <HAL_TIM_PWM_Start+0x126>
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007284:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a25      	ldr	r2, [pc, #148]	@ (8007320 <HAL_TIM_PWM_Start+0x1d4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d022      	beq.n	80072d6 <HAL_TIM_PWM_Start+0x18a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007298:	d01d      	beq.n	80072d6 <HAL_TIM_PWM_Start+0x18a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a22      	ldr	r2, [pc, #136]	@ (8007328 <HAL_TIM_PWM_Start+0x1dc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d018      	beq.n	80072d6 <HAL_TIM_PWM_Start+0x18a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a20      	ldr	r2, [pc, #128]	@ (800732c <HAL_TIM_PWM_Start+0x1e0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <HAL_TIM_PWM_Start+0x18a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007330 <HAL_TIM_PWM_Start+0x1e4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00e      	beq.n	80072d6 <HAL_TIM_PWM_Start+0x18a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a19      	ldr	r2, [pc, #100]	@ (8007324 <HAL_TIM_PWM_Start+0x1d8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d009      	beq.n	80072d6 <HAL_TIM_PWM_Start+0x18a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007334 <HAL_TIM_PWM_Start+0x1e8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d004      	beq.n	80072d6 <HAL_TIM_PWM_Start+0x18a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a19      	ldr	r2, [pc, #100]	@ (8007338 <HAL_TIM_PWM_Start+0x1ec>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d115      	bne.n	8007302 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	4b17      	ldr	r3, [pc, #92]	@ (800733c <HAL_TIM_PWM_Start+0x1f0>)
 80072de:	4013      	ands	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	d015      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1c8>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ee:	d011      	beq.n	8007314 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007300:	e008      	b.n	8007314 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e000      	b.n	8007316 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40010000 	.word	0x40010000
 8007324:	40010400 	.word	0x40010400
 8007328:	40000400 	.word	0x40000400
 800732c:	40000800 	.word	0x40000800
 8007330:	40000c00 	.word	0x40000c00
 8007334:	40014000 	.word	0x40014000
 8007338:	40001800 	.word	0x40001800
 800733c:	00010007 	.word	0x00010007

08007340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800735a:	2302      	movs	r3, #2
 800735c:	e0ff      	b.n	800755e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b14      	cmp	r3, #20
 800736a:	f200 80f0 	bhi.w	800754e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800736e:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	080073c9 	.word	0x080073c9
 8007378:	0800754f 	.word	0x0800754f
 800737c:	0800754f 	.word	0x0800754f
 8007380:	0800754f 	.word	0x0800754f
 8007384:	08007409 	.word	0x08007409
 8007388:	0800754f 	.word	0x0800754f
 800738c:	0800754f 	.word	0x0800754f
 8007390:	0800754f 	.word	0x0800754f
 8007394:	0800744b 	.word	0x0800744b
 8007398:	0800754f 	.word	0x0800754f
 800739c:	0800754f 	.word	0x0800754f
 80073a0:	0800754f 	.word	0x0800754f
 80073a4:	0800748b 	.word	0x0800748b
 80073a8:	0800754f 	.word	0x0800754f
 80073ac:	0800754f 	.word	0x0800754f
 80073b0:	0800754f 	.word	0x0800754f
 80073b4:	080074cd 	.word	0x080074cd
 80073b8:	0800754f 	.word	0x0800754f
 80073bc:	0800754f 	.word	0x0800754f
 80073c0:	0800754f 	.word	0x0800754f
 80073c4:	0800750d 	.word	0x0800750d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68b9      	ldr	r1, [r7, #8]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fa40 	bl	8007854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0208 	orr.w	r2, r2, #8
 80073e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0204 	bic.w	r2, r2, #4
 80073f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6999      	ldr	r1, [r3, #24]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	619a      	str	r2, [r3, #24]
      break;
 8007406:	e0a5      	b.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fa92 	bl	8007938 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6999      	ldr	r1, [r3, #24]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	021a      	lsls	r2, r3, #8
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	619a      	str	r2, [r3, #24]
      break;
 8007448:	e084      	b.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fae9 	bl	8007a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f042 0208 	orr.w	r2, r2, #8
 8007464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0204 	bic.w	r2, r2, #4
 8007474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69d9      	ldr	r1, [r3, #28]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	691a      	ldr	r2, [r3, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	61da      	str	r2, [r3, #28]
      break;
 8007488:	e064      	b.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fb3f 	bl	8007b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69d9      	ldr	r1, [r3, #28]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	021a      	lsls	r2, r3, #8
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	61da      	str	r2, [r3, #28]
      break;
 80074ca:	e043      	b.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68b9      	ldr	r1, [r7, #8]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fb76 	bl	8007bc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0208 	orr.w	r2, r2, #8
 80074e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0204 	bic.w	r2, r2, #4
 80074f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800750a:	e023      	b.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fba8 	bl	8007c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007526:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007536:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	021a      	lsls	r2, r3, #8
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800754c:	e002      	b.n	8007554 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	75fb      	strb	r3, [r7, #23]
      break;
 8007552:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop

08007568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_TIM_ConfigClockSource+0x1c>
 8007580:	2302      	movs	r3, #2
 8007582:	e0b4      	b.n	80076ee <HAL_TIM_ConfigClockSource+0x186>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4b56      	ldr	r3, [pc, #344]	@ (80076f8 <HAL_TIM_ConfigClockSource+0x190>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075bc:	d03e      	beq.n	800763c <HAL_TIM_ConfigClockSource+0xd4>
 80075be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075c2:	f200 8087 	bhi.w	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 80075c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ca:	f000 8086 	beq.w	80076da <HAL_TIM_ConfigClockSource+0x172>
 80075ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d2:	d87f      	bhi.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 80075d4:	2b70      	cmp	r3, #112	@ 0x70
 80075d6:	d01a      	beq.n	800760e <HAL_TIM_ConfigClockSource+0xa6>
 80075d8:	2b70      	cmp	r3, #112	@ 0x70
 80075da:	d87b      	bhi.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 80075dc:	2b60      	cmp	r3, #96	@ 0x60
 80075de:	d050      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x11a>
 80075e0:	2b60      	cmp	r3, #96	@ 0x60
 80075e2:	d877      	bhi.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 80075e4:	2b50      	cmp	r3, #80	@ 0x50
 80075e6:	d03c      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0xfa>
 80075e8:	2b50      	cmp	r3, #80	@ 0x50
 80075ea:	d873      	bhi.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 80075ec:	2b40      	cmp	r3, #64	@ 0x40
 80075ee:	d058      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x13a>
 80075f0:	2b40      	cmp	r3, #64	@ 0x40
 80075f2:	d86f      	bhi.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 80075f4:	2b30      	cmp	r3, #48	@ 0x30
 80075f6:	d064      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x15a>
 80075f8:	2b30      	cmp	r3, #48	@ 0x30
 80075fa:	d86b      	bhi.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d060      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007600:	2b20      	cmp	r3, #32
 8007602:	d867      	bhi.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d05c      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x15a>
 8007608:	2b10      	cmp	r3, #16
 800760a:	d05a      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0x15a>
 800760c:	e062      	b.n	80076d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800761e:	f000 fbf1 	bl	8007e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	609a      	str	r2, [r3, #8]
      break;
 800763a:	e04f      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800764c:	f000 fbda 	bl	8007e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800765e:	609a      	str	r2, [r3, #8]
      break;
 8007660:	e03c      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800766e:	461a      	mov	r2, r3
 8007670:	f000 fb4e 	bl	8007d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2150      	movs	r1, #80	@ 0x50
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fba7 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 8007680:	e02c      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800768e:	461a      	mov	r2, r3
 8007690:	f000 fb6d 	bl	8007d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2160      	movs	r1, #96	@ 0x60
 800769a:	4618      	mov	r0, r3
 800769c:	f000 fb97 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80076a0:	e01c      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ae:	461a      	mov	r2, r3
 80076b0:	f000 fb2e 	bl	8007d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2140      	movs	r1, #64	@ 0x40
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fb87 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80076c0:	e00c      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4619      	mov	r1, r3
 80076cc:	4610      	mov	r0, r2
 80076ce:	f000 fb7e 	bl	8007dce <TIM_ITRx_SetConfig>
      break;
 80076d2:	e003      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
      break;
 80076d8:	e000      	b.n	80076dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	fffeff88 	.word	0xfffeff88

080076fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a46      	ldr	r2, [pc, #280]	@ (8007828 <TIM_Base_SetConfig+0x12c>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d013      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771a:	d00f      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a43      	ldr	r2, [pc, #268]	@ (800782c <TIM_Base_SetConfig+0x130>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00b      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a42      	ldr	r2, [pc, #264]	@ (8007830 <TIM_Base_SetConfig+0x134>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d007      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a41      	ldr	r2, [pc, #260]	@ (8007834 <TIM_Base_SetConfig+0x138>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_Base_SetConfig+0x40>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a40      	ldr	r2, [pc, #256]	@ (8007838 <TIM_Base_SetConfig+0x13c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d108      	bne.n	800774e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a35      	ldr	r2, [pc, #212]	@ (8007828 <TIM_Base_SetConfig+0x12c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d02b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800775c:	d027      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a32      	ldr	r2, [pc, #200]	@ (800782c <TIM_Base_SetConfig+0x130>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d023      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a31      	ldr	r2, [pc, #196]	@ (8007830 <TIM_Base_SetConfig+0x134>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d01f      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a30      	ldr	r2, [pc, #192]	@ (8007834 <TIM_Base_SetConfig+0x138>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2f      	ldr	r2, [pc, #188]	@ (8007838 <TIM_Base_SetConfig+0x13c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d017      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a2e      	ldr	r2, [pc, #184]	@ (800783c <TIM_Base_SetConfig+0x140>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a2d      	ldr	r2, [pc, #180]	@ (8007840 <TIM_Base_SetConfig+0x144>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00f      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a2c      	ldr	r2, [pc, #176]	@ (8007844 <TIM_Base_SetConfig+0x148>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a2b      	ldr	r2, [pc, #172]	@ (8007848 <TIM_Base_SetConfig+0x14c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a2a      	ldr	r2, [pc, #168]	@ (800784c <TIM_Base_SetConfig+0x150>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a29      	ldr	r2, [pc, #164]	@ (8007850 <TIM_Base_SetConfig+0x154>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d108      	bne.n	80077c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a10      	ldr	r2, [pc, #64]	@ (8007828 <TIM_Base_SetConfig+0x12c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0xf8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a12      	ldr	r2, [pc, #72]	@ (8007838 <TIM_Base_SetConfig+0x13c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d103      	bne.n	80077fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b01      	cmp	r3, #1
 800780c:	d105      	bne.n	800781a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f023 0201 	bic.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	611a      	str	r2, [r3, #16]
  }
}
 800781a:	bf00      	nop
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	40010000 	.word	0x40010000
 800782c:	40000400 	.word	0x40000400
 8007830:	40000800 	.word	0x40000800
 8007834:	40000c00 	.word	0x40000c00
 8007838:	40010400 	.word	0x40010400
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800
 8007848:	40001800 	.word	0x40001800
 800784c:	40001c00 	.word	0x40001c00
 8007850:	40002000 	.word	0x40002000

08007854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	f023 0201 	bic.w	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	4b2b      	ldr	r3, [pc, #172]	@ (800792c <TIM_OC1_SetConfig+0xd8>)
 8007880:	4013      	ands	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0303 	bic.w	r3, r3, #3
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 0302 	bic.w	r3, r3, #2
 800789c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a21      	ldr	r2, [pc, #132]	@ (8007930 <TIM_OC1_SetConfig+0xdc>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d003      	beq.n	80078b8 <TIM_OC1_SetConfig+0x64>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a20      	ldr	r2, [pc, #128]	@ (8007934 <TIM_OC1_SetConfig+0xe0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d10c      	bne.n	80078d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0308 	bic.w	r3, r3, #8
 80078be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 0304 	bic.w	r3, r3, #4
 80078d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a16      	ldr	r2, [pc, #88]	@ (8007930 <TIM_OC1_SetConfig+0xdc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d003      	beq.n	80078e2 <TIM_OC1_SetConfig+0x8e>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a15      	ldr	r2, [pc, #84]	@ (8007934 <TIM_OC1_SetConfig+0xe0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d111      	bne.n	8007906 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	621a      	str	r2, [r3, #32]
}
 8007920:	bf00      	nop
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	fffeff8f 	.word	0xfffeff8f
 8007930:	40010000 	.word	0x40010000
 8007934:	40010400 	.word	0x40010400

08007938 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f023 0210 	bic.w	r2, r3, #16
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4b2e      	ldr	r3, [pc, #184]	@ (8007a1c <TIM_OC2_SetConfig+0xe4>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800796e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4313      	orrs	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0320 	bic.w	r3, r3, #32
 8007982:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a23      	ldr	r2, [pc, #140]	@ (8007a20 <TIM_OC2_SetConfig+0xe8>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d003      	beq.n	80079a0 <TIM_OC2_SetConfig+0x68>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a22      	ldr	r2, [pc, #136]	@ (8007a24 <TIM_OC2_SetConfig+0xec>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d10d      	bne.n	80079bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a18      	ldr	r2, [pc, #96]	@ (8007a20 <TIM_OC2_SetConfig+0xe8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_OC2_SetConfig+0x94>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a17      	ldr	r2, [pc, #92]	@ (8007a24 <TIM_OC2_SetConfig+0xec>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d113      	bne.n	80079f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	621a      	str	r2, [r3, #32]
}
 8007a0e:	bf00      	nop
 8007a10:	371c      	adds	r7, #28
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	feff8fff 	.word	0xfeff8fff
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400

08007a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	4b2d      	ldr	r3, [pc, #180]	@ (8007b08 <TIM_OC3_SetConfig+0xe0>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a22      	ldr	r2, [pc, #136]	@ (8007b0c <TIM_OC3_SetConfig+0xe4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d003      	beq.n	8007a8e <TIM_OC3_SetConfig+0x66>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a21      	ldr	r2, [pc, #132]	@ (8007b10 <TIM_OC3_SetConfig+0xe8>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d10d      	bne.n	8007aaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a17      	ldr	r2, [pc, #92]	@ (8007b0c <TIM_OC3_SetConfig+0xe4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_OC3_SetConfig+0x92>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a16      	ldr	r2, [pc, #88]	@ (8007b10 <TIM_OC3_SetConfig+0xe8>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d113      	bne.n	8007ae2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	fffeff8f 	.word	0xfffeff8f
 8007b0c:	40010000 	.word	0x40010000
 8007b10:	40010400 	.word	0x40010400

08007b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b087      	sub	sp, #28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bb8 <TIM_OC4_SetConfig+0xa4>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	021b      	lsls	r3, r3, #8
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	031b      	lsls	r3, r3, #12
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a13      	ldr	r2, [pc, #76]	@ (8007bbc <TIM_OC4_SetConfig+0xa8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC4_SetConfig+0x68>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a12      	ldr	r2, [pc, #72]	@ (8007bc0 <TIM_OC4_SetConfig+0xac>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d109      	bne.n	8007b90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	019b      	lsls	r3, r3, #6
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	feff8fff 	.word	0xfeff8fff
 8007bbc:	40010000 	.word	0x40010000
 8007bc0:	40010400 	.word	0x40010400

08007bc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a1b      	ldr	r3, [r3, #32]
 8007bd8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4b1b      	ldr	r3, [pc, #108]	@ (8007c5c <TIM_OC5_SetConfig+0x98>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007c04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	041b      	lsls	r3, r3, #16
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a12      	ldr	r2, [pc, #72]	@ (8007c60 <TIM_OC5_SetConfig+0x9c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_OC5_SetConfig+0x5e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a11      	ldr	r2, [pc, #68]	@ (8007c64 <TIM_OC5_SetConfig+0xa0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d109      	bne.n	8007c36 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	fffeff8f 	.word	0xfffeff8f
 8007c60:	40010000 	.word	0x40010000
 8007c64:	40010400 	.word	0x40010400

08007c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4b1c      	ldr	r3, [pc, #112]	@ (8007d04 <TIM_OC6_SetConfig+0x9c>)
 8007c94:	4013      	ands	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	051b      	lsls	r3, r3, #20
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a13      	ldr	r2, [pc, #76]	@ (8007d08 <TIM_OC6_SetConfig+0xa0>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d003      	beq.n	8007cc8 <TIM_OC6_SetConfig+0x60>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a12      	ldr	r2, [pc, #72]	@ (8007d0c <TIM_OC6_SetConfig+0xa4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d109      	bne.n	8007cdc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	feff8fff 	.word	0xfeff8fff
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	40010400 	.word	0x40010400

08007d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	f023 0201 	bic.w	r2, r3, #1
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 030a 	bic.w	r3, r3, #10
 8007d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	621a      	str	r2, [r3, #32]
}
 8007d62:	bf00      	nop
 8007d64:	371c      	adds	r7, #28
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f023 0210 	bic.w	r2, r3, #16
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	621a      	str	r2, [r3, #32]
}
 8007dc2:	bf00      	nop
 8007dc4:	371c      	adds	r7, #28
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	f043 0307 	orr.w	r3, r3, #7
 8007df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	021a      	lsls	r2, r3, #8
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	609a      	str	r2, [r3, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b087      	sub	sp, #28
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	2201      	movs	r2, #1
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	43db      	mvns	r3, r3
 8007e66:	401a      	ands	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6a1a      	ldr	r2, [r3, #32]
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e06d      	b.n	8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a30      	ldr	r2, [pc, #192]	@ (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d004      	beq.n	8007edc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a2f      	ldr	r2, [pc, #188]	@ (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d108      	bne.n	8007eee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a20      	ldr	r2, [pc, #128]	@ (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d022      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1a:	d01d      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a1d      	ldr	r2, [pc, #116]	@ (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d018      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d013      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a1a      	ldr	r2, [pc, #104]	@ (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00e      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a15      	ldr	r2, [pc, #84]	@ (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d009      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a16      	ldr	r2, [pc, #88]	@ (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d004      	beq.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a15      	ldr	r2, [pc, #84]	@ (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d10c      	bne.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	40010000 	.word	0x40010000
 8007f94:	40010400 	.word	0x40010400
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40001800 	.word	0x40001800

08007fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e040      	b.n	8008040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f7fc fa56 	bl	8004480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2224      	movs	r2, #36	@ 0x24
 8007fd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fe4c 	bl	8008c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fbe5 	bl	80087c8 <UART_SetConfig>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e01b      	b.n	8008040 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fecb 	bl	8008dd4 <UART_CheckIdleState>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08a      	sub	sp, #40	@ 0x28
 800804c:	af02      	add	r7, sp, #8
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	603b      	str	r3, [r7, #0]
 8008054:	4613      	mov	r3, r2
 8008056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800805c:	2b20      	cmp	r3, #32
 800805e:	d177      	bne.n	8008150 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <HAL_UART_Transmit+0x24>
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e070      	b.n	8008152 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2221      	movs	r2, #33	@ 0x21
 800807c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800807e:	f7fc fae1 	bl	8004644 <HAL_GetTick>
 8008082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	88fa      	ldrh	r2, [r7, #6]
 8008088:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	88fa      	ldrh	r2, [r7, #6]
 8008090:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800809c:	d108      	bne.n	80080b0 <HAL_UART_Transmit+0x68>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d104      	bne.n	80080b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	e003      	b.n	80080b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080b8:	e02f      	b.n	800811a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2200      	movs	r2, #0
 80080c2:	2180      	movs	r1, #128	@ 0x80
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f000 fedc 	bl	8008e82 <UART_WaitOnFlagUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d004      	beq.n	80080da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2220      	movs	r2, #32
 80080d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e03b      	b.n	8008152 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	881b      	ldrh	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	3302      	adds	r3, #2
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	e007      	b.n	8008108 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3301      	adds	r3, #1
 8008106:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800810e:	b29b      	uxth	r3, r3
 8008110:	3b01      	subs	r3, #1
 8008112:	b29a      	uxth	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1c9      	bne.n	80080ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2200      	movs	r2, #0
 800812e:	2140      	movs	r1, #64	@ 0x40
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 fea6 	bl	8008e82 <UART_WaitOnFlagUntilTimeout>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d004      	beq.n	8008146 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e005      	b.n	8008152 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2220      	movs	r2, #32
 800814a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	e000      	b.n	8008152 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3720      	adds	r7, #32
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b08a      	sub	sp, #40	@ 0x28
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	4613      	mov	r3, r2
 8008166:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800816e:	2b20      	cmp	r3, #32
 8008170:	d132      	bne.n	80081d8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <HAL_UART_Receive_IT+0x24>
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e02b      	b.n	80081da <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d018      	beq.n	80081c8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	613b      	str	r3, [r7, #16]
   return(result);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	623b      	str	r3, [r7, #32]
 80081b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	69f9      	ldr	r1, [r7, #28]
 80081ba:	6a3a      	ldr	r2, [r7, #32]
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e6      	bne.n	8008196 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	461a      	mov	r2, r3
 80081cc:	68b9      	ldr	r1, [r7, #8]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fec4 	bl	8008f5c <UART_Start_Receive_IT>
 80081d4:	4603      	mov	r3, r0
 80081d6:	e000      	b.n	80081da <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80081d8:	2302      	movs	r3, #2
  }
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3728      	adds	r7, #40	@ 0x28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b0ba      	sub	sp, #232	@ 0xe8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800820a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800820e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008212:	4013      	ands	r3, r2
 8008214:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800821c:	2b00      	cmp	r3, #0
 800821e:	d115      	bne.n	800824c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00f      	beq.n	800824c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 8297 	beq.w	8008770 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	4798      	blx	r3
      }
      return;
 800824a:	e291      	b.n	8008770 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800824c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 8117 	beq.w	8008484 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008262:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008266:	4b85      	ldr	r3, [pc, #532]	@ (800847c <HAL_UART_IRQHandler+0x298>)
 8008268:	4013      	ands	r3, r2
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 810a 	beq.w	8008484 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d011      	beq.n	80082a0 <HAL_UART_IRQHandler+0xbc>
 800827c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008296:	f043 0201 	orr.w	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d011      	beq.n	80082d0 <HAL_UART_IRQHandler+0xec>
 80082ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2202      	movs	r2, #2
 80082be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082c6:	f043 0204 	orr.w	r2, r3, #4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d011      	beq.n	8008300 <HAL_UART_IRQHandler+0x11c>
 80082dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2204      	movs	r2, #4
 80082ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082f6:	f043 0202 	orr.w	r2, r3, #2
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d017      	beq.n	800833c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800830c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800831c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00b      	beq.n	800833c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2208      	movs	r2, #8
 800832a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008332:	f043 0208 	orr.w	r2, r3, #8
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800833c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008344:	2b00      	cmp	r3, #0
 8008346:	d012      	beq.n	800836e <HAL_UART_IRQHandler+0x18a>
 8008348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800834c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00c      	beq.n	800836e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800835c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008364:	f043 0220 	orr.w	r2, r3, #32
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 81fd 	beq.w	8008774 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b6:	2b40      	cmp	r3, #64	@ 0x40
 80083b8:	d005      	beq.n	80083c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d04f      	beq.n	8008466 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fe8e 	bl	80090e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d6:	2b40      	cmp	r3, #64	@ 0x40
 80083d8:	d141      	bne.n	800845e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3308      	adds	r3, #8
 8008402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800840a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800841e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1d9      	bne.n	80083da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800842a:	2b00      	cmp	r3, #0
 800842c:	d013      	beq.n	8008456 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008432:	4a13      	ldr	r2, [pc, #76]	@ (8008480 <HAL_UART_IRQHandler+0x29c>)
 8008434:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800843a:	4618      	mov	r0, r3
 800843c:	f7fc fab3 	bl	80049a6 <HAL_DMA_Abort_IT>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d017      	beq.n	8008476 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800844a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008454:	e00f      	b.n	8008476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9a0 	bl	800879c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	e00b      	b.n	8008476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f99c 	bl	800879c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	e007      	b.n	8008476 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f998 	bl	800879c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008474:	e17e      	b.n	8008774 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008476:	bf00      	nop
    return;
 8008478:	e17c      	b.n	8008774 <HAL_UART_IRQHandler+0x590>
 800847a:	bf00      	nop
 800847c:	04000120 	.word	0x04000120
 8008480:	080091b1 	.word	0x080091b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008488:	2b01      	cmp	r3, #1
 800848a:	f040 814c 	bne.w	8008726 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800848e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008492:	f003 0310 	and.w	r3, r3, #16
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8145 	beq.w	8008726 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a0:	f003 0310 	and.w	r3, r3, #16
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 813e 	beq.w	8008726 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2210      	movs	r2, #16
 80084b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084bc:	2b40      	cmp	r3, #64	@ 0x40
 80084be:	f040 80b6 	bne.w	800862e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 8150 	beq.w	8008778 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80084de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084e2:	429a      	cmp	r2, r3
 80084e4:	f080 8148 	bcs.w	8008778 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084fc:	f000 8086 	beq.w	800860c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800851c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800852a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800852e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1da      	bne.n	8008500 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800855a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3308      	adds	r3, #8
 800856a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800856e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e1      	bne.n	800854a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800859c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e3      	bne.n	8008586 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085dc:	f023 0310 	bic.w	r3, r3, #16
 80085e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80085f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e4      	bne.n	80085cc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008606:	4618      	mov	r0, r3
 8008608:	f7fc f95d 	bl	80048c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800861e:	b29b      	uxth	r3, r3
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	b29b      	uxth	r3, r3
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f8c2 	bl	80087b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800862c:	e0a4      	b.n	8008778 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800863a:	b29b      	uxth	r3, r3
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008648:	b29b      	uxth	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8096 	beq.w	800877c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8091 	beq.w	800877c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800866e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800867c:	647b      	str	r3, [r7, #68]	@ 0x44
 800867e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800868a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e4      	bne.n	800865a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	623b      	str	r3, [r7, #32]
   return(result);
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80086b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086bc:	e841 2300 	strex	r3, r2, [r1]
 80086c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1e3      	bne.n	8008690 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2220      	movs	r2, #32
 80086cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f023 0310 	bic.w	r3, r3, #16
 80086f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	69b9      	ldr	r1, [r7, #24]
 8008704:	69fa      	ldr	r2, [r7, #28]
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	617b      	str	r3, [r7, #20]
   return(result);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e4      	bne.n	80086dc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2202      	movs	r2, #2
 8008716:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f846 	bl	80087b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008724:	e02a      	b.n	800877c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00e      	beq.n	8008750 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873a:	2b00      	cmp	r3, #0
 800873c:	d008      	beq.n	8008750 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d01c      	beq.n	8008780 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	4798      	blx	r3
    }
    return;
 800874e:	e017      	b.n	8008780 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d012      	beq.n	8008782 <HAL_UART_IRQHandler+0x59e>
 800875c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00c      	beq.n	8008782 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fd37 	bl	80091dc <UART_EndTransmit_IT>
    return;
 800876e:	e008      	b.n	8008782 <HAL_UART_IRQHandler+0x59e>
      return;
 8008770:	bf00      	nop
 8008772:	e006      	b.n	8008782 <HAL_UART_IRQHandler+0x59e>
    return;
 8008774:	bf00      	nop
 8008776:	e004      	b.n	8008782 <HAL_UART_IRQHandler+0x59e>
      return;
 8008778:	bf00      	nop
 800877a:	e002      	b.n	8008782 <HAL_UART_IRQHandler+0x59e>
      return;
 800877c:	bf00      	nop
 800877e:	e000      	b.n	8008782 <HAL_UART_IRQHandler+0x59e>
    return;
 8008780:	bf00      	nop
  }

}
 8008782:	37e8      	adds	r7, #232	@ 0xe8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	431a      	orrs	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4ba6      	ldr	r3, [pc, #664]	@ (8008a8c <UART_SetConfig+0x2c4>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6812      	ldr	r2, [r2, #0]
 80087fa:	6979      	ldr	r1, [r7, #20]
 80087fc:	430b      	orrs	r3, r1
 80087fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	4313      	orrs	r3, r2
 8008824:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	430a      	orrs	r2, r1
 8008838:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a94      	ldr	r2, [pc, #592]	@ (8008a90 <UART_SetConfig+0x2c8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d120      	bne.n	8008886 <UART_SetConfig+0xbe>
 8008844:	4b93      	ldr	r3, [pc, #588]	@ (8008a94 <UART_SetConfig+0x2cc>)
 8008846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	2b03      	cmp	r3, #3
 8008850:	d816      	bhi.n	8008880 <UART_SetConfig+0xb8>
 8008852:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <UART_SetConfig+0x90>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	08008869 	.word	0x08008869
 800885c:	08008875 	.word	0x08008875
 8008860:	0800886f 	.word	0x0800886f
 8008864:	0800887b 	.word	0x0800887b
 8008868:	2301      	movs	r3, #1
 800886a:	77fb      	strb	r3, [r7, #31]
 800886c:	e150      	b.n	8008b10 <UART_SetConfig+0x348>
 800886e:	2302      	movs	r3, #2
 8008870:	77fb      	strb	r3, [r7, #31]
 8008872:	e14d      	b.n	8008b10 <UART_SetConfig+0x348>
 8008874:	2304      	movs	r3, #4
 8008876:	77fb      	strb	r3, [r7, #31]
 8008878:	e14a      	b.n	8008b10 <UART_SetConfig+0x348>
 800887a:	2308      	movs	r3, #8
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	e147      	b.n	8008b10 <UART_SetConfig+0x348>
 8008880:	2310      	movs	r3, #16
 8008882:	77fb      	strb	r3, [r7, #31]
 8008884:	e144      	b.n	8008b10 <UART_SetConfig+0x348>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a83      	ldr	r2, [pc, #524]	@ (8008a98 <UART_SetConfig+0x2d0>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d132      	bne.n	80088f6 <UART_SetConfig+0x12e>
 8008890:	4b80      	ldr	r3, [pc, #512]	@ (8008a94 <UART_SetConfig+0x2cc>)
 8008892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008896:	f003 030c 	and.w	r3, r3, #12
 800889a:	2b0c      	cmp	r3, #12
 800889c:	d828      	bhi.n	80088f0 <UART_SetConfig+0x128>
 800889e:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <UART_SetConfig+0xdc>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088d9 	.word	0x080088d9
 80088a8:	080088f1 	.word	0x080088f1
 80088ac:	080088f1 	.word	0x080088f1
 80088b0:	080088f1 	.word	0x080088f1
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	080088f1 	.word	0x080088f1
 80088bc:	080088f1 	.word	0x080088f1
 80088c0:	080088f1 	.word	0x080088f1
 80088c4:	080088df 	.word	0x080088df
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088f1 	.word	0x080088f1
 80088d0:	080088f1 	.word	0x080088f1
 80088d4:	080088eb 	.word	0x080088eb
 80088d8:	2300      	movs	r3, #0
 80088da:	77fb      	strb	r3, [r7, #31]
 80088dc:	e118      	b.n	8008b10 <UART_SetConfig+0x348>
 80088de:	2302      	movs	r3, #2
 80088e0:	77fb      	strb	r3, [r7, #31]
 80088e2:	e115      	b.n	8008b10 <UART_SetConfig+0x348>
 80088e4:	2304      	movs	r3, #4
 80088e6:	77fb      	strb	r3, [r7, #31]
 80088e8:	e112      	b.n	8008b10 <UART_SetConfig+0x348>
 80088ea:	2308      	movs	r3, #8
 80088ec:	77fb      	strb	r3, [r7, #31]
 80088ee:	e10f      	b.n	8008b10 <UART_SetConfig+0x348>
 80088f0:	2310      	movs	r3, #16
 80088f2:	77fb      	strb	r3, [r7, #31]
 80088f4:	e10c      	b.n	8008b10 <UART_SetConfig+0x348>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a68      	ldr	r2, [pc, #416]	@ (8008a9c <UART_SetConfig+0x2d4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d120      	bne.n	8008942 <UART_SetConfig+0x17a>
 8008900:	4b64      	ldr	r3, [pc, #400]	@ (8008a94 <UART_SetConfig+0x2cc>)
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008906:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800890a:	2b30      	cmp	r3, #48	@ 0x30
 800890c:	d013      	beq.n	8008936 <UART_SetConfig+0x16e>
 800890e:	2b30      	cmp	r3, #48	@ 0x30
 8008910:	d814      	bhi.n	800893c <UART_SetConfig+0x174>
 8008912:	2b20      	cmp	r3, #32
 8008914:	d009      	beq.n	800892a <UART_SetConfig+0x162>
 8008916:	2b20      	cmp	r3, #32
 8008918:	d810      	bhi.n	800893c <UART_SetConfig+0x174>
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <UART_SetConfig+0x15c>
 800891e:	2b10      	cmp	r3, #16
 8008920:	d006      	beq.n	8008930 <UART_SetConfig+0x168>
 8008922:	e00b      	b.n	800893c <UART_SetConfig+0x174>
 8008924:	2300      	movs	r3, #0
 8008926:	77fb      	strb	r3, [r7, #31]
 8008928:	e0f2      	b.n	8008b10 <UART_SetConfig+0x348>
 800892a:	2302      	movs	r3, #2
 800892c:	77fb      	strb	r3, [r7, #31]
 800892e:	e0ef      	b.n	8008b10 <UART_SetConfig+0x348>
 8008930:	2304      	movs	r3, #4
 8008932:	77fb      	strb	r3, [r7, #31]
 8008934:	e0ec      	b.n	8008b10 <UART_SetConfig+0x348>
 8008936:	2308      	movs	r3, #8
 8008938:	77fb      	strb	r3, [r7, #31]
 800893a:	e0e9      	b.n	8008b10 <UART_SetConfig+0x348>
 800893c:	2310      	movs	r3, #16
 800893e:	77fb      	strb	r3, [r7, #31]
 8008940:	e0e6      	b.n	8008b10 <UART_SetConfig+0x348>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a56      	ldr	r2, [pc, #344]	@ (8008aa0 <UART_SetConfig+0x2d8>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d120      	bne.n	800898e <UART_SetConfig+0x1c6>
 800894c:	4b51      	ldr	r3, [pc, #324]	@ (8008a94 <UART_SetConfig+0x2cc>)
 800894e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008952:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008956:	2bc0      	cmp	r3, #192	@ 0xc0
 8008958:	d013      	beq.n	8008982 <UART_SetConfig+0x1ba>
 800895a:	2bc0      	cmp	r3, #192	@ 0xc0
 800895c:	d814      	bhi.n	8008988 <UART_SetConfig+0x1c0>
 800895e:	2b80      	cmp	r3, #128	@ 0x80
 8008960:	d009      	beq.n	8008976 <UART_SetConfig+0x1ae>
 8008962:	2b80      	cmp	r3, #128	@ 0x80
 8008964:	d810      	bhi.n	8008988 <UART_SetConfig+0x1c0>
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <UART_SetConfig+0x1a8>
 800896a:	2b40      	cmp	r3, #64	@ 0x40
 800896c:	d006      	beq.n	800897c <UART_SetConfig+0x1b4>
 800896e:	e00b      	b.n	8008988 <UART_SetConfig+0x1c0>
 8008970:	2300      	movs	r3, #0
 8008972:	77fb      	strb	r3, [r7, #31]
 8008974:	e0cc      	b.n	8008b10 <UART_SetConfig+0x348>
 8008976:	2302      	movs	r3, #2
 8008978:	77fb      	strb	r3, [r7, #31]
 800897a:	e0c9      	b.n	8008b10 <UART_SetConfig+0x348>
 800897c:	2304      	movs	r3, #4
 800897e:	77fb      	strb	r3, [r7, #31]
 8008980:	e0c6      	b.n	8008b10 <UART_SetConfig+0x348>
 8008982:	2308      	movs	r3, #8
 8008984:	77fb      	strb	r3, [r7, #31]
 8008986:	e0c3      	b.n	8008b10 <UART_SetConfig+0x348>
 8008988:	2310      	movs	r3, #16
 800898a:	77fb      	strb	r3, [r7, #31]
 800898c:	e0c0      	b.n	8008b10 <UART_SetConfig+0x348>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a44      	ldr	r2, [pc, #272]	@ (8008aa4 <UART_SetConfig+0x2dc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d125      	bne.n	80089e4 <UART_SetConfig+0x21c>
 8008998:	4b3e      	ldr	r3, [pc, #248]	@ (8008a94 <UART_SetConfig+0x2cc>)
 800899a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800899e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089a6:	d017      	beq.n	80089d8 <UART_SetConfig+0x210>
 80089a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089ac:	d817      	bhi.n	80089de <UART_SetConfig+0x216>
 80089ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b2:	d00b      	beq.n	80089cc <UART_SetConfig+0x204>
 80089b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b8:	d811      	bhi.n	80089de <UART_SetConfig+0x216>
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <UART_SetConfig+0x1fe>
 80089be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c2:	d006      	beq.n	80089d2 <UART_SetConfig+0x20a>
 80089c4:	e00b      	b.n	80089de <UART_SetConfig+0x216>
 80089c6:	2300      	movs	r3, #0
 80089c8:	77fb      	strb	r3, [r7, #31]
 80089ca:	e0a1      	b.n	8008b10 <UART_SetConfig+0x348>
 80089cc:	2302      	movs	r3, #2
 80089ce:	77fb      	strb	r3, [r7, #31]
 80089d0:	e09e      	b.n	8008b10 <UART_SetConfig+0x348>
 80089d2:	2304      	movs	r3, #4
 80089d4:	77fb      	strb	r3, [r7, #31]
 80089d6:	e09b      	b.n	8008b10 <UART_SetConfig+0x348>
 80089d8:	2308      	movs	r3, #8
 80089da:	77fb      	strb	r3, [r7, #31]
 80089dc:	e098      	b.n	8008b10 <UART_SetConfig+0x348>
 80089de:	2310      	movs	r3, #16
 80089e0:	77fb      	strb	r3, [r7, #31]
 80089e2:	e095      	b.n	8008b10 <UART_SetConfig+0x348>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a2f      	ldr	r2, [pc, #188]	@ (8008aa8 <UART_SetConfig+0x2e0>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d125      	bne.n	8008a3a <UART_SetConfig+0x272>
 80089ee:	4b29      	ldr	r3, [pc, #164]	@ (8008a94 <UART_SetConfig+0x2cc>)
 80089f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80089f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80089fc:	d017      	beq.n	8008a2e <UART_SetConfig+0x266>
 80089fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a02:	d817      	bhi.n	8008a34 <UART_SetConfig+0x26c>
 8008a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a08:	d00b      	beq.n	8008a22 <UART_SetConfig+0x25a>
 8008a0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a0e:	d811      	bhi.n	8008a34 <UART_SetConfig+0x26c>
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <UART_SetConfig+0x254>
 8008a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a18:	d006      	beq.n	8008a28 <UART_SetConfig+0x260>
 8008a1a:	e00b      	b.n	8008a34 <UART_SetConfig+0x26c>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	77fb      	strb	r3, [r7, #31]
 8008a20:	e076      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a22:	2302      	movs	r3, #2
 8008a24:	77fb      	strb	r3, [r7, #31]
 8008a26:	e073      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	77fb      	strb	r3, [r7, #31]
 8008a2c:	e070      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a2e:	2308      	movs	r3, #8
 8008a30:	77fb      	strb	r3, [r7, #31]
 8008a32:	e06d      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a34:	2310      	movs	r3, #16
 8008a36:	77fb      	strb	r3, [r7, #31]
 8008a38:	e06a      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8008aac <UART_SetConfig+0x2e4>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d138      	bne.n	8008ab6 <UART_SetConfig+0x2ee>
 8008a44:	4b13      	ldr	r3, [pc, #76]	@ (8008a94 <UART_SetConfig+0x2cc>)
 8008a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a4a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008a4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a52:	d017      	beq.n	8008a84 <UART_SetConfig+0x2bc>
 8008a54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a58:	d82a      	bhi.n	8008ab0 <UART_SetConfig+0x2e8>
 8008a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a5e:	d00b      	beq.n	8008a78 <UART_SetConfig+0x2b0>
 8008a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a64:	d824      	bhi.n	8008ab0 <UART_SetConfig+0x2e8>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <UART_SetConfig+0x2aa>
 8008a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a6e:	d006      	beq.n	8008a7e <UART_SetConfig+0x2b6>
 8008a70:	e01e      	b.n	8008ab0 <UART_SetConfig+0x2e8>
 8008a72:	2300      	movs	r3, #0
 8008a74:	77fb      	strb	r3, [r7, #31]
 8008a76:	e04b      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	77fb      	strb	r3, [r7, #31]
 8008a7c:	e048      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a7e:	2304      	movs	r3, #4
 8008a80:	77fb      	strb	r3, [r7, #31]
 8008a82:	e045      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a84:	2308      	movs	r3, #8
 8008a86:	77fb      	strb	r3, [r7, #31]
 8008a88:	e042      	b.n	8008b10 <UART_SetConfig+0x348>
 8008a8a:	bf00      	nop
 8008a8c:	efff69f3 	.word	0xefff69f3
 8008a90:	40011000 	.word	0x40011000
 8008a94:	40023800 	.word	0x40023800
 8008a98:	40004400 	.word	0x40004400
 8008a9c:	40004800 	.word	0x40004800
 8008aa0:	40004c00 	.word	0x40004c00
 8008aa4:	40005000 	.word	0x40005000
 8008aa8:	40011400 	.word	0x40011400
 8008aac:	40007800 	.word	0x40007800
 8008ab0:	2310      	movs	r3, #16
 8008ab2:	77fb      	strb	r3, [r7, #31]
 8008ab4:	e02c      	b.n	8008b10 <UART_SetConfig+0x348>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a72      	ldr	r2, [pc, #456]	@ (8008c84 <UART_SetConfig+0x4bc>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d125      	bne.n	8008b0c <UART_SetConfig+0x344>
 8008ac0:	4b71      	ldr	r3, [pc, #452]	@ (8008c88 <UART_SetConfig+0x4c0>)
 8008ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008aca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008ace:	d017      	beq.n	8008b00 <UART_SetConfig+0x338>
 8008ad0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008ad4:	d817      	bhi.n	8008b06 <UART_SetConfig+0x33e>
 8008ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ada:	d00b      	beq.n	8008af4 <UART_SetConfig+0x32c>
 8008adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ae0:	d811      	bhi.n	8008b06 <UART_SetConfig+0x33e>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <UART_SetConfig+0x326>
 8008ae6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aea:	d006      	beq.n	8008afa <UART_SetConfig+0x332>
 8008aec:	e00b      	b.n	8008b06 <UART_SetConfig+0x33e>
 8008aee:	2300      	movs	r3, #0
 8008af0:	77fb      	strb	r3, [r7, #31]
 8008af2:	e00d      	b.n	8008b10 <UART_SetConfig+0x348>
 8008af4:	2302      	movs	r3, #2
 8008af6:	77fb      	strb	r3, [r7, #31]
 8008af8:	e00a      	b.n	8008b10 <UART_SetConfig+0x348>
 8008afa:	2304      	movs	r3, #4
 8008afc:	77fb      	strb	r3, [r7, #31]
 8008afe:	e007      	b.n	8008b10 <UART_SetConfig+0x348>
 8008b00:	2308      	movs	r3, #8
 8008b02:	77fb      	strb	r3, [r7, #31]
 8008b04:	e004      	b.n	8008b10 <UART_SetConfig+0x348>
 8008b06:	2310      	movs	r3, #16
 8008b08:	77fb      	strb	r3, [r7, #31]
 8008b0a:	e001      	b.n	8008b10 <UART_SetConfig+0x348>
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b18:	d15b      	bne.n	8008bd2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008b1a:	7ffb      	ldrb	r3, [r7, #31]
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d828      	bhi.n	8008b72 <UART_SetConfig+0x3aa>
 8008b20:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <UART_SetConfig+0x360>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b4d 	.word	0x08008b4d
 8008b2c:	08008b55 	.word	0x08008b55
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	08008b73 	.word	0x08008b73
 8008b38:	08008b63 	.word	0x08008b63
 8008b3c:	08008b73 	.word	0x08008b73
 8008b40:	08008b73 	.word	0x08008b73
 8008b44:	08008b73 	.word	0x08008b73
 8008b48:	08008b6b 	.word	0x08008b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b4c:	f7fc fe48 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8008b50:	61b8      	str	r0, [r7, #24]
        break;
 8008b52:	e013      	b.n	8008b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b54:	f7fc fe58 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8008b58:	61b8      	str	r0, [r7, #24]
        break;
 8008b5a:	e00f      	b.n	8008b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b5c:	4b4b      	ldr	r3, [pc, #300]	@ (8008c8c <UART_SetConfig+0x4c4>)
 8008b5e:	61bb      	str	r3, [r7, #24]
        break;
 8008b60:	e00c      	b.n	8008b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b62:	f7fc fd2b 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8008b66:	61b8      	str	r0, [r7, #24]
        break;
 8008b68:	e008      	b.n	8008b7c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b6e:	61bb      	str	r3, [r7, #24]
        break;
 8008b70:	e004      	b.n	8008b7c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	77bb      	strb	r3, [r7, #30]
        break;
 8008b7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d074      	beq.n	8008c6c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	005a      	lsls	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	441a      	add	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b96:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b0f      	cmp	r3, #15
 8008b9c:	d916      	bls.n	8008bcc <UART_SetConfig+0x404>
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ba4:	d212      	bcs.n	8008bcc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	f023 030f 	bic.w	r3, r3, #15
 8008bae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	085b      	lsrs	r3, r3, #1
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	89fb      	ldrh	r3, [r7, #14]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	89fa      	ldrh	r2, [r7, #14]
 8008bc8:	60da      	str	r2, [r3, #12]
 8008bca:	e04f      	b.n	8008c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	77bb      	strb	r3, [r7, #30]
 8008bd0:	e04c      	b.n	8008c6c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bd2:	7ffb      	ldrb	r3, [r7, #31]
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d828      	bhi.n	8008c2a <UART_SetConfig+0x462>
 8008bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008be0 <UART_SetConfig+0x418>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	08008c2b 	.word	0x08008c2b
 8008bf0:	08008c1b 	.word	0x08008c1b
 8008bf4:	08008c2b 	.word	0x08008c2b
 8008bf8:	08008c2b 	.word	0x08008c2b
 8008bfc:	08008c2b 	.word	0x08008c2b
 8008c00:	08008c23 	.word	0x08008c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c04:	f7fc fdec 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8008c08:	61b8      	str	r0, [r7, #24]
        break;
 8008c0a:	e013      	b.n	8008c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c0c:	f7fc fdfc 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8008c10:	61b8      	str	r0, [r7, #24]
        break;
 8008c12:	e00f      	b.n	8008c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c14:	4b1d      	ldr	r3, [pc, #116]	@ (8008c8c <UART_SetConfig+0x4c4>)
 8008c16:	61bb      	str	r3, [r7, #24]
        break;
 8008c18:	e00c      	b.n	8008c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c1a:	f7fc fccf 	bl	80055bc <HAL_RCC_GetSysClockFreq>
 8008c1e:	61b8      	str	r0, [r7, #24]
        break;
 8008c20:	e008      	b.n	8008c34 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c26:	61bb      	str	r3, [r7, #24]
        break;
 8008c28:	e004      	b.n	8008c34 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	77bb      	strb	r3, [r7, #30]
        break;
 8008c32:	bf00      	nop
    }

    if (pclk != 0U)
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d018      	beq.n	8008c6c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	085a      	lsrs	r2, r3, #1
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	441a      	add	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b0f      	cmp	r3, #15
 8008c52:	d909      	bls.n	8008c68 <UART_SetConfig+0x4a0>
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c5a:	d205      	bcs.n	8008c68 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	e001      	b.n	8008c6c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008c78:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3720      	adds	r7, #32
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	40007c00 	.word	0x40007c00
 8008c88:	40023800 	.word	0x40023800
 8008c8c:	00f42400 	.word	0x00f42400

08008c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00a      	beq.n	8008cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00a      	beq.n	8008cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d24:	f003 0310 	and.w	r3, r3, #16
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00a      	beq.n	8008d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01a      	beq.n	8008da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d8e:	d10a      	bne.n	8008da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	605a      	str	r2, [r3, #4]
  }
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08c      	sub	sp, #48	@ 0x30
 8008dd8:	af02      	add	r7, sp, #8
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008de4:	f7fb fc2e 	bl	8004644 <HAL_GetTick>
 8008de8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0308 	and.w	r3, r3, #8
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d12e      	bne.n	8008e56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008df8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e00:	2200      	movs	r2, #0
 8008e02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f83b 	bl	8008e82 <UART_WaitOnFlagUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d021      	beq.n	8008e56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e26:	623b      	str	r3, [r7, #32]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	69b9      	ldr	r1, [r7, #24]
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e6      	bne.n	8008e12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e011      	b.n	8008e7a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3728      	adds	r7, #40	@ 0x28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	603b      	str	r3, [r7, #0]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e92:	e04f      	b.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d04b      	beq.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e9c:	f7fb fbd2 	bl	8004644 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d302      	bcc.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e04e      	b.n	8008f54 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d037      	beq.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b80      	cmp	r3, #128	@ 0x80
 8008ec8:	d034      	beq.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2b40      	cmp	r3, #64	@ 0x40
 8008ece:	d031      	beq.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b08      	cmp	r3, #8
 8008edc:	d110      	bne.n	8008f00 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f8fe 	bl	80090e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2208      	movs	r2, #8
 8008ef0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e029      	b.n	8008f54 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	69db      	ldr	r3, [r3, #28]
 8008f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f0e:	d111      	bne.n	8008f34 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 f8e4 	bl	80090e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e00f      	b.n	8008f54 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69da      	ldr	r2, [r3, #28]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	bf0c      	ite	eq
 8008f44:	2301      	moveq	r3, #1
 8008f46:	2300      	movne	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d0a0      	beq.n	8008e94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b097      	sub	sp, #92	@ 0x5c
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	4613      	mov	r3, r2
 8008f68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	88fa      	ldrh	r2, [r7, #6]
 8008f7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f8e:	d10e      	bne.n	8008fae <UART_Start_Receive_IT+0x52>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d105      	bne.n	8008fa4 <UART_Start_Receive_IT+0x48>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008f9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008fa2:	e02d      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	22ff      	movs	r2, #255	@ 0xff
 8008fa8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008fac:	e028      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10d      	bne.n	8008fd2 <UART_Start_Receive_IT+0x76>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <UART_Start_Receive_IT+0x6c>
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	22ff      	movs	r2, #255	@ 0xff
 8008fc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008fc6:	e01b      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	227f      	movs	r2, #127	@ 0x7f
 8008fcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008fd0:	e016      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fda:	d10d      	bne.n	8008ff8 <UART_Start_Receive_IT+0x9c>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d104      	bne.n	8008fee <UART_Start_Receive_IT+0x92>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	227f      	movs	r2, #127	@ 0x7f
 8008fe8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008fec:	e008      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	223f      	movs	r2, #63	@ 0x3f
 8008ff2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008ff6:	e003      	b.n	8009000 <UART_Start_Receive_IT+0xa4>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2222      	movs	r2, #34	@ 0x22
 800900c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901a:	e853 3f00 	ldrex	r3, [r3]
 800901e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009022:	f043 0301 	orr.w	r3, r3, #1
 8009026:	657b      	str	r3, [r7, #84]	@ 0x54
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3308      	adds	r3, #8
 800902e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009030:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009032:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009034:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009038:	e841 2300 	strex	r3, r2, [r1]
 800903c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800903e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1e5      	bne.n	8009010 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800904c:	d107      	bne.n	800905e <UART_Start_Receive_IT+0x102>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d103      	bne.n	800905e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	4a21      	ldr	r2, [pc, #132]	@ (80090e0 <UART_Start_Receive_IT+0x184>)
 800905a:	669a      	str	r2, [r3, #104]	@ 0x68
 800905c:	e002      	b.n	8009064 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4a20      	ldr	r2, [pc, #128]	@ (80090e4 <UART_Start_Receive_IT+0x188>)
 8009062:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d019      	beq.n	80090a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800908a:	637b      	str	r3, [r7, #52]	@ 0x34
 800908c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009090:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e6      	bne.n	800906c <UART_Start_Receive_IT+0x110>
 800909e:	e018      	b.n	80090d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	613b      	str	r3, [r7, #16]
   return(result);
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f043 0320 	orr.w	r3, r3, #32
 80090b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090be:	623b      	str	r3, [r7, #32]
 80090c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	69f9      	ldr	r1, [r7, #28]
 80090c4:	6a3a      	ldr	r2, [r7, #32]
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e6      	bne.n	80090a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	375c      	adds	r7, #92	@ 0x5c
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	080093d9 	.word	0x080093d9
 80090e4:	08009231 	.word	0x08009231

080090e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b095      	sub	sp, #84	@ 0x54
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800910e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009110:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009114:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800911c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	61fb      	str	r3, [r7, #28]
   return(result);
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009142:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009144:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800915a:	2b01      	cmp	r3, #1
 800915c:	d118      	bne.n	8009190 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	60bb      	str	r3, [r7, #8]
   return(result);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f023 0310 	bic.w	r3, r3, #16
 8009172:	647b      	str	r3, [r7, #68]	@ 0x44
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800917c:	61bb      	str	r3, [r7, #24]
 800917e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6979      	ldr	r1, [r7, #20]
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	613b      	str	r3, [r7, #16]
   return(result);
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e6      	bne.n	800915e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80091a4:	bf00      	nop
 80091a6:	3754      	adds	r7, #84	@ 0x54
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff fae4 	bl	800879c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	61bb      	str	r3, [r7, #24]
 8009204:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6979      	ldr	r1, [r7, #20]
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	613b      	str	r3, [r7, #16]
   return(result);
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e6      	bne.n	80091e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7ff fab0 	bl	8008788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009228:	bf00      	nop
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b09c      	sub	sp, #112	@ 0x70
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800923e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009248:	2b22      	cmp	r3, #34	@ 0x22
 800924a:	f040 80b9 	bne.w	80093c0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009258:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800925c:	b2d9      	uxtb	r1, r3
 800925e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009262:	b2da      	uxtb	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009268:	400a      	ands	r2, r1
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800927e:	b29b      	uxth	r3, r3
 8009280:	3b01      	subs	r3, #1
 8009282:	b29a      	uxth	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	f040 809c 	bne.w	80093d0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	461a      	mov	r2, r3
 80092b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80092b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80092c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e6      	bne.n	8009298 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092dc:	f023 0301 	bic.w	r3, r3, #1
 80092e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80092ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e5      	bne.n	80092ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2220      	movs	r2, #32
 8009302:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d018      	beq.n	8009352 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	623b      	str	r3, [r7, #32]
   return(result);
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009334:	663b      	str	r3, [r7, #96]	@ 0x60
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800933e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009340:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800934c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e6      	bne.n	8009320 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009356:	2b01      	cmp	r3, #1
 8009358:	d12e      	bne.n	80093b8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	60fb      	str	r3, [r7, #12]
   return(result);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f023 0310 	bic.w	r3, r3, #16
 8009374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	461a      	mov	r2, r3
 800937c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800937e:	61fb      	str	r3, [r7, #28]
 8009380:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	69b9      	ldr	r1, [r7, #24]
 8009384:	69fa      	ldr	r2, [r7, #28]
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	617b      	str	r3, [r7, #20]
   return(result);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e6      	bne.n	8009360 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b10      	cmp	r3, #16
 800939e:	d103      	bne.n	80093a8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2210      	movs	r2, #16
 80093a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7ff f9fd 	bl	80087b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093b6:	e00b      	b.n	80093d0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7fa f827 	bl	800340c <HAL_UART_RxCpltCallback>
}
 80093be:	e007      	b.n	80093d0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0208 	orr.w	r2, r2, #8
 80093ce:	619a      	str	r2, [r3, #24]
}
 80093d0:	bf00      	nop
 80093d2:	3770      	adds	r7, #112	@ 0x70
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b09c      	sub	sp, #112	@ 0x70
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093f0:	2b22      	cmp	r3, #34	@ 0x22
 80093f2:	f040 80b9 	bne.w	8009568 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009404:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009406:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800940a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800940e:	4013      	ands	r3, r2
 8009410:	b29a      	uxth	r2, r3
 8009412:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009414:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941a:	1c9a      	adds	r2, r3, #2
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009426:	b29b      	uxth	r3, r3
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009438:	b29b      	uxth	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	f040 809c 	bne.w	8009578 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800944e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009454:	667b      	str	r3, [r7, #100]	@ 0x64
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800945e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009460:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009464:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800946c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e6      	bne.n	8009440 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3308      	adds	r3, #8
 8009478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	f023 0301 	bic.w	r3, r3, #1
 8009488:	663b      	str	r3, [r7, #96]	@ 0x60
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3308      	adds	r3, #8
 8009490:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009492:	643a      	str	r2, [r7, #64]	@ 0x40
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e5      	bne.n	8009472 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d018      	beq.n	80094fa <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e6      	bne.n	80094c8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d12e      	bne.n	8009560 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	60bb      	str	r3, [r7, #8]
   return(result);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f023 0310 	bic.w	r3, r3, #16
 800951c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009526:	61bb      	str	r3, [r7, #24]
 8009528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6979      	ldr	r1, [r7, #20]
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	613b      	str	r3, [r7, #16]
   return(result);
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e6      	bne.n	8009508 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b10      	cmp	r3, #16
 8009546:	d103      	bne.n	8009550 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2210      	movs	r2, #16
 800954e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff f929 	bl	80087b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800955e:	e00b      	b.n	8009578 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7f9 ff53 	bl	800340c <HAL_UART_RxCpltCallback>
}
 8009566:	e007      	b.n	8009578 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699a      	ldr	r2, [r3, #24]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f042 0208 	orr.w	r2, r2, #8
 8009576:	619a      	str	r2, [r3, #24]
}
 8009578:	bf00      	nop
 800957a:	3770      	adds	r7, #112	@ 0x70
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009584:	4904      	ldr	r1, [pc, #16]	@ (8009598 <MX_FATFS_Init+0x18>)
 8009586:	4805      	ldr	r0, [pc, #20]	@ (800959c <MX_FATFS_Init+0x1c>)
 8009588:	f003 f838 	bl	800c5fc <FATFS_LinkDriver>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	4b03      	ldr	r3, [pc, #12]	@ (80095a0 <MX_FATFS_Init+0x20>)
 8009592:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009594:	bf00      	nop
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20002664 	.word	0x20002664
 800959c:	200000a4 	.word	0x200000a4
 80095a0:	20002660 	.word	0x20002660

080095a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80095a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize (pdrv);
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f9 fa45 	bl	8002a50 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 80095c6:	bf00      	nop
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	4603      	mov	r3, r0
 80095d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SD_disk_status (pdrv);
 80095da:	79fb      	ldrb	r3, [r7, #7]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7f9 fb1d 	bl	8002c1c <SD_disk_status>
  /* USER CODE END STATUS */
}
 80095e2:	bf00      	nop
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_disk_read (pdrv, buff, sector, count);
 80095fc:	7bf8      	ldrb	r0, [r7, #15]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	f7f9 fb20 	bl	8002c48 <SD_disk_read>
  /* USER CODE END READ */
}
 8009608:	bf00      	nop
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_disk_write (pdrv, buff, sector, count);
 8009622:	7bf8      	ldrb	r0, [r7, #15]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	68b9      	ldr	r1, [r7, #8]
 800962a:	f7f9 fb77 	bl	8002d1c <SD_disk_write>
  /* USER CODE END WRITE */
}
 800962e:	bf00      	nop
 8009630:	4618      	mov	r0, r3
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	603a      	str	r2, [r7, #0]
 8009642:	71fb      	strb	r3, [r7, #7]
 8009644:	460b      	mov	r3, r1
 8009646:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	79b9      	ldrb	r1, [r7, #6]
 800964c:	683a      	ldr	r2, [r7, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f7f9 fbe8 	bl	8002e24 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8009654:	bf00      	nop
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	4603      	mov	r3, r0
 8009668:	6039      	str	r1, [r7, #0]
 800966a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800966c:	88fb      	ldrh	r3, [r7, #6]
 800966e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009670:	d802      	bhi.n	8009678 <ff_convert+0x18>
		c = chr;
 8009672:	88fb      	ldrh	r3, [r7, #6]
 8009674:	81fb      	strh	r3, [r7, #14]
 8009676:	e025      	b.n	80096c4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00b      	beq.n	8009696 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800967e:	88fb      	ldrh	r3, [r7, #6]
 8009680:	2bff      	cmp	r3, #255	@ 0xff
 8009682:	d805      	bhi.n	8009690 <ff_convert+0x30>
 8009684:	88fb      	ldrh	r3, [r7, #6]
 8009686:	3b80      	subs	r3, #128	@ 0x80
 8009688:	4a12      	ldr	r2, [pc, #72]	@ (80096d4 <ff_convert+0x74>)
 800968a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800968e:	e000      	b.n	8009692 <ff_convert+0x32>
 8009690:	2300      	movs	r3, #0
 8009692:	81fb      	strh	r3, [r7, #14]
 8009694:	e016      	b.n	80096c4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009696:	2300      	movs	r3, #0
 8009698:	81fb      	strh	r3, [r7, #14]
 800969a:	e009      	b.n	80096b0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800969c:	89fb      	ldrh	r3, [r7, #14]
 800969e:	4a0d      	ldr	r2, [pc, #52]	@ (80096d4 <ff_convert+0x74>)
 80096a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096a4:	88fa      	ldrh	r2, [r7, #6]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d006      	beq.n	80096b8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80096aa:	89fb      	ldrh	r3, [r7, #14]
 80096ac:	3301      	adds	r3, #1
 80096ae:	81fb      	strh	r3, [r7, #14]
 80096b0:	89fb      	ldrh	r3, [r7, #14]
 80096b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80096b4:	d9f2      	bls.n	800969c <ff_convert+0x3c>
 80096b6:	e000      	b.n	80096ba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80096b8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80096ba:	89fb      	ldrh	r3, [r7, #14]
 80096bc:	3380      	adds	r3, #128	@ 0x80
 80096be:	b29b      	uxth	r3, r3
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80096c4:	89fb      	ldrh	r3, [r7, #14]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	08011068 	.word	0x08011068

080096d8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096e8:	d201      	bcs.n	80096ee <ff_wtoupper+0x16>
 80096ea:	4b3e      	ldr	r3, [pc, #248]	@ (80097e4 <ff_wtoupper+0x10c>)
 80096ec:	e000      	b.n	80096f0 <ff_wtoupper+0x18>
 80096ee:	4b3e      	ldr	r3, [pc, #248]	@ (80097e8 <ff_wtoupper+0x110>)
 80096f0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	1c9a      	adds	r2, r3, #2
 80096f6:	617a      	str	r2, [r7, #20]
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80096fc:	8a7b      	ldrh	r3, [r7, #18]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d068      	beq.n	80097d4 <ff_wtoupper+0xfc>
 8009702:	88fa      	ldrh	r2, [r7, #6]
 8009704:	8a7b      	ldrh	r3, [r7, #18]
 8009706:	429a      	cmp	r2, r3
 8009708:	d364      	bcc.n	80097d4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	1c9a      	adds	r2, r3, #2
 800970e:	617a      	str	r2, [r7, #20]
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	823b      	strh	r3, [r7, #16]
 8009714:	8a3b      	ldrh	r3, [r7, #16]
 8009716:	0a1b      	lsrs	r3, r3, #8
 8009718:	81fb      	strh	r3, [r7, #14]
 800971a:	8a3b      	ldrh	r3, [r7, #16]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009720:	88fa      	ldrh	r2, [r7, #6]
 8009722:	8a79      	ldrh	r1, [r7, #18]
 8009724:	8a3b      	ldrh	r3, [r7, #16]
 8009726:	440b      	add	r3, r1
 8009728:	429a      	cmp	r2, r3
 800972a:	da49      	bge.n	80097c0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800972c:	89fb      	ldrh	r3, [r7, #14]
 800972e:	2b08      	cmp	r3, #8
 8009730:	d84f      	bhi.n	80097d2 <ff_wtoupper+0xfa>
 8009732:	a201      	add	r2, pc, #4	@ (adr r2, 8009738 <ff_wtoupper+0x60>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	0800975d 	.word	0x0800975d
 800973c:	0800976f 	.word	0x0800976f
 8009740:	08009785 	.word	0x08009785
 8009744:	0800978d 	.word	0x0800978d
 8009748:	08009795 	.word	0x08009795
 800974c:	0800979d 	.word	0x0800979d
 8009750:	080097a5 	.word	0x080097a5
 8009754:	080097ad 	.word	0x080097ad
 8009758:	080097b5 	.word	0x080097b5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800975c:	88fa      	ldrh	r2, [r7, #6]
 800975e:	8a7b      	ldrh	r3, [r7, #18]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4413      	add	r3, r2
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	80fb      	strh	r3, [r7, #6]
 800976c:	e027      	b.n	80097be <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800976e:	88fa      	ldrh	r2, [r7, #6]
 8009770:	8a7b      	ldrh	r3, [r7, #18]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	b29b      	uxth	r3, r3
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	b29b      	uxth	r3, r3
 800977c:	88fa      	ldrh	r2, [r7, #6]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	80fb      	strh	r3, [r7, #6]
 8009782:	e01c      	b.n	80097be <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009784:	88fb      	ldrh	r3, [r7, #6]
 8009786:	3b10      	subs	r3, #16
 8009788:	80fb      	strh	r3, [r7, #6]
 800978a:	e018      	b.n	80097be <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800978c:	88fb      	ldrh	r3, [r7, #6]
 800978e:	3b20      	subs	r3, #32
 8009790:	80fb      	strh	r3, [r7, #6]
 8009792:	e014      	b.n	80097be <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009794:	88fb      	ldrh	r3, [r7, #6]
 8009796:	3b30      	subs	r3, #48	@ 0x30
 8009798:	80fb      	strh	r3, [r7, #6]
 800979a:	e010      	b.n	80097be <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800979c:	88fb      	ldrh	r3, [r7, #6]
 800979e:	3b1a      	subs	r3, #26
 80097a0:	80fb      	strh	r3, [r7, #6]
 80097a2:	e00c      	b.n	80097be <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80097a4:	88fb      	ldrh	r3, [r7, #6]
 80097a6:	3308      	adds	r3, #8
 80097a8:	80fb      	strh	r3, [r7, #6]
 80097aa:	e008      	b.n	80097be <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80097ac:	88fb      	ldrh	r3, [r7, #6]
 80097ae:	3b50      	subs	r3, #80	@ 0x50
 80097b0:	80fb      	strh	r3, [r7, #6]
 80097b2:	e004      	b.n	80097be <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80097ba:	80fb      	strh	r3, [r7, #6]
 80097bc:	bf00      	nop
			}
			break;
 80097be:	e008      	b.n	80097d2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80097c0:	89fb      	ldrh	r3, [r7, #14]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d195      	bne.n	80096f2 <ff_wtoupper+0x1a>
 80097c6:	8a3b      	ldrh	r3, [r7, #16]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	4413      	add	r3, r2
 80097ce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80097d0:	e78f      	b.n	80096f2 <ff_wtoupper+0x1a>
			break;
 80097d2:	bf00      	nop
	}

	return chr;
 80097d4:	88fb      	ldrh	r3, [r7, #6]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	08011168 	.word	0x08011168
 80097e8:	0801135c 	.word	0x0801135c

080097ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4603      	mov	r3, r0
 80097f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80097f6:	79fb      	ldrb	r3, [r7, #7]
 80097f8:	4a08      	ldr	r2, [pc, #32]	@ (800981c <disk_status+0x30>)
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	79fa      	ldrb	r2, [r7, #7]
 8009804:	4905      	ldr	r1, [pc, #20]	@ (800981c <disk_status+0x30>)
 8009806:	440a      	add	r2, r1
 8009808:	7a12      	ldrb	r2, [r2, #8]
 800980a:	4610      	mov	r0, r2
 800980c:	4798      	blx	r3
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20002890 	.word	0x20002890

08009820 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	4a0d      	ldr	r2, [pc, #52]	@ (8009868 <disk_initialize+0x48>)
 8009832:	5cd3      	ldrb	r3, [r2, r3]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d111      	bne.n	800985c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	4a0b      	ldr	r2, [pc, #44]	@ (8009868 <disk_initialize+0x48>)
 800983c:	2101      	movs	r1, #1
 800983e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	4a09      	ldr	r2, [pc, #36]	@ (8009868 <disk_initialize+0x48>)
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	79fa      	ldrb	r2, [r7, #7]
 800984e:	4906      	ldr	r1, [pc, #24]	@ (8009868 <disk_initialize+0x48>)
 8009850:	440a      	add	r2, r1
 8009852:	7a12      	ldrb	r2, [r2, #8]
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	20002890 	.word	0x20002890

0800986c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800986c:	b590      	push	{r4, r7, lr}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	607a      	str	r2, [r7, #4]
 8009876:	603b      	str	r3, [r7, #0]
 8009878:	4603      	mov	r3, r0
 800987a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	4a0a      	ldr	r2, [pc, #40]	@ (80098a8 <disk_read+0x3c>)
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	689c      	ldr	r4, [r3, #8]
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4a07      	ldr	r2, [pc, #28]	@ (80098a8 <disk_read+0x3c>)
 800988c:	4413      	add	r3, r2
 800988e:	7a18      	ldrb	r0, [r3, #8]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	47a0      	blx	r4
 8009898:	4603      	mov	r3, r0
 800989a:	75fb      	strb	r3, [r7, #23]
  return res;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd90      	pop	{r4, r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20002890 	.word	0x20002890

080098ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80098ac:	b590      	push	{r4, r7, lr}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60b9      	str	r1, [r7, #8]
 80098b4:	607a      	str	r2, [r7, #4]
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
 80098be:	4a0a      	ldr	r2, [pc, #40]	@ (80098e8 <disk_write+0x3c>)
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	68dc      	ldr	r4, [r3, #12]
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	4a07      	ldr	r2, [pc, #28]	@ (80098e8 <disk_write+0x3c>)
 80098cc:	4413      	add	r3, r2
 80098ce:	7a18      	ldrb	r0, [r3, #8]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	47a0      	blx	r4
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]
  return res;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd90      	pop	{r4, r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20002890 	.word	0x20002890

080098ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	603a      	str	r2, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
 80098f8:	460b      	mov	r3, r1
 80098fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	4a09      	ldr	r2, [pc, #36]	@ (8009924 <disk_ioctl+0x38>)
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	79fa      	ldrb	r2, [r7, #7]
 800990a:	4906      	ldr	r1, [pc, #24]	@ (8009924 <disk_ioctl+0x38>)
 800990c:	440a      	add	r2, r1
 800990e:	7a10      	ldrb	r0, [r2, #8]
 8009910:	79b9      	ldrb	r1, [r7, #6]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	4798      	blx	r3
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]
  return res;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20002890 	.word	0x20002890

08009928 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3301      	adds	r3, #1
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009938:	89fb      	ldrh	r3, [r7, #14]
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	b21a      	sxth	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	b21b      	sxth	r3, r3
 8009944:	4313      	orrs	r3, r2
 8009946:	b21b      	sxth	r3, r3
 8009948:	81fb      	strh	r3, [r7, #14]
	return rv;
 800994a:	89fb      	ldrh	r3, [r7, #14]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3303      	adds	r3, #3
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	021b      	lsls	r3, r3, #8
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	3202      	adds	r2, #2
 8009970:	7812      	ldrb	r2, [r2, #0]
 8009972:	4313      	orrs	r3, r2
 8009974:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	3201      	adds	r2, #1
 800997e:	7812      	ldrb	r2, [r2, #0]
 8009980:	4313      	orrs	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	7812      	ldrb	r2, [r2, #0]
 800998c:	4313      	orrs	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009990:	68fb      	ldr	r3, [r7, #12]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3714      	adds	r7, #20
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	460b      	mov	r3, r1
 80099a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	1c5a      	adds	r2, r3, #1
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	887a      	ldrh	r2, [r7, #2]
 80099b2:	b2d2      	uxtb	r2, r2
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	887b      	ldrh	r3, [r7, #2]
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	887a      	ldrh	r2, [r7, #2]
 80099c4:	b2d2      	uxtb	r2, r2
 80099c6:	701a      	strb	r2, [r3, #0]
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	b2d2      	uxtb	r2, r2
 80099e8:	701a      	strb	r2, [r3, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	0a1b      	lsrs	r3, r3, #8
 80099ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	607a      	str	r2, [r7, #4]
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	b2d2      	uxtb	r2, r2
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	0a1b      	lsrs	r3, r3, #8
 8009a12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009a2c:	b480      	push	{r7}
 8009a2e:	b087      	sub	sp, #28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00d      	beq.n	8009a62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	1c53      	adds	r3, r2, #1
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	1c59      	adds	r1, r3, #1
 8009a50:	6179      	str	r1, [r7, #20]
 8009a52:	7812      	ldrb	r2, [r2, #0]
 8009a54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	607b      	str	r3, [r7, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1f1      	bne.n	8009a46 <mem_cpy+0x1a>
	}
}
 8009a62:	bf00      	nop
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009a6e:	b480      	push	{r7}
 8009a70:	b087      	sub	sp, #28
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	617a      	str	r2, [r7, #20]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	b2d2      	uxtb	r2, r2
 8009a88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	607b      	str	r3, [r7, #4]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1f3      	bne.n	8009a7e <mem_set+0x10>
}
 8009a96:	bf00      	nop
 8009a98:	bf00      	nop
 8009a9a:	371c      	adds	r7, #28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009aa4:	b480      	push	{r7}
 8009aa6:	b089      	sub	sp, #36	@ 0x24
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	61fb      	str	r3, [r7, #28]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	61fa      	str	r2, [r7, #28]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	61ba      	str	r2, [r7, #24]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	1acb      	subs	r3, r1, r3
 8009ad0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	607b      	str	r3, [r7, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <mem_cmp+0x40>
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0eb      	beq.n	8009abc <mem_cmp+0x18>

	return r;
 8009ae4:	697b      	ldr	r3, [r7, #20]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3724      	adds	r7, #36	@ 0x24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
 8009afa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009afc:	e002      	b.n	8009b04 <chk_chr+0x12>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	3301      	adds	r3, #1
 8009b02:	607b      	str	r3, [r7, #4]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <chk_chr+0x26>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d1f2      	bne.n	8009afe <chk_chr+0xc>
	return *str;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b32:	2300      	movs	r3, #0
 8009b34:	60bb      	str	r3, [r7, #8]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	e029      	b.n	8009b90 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009b3c:	4a27      	ldr	r2, [pc, #156]	@ (8009bdc <chk_lock+0xb4>)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	011b      	lsls	r3, r3, #4
 8009b42:	4413      	add	r3, r2
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d01d      	beq.n	8009b86 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b4a:	4a24      	ldr	r2, [pc, #144]	@ (8009bdc <chk_lock+0xb4>)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	011b      	lsls	r3, r3, #4
 8009b50:	4413      	add	r3, r2
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d116      	bne.n	8009b8a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <chk_lock+0xb4>)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	4413      	add	r3, r2
 8009b64:	3304      	adds	r3, #4
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d10c      	bne.n	8009b8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009b70:	4a1a      	ldr	r2, [pc, #104]	@ (8009bdc <chk_lock+0xb4>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	4413      	add	r3, r2
 8009b78:	3308      	adds	r3, #8
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d102      	bne.n	8009b8a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009b84:	e007      	b.n	8009b96 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009b86:	2301      	movs	r3, #1
 8009b88:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d9d2      	bls.n	8009b3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d109      	bne.n	8009bb0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d102      	bne.n	8009ba8 <chk_lock+0x80>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d101      	bne.n	8009bac <chk_lock+0x84>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e010      	b.n	8009bce <chk_lock+0xa6>
 8009bac:	2312      	movs	r3, #18
 8009bae:	e00e      	b.n	8009bce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d108      	bne.n	8009bc8 <chk_lock+0xa0>
 8009bb6:	4a09      	ldr	r2, [pc, #36]	@ (8009bdc <chk_lock+0xb4>)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	4413      	add	r3, r2
 8009bbe:	330c      	adds	r3, #12
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bc6:	d101      	bne.n	8009bcc <chk_lock+0xa4>
 8009bc8:	2310      	movs	r3, #16
 8009bca:	e000      	b.n	8009bce <chk_lock+0xa6>
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20002670 	.word	0x20002670

08009be0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009be6:	2300      	movs	r3, #0
 8009be8:	607b      	str	r3, [r7, #4]
 8009bea:	e002      	b.n	8009bf2 <enq_lock+0x12>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	607b      	str	r3, [r7, #4]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d806      	bhi.n	8009c06 <enq_lock+0x26>
 8009bf8:	4a09      	ldr	r2, [pc, #36]	@ (8009c20 <enq_lock+0x40>)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	011b      	lsls	r3, r3, #4
 8009bfe:	4413      	add	r3, r2
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1f2      	bne.n	8009bec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	bf14      	ite	ne
 8009c0c:	2301      	movne	r3, #1
 8009c0e:	2300      	moveq	r3, #0
 8009c10:	b2db      	uxtb	r3, r3
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	20002670 	.word	0x20002670

08009c24 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	e01f      	b.n	8009c74 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009c34:	4a41      	ldr	r2, [pc, #260]	@ (8009d3c <inc_lock+0x118>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	4413      	add	r3, r2
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d113      	bne.n	8009c6e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009c46:	4a3d      	ldr	r2, [pc, #244]	@ (8009d3c <inc_lock+0x118>)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	4413      	add	r3, r2
 8009c4e:	3304      	adds	r3, #4
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d109      	bne.n	8009c6e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009c5a:	4a38      	ldr	r2, [pc, #224]	@ (8009d3c <inc_lock+0x118>)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	4413      	add	r3, r2
 8009c62:	3308      	adds	r3, #8
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d006      	beq.n	8009c7c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3301      	adds	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d9dc      	bls.n	8009c34 <inc_lock+0x10>
 8009c7a:	e000      	b.n	8009c7e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009c7c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d132      	bne.n	8009cea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]
 8009c88:	e002      	b.n	8009c90 <inc_lock+0x6c>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d806      	bhi.n	8009ca4 <inc_lock+0x80>
 8009c96:	4a29      	ldr	r2, [pc, #164]	@ (8009d3c <inc_lock+0x118>)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	4413      	add	r3, r2
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d1f2      	bne.n	8009c8a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d101      	bne.n	8009cae <inc_lock+0x8a>
 8009caa:	2300      	movs	r3, #0
 8009cac:	e040      	b.n	8009d30 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4922      	ldr	r1, [pc, #136]	@ (8009d3c <inc_lock+0x118>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	440b      	add	r3, r1
 8009cba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	491e      	ldr	r1, [pc, #120]	@ (8009d3c <inc_lock+0x118>)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	440b      	add	r3, r1
 8009cc8:	3304      	adds	r3, #4
 8009cca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	695a      	ldr	r2, [r3, #20]
 8009cd0:	491a      	ldr	r1, [pc, #104]	@ (8009d3c <inc_lock+0x118>)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3308      	adds	r3, #8
 8009cda:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009cdc:	4a17      	ldr	r2, [pc, #92]	@ (8009d3c <inc_lock+0x118>)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	011b      	lsls	r3, r3, #4
 8009ce2:	4413      	add	r3, r2
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d009      	beq.n	8009d04 <inc_lock+0xe0>
 8009cf0:	4a12      	ldr	r2, [pc, #72]	@ (8009d3c <inc_lock+0x118>)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	4413      	add	r3, r2
 8009cf8:	330c      	adds	r3, #12
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <inc_lock+0xe0>
 8009d00:	2300      	movs	r3, #0
 8009d02:	e015      	b.n	8009d30 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d108      	bne.n	8009d1c <inc_lock+0xf8>
 8009d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009d3c <inc_lock+0x118>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	4413      	add	r3, r2
 8009d12:	330c      	adds	r3, #12
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	e001      	b.n	8009d20 <inc_lock+0xfc>
 8009d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d20:	4906      	ldr	r1, [pc, #24]	@ (8009d3c <inc_lock+0x118>)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	440b      	add	r3, r1
 8009d28:	330c      	adds	r3, #12
 8009d2a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	3301      	adds	r3, #1
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	20002670 	.word	0x20002670

08009d40 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	607b      	str	r3, [r7, #4]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d825      	bhi.n	8009da0 <dec_lock+0x60>
		n = Files[i].ctr;
 8009d54:	4a17      	ldr	r2, [pc, #92]	@ (8009db4 <dec_lock+0x74>)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	4413      	add	r3, r2
 8009d5c:	330c      	adds	r3, #12
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009d62:	89fb      	ldrh	r3, [r7, #14]
 8009d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d68:	d101      	bne.n	8009d6e <dec_lock+0x2e>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009d6e:	89fb      	ldrh	r3, [r7, #14]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <dec_lock+0x3a>
 8009d74:	89fb      	ldrh	r3, [r7, #14]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8009db4 <dec_lock+0x74>)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	4413      	add	r3, r2
 8009d82:	330c      	adds	r3, #12
 8009d84:	89fa      	ldrh	r2, [r7, #14]
 8009d86:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009d88:	89fb      	ldrh	r3, [r7, #14]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d105      	bne.n	8009d9a <dec_lock+0x5a>
 8009d8e:	4a09      	ldr	r2, [pc, #36]	@ (8009db4 <dec_lock+0x74>)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	011b      	lsls	r3, r3, #4
 8009d94:	4413      	add	r3, r2
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	737b      	strb	r3, [r7, #13]
 8009d9e:	e001      	b.n	8009da4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009da0:	2302      	movs	r3, #2
 8009da2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009da4:	7b7b      	ldrb	r3, [r7, #13]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	20002670 	.word	0x20002670

08009db8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e010      	b.n	8009de8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8009dfc <clear_lock+0x44>)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	011b      	lsls	r3, r3, #4
 8009dcc:	4413      	add	r3, r2
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d105      	bne.n	8009de2 <clear_lock+0x2a>
 8009dd6:	4a09      	ldr	r2, [pc, #36]	@ (8009dfc <clear_lock+0x44>)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	4413      	add	r3, r2
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d9eb      	bls.n	8009dc6 <clear_lock+0xe>
	}
}
 8009dee:	bf00      	nop
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	20002670 	.word	0x20002670

08009e00 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b086      	sub	sp, #24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	78db      	ldrb	r3, [r3, #3]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d034      	beq.n	8009e7e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	7858      	ldrb	r0, [r3, #1]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e24:	2301      	movs	r3, #1
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	f7ff fd40 	bl	80098ac <disk_write>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	73fb      	strb	r3, [r7, #15]
 8009e36:	e022      	b.n	8009e7e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	1ad2      	subs	r2, r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d217      	bcs.n	8009e7e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	789b      	ldrb	r3, [r3, #2]
 8009e52:	613b      	str	r3, [r7, #16]
 8009e54:	e010      	b.n	8009e78 <sync_window+0x78>
					wsect += fs->fsize;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7858      	ldrb	r0, [r3, #1]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	697a      	ldr	r2, [r7, #20]
 8009e6e:	f7ff fd1d 	bl	80098ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	3b01      	subs	r3, #1
 8009e76:	613b      	str	r3, [r7, #16]
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d8eb      	bhi.n	8009e56 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d01b      	beq.n	8009ed8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ffad 	bl	8009e00 <sync_window>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d113      	bne.n	8009ed8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7858      	ldrb	r0, [r3, #1]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009eba:	2301      	movs	r3, #1
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	f7ff fcd5 	bl	800986c <disk_read>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ecc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff ff87 	bl	8009e00 <sync_window>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d159      	bne.n	8009fb0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d149      	bne.n	8009f98 <sync_fs+0xb4>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	791b      	ldrb	r3, [r3, #4]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d145      	bne.n	8009f98 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	899b      	ldrh	r3, [r3, #12]
 8009f16:	461a      	mov	r2, r3
 8009f18:	2100      	movs	r1, #0
 8009f1a:	f7ff fda8 	bl	8009a6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	3338      	adds	r3, #56	@ 0x38
 8009f22:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009f26:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff fd37 	bl	800999e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	3338      	adds	r3, #56	@ 0x38
 8009f34:	4921      	ldr	r1, [pc, #132]	@ (8009fbc <sync_fs+0xd8>)
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7ff fd4c 	bl	80099d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3338      	adds	r3, #56	@ 0x38
 8009f40:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009f44:	491e      	ldr	r1, [pc, #120]	@ (8009fc0 <sync_fs+0xdc>)
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fd44 	bl	80099d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3338      	adds	r3, #56	@ 0x38
 8009f50:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7ff fd3a 	bl	80099d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	3338      	adds	r3, #56	@ 0x38
 8009f64:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7ff fd30 	bl	80099d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f78:	1c5a      	adds	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7858      	ldrb	r0, [r3, #1]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f7ff fc8d 	bl	80098ac <disk_write>
			fs->fsi_flag = 0;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	785b      	ldrb	r3, [r3, #1]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7ff fca3 	bl	80098ec <disk_ioctl>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d001      	beq.n	8009fb0 <sync_fs+0xcc>
 8009fac:	2301      	movs	r3, #1
 8009fae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	41615252 	.word	0x41615252
 8009fc0:	61417272 	.word	0x61417272

08009fc4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	3b02      	subs	r3, #2
 8009fd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	3b02      	subs	r3, #2
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d301      	bcc.n	8009fe4 <clust2sect+0x20>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e008      	b.n	8009ff6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	895b      	ldrh	r3, [r3, #10]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	fb03 f202 	mul.w	r2, r3, r2
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff4:	4413      	add	r3, r2
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	370c      	adds	r7, #12
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b086      	sub	sp, #24
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d904      	bls.n	800a022 <get_fat+0x20>
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d302      	bcc.n	800a028 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a022:	2301      	movs	r3, #1
 800a024:	617b      	str	r3, [r7, #20]
 800a026:	e0ba      	b.n	800a19e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a028:	f04f 33ff 	mov.w	r3, #4294967295
 800a02c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b03      	cmp	r3, #3
 800a034:	f000 8082 	beq.w	800a13c <get_fat+0x13a>
 800a038:	2b03      	cmp	r3, #3
 800a03a:	f300 80a6 	bgt.w	800a18a <get_fat+0x188>
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d002      	beq.n	800a048 <get_fat+0x46>
 800a042:	2b02      	cmp	r3, #2
 800a044:	d055      	beq.n	800a0f2 <get_fat+0xf0>
 800a046:	e0a0      	b.n	800a18a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	085b      	lsrs	r3, r3, #1
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	899b      	ldrh	r3, [r3, #12]
 800a05e:	4619      	mov	r1, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	fbb3 f3f1 	udiv	r3, r3, r1
 800a066:	4413      	add	r3, r2
 800a068:	4619      	mov	r1, r3
 800a06a:	6938      	ldr	r0, [r7, #16]
 800a06c:	f7ff ff0c 	bl	8009e88 <move_window>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	f040 808c 	bne.w	800a190 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	60fa      	str	r2, [r7, #12]
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	8992      	ldrh	r2, [r2, #12]
 800a082:	fbb3 f1f2 	udiv	r1, r3, r2
 800a086:	fb01 f202 	mul.w	r2, r1, r2
 800a08a:	1a9b      	subs	r3, r3, r2
 800a08c:	693a      	ldr	r2, [r7, #16]
 800a08e:	4413      	add	r3, r2
 800a090:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a094:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	899b      	ldrh	r3, [r3, #12]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0a6:	4413      	add	r3, r2
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6938      	ldr	r0, [r7, #16]
 800a0ac:	f7ff feec 	bl	8009e88 <move_window>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d16e      	bne.n	800a194 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	899b      	ldrh	r3, [r3, #12]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c2:	fb01 f202 	mul.w	r2, r1, r2
 800a0c6:	1a9b      	subs	r3, r3, r2
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <get_fat+0xe6>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	091b      	lsrs	r3, r3, #4
 800a0e6:	e002      	b.n	800a0ee <get_fat+0xec>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0ee:	617b      	str	r3, [r7, #20]
			break;
 800a0f0:	e055      	b.n	800a19e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	899b      	ldrh	r3, [r3, #12]
 800a0fa:	085b      	lsrs	r3, r3, #1
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	4619      	mov	r1, r3
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	fbb3 f3f1 	udiv	r3, r3, r1
 800a106:	4413      	add	r3, r2
 800a108:	4619      	mov	r1, r3
 800a10a:	6938      	ldr	r0, [r7, #16]
 800a10c:	f7ff febc 	bl	8009e88 <move_window>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d140      	bne.n	800a198 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	8992      	ldrh	r2, [r2, #12]
 800a124:	fbb3 f0f2 	udiv	r0, r3, r2
 800a128:	fb00 f202 	mul.w	r2, r0, r2
 800a12c:	1a9b      	subs	r3, r3, r2
 800a12e:	440b      	add	r3, r1
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff fbf9 	bl	8009928 <ld_word>
 800a136:	4603      	mov	r3, r0
 800a138:	617b      	str	r3, [r7, #20]
			break;
 800a13a:	e030      	b.n	800a19e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	899b      	ldrh	r3, [r3, #12]
 800a144:	089b      	lsrs	r3, r3, #2
 800a146:	b29b      	uxth	r3, r3
 800a148:	4619      	mov	r1, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a150:	4413      	add	r3, r2
 800a152:	4619      	mov	r1, r3
 800a154:	6938      	ldr	r0, [r7, #16]
 800a156:	f7ff fe97 	bl	8009e88 <move_window>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d11d      	bne.n	800a19c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	8992      	ldrh	r2, [r2, #12]
 800a16e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a172:	fb00 f202 	mul.w	r2, r0, r2
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	440b      	add	r3, r1
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff fbec 	bl	8009958 <ld_dword>
 800a180:	4603      	mov	r3, r0
 800a182:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a186:	617b      	str	r3, [r7, #20]
			break;
 800a188:	e009      	b.n	800a19e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a18a:	2301      	movs	r3, #1
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	e006      	b.n	800a19e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a190:	bf00      	nop
 800a192:	e004      	b.n	800a19e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a194:	bf00      	nop
 800a196:	e002      	b.n	800a19e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a198:	bf00      	nop
 800a19a:	e000      	b.n	800a19e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a19c:	bf00      	nop
		}
	}

	return val;
 800a19e:	697b      	ldr	r3, [r7, #20]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a1a8:	b590      	push	{r4, r7, lr}
 800a1aa:	b089      	sub	sp, #36	@ 0x24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	f240 8109 	bls.w	800a3d2 <put_fat+0x22a>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	69db      	ldr	r3, [r3, #28]
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	f080 8103 	bcs.w	800a3d2 <put_fat+0x22a>
		switch (fs->fs_type) {
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	f000 80b6 	beq.w	800a342 <put_fat+0x19a>
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	f300 80fb 	bgt.w	800a3d2 <put_fat+0x22a>
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d003      	beq.n	800a1e8 <put_fat+0x40>
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	f000 8083 	beq.w	800a2ec <put_fat+0x144>
 800a1e6:	e0f4      	b.n	800a3d2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	61bb      	str	r3, [r7, #24]
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	899b      	ldrh	r3, [r3, #12]
 800a1fe:	4619      	mov	r1, r3
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	fbb3 f3f1 	udiv	r3, r3, r1
 800a206:	4413      	add	r3, r2
 800a208:	4619      	mov	r1, r3
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff fe3c 	bl	8009e88 <move_window>
 800a210:	4603      	mov	r3, r0
 800a212:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a214:	7ffb      	ldrb	r3, [r7, #31]
 800a216:	2b00      	cmp	r3, #0
 800a218:	f040 80d4 	bne.w	800a3c4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	61ba      	str	r2, [r7, #24]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	8992      	ldrh	r2, [r2, #12]
 800a22c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a230:	fb00 f202 	mul.w	r2, r0, r2
 800a234:	1a9b      	subs	r3, r3, r2
 800a236:	440b      	add	r3, r1
 800a238:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00d      	beq.n	800a260 <put_fat+0xb8>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	b25b      	sxtb	r3, r3
 800a24a:	f003 030f 	and.w	r3, r3, #15
 800a24e:	b25a      	sxtb	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	011b      	lsls	r3, r3, #4
 800a256:	b25b      	sxtb	r3, r3
 800a258:	4313      	orrs	r3, r2
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	e001      	b.n	800a264 <put_fat+0xbc>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	b2db      	uxtb	r3, r3
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2201      	movs	r2, #1
 800a26c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	899b      	ldrh	r3, [r3, #12]
 800a276:	4619      	mov	r1, r3
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a27e:	4413      	add	r3, r2
 800a280:	4619      	mov	r1, r3
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7ff fe00 	bl	8009e88 <move_window>
 800a288:	4603      	mov	r3, r0
 800a28a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a28c:	7ffb      	ldrb	r3, [r7, #31]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f040 809a 	bne.w	800a3c8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	899b      	ldrh	r3, [r3, #12]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2a6:	fb00 f202 	mul.w	r2, r0, r2
 800a2aa:	1a9b      	subs	r3, r3, r2
 800a2ac:	440b      	add	r3, r1
 800a2ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <put_fat+0x11a>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	091b      	lsrs	r3, r3, #4
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	e00e      	b.n	800a2e0 <put_fat+0x138>
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b25b      	sxtb	r3, r3
 800a2c8:	f023 030f 	bic.w	r3, r3, #15
 800a2cc:	b25a      	sxtb	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	0a1b      	lsrs	r3, r3, #8
 800a2d2:	b25b      	sxtb	r3, r3
 800a2d4:	f003 030f 	and.w	r3, r3, #15
 800a2d8:	b25b      	sxtb	r3, r3
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	b25b      	sxtb	r3, r3
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	70da      	strb	r2, [r3, #3]
			break;
 800a2ea:	e072      	b.n	800a3d2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	899b      	ldrh	r3, [r3, #12]
 800a2f4:	085b      	lsrs	r3, r3, #1
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	fbb3 f3f1 	udiv	r3, r3, r1
 800a300:	4413      	add	r3, r2
 800a302:	4619      	mov	r1, r3
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7ff fdbf 	bl	8009e88 <move_window>
 800a30a:	4603      	mov	r3, r0
 800a30c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a30e:	7ffb      	ldrb	r3, [r7, #31]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d15b      	bne.n	800a3cc <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	005b      	lsls	r3, r3, #1
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	8992      	ldrh	r2, [r2, #12]
 800a322:	fbb3 f0f2 	udiv	r0, r3, r2
 800a326:	fb00 f202 	mul.w	r2, r0, r2
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	440b      	add	r3, r1
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	b292      	uxth	r2, r2
 800a332:	4611      	mov	r1, r2
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff fb32 	bl	800999e <st_word>
			fs->wflag = 1;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	70da      	strb	r2, [r3, #3]
			break;
 800a340:	e047      	b.n	800a3d2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	899b      	ldrh	r3, [r3, #12]
 800a34a:	089b      	lsrs	r3, r3, #2
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	4619      	mov	r1, r3
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	fbb3 f3f1 	udiv	r3, r3, r1
 800a356:	4413      	add	r3, r2
 800a358:	4619      	mov	r1, r3
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff fd94 	bl	8009e88 <move_window>
 800a360:	4603      	mov	r3, r0
 800a362:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a364:	7ffb      	ldrb	r3, [r7, #31]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d132      	bne.n	800a3d0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	8992      	ldrh	r2, [r2, #12]
 800a37e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a382:	fb00 f202 	mul.w	r2, r0, r2
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	440b      	add	r3, r1
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff fae4 	bl	8009958 <ld_dword>
 800a390:	4603      	mov	r3, r0
 800a392:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a396:	4323      	orrs	r3, r4
 800a398:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	8992      	ldrh	r2, [r2, #12]
 800a3a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3ac:	fb00 f202 	mul.w	r2, r0, r2
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	440b      	add	r3, r1
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7ff fb0c 	bl	80099d4 <st_dword>
			fs->wflag = 1;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	70da      	strb	r2, [r3, #3]
			break;
 800a3c2:	e006      	b.n	800a3d2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a3c4:	bf00      	nop
 800a3c6:	e004      	b.n	800a3d2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a3c8:	bf00      	nop
 800a3ca:	e002      	b.n	800a3d2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a3cc:	bf00      	nop
 800a3ce:	e000      	b.n	800a3d2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800a3d0:	bf00      	nop
		}
	}
	return res;
 800a3d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3724      	adds	r7, #36	@ 0x24
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd90      	pop	{r4, r7, pc}

0800a3dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b088      	sub	sp, #32
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d904      	bls.n	800a402 <remove_chain+0x26>
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d301      	bcc.n	800a406 <remove_chain+0x2a>
 800a402:	2302      	movs	r3, #2
 800a404:	e04b      	b.n	800a49e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00c      	beq.n	800a426 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a40c:	f04f 32ff 	mov.w	r2, #4294967295
 800a410:	6879      	ldr	r1, [r7, #4]
 800a412:	69b8      	ldr	r0, [r7, #24]
 800a414:	f7ff fec8 	bl	800a1a8 <put_fat>
 800a418:	4603      	mov	r3, r0
 800a41a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a41c:	7ffb      	ldrb	r3, [r7, #31]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <remove_chain+0x4a>
 800a422:	7ffb      	ldrb	r3, [r7, #31]
 800a424:	e03b      	b.n	800a49e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a426:	68b9      	ldr	r1, [r7, #8]
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f7ff fdea 	bl	800a002 <get_fat>
 800a42e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d031      	beq.n	800a49a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d101      	bne.n	800a440 <remove_chain+0x64>
 800a43c:	2302      	movs	r3, #2
 800a43e:	e02e      	b.n	800a49e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	d101      	bne.n	800a44c <remove_chain+0x70>
 800a448:	2301      	movs	r3, #1
 800a44a:	e028      	b.n	800a49e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a44c:	2200      	movs	r2, #0
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	69b8      	ldr	r0, [r7, #24]
 800a452:	f7ff fea9 	bl	800a1a8 <put_fat>
 800a456:	4603      	mov	r3, r0
 800a458:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a45a:	7ffb      	ldrb	r3, [r7, #31]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d001      	beq.n	800a464 <remove_chain+0x88>
 800a460:	7ffb      	ldrb	r3, [r7, #31]
 800a462:	e01c      	b.n	800a49e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	699a      	ldr	r2, [r3, #24]
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	3b02      	subs	r3, #2
 800a46e:	429a      	cmp	r2, r3
 800a470:	d20b      	bcs.n	800a48a <remove_chain+0xae>
			fs->free_clst++;
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	791b      	ldrb	r3, [r3, #4]
 800a480:	f043 0301 	orr.w	r3, r3, #1
 800a484:	b2da      	uxtb	r2, r3
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	429a      	cmp	r2, r3
 800a496:	d3c6      	bcc.n	800a426 <remove_chain+0x4a>
 800a498:	e000      	b.n	800a49c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a49a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3720      	adds	r7, #32
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b088      	sub	sp, #32
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10d      	bne.n	800a4d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d004      	beq.n	800a4d2 <create_chain+0x2c>
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d31b      	bcc.n	800a50a <create_chain+0x64>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	61bb      	str	r3, [r7, #24]
 800a4d6:	e018      	b.n	800a50a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff fd91 	bl	800a002 <get_fat>
 800a4e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d801      	bhi.n	800a4ec <create_chain+0x46>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e070      	b.n	800a5ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d101      	bne.n	800a4f8 <create_chain+0x52>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	e06a      	b.n	800a5ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d201      	bcs.n	800a506 <create_chain+0x60>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	e063      	b.n	800a5ce <create_chain+0x128>
		scl = clst;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	3301      	adds	r3, #1
 800a512:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	69db      	ldr	r3, [r3, #28]
 800a518:	69fa      	ldr	r2, [r7, #28]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d307      	bcc.n	800a52e <create_chain+0x88>
				ncl = 2;
 800a51e:	2302      	movs	r3, #2
 800a520:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a522:	69fa      	ldr	r2, [r7, #28]
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	429a      	cmp	r2, r3
 800a528:	d901      	bls.n	800a52e <create_chain+0x88>
 800a52a:	2300      	movs	r3, #0
 800a52c:	e04f      	b.n	800a5ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a52e:	69f9      	ldr	r1, [r7, #28]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff fd66 	bl	800a002 <get_fat>
 800a536:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00e      	beq.n	800a55c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d003      	beq.n	800a54c <create_chain+0xa6>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a54a:	d101      	bne.n	800a550 <create_chain+0xaa>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	e03e      	b.n	800a5ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a550:	69fa      	ldr	r2, [r7, #28]
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	429a      	cmp	r2, r3
 800a556:	d1da      	bne.n	800a50e <create_chain+0x68>
 800a558:	2300      	movs	r3, #0
 800a55a:	e038      	b.n	800a5ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a55c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a55e:	f04f 32ff 	mov.w	r2, #4294967295
 800a562:	69f9      	ldr	r1, [r7, #28]
 800a564:	6938      	ldr	r0, [r7, #16]
 800a566:	f7ff fe1f 	bl	800a1a8 <put_fat>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <create_chain+0xe2>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6938      	ldr	r0, [r7, #16]
 800a580:	f7ff fe12 	bl	800a1a8 <put_fat>
 800a584:	4603      	mov	r3, r0
 800a586:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a588:	7dfb      	ldrb	r3, [r7, #23]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d116      	bne.n	800a5bc <create_chain+0x116>
		fs->last_clst = ncl;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	69fa      	ldr	r2, [r7, #28]
 800a592:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	699a      	ldr	r2, [r3, #24]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	3b02      	subs	r3, #2
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d804      	bhi.n	800a5ac <create_chain+0x106>
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	1e5a      	subs	r2, r3, #1
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	791b      	ldrb	r3, [r3, #4]
 800a5b0:	f043 0301 	orr.w	r3, r3, #1
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	711a      	strb	r2, [r3, #4]
 800a5ba:	e007      	b.n	800a5cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d102      	bne.n	800a5c8 <create_chain+0x122>
 800a5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c6:	e000      	b.n	800a5ca <create_chain+0x124>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a5cc:	69fb      	ldr	r3, [r7, #28]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3720      	adds	r7, #32
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b087      	sub	sp, #28
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	899b      	ldrh	r3, [r3, #12]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	8952      	ldrh	r2, [r2, #10]
 800a5fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800a602:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	1d1a      	adds	r2, r3, #4
 800a608:	613a      	str	r2, [r7, #16]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <clmt_clust+0x42>
 800a614:	2300      	movs	r3, #0
 800a616:	e010      	b.n	800a63a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d307      	bcc.n	800a630 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	617b      	str	r3, [r7, #20]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	3304      	adds	r3, #4
 800a62c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a62e:	e7e9      	b.n	800a604 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a630:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	4413      	add	r3, r2
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b086      	sub	sp, #24
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a65c:	d204      	bcs.n	800a668 <dir_sdi+0x22>
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	f003 031f 	and.w	r3, r3, #31
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <dir_sdi+0x26>
		return FR_INT_ERR;
 800a668:	2302      	movs	r3, #2
 800a66a:	e071      	b.n	800a750 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <dir_sdi+0x46>
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b02      	cmp	r3, #2
 800a684:	d902      	bls.n	800a68c <dir_sdi+0x46>
		clst = fs->dirbase;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10c      	bne.n	800a6ac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	095b      	lsrs	r3, r3, #5
 800a696:	693a      	ldr	r2, [r7, #16]
 800a698:	8912      	ldrh	r2, [r2, #8]
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d301      	bcc.n	800a6a2 <dir_sdi+0x5c>
 800a69e:	2302      	movs	r3, #2
 800a6a0:	e056      	b.n	800a750 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	61da      	str	r2, [r3, #28]
 800a6aa:	e02d      	b.n	800a708 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	895b      	ldrh	r3, [r3, #10]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	899b      	ldrh	r3, [r3, #12]
 800a6b6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6bc:	e019      	b.n	800a6f2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6979      	ldr	r1, [r7, #20]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fc9d 	bl	800a002 <get_fat>
 800a6c8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d0:	d101      	bne.n	800a6d6 <dir_sdi+0x90>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e03c      	b.n	800a750 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d904      	bls.n	800a6e6 <dir_sdi+0xa0>
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d301      	bcc.n	800a6ea <dir_sdi+0xa4>
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	e032      	b.n	800a750 <dir_sdi+0x10a>
			ofs -= csz;
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a6f2:	683a      	ldr	r2, [r7, #0]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d2e1      	bcs.n	800a6be <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a6fa:	6979      	ldr	r1, [r7, #20]
 800a6fc:	6938      	ldr	r0, [r7, #16]
 800a6fe:	f7ff fc61 	bl	8009fc4 <clust2sect>
 800a702:	4602      	mov	r2, r0
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	69db      	ldr	r3, [r3, #28]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <dir_sdi+0xd4>
 800a716:	2302      	movs	r3, #2
 800a718:	e01a      	b.n	800a750 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	69da      	ldr	r2, [r3, #28]
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	899b      	ldrh	r3, [r3, #12]
 800a722:	4619      	mov	r1, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	fbb3 f3f1 	udiv	r3, r3, r1
 800a72a:	441a      	add	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	899b      	ldrh	r3, [r3, #12]
 800a73a:	461a      	mov	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a742:	fb00 f202 	mul.w	r2, r0, r2
 800a746:	1a9b      	subs	r3, r3, r2
 800a748:	18ca      	adds	r2, r1, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	3320      	adds	r3, #32
 800a76e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <dir_next+0x28>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a77e:	d301      	bcc.n	800a784 <dir_next+0x2c>
 800a780:	2304      	movs	r3, #4
 800a782:	e0bb      	b.n	800a8fc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	899b      	ldrh	r3, [r3, #12]
 800a788:	461a      	mov	r2, r3
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a790:	fb01 f202 	mul.w	r2, r1, r2
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	2b00      	cmp	r3, #0
 800a798:	f040 809d 	bne.w	800a8d6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d10b      	bne.n	800a7c6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	8912      	ldrh	r2, [r2, #8]
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	f0c0 808d 	bcc.w	800a8d6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	61da      	str	r2, [r3, #28]
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	e09a      	b.n	800a8fc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	899b      	ldrh	r3, [r3, #12]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	8952      	ldrh	r2, [r2, #10]
 800a7d6:	3a01      	subs	r2, #1
 800a7d8:	4013      	ands	r3, r2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d17b      	bne.n	800a8d6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f7ff fc0b 	bl	800a002 <get_fat>
 800a7ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d801      	bhi.n	800a7f8 <dir_next+0xa0>
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	e081      	b.n	800a8fc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fe:	d101      	bne.n	800a804 <dir_next+0xac>
 800a800:	2301      	movs	r3, #1
 800a802:	e07b      	b.n	800a8fc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d359      	bcc.n	800a8c2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	61da      	str	r2, [r3, #28]
 800a81a:	2304      	movs	r3, #4
 800a81c:	e06e      	b.n	800a8fc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	4619      	mov	r1, r3
 800a826:	4610      	mov	r0, r2
 800a828:	f7ff fe3d 	bl	800a4a6 <create_chain>
 800a82c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <dir_next+0xe0>
 800a834:	2307      	movs	r3, #7
 800a836:	e061      	b.n	800a8fc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <dir_next+0xea>
 800a83e:	2302      	movs	r3, #2
 800a840:	e05c      	b.n	800a8fc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a848:	d101      	bne.n	800a84e <dir_next+0xf6>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e056      	b.n	800a8fc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f7ff fad6 	bl	8009e00 <sync_window>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <dir_next+0x106>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e04e      	b.n	800a8fc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	899b      	ldrh	r3, [r3, #12]
 800a868:	461a      	mov	r2, r3
 800a86a:	2100      	movs	r1, #0
 800a86c:	f7ff f8ff 	bl	8009a6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a870:	2300      	movs	r3, #0
 800a872:	613b      	str	r3, [r7, #16]
 800a874:	6979      	ldr	r1, [r7, #20]
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fba4 	bl	8009fc4 <clust2sect>
 800a87c:	4602      	mov	r2, r0
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	635a      	str	r2, [r3, #52]	@ 0x34
 800a882:	e012      	b.n	800a8aa <dir_next+0x152>
						fs->wflag = 1;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2201      	movs	r2, #1
 800a888:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f7ff fab8 	bl	8009e00 <sync_window>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <dir_next+0x142>
 800a896:	2301      	movs	r3, #1
 800a898:	e030      	b.n	800a8fc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	3301      	adds	r3, #1
 800a89e:	613b      	str	r3, [r7, #16]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a4:	1c5a      	adds	r2, r3, #1
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	635a      	str	r2, [r3, #52]	@ 0x34
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	895b      	ldrh	r3, [r3, #10]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d3e6      	bcc.n	800a884 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	1ad2      	subs	r2, r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a8c8:	6979      	ldr	r1, [r7, #20]
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff fb7a 	bl	8009fc4 <clust2sect>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	899b      	ldrh	r3, [r3, #12]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8ee:	fb00 f202 	mul.w	r2, r0, r2
 800a8f2:	1a9b      	subs	r3, r3, r2
 800a8f4:	18ca      	adds	r2, r1, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a914:	2100      	movs	r1, #0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7ff fe95 	bl	800a646 <dir_sdi>
 800a91c:	4603      	mov	r3, r0
 800a91e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a920:	7dfb      	ldrb	r3, [r7, #23]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d12b      	bne.n	800a97e <dir_alloc+0x7a>
		n = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	4619      	mov	r1, r3
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f7ff faa9 	bl	8009e88 <move_window>
 800a936:	4603      	mov	r3, r0
 800a938:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a93a:	7dfb      	ldrb	r3, [r7, #23]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d11d      	bne.n	800a97c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2be5      	cmp	r3, #229	@ 0xe5
 800a948:	d004      	beq.n	800a954 <dir_alloc+0x50>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a1b      	ldr	r3, [r3, #32]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d107      	bne.n	800a964 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	3301      	adds	r3, #1
 800a958:	613b      	str	r3, [r7, #16]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d102      	bne.n	800a968 <dir_alloc+0x64>
 800a962:	e00c      	b.n	800a97e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a964:	2300      	movs	r3, #0
 800a966:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a968:	2101      	movs	r1, #1
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fef4 	bl	800a758 <dir_next>
 800a970:	4603      	mov	r3, r0
 800a972:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0d7      	beq.n	800a92a <dir_alloc+0x26>
 800a97a:	e000      	b.n	800a97e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a97c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	2b04      	cmp	r3, #4
 800a982:	d101      	bne.n	800a988 <dir_alloc+0x84>
 800a984:	2307      	movs	r3, #7
 800a986:	75fb      	strb	r3, [r7, #23]
	return res;
 800a988:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	331a      	adds	r3, #26
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe ffc1 	bl	8009928 <ld_word>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d109      	bne.n	800a9c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	3314      	adds	r3, #20
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fe ffb6 	bl	8009928 <ld_word>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	041b      	lsls	r3, r3, #16
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	331a      	adds	r3, #26
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	b292      	uxth	r2, r2
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe ffd9 	bl	800999e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d109      	bne.n	800aa08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	f103 0214 	add.w	r2, r3, #20
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	0c1b      	lsrs	r3, r3, #16
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7fe ffcb 	bl	800999e <st_word>
	}
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b087      	sub	sp, #28
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	331a      	adds	r3, #26
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe ff82 	bl	8009928 <ld_word>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <cmp_lfn+0x1e>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e059      	b.n	800aae2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa36:	1e5a      	subs	r2, r3, #1
 800aa38:	4613      	mov	r3, r2
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aa44:	2301      	movs	r3, #1
 800aa46:	81fb      	strh	r3, [r7, #14]
 800aa48:	2300      	movs	r3, #0
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	e033      	b.n	800aab6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800aa4e:	4a27      	ldr	r2, [pc, #156]	@ (800aaec <cmp_lfn+0xdc>)
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	4413      	add	r3, r2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7fe ff63 	bl	8009928 <ld_word>
 800aa62:	4603      	mov	r3, r0
 800aa64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800aa66:	89fb      	ldrh	r3, [r7, #14]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01a      	beq.n	800aaa2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2bfe      	cmp	r3, #254	@ 0xfe
 800aa70:	d812      	bhi.n	800aa98 <cmp_lfn+0x88>
 800aa72:	89bb      	ldrh	r3, [r7, #12]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fe fe2f 	bl	80096d8 <ff_wtoupper>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	461c      	mov	r4, r3
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	617a      	str	r2, [r7, #20]
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	4413      	add	r3, r2
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fe23 	bl	80096d8 <ff_wtoupper>
 800aa92:	4603      	mov	r3, r0
 800aa94:	429c      	cmp	r4, r3
 800aa96:	d001      	beq.n	800aa9c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e022      	b.n	800aae2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800aa9c:	89bb      	ldrh	r3, [r7, #12]
 800aa9e:	81fb      	strh	r3, [r7, #14]
 800aaa0:	e006      	b.n	800aab0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800aaa2:	89bb      	ldrh	r3, [r7, #12]
 800aaa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d001      	beq.n	800aab0 <cmp_lfn+0xa0>
 800aaac:	2300      	movs	r3, #0
 800aaae:	e018      	b.n	800aae2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	3301      	adds	r3, #1
 800aab4:	613b      	str	r3, [r7, #16]
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	2b0c      	cmp	r3, #12
 800aaba:	d9c8      	bls.n	800aa4e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00b      	beq.n	800aae0 <cmp_lfn+0xd0>
 800aac8:	89fb      	ldrh	r3, [r7, #14]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d008      	beq.n	800aae0 <cmp_lfn+0xd0>
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	4413      	add	r3, r2
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <cmp_lfn+0xd0>
 800aadc:	2300      	movs	r3, #0
 800aade:	e000      	b.n	800aae2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800aae0:	2301      	movs	r3, #1
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	371c      	adds	r7, #28
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd90      	pop	{r4, r7, pc}
 800aaea:	bf00      	nop
 800aaec:	08011498 	.word	0x08011498

0800aaf0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	4611      	mov	r1, r2
 800aafc:	461a      	mov	r2, r3
 800aafe:	460b      	mov	r3, r1
 800ab00:	71fb      	strb	r3, [r7, #7]
 800ab02:	4613      	mov	r3, r2
 800ab04:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	330d      	adds	r3, #13
 800ab0a:	79ba      	ldrb	r2, [r7, #6]
 800ab0c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	330b      	adds	r3, #11
 800ab12:	220f      	movs	r2, #15
 800ab14:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	330c      	adds	r3, #12
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	331a      	adds	r3, #26
 800ab22:	2100      	movs	r1, #0
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7fe ff3a 	bl	800999e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ab2a:	79fb      	ldrb	r3, [r7, #7]
 800ab2c:	1e5a      	subs	r2, r3, #1
 800ab2e:	4613      	mov	r3, r2
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	82fb      	strh	r3, [r7, #22]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ab42:	8afb      	ldrh	r3, [r7, #22]
 800ab44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d007      	beq.n	800ab5c <put_lfn+0x6c>
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	1c5a      	adds	r2, r3, #1
 800ab50:	61fa      	str	r2, [r7, #28]
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4413      	add	r3, r2
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ab5c:	4a17      	ldr	r2, [pc, #92]	@ (800abbc <put_lfn+0xcc>)
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	4413      	add	r3, r2
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	461a      	mov	r2, r3
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4413      	add	r3, r2
 800ab6a:	8afa      	ldrh	r2, [r7, #22]
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fe ff15 	bl	800999e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ab74:	8afb      	ldrh	r3, [r7, #22]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d102      	bne.n	800ab80 <put_lfn+0x90>
 800ab7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab7e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	3301      	adds	r3, #1
 800ab84:	61bb      	str	r3, [r7, #24]
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	2b0c      	cmp	r3, #12
 800ab8a:	d9da      	bls.n	800ab42 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ab8c:	8afb      	ldrh	r3, [r7, #22]
 800ab8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d006      	beq.n	800aba4 <put_lfn+0xb4>
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d103      	bne.n	800abac <put_lfn+0xbc>
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abaa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	79fa      	ldrb	r2, [r7, #7]
 800abb0:	701a      	strb	r2, [r3, #0]
}
 800abb2:	bf00      	nop
 800abb4:	3720      	adds	r7, #32
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	08011498 	.word	0x08011498

0800abc0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08c      	sub	sp, #48	@ 0x30
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800abce:	220b      	movs	r2, #11
 800abd0:	68b9      	ldr	r1, [r7, #8]
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7fe ff2a 	bl	8009a2c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2b05      	cmp	r3, #5
 800abdc:	d929      	bls.n	800ac32 <gen_numname+0x72>
		sr = seq;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800abe2:	e020      	b.n	800ac26 <gen_numname+0x66>
			wc = *lfn++;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	1c9a      	adds	r2, r3, #2
 800abe8:	607a      	str	r2, [r7, #4]
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800abee:	2300      	movs	r3, #0
 800abf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abf2:	e015      	b.n	800ac20 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	005a      	lsls	r2, r3, #1
 800abf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	4413      	add	r3, r2
 800ac00:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ac02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <gen_numname+0x5a>
 800ac12:	69fa      	ldr	r2, [r7, #28]
 800ac14:	4b30      	ldr	r3, [pc, #192]	@ (800acd8 <gen_numname+0x118>)
 800ac16:	4053      	eors	r3, r2
 800ac18:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ac1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac22:	2b0f      	cmp	r3, #15
 800ac24:	d9e6      	bls.n	800abf4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1da      	bne.n	800abe4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ac32:	2307      	movs	r3, #7
 800ac34:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	f003 030f 	and.w	r3, r3, #15
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	3330      	adds	r3, #48	@ 0x30
 800ac42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ac46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac4a:	2b39      	cmp	r3, #57	@ 0x39
 800ac4c:	d904      	bls.n	800ac58 <gen_numname+0x98>
 800ac4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac52:	3307      	adds	r3, #7
 800ac54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ac58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5a:	1e5a      	subs	r2, r3, #1
 800ac5c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ac5e:	3330      	adds	r3, #48	@ 0x30
 800ac60:	443b      	add	r3, r7
 800ac62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ac66:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	091b      	lsrs	r3, r3, #4
 800ac6e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1df      	bne.n	800ac36 <gen_numname+0x76>
	ns[i] = '~';
 800ac76:	f107 0214 	add.w	r2, r7, #20
 800ac7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7c:	4413      	add	r3, r2
 800ac7e:	227e      	movs	r2, #126	@ 0x7e
 800ac80:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ac82:	2300      	movs	r3, #0
 800ac84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac86:	e002      	b.n	800ac8e <gen_numname+0xce>
 800ac88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d205      	bcs.n	800aca2 <gen_numname+0xe2>
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	4413      	add	r3, r2
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b20      	cmp	r3, #32
 800aca0:	d1f2      	bne.n	800ac88 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca4:	2b07      	cmp	r3, #7
 800aca6:	d807      	bhi.n	800acb8 <gen_numname+0xf8>
 800aca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	62ba      	str	r2, [r7, #40]	@ 0x28
 800acae:	3330      	adds	r3, #48	@ 0x30
 800acb0:	443b      	add	r3, r7
 800acb2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800acb6:	e000      	b.n	800acba <gen_numname+0xfa>
 800acb8:	2120      	movs	r1, #32
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	627a      	str	r2, [r7, #36]	@ 0x24
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	4413      	add	r3, r2
 800acc4:	460a      	mov	r2, r1
 800acc6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acca:	2b07      	cmp	r3, #7
 800accc:	d9e9      	bls.n	800aca2 <gen_numname+0xe2>
}
 800acce:	bf00      	nop
 800acd0:	bf00      	nop
 800acd2:	3730      	adds	r7, #48	@ 0x30
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	00011021 	.word	0x00011021

0800acdc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ace8:	230b      	movs	r3, #11
 800acea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	0852      	lsrs	r2, r2, #1
 800acf2:	01db      	lsls	r3, r3, #7
 800acf4:	4313      	orrs	r3, r2
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	1c59      	adds	r1, r3, #1
 800acfc:	6079      	str	r1, [r7, #4]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	4413      	add	r3, r2
 800ad02:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	3b01      	subs	r3, #1
 800ad08:	60bb      	str	r3, [r7, #8]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1ed      	bne.n	800acec <sum_sfn+0x10>
	return sum;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b086      	sub	sp, #24
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fc89 	bl	800a646 <dir_sdi>
 800ad34:	4603      	mov	r3, r0
 800ad36:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <dir_find+0x24>
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	e0a9      	b.n	800ae96 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ad42:	23ff      	movs	r3, #255	@ 0xff
 800ad44:	753b      	strb	r3, [r7, #20]
 800ad46:	7d3b      	ldrb	r3, [r7, #20]
 800ad48:	757b      	strb	r3, [r7, #21]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad50:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	69db      	ldr	r3, [r3, #28]
 800ad56:	4619      	mov	r1, r3
 800ad58:	6938      	ldr	r0, [r7, #16]
 800ad5a:	f7ff f895 	bl	8009e88 <move_window>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 8090 	bne.w	800ae8a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6a1b      	ldr	r3, [r3, #32]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad72:	7dbb      	ldrb	r3, [r7, #22]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d102      	bne.n	800ad7e <dir_find+0x60>
 800ad78:	2304      	movs	r3, #4
 800ad7a:	75fb      	strb	r3, [r7, #23]
 800ad7c:	e08a      	b.n	800ae94 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a1b      	ldr	r3, [r3, #32]
 800ad82:	330b      	adds	r3, #11
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad8a:	73fb      	strb	r3, [r7, #15]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	7bfa      	ldrb	r2, [r7, #15]
 800ad90:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ad92:	7dbb      	ldrb	r3, [r7, #22]
 800ad94:	2be5      	cmp	r3, #229	@ 0xe5
 800ad96:	d007      	beq.n	800ada8 <dir_find+0x8a>
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	f003 0308 	and.w	r3, r3, #8
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d009      	beq.n	800adb6 <dir_find+0x98>
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
 800ada4:	2b0f      	cmp	r3, #15
 800ada6:	d006      	beq.n	800adb6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ada8:	23ff      	movs	r3, #255	@ 0xff
 800adaa:	757b      	strb	r3, [r7, #21]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f04f 32ff 	mov.w	r2, #4294967295
 800adb2:	631a      	str	r2, [r3, #48]	@ 0x30
 800adb4:	e05e      	b.n	800ae74 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	2b0f      	cmp	r3, #15
 800adba:	d136      	bne.n	800ae2a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800adc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d154      	bne.n	800ae74 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800adca:	7dbb      	ldrb	r3, [r7, #22]
 800adcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00d      	beq.n	800adf0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	7b5b      	ldrb	r3, [r3, #13]
 800adda:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800addc:	7dbb      	ldrb	r3, [r7, #22]
 800adde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ade2:	75bb      	strb	r3, [r7, #22]
 800ade4:	7dbb      	ldrb	r3, [r7, #22]
 800ade6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	695a      	ldr	r2, [r3, #20]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800adf0:	7dba      	ldrb	r2, [r7, #22]
 800adf2:	7d7b      	ldrb	r3, [r7, #21]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d115      	bne.n	800ae24 <dir_find+0x106>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	330d      	adds	r3, #13
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	7d3a      	ldrb	r2, [r7, #20]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d10e      	bne.n	800ae24 <dir_find+0x106>
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	691a      	ldr	r2, [r3, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4610      	mov	r0, r2
 800ae12:	f7ff fdfd 	bl	800aa10 <cmp_lfn>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <dir_find+0x106>
 800ae1c:	7d7b      	ldrb	r3, [r7, #21]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	e000      	b.n	800ae26 <dir_find+0x108>
 800ae24:	23ff      	movs	r3, #255	@ 0xff
 800ae26:	757b      	strb	r3, [r7, #21]
 800ae28:	e024      	b.n	800ae74 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ae2a:	7d7b      	ldrb	r3, [r7, #21]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d109      	bne.n	800ae44 <dir_find+0x126>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff ff51 	bl	800acdc <sum_sfn>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	7d3b      	ldrb	r3, [r7, #20]
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d024      	beq.n	800ae8e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <dir_find+0x14a>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a18      	ldr	r0, [r3, #32]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	3324      	adds	r3, #36	@ 0x24
 800ae5a:	220b      	movs	r2, #11
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	f7fe fe21 	bl	8009aa4 <mem_cmp>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d014      	beq.n	800ae92 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae68:	23ff      	movs	r3, #255	@ 0xff
 800ae6a:	757b      	strb	r3, [r7, #21]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae72:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae74:	2100      	movs	r1, #0
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff fc6e 	bl	800a758 <dir_next>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f43f af65 	beq.w	800ad52 <dir_find+0x34>
 800ae88:	e004      	b.n	800ae94 <dir_find+0x176>
		if (res != FR_OK) break;
 800ae8a:	bf00      	nop
 800ae8c:	e002      	b.n	800ae94 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ae8e:	bf00      	nop
 800ae90:	e000      	b.n	800ae94 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae92:	bf00      	nop

	return res;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08c      	sub	sp, #48	@ 0x30
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800aeb4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <dir_register+0x20>
 800aebc:	2306      	movs	r3, #6
 800aebe:	e0e0      	b.n	800b082 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800aec0:	2300      	movs	r3, #0
 800aec2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aec4:	e002      	b.n	800aecc <dir_register+0x2c>
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	3301      	adds	r3, #1
 800aeca:	627b      	str	r3, [r7, #36]	@ 0x24
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	691a      	ldr	r2, [r3, #16]
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	4413      	add	r3, r2
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f4      	bne.n	800aec6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800aee2:	f107 030c 	add.w	r3, r7, #12
 800aee6:	220c      	movs	r2, #12
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe fd9f 	bl	8009a2c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d032      	beq.n	800af5e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2240      	movs	r2, #64	@ 0x40
 800aefc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800af00:	2301      	movs	r3, #1
 800af02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af04:	e016      	b.n	800af34 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	691a      	ldr	r2, [r3, #16]
 800af10:	f107 010c 	add.w	r1, r7, #12
 800af14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af16:	f7ff fe53 	bl	800abc0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff feff 	bl	800ad1e <dir_find>
 800af20:	4603      	mov	r3, r0
 800af22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800af26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d106      	bne.n	800af3c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800af2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af30:	3301      	adds	r3, #1
 800af32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af36:	2b63      	cmp	r3, #99	@ 0x63
 800af38:	d9e5      	bls.n	800af06 <dir_register+0x66>
 800af3a:	e000      	b.n	800af3e <dir_register+0x9e>
			if (res != FR_OK) break;
 800af3c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800af3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af40:	2b64      	cmp	r3, #100	@ 0x64
 800af42:	d101      	bne.n	800af48 <dir_register+0xa8>
 800af44:	2307      	movs	r3, #7
 800af46:	e09c      	b.n	800b082 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800af48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d002      	beq.n	800af56 <dir_register+0xb6>
 800af50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af54:	e095      	b.n	800b082 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800af56:	7dfa      	ldrb	r2, [r7, #23]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800af5e:	7dfb      	ldrb	r3, [r7, #23]
 800af60:	f003 0302 	and.w	r3, r3, #2
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <dir_register+0xd8>
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	330c      	adds	r3, #12
 800af6c:	4a47      	ldr	r2, [pc, #284]	@ (800b08c <dir_register+0x1ec>)
 800af6e:	fba2 2303 	umull	r2, r3, r2, r3
 800af72:	089b      	lsrs	r3, r3, #2
 800af74:	3301      	adds	r3, #1
 800af76:	e000      	b.n	800af7a <dir_register+0xda>
 800af78:	2301      	movs	r3, #1
 800af7a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800af7c:	6a39      	ldr	r1, [r7, #32]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff fcc0 	bl	800a904 <dir_alloc>
 800af84:	4603      	mov	r3, r0
 800af86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800af8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d148      	bne.n	800b024 <dir_register+0x184>
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	3b01      	subs	r3, #1
 800af96:	623b      	str	r3, [r7, #32]
 800af98:	6a3b      	ldr	r3, [r7, #32]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d042      	beq.n	800b024 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	695a      	ldr	r2, [r3, #20]
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	015b      	lsls	r3, r3, #5
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f7ff fb4b 	bl	800a646 <dir_sdi>
 800afb0:	4603      	mov	r3, r0
 800afb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800afb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d132      	bne.n	800b024 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3324      	adds	r3, #36	@ 0x24
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff fe8a 	bl	800acdc <sum_sfn>
 800afc8:	4603      	mov	r3, r0
 800afca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	4619      	mov	r1, r3
 800afd2:	69f8      	ldr	r0, [r7, #28]
 800afd4:	f7fe ff58 	bl	8009e88 <move_window>
 800afd8:	4603      	mov	r3, r0
 800afda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800afde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d11d      	bne.n	800b022 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	6918      	ldr	r0, [r3, #16]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a19      	ldr	r1, [r3, #32]
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	7efb      	ldrb	r3, [r7, #27]
 800aff4:	f7ff fd7c 	bl	800aaf0 <put_lfn>
				fs->wflag = 1;
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	2201      	movs	r2, #1
 800affc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800affe:	2100      	movs	r1, #0
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff fba9 	bl	800a758 <dir_next>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b00c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b010:	2b00      	cmp	r3, #0
 800b012:	d107      	bne.n	800b024 <dir_register+0x184>
 800b014:	6a3b      	ldr	r3, [r7, #32]
 800b016:	3b01      	subs	r3, #1
 800b018:	623b      	str	r3, [r7, #32]
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d1d5      	bne.n	800afcc <dir_register+0x12c>
 800b020:	e000      	b.n	800b024 <dir_register+0x184>
				if (res != FR_OK) break;
 800b022:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b024:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d128      	bne.n	800b07e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	4619      	mov	r1, r3
 800b032:	69f8      	ldr	r0, [r7, #28]
 800b034:	f7fe ff28 	bl	8009e88 <move_window>
 800b038:	4603      	mov	r3, r0
 800b03a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b03e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b042:	2b00      	cmp	r3, #0
 800b044:	d11b      	bne.n	800b07e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	2220      	movs	r2, #32
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fe fd0d 	bl	8009a6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a18      	ldr	r0, [r3, #32]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3324      	adds	r3, #36	@ 0x24
 800b05c:	220b      	movs	r2, #11
 800b05e:	4619      	mov	r1, r3
 800b060:	f7fe fce4 	bl	8009a2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	330c      	adds	r3, #12
 800b070:	f002 0218 	and.w	r2, r2, #24
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	2201      	movs	r2, #1
 800b07c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b07e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b082:	4618      	mov	r0, r3
 800b084:	3730      	adds	r7, #48	@ 0x30
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	4ec4ec4f 	.word	0x4ec4ec4f

0800b090 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08a      	sub	sp, #40	@ 0x28
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	613b      	str	r3, [r7, #16]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	1c5a      	adds	r2, r3, #1
 800b0b4:	61ba      	str	r2, [r7, #24]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b0be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b0c0:	2b1f      	cmp	r3, #31
 800b0c2:	d940      	bls.n	800b146 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b0c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b0c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800b0c8:	d006      	beq.n	800b0d8 <create_name+0x48>
 800b0ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b0cc:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0ce:	d110      	bne.n	800b0f2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b0d0:	e002      	b.n	800b0d8 <create_name+0x48>
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	61bb      	str	r3, [r7, #24]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	4413      	add	r3, r2
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b0e2:	d0f6      	beq.n	800b0d2 <create_name+0x42>
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0ee:	d0f0      	beq.n	800b0d2 <create_name+0x42>
			break;
 800b0f0:	e02a      	b.n	800b148 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2bfe      	cmp	r3, #254	@ 0xfe
 800b0f6:	d901      	bls.n	800b0fc <create_name+0x6c>
 800b0f8:	2306      	movs	r3, #6
 800b0fa:	e17d      	b.n	800b3f8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b0fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b104:	2101      	movs	r1, #1
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe faaa 	bl	8009660 <ff_convert>
 800b10c:	4603      	mov	r3, r0
 800b10e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b110:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <create_name+0x8a>
 800b116:	2306      	movs	r3, #6
 800b118:	e16e      	b.n	800b3f8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b11a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b11c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b11e:	d809      	bhi.n	800b134 <create_name+0xa4>
 800b120:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b122:	4619      	mov	r1, r3
 800b124:	488d      	ldr	r0, [pc, #564]	@ (800b35c <create_name+0x2cc>)
 800b126:	f7fe fce4 	bl	8009af2 <chk_chr>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <create_name+0xa4>
 800b130:	2306      	movs	r3, #6
 800b132:	e161      	b.n	800b3f8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	1c5a      	adds	r2, r3, #1
 800b138:	617a      	str	r2, [r7, #20]
 800b13a:	005b      	lsls	r3, r3, #1
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4413      	add	r3, r2
 800b140:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b142:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b144:	e7b4      	b.n	800b0b0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b146:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	441a      	add	r2, r3
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b154:	2b1f      	cmp	r3, #31
 800b156:	d801      	bhi.n	800b15c <create_name+0xcc>
 800b158:	2304      	movs	r3, #4
 800b15a:	e000      	b.n	800b15e <create_name+0xce>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b162:	e011      	b.n	800b188 <create_name+0xf8>
		w = lfn[di - 1];
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b16a:	4413      	add	r3, r2
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	4413      	add	r3, r2
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b178:	2b20      	cmp	r3, #32
 800b17a:	d002      	beq.n	800b182 <create_name+0xf2>
 800b17c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b17e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b180:	d106      	bne.n	800b190 <create_name+0x100>
		di--;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	3b01      	subs	r3, #1
 800b186:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1ea      	bne.n	800b164 <create_name+0xd4>
 800b18e:	e000      	b.n	800b192 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b190:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	4413      	add	r3, r2
 800b19a:	2200      	movs	r2, #0
 800b19c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d101      	bne.n	800b1a8 <create_name+0x118>
 800b1a4:	2306      	movs	r3, #6
 800b1a6:	e127      	b.n	800b3f8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	3324      	adds	r3, #36	@ 0x24
 800b1ac:	220b      	movs	r2, #11
 800b1ae:	2120      	movs	r1, #32
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7fe fc5c 	bl	8009a6e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	e002      	b.n	800b1c2 <create_name+0x132>
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	61bb      	str	r3, [r7, #24]
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	2b20      	cmp	r3, #32
 800b1ce:	d0f5      	beq.n	800b1bc <create_name+0x12c>
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1dc:	d0ee      	beq.n	800b1bc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d009      	beq.n	800b1f8 <create_name+0x168>
 800b1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1e8:	f043 0303 	orr.w	r3, r3, #3
 800b1ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b1f0:	e002      	b.n	800b1f8 <create_name+0x168>
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d009      	beq.n	800b212 <create_name+0x182>
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b204:	4413      	add	r3, r2
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	881b      	ldrh	r3, [r3, #0]
 800b20e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b210:	d1ef      	bne.n	800b1f2 <create_name+0x162>

	i = b = 0; ni = 8;
 800b212:	2300      	movs	r3, #0
 800b214:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b218:	2300      	movs	r3, #0
 800b21a:	623b      	str	r3, [r7, #32]
 800b21c:	2308      	movs	r3, #8
 800b21e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	61ba      	str	r2, [r7, #24]
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	4413      	add	r3, r2
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b230:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 8090 	beq.w	800b358 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b238:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b23a:	2b20      	cmp	r3, #32
 800b23c:	d006      	beq.n	800b24c <create_name+0x1bc>
 800b23e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b240:	2b2e      	cmp	r3, #46	@ 0x2e
 800b242:	d10a      	bne.n	800b25a <create_name+0x1ca>
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d006      	beq.n	800b25a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b24c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b250:	f043 0303 	orr.w	r3, r3, #3
 800b254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b258:	e07d      	b.n	800b356 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b25a:	6a3a      	ldr	r2, [r7, #32]
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d203      	bcs.n	800b26a <create_name+0x1da>
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	429a      	cmp	r2, r3
 800b268:	d123      	bne.n	800b2b2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	2b0b      	cmp	r3, #11
 800b26e:	d106      	bne.n	800b27e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b274:	f043 0303 	orr.w	r3, r3, #3
 800b278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b27c:	e075      	b.n	800b36a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b27e:	69ba      	ldr	r2, [r7, #24]
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	429a      	cmp	r2, r3
 800b284:	d005      	beq.n	800b292 <create_name+0x202>
 800b286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b28a:	f043 0303 	orr.w	r3, r3, #3
 800b28e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b292:	69ba      	ldr	r2, [r7, #24]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	429a      	cmp	r2, r3
 800b298:	d866      	bhi.n	800b368 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	61bb      	str	r3, [r7, #24]
 800b29e:	2308      	movs	r3, #8
 800b2a0:	623b      	str	r3, [r7, #32]
 800b2a2:	230b      	movs	r3, #11
 800b2a4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b2a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b2b0:	e051      	b.n	800b356 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b2b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2b6:	d914      	bls.n	800b2e2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b2b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fe f9cf 	bl	8009660 <ff_convert>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b2c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d004      	beq.n	800b2d6 <create_name+0x246>
 800b2cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2ce:	3b80      	subs	r3, #128	@ 0x80
 800b2d0:	4a23      	ldr	r2, [pc, #140]	@ (800b360 <create_name+0x2d0>)
 800b2d2:	5cd3      	ldrb	r3, [r2, r3]
 800b2d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b2d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2da:	f043 0302 	orr.w	r3, r3, #2
 800b2de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b2e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d007      	beq.n	800b2f8 <create_name+0x268>
 800b2e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	481d      	ldr	r0, [pc, #116]	@ (800b364 <create_name+0x2d4>)
 800b2ee:	f7fe fc00 	bl	8009af2 <chk_chr>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d008      	beq.n	800b30a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b2f8:	235f      	movs	r3, #95	@ 0x5f
 800b2fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b300:	f043 0303 	orr.w	r3, r3, #3
 800b304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b308:	e01b      	b.n	800b342 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b30a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b30c:	2b40      	cmp	r3, #64	@ 0x40
 800b30e:	d909      	bls.n	800b324 <create_name+0x294>
 800b310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b312:	2b5a      	cmp	r3, #90	@ 0x5a
 800b314:	d806      	bhi.n	800b324 <create_name+0x294>
					b |= 2;
 800b316:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b31a:	f043 0302 	orr.w	r3, r3, #2
 800b31e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b322:	e00e      	b.n	800b342 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b326:	2b60      	cmp	r3, #96	@ 0x60
 800b328:	d90b      	bls.n	800b342 <create_name+0x2b2>
 800b32a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b32c:	2b7a      	cmp	r3, #122	@ 0x7a
 800b32e:	d808      	bhi.n	800b342 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b334:	f043 0301 	orr.w	r3, r3, #1
 800b338:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b33c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b33e:	3b20      	subs	r3, #32
 800b340:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	623a      	str	r2, [r7, #32]
 800b348:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b34a:	b2d1      	uxtb	r1, r2
 800b34c:	687a      	ldr	r2, [r7, #4]
 800b34e:	4413      	add	r3, r2
 800b350:	460a      	mov	r2, r1
 800b352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b356:	e763      	b.n	800b220 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b358:	bf00      	nop
 800b35a:	e006      	b.n	800b36a <create_name+0x2da>
 800b35c:	08011008 	.word	0x08011008
 800b360:	08011418 	.word	0x08011418
 800b364:	08011014 	.word	0x08011014
			if (si > di) break;			/* No extension */
 800b368:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b370:	2be5      	cmp	r3, #229	@ 0xe5
 800b372:	d103      	bne.n	800b37c <create_name+0x2ec>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2205      	movs	r2, #5
 800b378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	2b08      	cmp	r3, #8
 800b380:	d104      	bne.n	800b38c <create_name+0x2fc>
 800b382:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b38c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b390:	f003 030c 	and.w	r3, r3, #12
 800b394:	2b0c      	cmp	r3, #12
 800b396:	d005      	beq.n	800b3a4 <create_name+0x314>
 800b398:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b39c:	f003 0303 	and.w	r3, r3, #3
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d105      	bne.n	800b3b0 <create_name+0x320>
 800b3a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3a8:	f043 0302 	orr.w	r3, r3, #2
 800b3ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3b4:	f003 0302 	and.w	r3, r3, #2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d117      	bne.n	800b3ec <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b3bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d105      	bne.n	800b3d4 <create_name+0x344>
 800b3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3cc:	f043 0310 	orr.w	r3, r3, #16
 800b3d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b3d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3d8:	f003 030c 	and.w	r3, r3, #12
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d105      	bne.n	800b3ec <create_name+0x35c>
 800b3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3e4:	f043 0308 	orr.w	r3, r3, #8
 800b3e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b3f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800b3f6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3728      	adds	r7, #40	@ 0x28
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b414:	e002      	b.n	800b41c <follow_path+0x1c>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	3301      	adds	r3, #1
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b2f      	cmp	r3, #47	@ 0x2f
 800b422:	d0f8      	beq.n	800b416 <follow_path+0x16>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	2b5c      	cmp	r3, #92	@ 0x5c
 800b42a:	d0f4      	beq.n	800b416 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2200      	movs	r2, #0
 800b430:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2b1f      	cmp	r3, #31
 800b438:	d80a      	bhi.n	800b450 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2280      	movs	r2, #128	@ 0x80
 800b43e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b442:	2100      	movs	r1, #0
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff f8fe 	bl	800a646 <dir_sdi>
 800b44a:	4603      	mov	r3, r0
 800b44c:	75fb      	strb	r3, [r7, #23]
 800b44e:	e048      	b.n	800b4e2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b450:	463b      	mov	r3, r7
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7ff fe1b 	bl	800b090 <create_name>
 800b45a:	4603      	mov	r3, r0
 800b45c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d139      	bne.n	800b4d8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f7ff fc5a 	bl	800ad1e <dir_find>
 800b46a:	4603      	mov	r3, r0
 800b46c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b474:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
 800b47e:	2b04      	cmp	r3, #4
 800b480:	d12c      	bne.n	800b4dc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b482:	7afb      	ldrb	r3, [r7, #11]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d127      	bne.n	800b4dc <follow_path+0xdc>
 800b48c:	2305      	movs	r3, #5
 800b48e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b490:	e024      	b.n	800b4dc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d121      	bne.n	800b4e0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	799b      	ldrb	r3, [r3, #6]
 800b4a0:	f003 0310 	and.w	r3, r3, #16
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b4a8:	2305      	movs	r3, #5
 800b4aa:	75fb      	strb	r3, [r7, #23]
 800b4ac:	e019      	b.n	800b4e2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	8992      	ldrh	r2, [r2, #12]
 800b4bc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4c0:	fb00 f202 	mul.w	r2, r0, r2
 800b4c4:	1a9b      	subs	r3, r3, r2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7ff fa61 	bl	800a992 <ld_clust>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b4d6:	e7bb      	b.n	800b450 <follow_path+0x50>
			if (res != FR_OK) break;
 800b4d8:	bf00      	nop
 800b4da:	e002      	b.n	800b4e2 <follow_path+0xe2>
				break;
 800b4dc:	bf00      	nop
 800b4de:	e000      	b.n	800b4e2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4e0:	bf00      	nop
			}
		}
	}

	return res;
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d031      	beq.n	800b566 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	e002      	b.n	800b510 <get_ldnumber+0x24>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	3301      	adds	r3, #1
 800b50e:	617b      	str	r3, [r7, #20]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b1f      	cmp	r3, #31
 800b516:	d903      	bls.n	800b520 <get_ldnumber+0x34>
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b51e:	d1f4      	bne.n	800b50a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b3a      	cmp	r3, #58	@ 0x3a
 800b526:	d11c      	bne.n	800b562 <get_ldnumber+0x76>
			tp = *path;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	1c5a      	adds	r2, r3, #1
 800b532:	60fa      	str	r2, [r7, #12]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	3b30      	subs	r3, #48	@ 0x30
 800b538:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	d80e      	bhi.n	800b55e <get_ldnumber+0x72>
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	429a      	cmp	r2, r3
 800b546:	d10a      	bne.n	800b55e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d107      	bne.n	800b55e <get_ldnumber+0x72>
					vol = (int)i;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	3301      	adds	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	e002      	b.n	800b568 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b562:	2300      	movs	r3, #0
 800b564:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b566:	693b      	ldr	r3, [r7, #16]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	371c      	adds	r7, #28
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	70da      	strb	r2, [r3, #3]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f04f 32ff 	mov.w	r2, #4294967295
 800b58a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7fe fc7a 	bl	8009e88 <move_window>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <check_fs+0x2a>
 800b59a:	2304      	movs	r3, #4
 800b59c:	e038      	b.n	800b610 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3338      	adds	r3, #56	@ 0x38
 800b5a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fe f9be 	bl	8009928 <ld_word>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d001      	beq.n	800b5bc <check_fs+0x48>
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e029      	b.n	800b610 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b5c2:	2be9      	cmp	r3, #233	@ 0xe9
 800b5c4:	d009      	beq.n	800b5da <check_fs+0x66>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b5cc:	2beb      	cmp	r3, #235	@ 0xeb
 800b5ce:	d11e      	bne.n	800b60e <check_fs+0x9a>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b5d6:	2b90      	cmp	r3, #144	@ 0x90
 800b5d8:	d119      	bne.n	800b60e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	3338      	adds	r3, #56	@ 0x38
 800b5de:	3336      	adds	r3, #54	@ 0x36
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fe f9b9 	bl	8009958 <ld_dword>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b5ec:	4a0a      	ldr	r2, [pc, #40]	@ (800b618 <check_fs+0xa4>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d101      	bne.n	800b5f6 <check_fs+0x82>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e00c      	b.n	800b610 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3338      	adds	r3, #56	@ 0x38
 800b5fa:	3352      	adds	r3, #82	@ 0x52
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fe f9ab 	bl	8009958 <ld_dword>
 800b602:	4603      	mov	r3, r0
 800b604:	4a05      	ldr	r2, [pc, #20]	@ (800b61c <check_fs+0xa8>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d101      	bne.n	800b60e <check_fs+0x9a>
 800b60a:	2300      	movs	r3, #0
 800b60c:	e000      	b.n	800b610 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b60e:	2302      	movs	r3, #2
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	00544146 	.word	0x00544146
 800b61c:	33544146 	.word	0x33544146

0800b620 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b096      	sub	sp, #88	@ 0x58
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f7ff ff59 	bl	800b4ec <get_ldnumber>
 800b63a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	da01      	bge.n	800b646 <find_volume+0x26>
 800b642:	230b      	movs	r3, #11
 800b644:	e265      	b.n	800bb12 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b646:	4a9f      	ldr	r2, [pc, #636]	@ (800b8c4 <find_volume+0x2a4>)
 800b648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b64a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b64e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b652:	2b00      	cmp	r3, #0
 800b654:	d101      	bne.n	800b65a <find_volume+0x3a>
 800b656:	230c      	movs	r3, #12
 800b658:	e25b      	b.n	800bb12 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b65e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	f023 0301 	bic.w	r3, r3, #1
 800b666:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d01a      	beq.n	800b6a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b672:	785b      	ldrb	r3, [r3, #1]
 800b674:	4618      	mov	r0, r3
 800b676:	f7fe f8b9 	bl	80097ec <disk_status>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b680:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10c      	bne.n	800b6a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b68c:	79fb      	ldrb	r3, [r7, #7]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d007      	beq.n	800b6a2 <find_volume+0x82>
 800b692:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b696:	f003 0304 	and.w	r3, r3, #4
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b69e:	230a      	movs	r3, #10
 800b6a0:	e237      	b.n	800bb12 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	e235      	b.n	800bb12 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6ae:	b2da      	uxtb	r2, r3
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b6:	785b      	ldrb	r3, [r3, #1]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe f8b1 	bl	8009820 <disk_initialize>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b6c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b6c8:	f003 0301 	and.w	r3, r3, #1
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e21e      	b.n	800bb12 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b6d4:	79fb      	ldrb	r3, [r7, #7]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d007      	beq.n	800b6ea <find_volume+0xca>
 800b6da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b6de:	f003 0304 	and.w	r3, r3, #4
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b6e6:	230a      	movs	r3, #10
 800b6e8:	e213      	b.n	800bb12 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ec:	7858      	ldrb	r0, [r3, #1]
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f0:	330c      	adds	r3, #12
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	2102      	movs	r1, #2
 800b6f6:	f7fe f8f9 	bl	80098ec <disk_ioctl>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d001      	beq.n	800b704 <find_volume+0xe4>
 800b700:	2301      	movs	r3, #1
 800b702:	e206      	b.n	800bb12 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b706:	899b      	ldrh	r3, [r3, #12]
 800b708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b70c:	d80d      	bhi.n	800b72a <find_volume+0x10a>
 800b70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b710:	899b      	ldrh	r3, [r3, #12]
 800b712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b716:	d308      	bcc.n	800b72a <find_volume+0x10a>
 800b718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b71a:	899b      	ldrh	r3, [r3, #12]
 800b71c:	461a      	mov	r2, r3
 800b71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b720:	899b      	ldrh	r3, [r3, #12]
 800b722:	3b01      	subs	r3, #1
 800b724:	4013      	ands	r3, r2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <find_volume+0x10e>
 800b72a:	2301      	movs	r3, #1
 800b72c:	e1f1      	b.n	800bb12 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b732:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b734:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b736:	f7ff ff1d 	bl	800b574 <check_fs>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b740:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b744:	2b02      	cmp	r3, #2
 800b746:	d149      	bne.n	800b7dc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b748:	2300      	movs	r3, #0
 800b74a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b74c:	e01e      	b.n	800b78c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b750:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b75c:	4413      	add	r3, r2
 800b75e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	3304      	adds	r3, #4
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d006      	beq.n	800b778 <find_volume+0x158>
 800b76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76c:	3308      	adds	r3, #8
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe f8f2 	bl	8009958 <ld_dword>
 800b774:	4602      	mov	r2, r0
 800b776:	e000      	b.n	800b77a <find_volume+0x15a>
 800b778:	2200      	movs	r2, #0
 800b77a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	3358      	adds	r3, #88	@ 0x58
 800b780:	443b      	add	r3, r7
 800b782:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b788:	3301      	adds	r3, #1
 800b78a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b78c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d9dd      	bls.n	800b74e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b792:	2300      	movs	r3, #0
 800b794:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <find_volume+0x182>
 800b79c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b7a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	3358      	adds	r3, #88	@ 0x58
 800b7a8:	443b      	add	r3, r7
 800b7aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b7ae:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b7b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d005      	beq.n	800b7c2 <find_volume+0x1a2>
 800b7b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b7b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b7ba:	f7ff fedb 	bl	800b574 <check_fs>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	e000      	b.n	800b7c4 <find_volume+0x1a4>
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b7c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d905      	bls.n	800b7dc <find_volume+0x1bc>
 800b7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7d8:	2b03      	cmp	r3, #3
 800b7da:	d9e2      	bls.n	800b7a2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	d101      	bne.n	800b7e8 <find_volume+0x1c8>
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e194      	b.n	800bb12 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b7e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d901      	bls.n	800b7f4 <find_volume+0x1d4>
 800b7f0:	230d      	movs	r3, #13
 800b7f2:	e18e      	b.n	800bb12 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f6:	3338      	adds	r3, #56	@ 0x38
 800b7f8:	330b      	adds	r3, #11
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe f894 	bl	8009928 <ld_word>
 800b800:	4603      	mov	r3, r0
 800b802:	461a      	mov	r2, r3
 800b804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b806:	899b      	ldrh	r3, [r3, #12]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d001      	beq.n	800b810 <find_volume+0x1f0>
 800b80c:	230d      	movs	r3, #13
 800b80e:	e180      	b.n	800bb12 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	3338      	adds	r3, #56	@ 0x38
 800b814:	3316      	adds	r3, #22
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe f886 	bl	8009928 <ld_word>
 800b81c:	4603      	mov	r3, r0
 800b81e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d106      	bne.n	800b834 <find_volume+0x214>
 800b826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b828:	3338      	adds	r3, #56	@ 0x38
 800b82a:	3324      	adds	r3, #36	@ 0x24
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7fe f893 	bl	8009958 <ld_dword>
 800b832:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b838:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b842:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b846:	789b      	ldrb	r3, [r3, #2]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d005      	beq.n	800b858 <find_volume+0x238>
 800b84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84e:	789b      	ldrb	r3, [r3, #2]
 800b850:	2b02      	cmp	r3, #2
 800b852:	d001      	beq.n	800b858 <find_volume+0x238>
 800b854:	230d      	movs	r3, #13
 800b856:	e15c      	b.n	800bb12 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	789b      	ldrb	r3, [r3, #2]
 800b85c:	461a      	mov	r2, r3
 800b85e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b860:	fb02 f303 	mul.w	r3, r2, r3
 800b864:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b868:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b86c:	461a      	mov	r2, r3
 800b86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b870:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b874:	895b      	ldrh	r3, [r3, #10]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d008      	beq.n	800b88c <find_volume+0x26c>
 800b87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b87c:	895b      	ldrh	r3, [r3, #10]
 800b87e:	461a      	mov	r2, r3
 800b880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b882:	895b      	ldrh	r3, [r3, #10]
 800b884:	3b01      	subs	r3, #1
 800b886:	4013      	ands	r3, r2
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <find_volume+0x270>
 800b88c:	230d      	movs	r3, #13
 800b88e:	e140      	b.n	800bb12 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	3338      	adds	r3, #56	@ 0x38
 800b894:	3311      	adds	r3, #17
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe f846 	bl	8009928 <ld_word>
 800b89c:	4603      	mov	r3, r0
 800b89e:	461a      	mov	r2, r3
 800b8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a6:	891b      	ldrh	r3, [r3, #8]
 800b8a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8aa:	8992      	ldrh	r2, [r2, #12]
 800b8ac:	0952      	lsrs	r2, r2, #5
 800b8ae:	b292      	uxth	r2, r2
 800b8b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8b4:	fb01 f202 	mul.w	r2, r1, r2
 800b8b8:	1a9b      	subs	r3, r3, r2
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <find_volume+0x2a8>
 800b8c0:	230d      	movs	r3, #13
 800b8c2:	e126      	b.n	800bb12 <find_volume+0x4f2>
 800b8c4:	20002668 	.word	0x20002668

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ca:	3338      	adds	r3, #56	@ 0x38
 800b8cc:	3313      	adds	r3, #19
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe f82a 	bl	8009928 <ld_word>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b8d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d106      	bne.n	800b8ec <find_volume+0x2cc>
 800b8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8e0:	3338      	adds	r3, #56	@ 0x38
 800b8e2:	3320      	adds	r3, #32
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe f837 	bl	8009958 <ld_dword>
 800b8ea:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ee:	3338      	adds	r3, #56	@ 0x38
 800b8f0:	330e      	adds	r3, #14
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fe f818 	bl	8009928 <ld_word>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b8fc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <find_volume+0x2e6>
 800b902:	230d      	movs	r3, #13
 800b904:	e105      	b.n	800bb12 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b906:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b90a:	4413      	add	r3, r2
 800b90c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b90e:	8911      	ldrh	r1, [r2, #8]
 800b910:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b912:	8992      	ldrh	r2, [r2, #12]
 800b914:	0952      	lsrs	r2, r2, #5
 800b916:	b292      	uxth	r2, r2
 800b918:	fbb1 f2f2 	udiv	r2, r1, r2
 800b91c:	b292      	uxth	r2, r2
 800b91e:	4413      	add	r3, r2
 800b920:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b926:	429a      	cmp	r2, r3
 800b928:	d201      	bcs.n	800b92e <find_volume+0x30e>
 800b92a:	230d      	movs	r3, #13
 800b92c:	e0f1      	b.n	800bb12 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b92e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b936:	8952      	ldrh	r2, [r2, #10]
 800b938:	fbb3 f3f2 	udiv	r3, r3, r2
 800b93c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <find_volume+0x328>
 800b944:	230d      	movs	r3, #13
 800b946:	e0e4      	b.n	800bb12 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b948:	2303      	movs	r3, #3
 800b94a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b950:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b954:	4293      	cmp	r3, r2
 800b956:	d802      	bhi.n	800b95e <find_volume+0x33e>
 800b958:	2302      	movs	r3, #2
 800b95a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b964:	4293      	cmp	r3, r2
 800b966:	d802      	bhi.n	800b96e <find_volume+0x34e>
 800b968:	2301      	movs	r3, #1
 800b96a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b970:	1c9a      	adds	r2, r3, #2
 800b972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b974:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b978:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b97a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b97c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b97e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b980:	441a      	add	r2, r3
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b986:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98a:	441a      	add	r2, r3
 800b98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b990:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b994:	2b03      	cmp	r3, #3
 800b996:	d11e      	bne.n	800b9d6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	3338      	adds	r3, #56	@ 0x38
 800b99c:	332a      	adds	r3, #42	@ 0x2a
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fd ffc2 	bl	8009928 <ld_word>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <find_volume+0x38e>
 800b9aa:	230d      	movs	r3, #13
 800b9ac:	e0b1      	b.n	800bb12 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b0:	891b      	ldrh	r3, [r3, #8]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <find_volume+0x39a>
 800b9b6:	230d      	movs	r3, #13
 800b9b8:	e0ab      	b.n	800bb12 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9bc:	3338      	adds	r3, #56	@ 0x38
 800b9be:	332c      	adds	r3, #44	@ 0x2c
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fd ffc9 	bl	8009958 <ld_dword>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ca:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ce:	69db      	ldr	r3, [r3, #28]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9d4:	e01f      	b.n	800ba16 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d8:	891b      	ldrh	r3, [r3, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <find_volume+0x3c2>
 800b9de:	230d      	movs	r3, #13
 800b9e0:	e097      	b.n	800bb12 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9e8:	441a      	add	r2, r3
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ec:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b9ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d103      	bne.n	800b9fe <find_volume+0x3de>
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	e00a      	b.n	800ba14 <find_volume+0x3f4>
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba00:	69da      	ldr	r2, [r3, #28]
 800ba02:	4613      	mov	r3, r2
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	4413      	add	r3, r2
 800ba08:	085a      	lsrs	r2, r3, #1
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ba14:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ba16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba18:	6a1a      	ldr	r2, [r3, #32]
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1c:	899b      	ldrh	r3, [r3, #12]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba22:	440b      	add	r3, r1
 800ba24:	3b01      	subs	r3, #1
 800ba26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba28:	8989      	ldrh	r1, [r1, #12]
 800ba2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d201      	bcs.n	800ba36 <find_volume+0x416>
 800ba32:	230d      	movs	r3, #13
 800ba34:	e06d      	b.n	800bb12 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ba36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba38:	f04f 32ff 	mov.w	r2, #4294967295
 800ba3c:	619a      	str	r2, [r3, #24]
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba40:	699a      	ldr	r2, [r3, #24]
 800ba42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba44:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba48:	2280      	movs	r2, #128	@ 0x80
 800ba4a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba50:	2b03      	cmp	r3, #3
 800ba52:	d149      	bne.n	800bae8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	3338      	adds	r3, #56	@ 0x38
 800ba58:	3330      	adds	r3, #48	@ 0x30
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7fd ff64 	bl	8009928 <ld_word>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d140      	bne.n	800bae8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ba66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba68:	3301      	adds	r3, #1
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba6e:	f7fe fa0b 	bl	8009e88 <move_window>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d137      	bne.n	800bae8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ba78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba80:	3338      	adds	r3, #56	@ 0x38
 800ba82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fd ff4e 	bl	8009928 <ld_word>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d127      	bne.n	800bae8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ba98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9a:	3338      	adds	r3, #56	@ 0x38
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fd ff5b 	bl	8009958 <ld_dword>
 800baa2:	4603      	mov	r3, r0
 800baa4:	4a1d      	ldr	r2, [pc, #116]	@ (800bb1c <find_volume+0x4fc>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d11e      	bne.n	800bae8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800baaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baac:	3338      	adds	r3, #56	@ 0x38
 800baae:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fd ff50 	bl	8009958 <ld_dword>
 800bab8:	4603      	mov	r3, r0
 800baba:	4a19      	ldr	r2, [pc, #100]	@ (800bb20 <find_volume+0x500>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d113      	bne.n	800bae8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	3338      	adds	r3, #56	@ 0x38
 800bac4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bac8:	4618      	mov	r0, r3
 800baca:	f7fd ff45 	bl	8009958 <ld_dword>
 800bace:	4602      	mov	r2, r0
 800bad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad6:	3338      	adds	r3, #56	@ 0x38
 800bad8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800badc:	4618      	mov	r0, r3
 800bade:	f7fd ff3b 	bl	8009958 <ld_dword>
 800bae2:	4602      	mov	r2, r0
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800baee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800baf0:	4b0c      	ldr	r3, [pc, #48]	@ (800bb24 <find_volume+0x504>)
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	3301      	adds	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	4b0a      	ldr	r3, [pc, #40]	@ (800bb24 <find_volume+0x504>)
 800bafa:	801a      	strh	r2, [r3, #0]
 800bafc:	4b09      	ldr	r3, [pc, #36]	@ (800bb24 <find_volume+0x504>)
 800bafe:	881a      	ldrh	r2, [r3, #0]
 800bb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb02:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb06:	4a08      	ldr	r2, [pc, #32]	@ (800bb28 <find_volume+0x508>)
 800bb08:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bb0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bb0c:	f7fe f954 	bl	8009db8 <clear_lock>
#endif
	return FR_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3758      	adds	r7, #88	@ 0x58
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	41615252 	.word	0x41615252
 800bb20:	61417272 	.word	0x61417272
 800bb24:	2000266c 	.word	0x2000266c
 800bb28:	20002690 	.word	0x20002690

0800bb2c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bb36:	2309      	movs	r3, #9
 800bb38:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01c      	beq.n	800bb7a <validate+0x4e>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d018      	beq.n	800bb7a <validate+0x4e>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d013      	beq.n	800bb7a <validate+0x4e>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	889a      	ldrh	r2, [r3, #4]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	88db      	ldrh	r3, [r3, #6]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d10c      	bne.n	800bb7a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	785b      	ldrb	r3, [r3, #1]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fd fe40 	bl	80097ec <disk_status>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <validate+0x4e>
			res = FR_OK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d102      	bne.n	800bb86 <validate+0x5a>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	e000      	b.n	800bb88 <validate+0x5c>
 800bb86:	2300      	movs	r3, #0
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	6013      	str	r3, [r2, #0]
	return res;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
	...

0800bb98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4613      	mov	r3, r2
 800bba4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bbaa:	f107 0310 	add.w	r3, r7, #16
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff fc9c 	bl	800b4ec <get_ldnumber>
 800bbb4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	da01      	bge.n	800bbc0 <f_mount+0x28>
 800bbbc:	230b      	movs	r3, #11
 800bbbe:	e02b      	b.n	800bc18 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bbc0:	4a17      	ldr	r2, [pc, #92]	@ (800bc20 <f_mount+0x88>)
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbc8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d005      	beq.n	800bbdc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bbd0:	69b8      	ldr	r0, [r7, #24]
 800bbd2:	f7fe f8f1 	bl	8009db8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d002      	beq.n	800bbe8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	490d      	ldr	r1, [pc, #52]	@ (800bc20 <f_mount+0x88>)
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d002      	beq.n	800bbfe <f_mount+0x66>
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d001      	beq.n	800bc02 <f_mount+0x6a>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	e00a      	b.n	800bc18 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bc02:	f107 010c 	add.w	r1, r7, #12
 800bc06:	f107 0308 	add.w	r3, r7, #8
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff fd07 	bl	800b620 <find_volume>
 800bc12:	4603      	mov	r3, r0
 800bc14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3720      	adds	r7, #32
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20002668 	.word	0x20002668

0800bc24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b09a      	sub	sp, #104	@ 0x68
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <f_open+0x18>
 800bc38:	2309      	movs	r3, #9
 800bc3a:	e1b7      	b.n	800bfac <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc42:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bc44:	79fa      	ldrb	r2, [r7, #7]
 800bc46:	f107 0114 	add.w	r1, r7, #20
 800bc4a:	f107 0308 	add.w	r3, r7, #8
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff fce6 	bl	800b620 <find_volume>
 800bc54:	4603      	mov	r3, r0
 800bc56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800bc5a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f040 819b 	bne.w	800bf9a <f_open+0x376>
		dj.obj.fs = fs;
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	f107 0318 	add.w	r3, r7, #24
 800bc6e:	4611      	mov	r1, r2
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff fbc5 	bl	800b400 <follow_path>
 800bc76:	4603      	mov	r3, r0
 800bc78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bc7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d118      	bne.n	800bcb6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bc84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bc88:	b25b      	sxtb	r3, r3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	da03      	bge.n	800bc96 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bc8e:	2306      	movs	r3, #6
 800bc90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bc94:	e00f      	b.n	800bcb6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc96:	79fb      	ldrb	r3, [r7, #7]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	bf8c      	ite	hi
 800bc9c:	2301      	movhi	r3, #1
 800bc9e:	2300      	movls	r3, #0
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	461a      	mov	r2, r3
 800bca4:	f107 0318 	add.w	r3, r7, #24
 800bca8:	4611      	mov	r1, r2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fd ff3c 	bl	8009b28 <chk_lock>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	f003 031c 	and.w	r3, r3, #28
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d07f      	beq.n	800bdc0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bcc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d017      	beq.n	800bcf8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bcc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d10e      	bne.n	800bcee <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bcd0:	f7fd ff86 	bl	8009be0 <enq_lock>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d006      	beq.n	800bce8 <f_open+0xc4>
 800bcda:	f107 0318 	add.w	r3, r7, #24
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff f8de 	bl	800aea0 <dir_register>
 800bce4:	4603      	mov	r3, r0
 800bce6:	e000      	b.n	800bcea <f_open+0xc6>
 800bce8:	2312      	movs	r3, #18
 800bcea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	f043 0308 	orr.w	r3, r3, #8
 800bcf4:	71fb      	strb	r3, [r7, #7]
 800bcf6:	e010      	b.n	800bd1a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bcf8:	7fbb      	ldrb	r3, [r7, #30]
 800bcfa:	f003 0311 	and.w	r3, r3, #17
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <f_open+0xe6>
					res = FR_DENIED;
 800bd02:	2307      	movs	r3, #7
 800bd04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bd08:	e007      	b.n	800bd1a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bd0a:	79fb      	ldrb	r3, [r7, #7]
 800bd0c:	f003 0304 	and.w	r3, r3, #4
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <f_open+0xf6>
 800bd14:	2308      	movs	r3, #8
 800bd16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bd1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d168      	bne.n	800bdf4 <f_open+0x1d0>
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	f003 0308 	and.w	r3, r3, #8
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d063      	beq.n	800bdf4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bd2c:	f7fd fc3a 	bl	80095a4 <get_fattime>
 800bd30:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd34:	330e      	adds	r3, #14
 800bd36:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fd fe4b 	bl	80099d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd40:	3316      	adds	r3, #22
 800bd42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fd fe45 	bl	80099d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd4c:	330b      	adds	r3, #11
 800bd4e:	2220      	movs	r2, #32
 800bd50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd56:	4611      	mov	r1, r2
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe fe1a 	bl	800a992 <ld_clust>
 800bd5e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bd64:	2200      	movs	r2, #0
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fe fe32 	bl	800a9d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6e:	331c      	adds	r3, #28
 800bd70:	2100      	movs	r1, #0
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fd fe2e 	bl	80099d4 <st_dword>
					fs->wflag = 1;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bd7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d037      	beq.n	800bdf4 <f_open+0x1d0>
						dw = fs->winsect;
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd88:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800bd8a:	f107 0318 	add.w	r3, r7, #24
 800bd8e:	2200      	movs	r2, #0
 800bd90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe fb22 	bl	800a3dc <remove_chain>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800bd9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d126      	bne.n	800bdf4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fe f86c 	bl	8009e88 <move_window>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bdba:	3a01      	subs	r2, #1
 800bdbc:	615a      	str	r2, [r3, #20]
 800bdbe:	e019      	b.n	800bdf4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bdc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d115      	bne.n	800bdf4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bdc8:	7fbb      	ldrb	r3, [r7, #30]
 800bdca:	f003 0310 	and.w	r3, r3, #16
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <f_open+0x1b6>
					res = FR_NO_FILE;
 800bdd2:	2304      	movs	r3, #4
 800bdd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bdd8:	e00c      	b.n	800bdf4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bdda:	79fb      	ldrb	r3, [r7, #7]
 800bddc:	f003 0302 	and.w	r3, r3, #2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d007      	beq.n	800bdf4 <f_open+0x1d0>
 800bde4:	7fbb      	ldrb	r3, [r7, #30]
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d002      	beq.n	800bdf4 <f_open+0x1d0>
						res = FR_DENIED;
 800bdee:	2307      	movs	r3, #7
 800bdf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bdf4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d126      	bne.n	800be4a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	f003 0308 	and.w	r3, r3, #8
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800be06:	79fb      	ldrb	r3, [r7, #7]
 800be08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800be16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	bf8c      	ite	hi
 800be22:	2301      	movhi	r3, #1
 800be24:	2300      	movls	r3, #0
 800be26:	b2db      	uxtb	r3, r3
 800be28:	461a      	mov	r2, r3
 800be2a:	f107 0318 	add.w	r3, r7, #24
 800be2e:	4611      	mov	r1, r2
 800be30:	4618      	mov	r0, r3
 800be32:	f7fd fef7 	bl	8009c24 <inc_lock>
 800be36:	4602      	mov	r2, r0
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d102      	bne.n	800be4a <f_open+0x226>
 800be44:	2302      	movs	r3, #2
 800be46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800be4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f040 80a3 	bne.w	800bf9a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be58:	4611      	mov	r1, r2
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fe fd99 	bl	800a992 <ld_clust>
 800be60:	4602      	mov	r2, r0
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be68:	331c      	adds	r3, #28
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fd fd74 	bl	8009958 <ld_dword>
 800be70:	4602      	mov	r2, r0
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	88da      	ldrh	r2, [r3, #6]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	79fa      	ldrb	r2, [r7, #7]
 800be8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3330      	adds	r3, #48	@ 0x30
 800bea6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800beaa:	2100      	movs	r1, #0
 800beac:	4618      	mov	r0, r3
 800beae:	f7fd fdde 	bl	8009a6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800beb2:	79fb      	ldrb	r3, [r7, #7]
 800beb4:	f003 0320 	and.w	r3, r3, #32
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d06e      	beq.n	800bf9a <f_open+0x376>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d06a      	beq.n	800bf9a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	68da      	ldr	r2, [r3, #12]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	895b      	ldrh	r3, [r3, #10]
 800bed0:	461a      	mov	r2, r3
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	899b      	ldrh	r3, [r3, #12]
 800bed6:	fb02 f303 	mul.w	r3, r2, r3
 800beda:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bee8:	e016      	b.n	800bf18 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fe f887 	bl	800a002 <get_fat>
 800bef4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bef6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d802      	bhi.n	800bf02 <f_open+0x2de>
 800befc:	2302      	movs	r3, #2
 800befe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bf02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf08:	d102      	bne.n	800bf10 <f_open+0x2ec>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bf12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d103      	bne.n	800bf28 <f_open+0x304>
 800bf20:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bf22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d8e0      	bhi.n	800beea <f_open+0x2c6>
				}
				fp->clust = clst;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf2c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bf2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d131      	bne.n	800bf9a <f_open+0x376>
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	899b      	ldrh	r3, [r3, #12]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf42:	fb01 f202 	mul.w	r2, r1, r2
 800bf46:	1a9b      	subs	r3, r3, r2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d026      	beq.n	800bf9a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f837 	bl	8009fc4 <clust2sect>
 800bf56:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800bf58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d103      	bne.n	800bf66 <f_open+0x342>
						res = FR_INT_ERR;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bf64:	e019      	b.n	800bf9a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	899b      	ldrh	r3, [r3, #12]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf6e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf74:	441a      	add	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	7858      	ldrb	r0, [r3, #1]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1a      	ldr	r2, [r3, #32]
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f7fd fc6f 	bl	800986c <disk_read>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <f_open+0x376>
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bf9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <f_open+0x384>
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bfa8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3768      	adds	r7, #104	@ 0x68
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08c      	sub	sp, #48	@ 0x30
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f107 0210 	add.w	r2, r7, #16
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7ff fda9 	bl	800bb2c <validate>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bfe0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d107      	bne.n	800bff8 <f_write+0x44>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	7d5b      	ldrb	r3, [r3, #21]
 800bfec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bff0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d002      	beq.n	800bffe <f_write+0x4a>
 800bff8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bffc:	e16a      	b.n	800c2d4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	7d1b      	ldrb	r3, [r3, #20]
 800c002:	f003 0302 	and.w	r3, r3, #2
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <f_write+0x5a>
 800c00a:	2307      	movs	r3, #7
 800c00c:	e162      	b.n	800c2d4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	699a      	ldr	r2, [r3, #24]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	441a      	add	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	f080 814c 	bcs.w	800c2b8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	43db      	mvns	r3, r3
 800c026:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c028:	e146      	b.n	800c2b8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	699b      	ldr	r3, [r3, #24]
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	8992      	ldrh	r2, [r2, #12]
 800c032:	fbb3 f1f2 	udiv	r1, r3, r2
 800c036:	fb01 f202 	mul.w	r2, r1, r2
 800c03a:	1a9b      	subs	r3, r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f040 80f1 	bne.w	800c224 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	693a      	ldr	r2, [r7, #16]
 800c048:	8992      	ldrh	r2, [r2, #12]
 800c04a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	8952      	ldrh	r2, [r2, #10]
 800c052:	3a01      	subs	r2, #1
 800c054:	4013      	ands	r3, r2
 800c056:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d143      	bne.n	800c0e6 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10c      	bne.n	800c080 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d11a      	bne.n	800c0a8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2100      	movs	r1, #0
 800c076:	4618      	mov	r0, r3
 800c078:	f7fe fa15 	bl	800a4a6 <create_chain>
 800c07c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c07e:	e013      	b.n	800c0a8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c084:	2b00      	cmp	r3, #0
 800c086:	d007      	beq.n	800c098 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	4619      	mov	r1, r3
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f7fe faa1 	bl	800a5d6 <clmt_clust>
 800c094:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c096:	e007      	b.n	800c0a8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	f7fe fa00 	bl	800a4a6 <create_chain>
 800c0a6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	f000 8109 	beq.w	800c2c2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d104      	bne.n	800c0c0 <f_write+0x10c>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	755a      	strb	r2, [r3, #21]
 800c0bc:	2302      	movs	r3, #2
 800c0be:	e109      	b.n	800c2d4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d104      	bne.n	800c0d2 <f_write+0x11e>
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	755a      	strb	r2, [r3, #21]
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e100      	b.n	800c2d4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0d6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d102      	bne.n	800c0e6 <f_write+0x132>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0e4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ea:	b25b      	sxtb	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da18      	bge.n	800c122 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	7858      	ldrb	r0, [r3, #1]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6a1a      	ldr	r2, [r3, #32]
 800c0fe:	2301      	movs	r3, #1
 800c100:	f7fd fbd4 	bl	80098ac <disk_write>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d004      	beq.n	800c114 <f_write+0x160>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	755a      	strb	r2, [r3, #21]
 800c110:	2301      	movs	r3, #1
 800c112:	e0df      	b.n	800c2d4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	7d1b      	ldrb	r3, [r3, #20]
 800c118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	4619      	mov	r1, r3
 800c12a:	4610      	mov	r0, r2
 800c12c:	f7fd ff4a 	bl	8009fc4 <clust2sect>
 800c130:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d104      	bne.n	800c142 <f_write+0x18e>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2202      	movs	r2, #2
 800c13c:	755a      	strb	r2, [r3, #21]
 800c13e:	2302      	movs	r3, #2
 800c140:	e0c8      	b.n	800c2d4 <f_write+0x320>
			sect += csect;
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	4413      	add	r3, r2
 800c148:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	899b      	ldrh	r3, [r3, #12]
 800c14e:	461a      	mov	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	fbb3 f3f2 	udiv	r3, r3, r2
 800c156:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d043      	beq.n	800c1e6 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	4413      	add	r3, r2
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	8952      	ldrh	r2, [r2, #10]
 800c168:	4293      	cmp	r3, r2
 800c16a:	d905      	bls.n	800c178 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	895b      	ldrh	r3, [r3, #10]
 800c170:	461a      	mov	r2, r3
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	7858      	ldrb	r0, [r3, #1]
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	69f9      	ldr	r1, [r7, #28]
 800c182:	f7fd fb93 	bl	80098ac <disk_write>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d004      	beq.n	800c196 <f_write+0x1e2>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2201      	movs	r2, #1
 800c190:	755a      	strb	r2, [r3, #21]
 800c192:	2301      	movs	r3, #1
 800c194:	e09e      	b.n	800c2d4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6a1a      	ldr	r2, [r3, #32]
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	6a3a      	ldr	r2, [r7, #32]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d918      	bls.n	800c1d6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6a1a      	ldr	r2, [r3, #32]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	1ad3      	subs	r3, r2, r3
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	8992      	ldrh	r2, [r2, #12]
 800c1b6:	fb02 f303 	mul.w	r3, r2, r3
 800c1ba:	69fa      	ldr	r2, [r7, #28]
 800c1bc:	18d1      	adds	r1, r2, r3
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	899b      	ldrh	r3, [r3, #12]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f7fd fc32 	bl	8009a2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
 800c1cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	899b      	ldrh	r3, [r3, #12]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	fb02 f303 	mul.w	r3, r2, r3
 800c1e2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c1e4:	e04b      	b.n	800c27e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6a1b      	ldr	r3, [r3, #32]
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d016      	beq.n	800c21e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	699a      	ldr	r2, [r3, #24]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d210      	bcs.n	800c21e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	7858      	ldrb	r0, [r3, #1]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c206:	2301      	movs	r3, #1
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	f7fd fb2f 	bl	800986c <disk_read>
 800c20e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c210:	2b00      	cmp	r3, #0
 800c212:	d004      	beq.n	800c21e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2201      	movs	r2, #1
 800c218:	755a      	strb	r2, [r3, #21]
 800c21a:	2301      	movs	r3, #1
 800c21c:	e05a      	b.n	800c2d4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	899b      	ldrh	r3, [r3, #12]
 800c228:	4618      	mov	r0, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	699b      	ldr	r3, [r3, #24]
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	8992      	ldrh	r2, [r2, #12]
 800c232:	fbb3 f1f2 	udiv	r1, r3, r2
 800c236:	fb01 f202 	mul.w	r2, r1, r2
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	1ac3      	subs	r3, r0, r3
 800c23e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	429a      	cmp	r2, r3
 800c246:	d901      	bls.n	800c24c <f_write+0x298>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	8992      	ldrh	r2, [r2, #12]
 800c25a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c25e:	fb00 f202 	mul.w	r2, r0, r2
 800c262:	1a9b      	subs	r3, r3, r2
 800c264:	440b      	add	r3, r1
 800c266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c268:	69f9      	ldr	r1, [r7, #28]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fd fbde 	bl	8009a2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	7d1b      	ldrb	r3, [r3, #20]
 800c274:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c27e:	69fa      	ldr	r2, [r7, #28]
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c282:	4413      	add	r3, r2
 800c284:	61fb      	str	r3, [r7, #28]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	699a      	ldr	r2, [r3, #24]
 800c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28c:	441a      	add	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	619a      	str	r2, [r3, #24]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	bf38      	it	cc
 800c29e:	461a      	movcc	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	60da      	str	r2, [r3, #12]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2aa:	441a      	add	r2, r3
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f47f aeb5 	bne.w	800c02a <f_write+0x76>
 800c2c0:	e000      	b.n	800c2c4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c2c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	7d1b      	ldrb	r3, [r3, #20]
 800c2c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3730      	adds	r7, #48	@ 0x30
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f107 0208 	add.w	r2, r7, #8
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7ff fc1d 	bl	800bb2c <validate>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d168      	bne.n	800c3ce <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	7d1b      	ldrb	r3, [r3, #20]
 800c300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c304:	2b00      	cmp	r3, #0
 800c306:	d062      	beq.n	800c3ce <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	7d1b      	ldrb	r3, [r3, #20]
 800c30c:	b25b      	sxtb	r3, r3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	da15      	bge.n	800c33e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	7858      	ldrb	r0, [r3, #1]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a1a      	ldr	r2, [r3, #32]
 800c320:	2301      	movs	r3, #1
 800c322:	f7fd fac3 	bl	80098ac <disk_write>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <f_sync+0x54>
 800c32c:	2301      	movs	r3, #1
 800c32e:	e04f      	b.n	800c3d0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	7d1b      	ldrb	r3, [r3, #20]
 800c334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c33e:	f7fd f931 	bl	80095a4 <get_fattime>
 800c342:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34a:	4619      	mov	r1, r3
 800c34c:	4610      	mov	r0, r2
 800c34e:	f7fd fd9b 	bl	8009e88 <move_window>
 800c352:	4603      	mov	r3, r0
 800c354:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c356:	7dfb      	ldrb	r3, [r7, #23]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d138      	bne.n	800c3ce <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c360:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	330b      	adds	r3, #11
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	330b      	adds	r3, #11
 800c36c:	f042 0220 	orr.w	r2, r2, #32
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6818      	ldr	r0, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	461a      	mov	r2, r3
 800c37e:	68f9      	ldr	r1, [r7, #12]
 800c380:	f7fe fb26 	bl	800a9d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f103 021c 	add.w	r2, r3, #28
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	4619      	mov	r1, r3
 800c390:	4610      	mov	r0, r2
 800c392:	f7fd fb1f 	bl	80099d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3316      	adds	r3, #22
 800c39a:	6939      	ldr	r1, [r7, #16]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fd fb19 	bl	80099d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3312      	adds	r3, #18
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fd faf8 	bl	800999e <st_word>
					fs->wflag = 1;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd fd94 	bl	8009ee4 <sync_fs>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	7d1b      	ldrb	r3, [r3, #20]
 800c3c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff ff7b 	bl	800c2dc <f_sync>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c3ea:	7bfb      	ldrb	r3, [r7, #15]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d118      	bne.n	800c422 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f107 0208 	add.w	r2, r7, #8
 800c3f6:	4611      	mov	r1, r2
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7ff fb97 	bl	800bb2c <validate>
 800c3fe:	4603      	mov	r3, r0
 800c400:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10c      	bne.n	800c422 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fc97 	bl	8009d40 <dec_lock>
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d102      	bne.n	800c422 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c422:	7bfb      	ldrb	r3, [r7, #15]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3710      	adds	r7, #16
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}

0800c42c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	460b      	mov	r3, r1
 800c436:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	2b0a      	cmp	r3, #10
 800c43c:	d103      	bne.n	800c446 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c43e:	210d      	movs	r1, #13
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff fff3 	bl	800c42c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	db25      	blt.n	800c49e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	1c5a      	adds	r2, r3, #1
 800c456:	60fa      	str	r2, [r7, #12]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	4413      	add	r3, r2
 800c45c:	78fa      	ldrb	r2, [r7, #3]
 800c45e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2b3c      	cmp	r3, #60	@ 0x3c
 800c464:	dd12      	ble.n	800c48c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f103 010c 	add.w	r1, r3, #12
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	f107 0308 	add.w	r3, r7, #8
 800c476:	f7ff fd9d 	bl	800bfb4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d101      	bne.n	800c486 <putc_bfd+0x5a>
 800c482:	2300      	movs	r3, #0
 800c484:	e001      	b.n	800c48a <putc_bfd+0x5e>
 800c486:	f04f 33ff 	mov.w	r3, #4294967295
 800c48a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	1c5a      	adds	r2, r3, #1
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	609a      	str	r2, [r3, #8]
 800c49c:	e000      	b.n	800c4a0 <putc_bfd+0x74>
	if (i < 0) return;
 800c49e:	bf00      	nop
}
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	db16      	blt.n	800c4e4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f103 010c 	add.w	r1, r3, #12
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	f107 030c 	add.w	r3, r7, #12
 800c4ca:	f7ff fd73 	bl	800bfb4 <f_write>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d107      	bne.n	800c4e4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	68fa      	ldr	r2, [r7, #12]
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d102      	bne.n	800c4e4 <putc_flush+0x3e>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	e001      	b.n	800c4e8 <putc_flush+0x42>
	return EOF;
 800c4e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	605a      	str	r2, [r3, #4]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	609a      	str	r2, [r3, #8]
}
 800c50e:	bf00      	nop
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b096      	sub	sp, #88	@ 0x58
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c524:	f107 030c 	add.w	r3, r7, #12
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7ff ffe0 	bl	800c4f0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c530:	e009      	b.n	800c546 <f_puts+0x2c>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	1c5a      	adds	r2, r3, #1
 800c536:	607a      	str	r2, [r7, #4]
 800c538:	781a      	ldrb	r2, [r3, #0]
 800c53a:	f107 030c 	add.w	r3, r7, #12
 800c53e:	4611      	mov	r1, r2
 800c540:	4618      	mov	r0, r3
 800c542:	f7ff ff73 	bl	800c42c <putc_bfd>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1f1      	bne.n	800c532 <f_puts+0x18>
	return putc_flush(&pb);
 800c54e:	f107 030c 	add.w	r3, r7, #12
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff ffa7 	bl	800c4a6 <putc_flush>
 800c558:	4603      	mov	r3, r0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3758      	adds	r7, #88	@ 0x58
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c564:	b480      	push	{r7}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4613      	mov	r3, r2
 800c570:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c572:	2301      	movs	r3, #1
 800c574:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c57a:	4b1f      	ldr	r3, [pc, #124]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c57c:	7a5b      	ldrb	r3, [r3, #9]
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	d131      	bne.n	800c5e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c584:	4b1c      	ldr	r3, [pc, #112]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c586:	7a5b      	ldrb	r3, [r3, #9]
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	461a      	mov	r2, r3
 800c58c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c58e:	2100      	movs	r1, #0
 800c590:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c592:	4b19      	ldr	r3, [pc, #100]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c594:	7a5b      	ldrb	r3, [r3, #9]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	4a17      	ldr	r2, [pc, #92]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	4413      	add	r3, r2
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c5a2:	4b15      	ldr	r3, [pc, #84]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c5a4:	7a5b      	ldrb	r3, [r3, #9]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	4b13      	ldr	r3, [pc, #76]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c5ac:	4413      	add	r3, r2
 800c5ae:	79fa      	ldrb	r2, [r7, #7]
 800c5b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c5b2:	4b11      	ldr	r3, [pc, #68]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c5b4:	7a5b      	ldrb	r3, [r3, #9]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	b2d1      	uxtb	r1, r2
 800c5bc:	4a0e      	ldr	r2, [pc, #56]	@ (800c5f8 <FATFS_LinkDriverEx+0x94>)
 800c5be:	7251      	strb	r1, [r2, #9]
 800c5c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c5c2:	7dbb      	ldrb	r3, [r7, #22]
 800c5c4:	3330      	adds	r3, #48	@ 0x30
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	223a      	movs	r2, #58	@ 0x3a
 800c5d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	3302      	adds	r3, #2
 800c5d8:	222f      	movs	r2, #47	@ 0x2f
 800c5da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	3303      	adds	r3, #3
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	371c      	adds	r7, #28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	20002890 	.word	0x20002890

0800c5fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c606:	2200      	movs	r2, #0
 800c608:	6839      	ldr	r1, [r7, #0]
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7ff ffaa 	bl	800c564 <FATFS_LinkDriverEx>
 800c610:	4603      	mov	r3, r0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3708      	adds	r7, #8
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <atof>:
 800c61a:	2100      	movs	r1, #0
 800c61c:	f000 be0a 	b.w	800d234 <strtod>

0800c620 <sulp>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	4604      	mov	r4, r0
 800c624:	460d      	mov	r5, r1
 800c626:	ec45 4b10 	vmov	d0, r4, r5
 800c62a:	4616      	mov	r6, r2
 800c62c:	f003 fca4 	bl	800ff78 <__ulp>
 800c630:	ec51 0b10 	vmov	r0, r1, d0
 800c634:	b17e      	cbz	r6, 800c656 <sulp+0x36>
 800c636:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c63a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dd09      	ble.n	800c656 <sulp+0x36>
 800c642:	051b      	lsls	r3, r3, #20
 800c644:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c648:	2400      	movs	r4, #0
 800c64a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c64e:	4622      	mov	r2, r4
 800c650:	462b      	mov	r3, r5
 800c652:	f7f3 fff1 	bl	8000638 <__aeabi_dmul>
 800c656:	ec41 0b10 	vmov	d0, r0, r1
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	0000      	movs	r0, r0
	...

0800c660 <_strtod_l>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	b09f      	sub	sp, #124	@ 0x7c
 800c666:	460c      	mov	r4, r1
 800c668:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c66a:	2200      	movs	r2, #0
 800c66c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c66e:	9005      	str	r0, [sp, #20]
 800c670:	f04f 0a00 	mov.w	sl, #0
 800c674:	f04f 0b00 	mov.w	fp, #0
 800c678:	460a      	mov	r2, r1
 800c67a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c67c:	7811      	ldrb	r1, [r2, #0]
 800c67e:	292b      	cmp	r1, #43	@ 0x2b
 800c680:	d04a      	beq.n	800c718 <_strtod_l+0xb8>
 800c682:	d838      	bhi.n	800c6f6 <_strtod_l+0x96>
 800c684:	290d      	cmp	r1, #13
 800c686:	d832      	bhi.n	800c6ee <_strtod_l+0x8e>
 800c688:	2908      	cmp	r1, #8
 800c68a:	d832      	bhi.n	800c6f2 <_strtod_l+0x92>
 800c68c:	2900      	cmp	r1, #0
 800c68e:	d03b      	beq.n	800c708 <_strtod_l+0xa8>
 800c690:	2200      	movs	r2, #0
 800c692:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c694:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c696:	782a      	ldrb	r2, [r5, #0]
 800c698:	2a30      	cmp	r2, #48	@ 0x30
 800c69a:	f040 80b3 	bne.w	800c804 <_strtod_l+0x1a4>
 800c69e:	786a      	ldrb	r2, [r5, #1]
 800c6a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c6a4:	2a58      	cmp	r2, #88	@ 0x58
 800c6a6:	d16e      	bne.n	800c786 <_strtod_l+0x126>
 800c6a8:	9302      	str	r3, [sp, #8]
 800c6aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	4a8e      	ldr	r2, [pc, #568]	@ (800c8ec <_strtod_l+0x28c>)
 800c6b4:	9805      	ldr	r0, [sp, #20]
 800c6b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c6b8:	a919      	add	r1, sp, #100	@ 0x64
 800c6ba:	f002 fd4f 	bl	800f15c <__gethex>
 800c6be:	f010 060f 	ands.w	r6, r0, #15
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	d005      	beq.n	800c6d2 <_strtod_l+0x72>
 800c6c6:	2e06      	cmp	r6, #6
 800c6c8:	d128      	bne.n	800c71c <_strtod_l+0xbc>
 800c6ca:	3501      	adds	r5, #1
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	9519      	str	r5, [sp, #100]	@ 0x64
 800c6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f040 858e 	bne.w	800d1f6 <_strtod_l+0xb96>
 800c6da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6dc:	b1cb      	cbz	r3, 800c712 <_strtod_l+0xb2>
 800c6de:	4652      	mov	r2, sl
 800c6e0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c6e4:	ec43 2b10 	vmov	d0, r2, r3
 800c6e8:	b01f      	add	sp, #124	@ 0x7c
 800c6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ee:	2920      	cmp	r1, #32
 800c6f0:	d1ce      	bne.n	800c690 <_strtod_l+0x30>
 800c6f2:	3201      	adds	r2, #1
 800c6f4:	e7c1      	b.n	800c67a <_strtod_l+0x1a>
 800c6f6:	292d      	cmp	r1, #45	@ 0x2d
 800c6f8:	d1ca      	bne.n	800c690 <_strtod_l+0x30>
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c6fe:	1c51      	adds	r1, r2, #1
 800c700:	9119      	str	r1, [sp, #100]	@ 0x64
 800c702:	7852      	ldrb	r2, [r2, #1]
 800c704:	2a00      	cmp	r2, #0
 800c706:	d1c5      	bne.n	800c694 <_strtod_l+0x34>
 800c708:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c70a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 8570 	bne.w	800d1f2 <_strtod_l+0xb92>
 800c712:	4652      	mov	r2, sl
 800c714:	465b      	mov	r3, fp
 800c716:	e7e5      	b.n	800c6e4 <_strtod_l+0x84>
 800c718:	2100      	movs	r1, #0
 800c71a:	e7ef      	b.n	800c6fc <_strtod_l+0x9c>
 800c71c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c71e:	b13a      	cbz	r2, 800c730 <_strtod_l+0xd0>
 800c720:	2135      	movs	r1, #53	@ 0x35
 800c722:	a81c      	add	r0, sp, #112	@ 0x70
 800c724:	f003 fd22 	bl	801016c <__copybits>
 800c728:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c72a:	9805      	ldr	r0, [sp, #20]
 800c72c:	f003 f8f0 	bl	800f910 <_Bfree>
 800c730:	3e01      	subs	r6, #1
 800c732:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c734:	2e04      	cmp	r6, #4
 800c736:	d806      	bhi.n	800c746 <_strtod_l+0xe6>
 800c738:	e8df f006 	tbb	[pc, r6]
 800c73c:	201d0314 	.word	0x201d0314
 800c740:	14          	.byte	0x14
 800c741:	00          	.byte	0x00
 800c742:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c746:	05e1      	lsls	r1, r4, #23
 800c748:	bf48      	it	mi
 800c74a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c74e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c752:	0d1b      	lsrs	r3, r3, #20
 800c754:	051b      	lsls	r3, r3, #20
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1bb      	bne.n	800c6d2 <_strtod_l+0x72>
 800c75a:	f001 fdb3 	bl	800e2c4 <__errno>
 800c75e:	2322      	movs	r3, #34	@ 0x22
 800c760:	6003      	str	r3, [r0, #0]
 800c762:	e7b6      	b.n	800c6d2 <_strtod_l+0x72>
 800c764:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c768:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c76c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c770:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c774:	e7e7      	b.n	800c746 <_strtod_l+0xe6>
 800c776:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c8f4 <_strtod_l+0x294>
 800c77a:	e7e4      	b.n	800c746 <_strtod_l+0xe6>
 800c77c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c780:	f04f 3aff 	mov.w	sl, #4294967295
 800c784:	e7df      	b.n	800c746 <_strtod_l+0xe6>
 800c786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b30      	cmp	r3, #48	@ 0x30
 800c790:	d0f9      	beq.n	800c786 <_strtod_l+0x126>
 800c792:	2b00      	cmp	r3, #0
 800c794:	d09d      	beq.n	800c6d2 <_strtod_l+0x72>
 800c796:	2301      	movs	r3, #1
 800c798:	9309      	str	r3, [sp, #36]	@ 0x24
 800c79a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c79c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9308      	str	r3, [sp, #32]
 800c7a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a4:	461f      	mov	r7, r3
 800c7a6:	220a      	movs	r2, #10
 800c7a8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c7aa:	7805      	ldrb	r5, [r0, #0]
 800c7ac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c7b0:	b2d9      	uxtb	r1, r3
 800c7b2:	2909      	cmp	r1, #9
 800c7b4:	d928      	bls.n	800c808 <_strtod_l+0x1a8>
 800c7b6:	494e      	ldr	r1, [pc, #312]	@ (800c8f0 <_strtod_l+0x290>)
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f001 fd26 	bl	800e20a <strncmp>
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d032      	beq.n	800c828 <_strtod_l+0x1c8>
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	4681      	mov	r9, r0
 800c7c8:	463d      	mov	r5, r7
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2a65      	cmp	r2, #101	@ 0x65
 800c7ce:	d001      	beq.n	800c7d4 <_strtod_l+0x174>
 800c7d0:	2a45      	cmp	r2, #69	@ 0x45
 800c7d2:	d114      	bne.n	800c7fe <_strtod_l+0x19e>
 800c7d4:	b91d      	cbnz	r5, 800c7de <_strtod_l+0x17e>
 800c7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7d8:	4302      	orrs	r2, r0
 800c7da:	d095      	beq.n	800c708 <_strtod_l+0xa8>
 800c7dc:	2500      	movs	r5, #0
 800c7de:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c7e0:	1c62      	adds	r2, r4, #1
 800c7e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7e4:	7862      	ldrb	r2, [r4, #1]
 800c7e6:	2a2b      	cmp	r2, #43	@ 0x2b
 800c7e8:	d077      	beq.n	800c8da <_strtod_l+0x27a>
 800c7ea:	2a2d      	cmp	r2, #45	@ 0x2d
 800c7ec:	d07b      	beq.n	800c8e6 <_strtod_l+0x286>
 800c7ee:	f04f 0c00 	mov.w	ip, #0
 800c7f2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c7f6:	2909      	cmp	r1, #9
 800c7f8:	f240 8082 	bls.w	800c900 <_strtod_l+0x2a0>
 800c7fc:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7fe:	f04f 0800 	mov.w	r8, #0
 800c802:	e0a2      	b.n	800c94a <_strtod_l+0x2ea>
 800c804:	2300      	movs	r3, #0
 800c806:	e7c7      	b.n	800c798 <_strtod_l+0x138>
 800c808:	2f08      	cmp	r7, #8
 800c80a:	bfd5      	itete	le
 800c80c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c80e:	9908      	ldrgt	r1, [sp, #32]
 800c810:	fb02 3301 	mlale	r3, r2, r1, r3
 800c814:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c818:	f100 0001 	add.w	r0, r0, #1
 800c81c:	bfd4      	ite	le
 800c81e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c820:	9308      	strgt	r3, [sp, #32]
 800c822:	3701      	adds	r7, #1
 800c824:	9019      	str	r0, [sp, #100]	@ 0x64
 800c826:	e7bf      	b.n	800c7a8 <_strtod_l+0x148>
 800c828:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c82a:	1c5a      	adds	r2, r3, #1
 800c82c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c82e:	785a      	ldrb	r2, [r3, #1]
 800c830:	b37f      	cbz	r7, 800c892 <_strtod_l+0x232>
 800c832:	4681      	mov	r9, r0
 800c834:	463d      	mov	r5, r7
 800c836:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c83a:	2b09      	cmp	r3, #9
 800c83c:	d912      	bls.n	800c864 <_strtod_l+0x204>
 800c83e:	2301      	movs	r3, #1
 800c840:	e7c4      	b.n	800c7cc <_strtod_l+0x16c>
 800c842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	9219      	str	r2, [sp, #100]	@ 0x64
 800c848:	785a      	ldrb	r2, [r3, #1]
 800c84a:	3001      	adds	r0, #1
 800c84c:	2a30      	cmp	r2, #48	@ 0x30
 800c84e:	d0f8      	beq.n	800c842 <_strtod_l+0x1e2>
 800c850:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c854:	2b08      	cmp	r3, #8
 800c856:	f200 84d3 	bhi.w	800d200 <_strtod_l+0xba0>
 800c85a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c85c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c85e:	4681      	mov	r9, r0
 800c860:	2000      	movs	r0, #0
 800c862:	4605      	mov	r5, r0
 800c864:	3a30      	subs	r2, #48	@ 0x30
 800c866:	f100 0301 	add.w	r3, r0, #1
 800c86a:	d02a      	beq.n	800c8c2 <_strtod_l+0x262>
 800c86c:	4499      	add	r9, r3
 800c86e:	eb00 0c05 	add.w	ip, r0, r5
 800c872:	462b      	mov	r3, r5
 800c874:	210a      	movs	r1, #10
 800c876:	4563      	cmp	r3, ip
 800c878:	d10d      	bne.n	800c896 <_strtod_l+0x236>
 800c87a:	1c69      	adds	r1, r5, #1
 800c87c:	4401      	add	r1, r0
 800c87e:	4428      	add	r0, r5
 800c880:	2808      	cmp	r0, #8
 800c882:	dc16      	bgt.n	800c8b2 <_strtod_l+0x252>
 800c884:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c886:	230a      	movs	r3, #10
 800c888:	fb03 2300 	mla	r3, r3, r0, r2
 800c88c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c88e:	2300      	movs	r3, #0
 800c890:	e018      	b.n	800c8c4 <_strtod_l+0x264>
 800c892:	4638      	mov	r0, r7
 800c894:	e7da      	b.n	800c84c <_strtod_l+0x1ec>
 800c896:	2b08      	cmp	r3, #8
 800c898:	f103 0301 	add.w	r3, r3, #1
 800c89c:	dc03      	bgt.n	800c8a6 <_strtod_l+0x246>
 800c89e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c8a0:	434e      	muls	r6, r1
 800c8a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800c8a4:	e7e7      	b.n	800c876 <_strtod_l+0x216>
 800c8a6:	2b10      	cmp	r3, #16
 800c8a8:	bfde      	ittt	le
 800c8aa:	9e08      	ldrle	r6, [sp, #32]
 800c8ac:	434e      	mulle	r6, r1
 800c8ae:	9608      	strle	r6, [sp, #32]
 800c8b0:	e7e1      	b.n	800c876 <_strtod_l+0x216>
 800c8b2:	280f      	cmp	r0, #15
 800c8b4:	dceb      	bgt.n	800c88e <_strtod_l+0x22e>
 800c8b6:	9808      	ldr	r0, [sp, #32]
 800c8b8:	230a      	movs	r3, #10
 800c8ba:	fb03 2300 	mla	r3, r3, r0, r2
 800c8be:	9308      	str	r3, [sp, #32]
 800c8c0:	e7e5      	b.n	800c88e <_strtod_l+0x22e>
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8c6:	1c50      	adds	r0, r2, #1
 800c8c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800c8ca:	7852      	ldrb	r2, [r2, #1]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	460d      	mov	r5, r1
 800c8d0:	e7b1      	b.n	800c836 <_strtod_l+0x1d6>
 800c8d2:	f04f 0900 	mov.w	r9, #0
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e77d      	b.n	800c7d6 <_strtod_l+0x176>
 800c8da:	f04f 0c00 	mov.w	ip, #0
 800c8de:	1ca2      	adds	r2, r4, #2
 800c8e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8e2:	78a2      	ldrb	r2, [r4, #2]
 800c8e4:	e785      	b.n	800c7f2 <_strtod_l+0x192>
 800c8e6:	f04f 0c01 	mov.w	ip, #1
 800c8ea:	e7f8      	b.n	800c8de <_strtod_l+0x27e>
 800c8ec:	080114bc 	.word	0x080114bc
 800c8f0:	080114a5 	.word	0x080114a5
 800c8f4:	7ff00000 	.word	0x7ff00000
 800c8f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8fa:	1c51      	adds	r1, r2, #1
 800c8fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8fe:	7852      	ldrb	r2, [r2, #1]
 800c900:	2a30      	cmp	r2, #48	@ 0x30
 800c902:	d0f9      	beq.n	800c8f8 <_strtod_l+0x298>
 800c904:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c908:	2908      	cmp	r1, #8
 800c90a:	f63f af78 	bhi.w	800c7fe <_strtod_l+0x19e>
 800c90e:	3a30      	subs	r2, #48	@ 0x30
 800c910:	920e      	str	r2, [sp, #56]	@ 0x38
 800c912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c914:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c916:	f04f 080a 	mov.w	r8, #10
 800c91a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c91c:	1c56      	adds	r6, r2, #1
 800c91e:	9619      	str	r6, [sp, #100]	@ 0x64
 800c920:	7852      	ldrb	r2, [r2, #1]
 800c922:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c926:	f1be 0f09 	cmp.w	lr, #9
 800c92a:	d939      	bls.n	800c9a0 <_strtod_l+0x340>
 800c92c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c92e:	1a76      	subs	r6, r6, r1
 800c930:	2e08      	cmp	r6, #8
 800c932:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c936:	dc03      	bgt.n	800c940 <_strtod_l+0x2e0>
 800c938:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c93a:	4588      	cmp	r8, r1
 800c93c:	bfa8      	it	ge
 800c93e:	4688      	movge	r8, r1
 800c940:	f1bc 0f00 	cmp.w	ip, #0
 800c944:	d001      	beq.n	800c94a <_strtod_l+0x2ea>
 800c946:	f1c8 0800 	rsb	r8, r8, #0
 800c94a:	2d00      	cmp	r5, #0
 800c94c:	d14e      	bne.n	800c9ec <_strtod_l+0x38c>
 800c94e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c950:	4308      	orrs	r0, r1
 800c952:	f47f aebe 	bne.w	800c6d2 <_strtod_l+0x72>
 800c956:	2b00      	cmp	r3, #0
 800c958:	f47f aed6 	bne.w	800c708 <_strtod_l+0xa8>
 800c95c:	2a69      	cmp	r2, #105	@ 0x69
 800c95e:	d028      	beq.n	800c9b2 <_strtod_l+0x352>
 800c960:	dc25      	bgt.n	800c9ae <_strtod_l+0x34e>
 800c962:	2a49      	cmp	r2, #73	@ 0x49
 800c964:	d025      	beq.n	800c9b2 <_strtod_l+0x352>
 800c966:	2a4e      	cmp	r2, #78	@ 0x4e
 800c968:	f47f aece 	bne.w	800c708 <_strtod_l+0xa8>
 800c96c:	499b      	ldr	r1, [pc, #620]	@ (800cbdc <_strtod_l+0x57c>)
 800c96e:	a819      	add	r0, sp, #100	@ 0x64
 800c970:	f002 fe16 	bl	800f5a0 <__match>
 800c974:	2800      	cmp	r0, #0
 800c976:	f43f aec7 	beq.w	800c708 <_strtod_l+0xa8>
 800c97a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b28      	cmp	r3, #40	@ 0x28
 800c980:	d12e      	bne.n	800c9e0 <_strtod_l+0x380>
 800c982:	4997      	ldr	r1, [pc, #604]	@ (800cbe0 <_strtod_l+0x580>)
 800c984:	aa1c      	add	r2, sp, #112	@ 0x70
 800c986:	a819      	add	r0, sp, #100	@ 0x64
 800c988:	f002 fe1e 	bl	800f5c8 <__hexnan>
 800c98c:	2805      	cmp	r0, #5
 800c98e:	d127      	bne.n	800c9e0 <_strtod_l+0x380>
 800c990:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c992:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c996:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c99a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c99e:	e698      	b.n	800c6d2 <_strtod_l+0x72>
 800c9a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c9a2:	fb08 2101 	mla	r1, r8, r1, r2
 800c9a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c9aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800c9ac:	e7b5      	b.n	800c91a <_strtod_l+0x2ba>
 800c9ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800c9b0:	e7da      	b.n	800c968 <_strtod_l+0x308>
 800c9b2:	498c      	ldr	r1, [pc, #560]	@ (800cbe4 <_strtod_l+0x584>)
 800c9b4:	a819      	add	r0, sp, #100	@ 0x64
 800c9b6:	f002 fdf3 	bl	800f5a0 <__match>
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	f43f aea4 	beq.w	800c708 <_strtod_l+0xa8>
 800c9c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9c2:	4989      	ldr	r1, [pc, #548]	@ (800cbe8 <_strtod_l+0x588>)
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	a819      	add	r0, sp, #100	@ 0x64
 800c9c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9ca:	f002 fde9 	bl	800f5a0 <__match>
 800c9ce:	b910      	cbnz	r0, 800c9d6 <_strtod_l+0x376>
 800c9d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cbf8 <_strtod_l+0x598>
 800c9da:	f04f 0a00 	mov.w	sl, #0
 800c9de:	e678      	b.n	800c6d2 <_strtod_l+0x72>
 800c9e0:	4882      	ldr	r0, [pc, #520]	@ (800cbec <_strtod_l+0x58c>)
 800c9e2:	f001 fcad 	bl	800e340 <nan>
 800c9e6:	ec5b ab10 	vmov	sl, fp, d0
 800c9ea:	e672      	b.n	800c6d2 <_strtod_l+0x72>
 800c9ec:	eba8 0309 	sub.w	r3, r8, r9
 800c9f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c9f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9f4:	2f00      	cmp	r7, #0
 800c9f6:	bf08      	it	eq
 800c9f8:	462f      	moveq	r7, r5
 800c9fa:	2d10      	cmp	r5, #16
 800c9fc:	462c      	mov	r4, r5
 800c9fe:	bfa8      	it	ge
 800ca00:	2410      	movge	r4, #16
 800ca02:	f7f3 fd9f 	bl	8000544 <__aeabi_ui2d>
 800ca06:	2d09      	cmp	r5, #9
 800ca08:	4682      	mov	sl, r0
 800ca0a:	468b      	mov	fp, r1
 800ca0c:	dc13      	bgt.n	800ca36 <_strtod_l+0x3d6>
 800ca0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f43f ae5e 	beq.w	800c6d2 <_strtod_l+0x72>
 800ca16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca18:	dd78      	ble.n	800cb0c <_strtod_l+0x4ac>
 800ca1a:	2b16      	cmp	r3, #22
 800ca1c:	dc5f      	bgt.n	800cade <_strtod_l+0x47e>
 800ca1e:	4974      	ldr	r1, [pc, #464]	@ (800cbf0 <_strtod_l+0x590>)
 800ca20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca28:	4652      	mov	r2, sl
 800ca2a:	465b      	mov	r3, fp
 800ca2c:	f7f3 fe04 	bl	8000638 <__aeabi_dmul>
 800ca30:	4682      	mov	sl, r0
 800ca32:	468b      	mov	fp, r1
 800ca34:	e64d      	b.n	800c6d2 <_strtod_l+0x72>
 800ca36:	4b6e      	ldr	r3, [pc, #440]	@ (800cbf0 <_strtod_l+0x590>)
 800ca38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ca40:	f7f3 fdfa 	bl	8000638 <__aeabi_dmul>
 800ca44:	4682      	mov	sl, r0
 800ca46:	9808      	ldr	r0, [sp, #32]
 800ca48:	468b      	mov	fp, r1
 800ca4a:	f7f3 fd7b 	bl	8000544 <__aeabi_ui2d>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	4650      	mov	r0, sl
 800ca54:	4659      	mov	r1, fp
 800ca56:	f7f3 fc39 	bl	80002cc <__adddf3>
 800ca5a:	2d0f      	cmp	r5, #15
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	468b      	mov	fp, r1
 800ca60:	ddd5      	ble.n	800ca0e <_strtod_l+0x3ae>
 800ca62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca64:	1b2c      	subs	r4, r5, r4
 800ca66:	441c      	add	r4, r3
 800ca68:	2c00      	cmp	r4, #0
 800ca6a:	f340 8096 	ble.w	800cb9a <_strtod_l+0x53a>
 800ca6e:	f014 030f 	ands.w	r3, r4, #15
 800ca72:	d00a      	beq.n	800ca8a <_strtod_l+0x42a>
 800ca74:	495e      	ldr	r1, [pc, #376]	@ (800cbf0 <_strtod_l+0x590>)
 800ca76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	465b      	mov	r3, fp
 800ca7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca82:	f7f3 fdd9 	bl	8000638 <__aeabi_dmul>
 800ca86:	4682      	mov	sl, r0
 800ca88:	468b      	mov	fp, r1
 800ca8a:	f034 040f 	bics.w	r4, r4, #15
 800ca8e:	d073      	beq.n	800cb78 <_strtod_l+0x518>
 800ca90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ca94:	dd48      	ble.n	800cb28 <_strtod_l+0x4c8>
 800ca96:	2400      	movs	r4, #0
 800ca98:	46a0      	mov	r8, r4
 800ca9a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca9c:	46a1      	mov	r9, r4
 800ca9e:	9a05      	ldr	r2, [sp, #20]
 800caa0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cbf8 <_strtod_l+0x598>
 800caa4:	2322      	movs	r3, #34	@ 0x22
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	f04f 0a00 	mov.w	sl, #0
 800caac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f43f ae0f 	beq.w	800c6d2 <_strtod_l+0x72>
 800cab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cab6:	9805      	ldr	r0, [sp, #20]
 800cab8:	f002 ff2a 	bl	800f910 <_Bfree>
 800cabc:	9805      	ldr	r0, [sp, #20]
 800cabe:	4649      	mov	r1, r9
 800cac0:	f002 ff26 	bl	800f910 <_Bfree>
 800cac4:	9805      	ldr	r0, [sp, #20]
 800cac6:	4641      	mov	r1, r8
 800cac8:	f002 ff22 	bl	800f910 <_Bfree>
 800cacc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cace:	9805      	ldr	r0, [sp, #20]
 800cad0:	f002 ff1e 	bl	800f910 <_Bfree>
 800cad4:	9805      	ldr	r0, [sp, #20]
 800cad6:	4621      	mov	r1, r4
 800cad8:	f002 ff1a 	bl	800f910 <_Bfree>
 800cadc:	e5f9      	b.n	800c6d2 <_strtod_l+0x72>
 800cade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cae4:	4293      	cmp	r3, r2
 800cae6:	dbbc      	blt.n	800ca62 <_strtod_l+0x402>
 800cae8:	4c41      	ldr	r4, [pc, #260]	@ (800cbf0 <_strtod_l+0x590>)
 800caea:	f1c5 050f 	rsb	r5, r5, #15
 800caee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800caf2:	4652      	mov	r2, sl
 800caf4:	465b      	mov	r3, fp
 800caf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cafa:	f7f3 fd9d 	bl	8000638 <__aeabi_dmul>
 800cafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb00:	1b5d      	subs	r5, r3, r5
 800cb02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb06:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb0a:	e78f      	b.n	800ca2c <_strtod_l+0x3cc>
 800cb0c:	3316      	adds	r3, #22
 800cb0e:	dba8      	blt.n	800ca62 <_strtod_l+0x402>
 800cb10:	4b37      	ldr	r3, [pc, #220]	@ (800cbf0 <_strtod_l+0x590>)
 800cb12:	eba9 0808 	sub.w	r8, r9, r8
 800cb16:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cb1a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cb1e:	4650      	mov	r0, sl
 800cb20:	4659      	mov	r1, fp
 800cb22:	f7f3 feb3 	bl	800088c <__aeabi_ddiv>
 800cb26:	e783      	b.n	800ca30 <_strtod_l+0x3d0>
 800cb28:	4b32      	ldr	r3, [pc, #200]	@ (800cbf4 <_strtod_l+0x594>)
 800cb2a:	9308      	str	r3, [sp, #32]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	1124      	asrs	r4, r4, #4
 800cb30:	4650      	mov	r0, sl
 800cb32:	4659      	mov	r1, fp
 800cb34:	461e      	mov	r6, r3
 800cb36:	2c01      	cmp	r4, #1
 800cb38:	dc21      	bgt.n	800cb7e <_strtod_l+0x51e>
 800cb3a:	b10b      	cbz	r3, 800cb40 <_strtod_l+0x4e0>
 800cb3c:	4682      	mov	sl, r0
 800cb3e:	468b      	mov	fp, r1
 800cb40:	492c      	ldr	r1, [pc, #176]	@ (800cbf4 <_strtod_l+0x594>)
 800cb42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cb46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cb4a:	4652      	mov	r2, sl
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb52:	f7f3 fd71 	bl	8000638 <__aeabi_dmul>
 800cb56:	4b28      	ldr	r3, [pc, #160]	@ (800cbf8 <_strtod_l+0x598>)
 800cb58:	460a      	mov	r2, r1
 800cb5a:	400b      	ands	r3, r1
 800cb5c:	4927      	ldr	r1, [pc, #156]	@ (800cbfc <_strtod_l+0x59c>)
 800cb5e:	428b      	cmp	r3, r1
 800cb60:	4682      	mov	sl, r0
 800cb62:	d898      	bhi.n	800ca96 <_strtod_l+0x436>
 800cb64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cb68:	428b      	cmp	r3, r1
 800cb6a:	bf86      	itte	hi
 800cb6c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cc00 <_strtod_l+0x5a0>
 800cb70:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cb78:	2300      	movs	r3, #0
 800cb7a:	9308      	str	r3, [sp, #32]
 800cb7c:	e07a      	b.n	800cc74 <_strtod_l+0x614>
 800cb7e:	07e2      	lsls	r2, r4, #31
 800cb80:	d505      	bpl.n	800cb8e <_strtod_l+0x52e>
 800cb82:	9b08      	ldr	r3, [sp, #32]
 800cb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb88:	f7f3 fd56 	bl	8000638 <__aeabi_dmul>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	9a08      	ldr	r2, [sp, #32]
 800cb90:	3208      	adds	r2, #8
 800cb92:	3601      	adds	r6, #1
 800cb94:	1064      	asrs	r4, r4, #1
 800cb96:	9208      	str	r2, [sp, #32]
 800cb98:	e7cd      	b.n	800cb36 <_strtod_l+0x4d6>
 800cb9a:	d0ed      	beq.n	800cb78 <_strtod_l+0x518>
 800cb9c:	4264      	negs	r4, r4
 800cb9e:	f014 020f 	ands.w	r2, r4, #15
 800cba2:	d00a      	beq.n	800cbba <_strtod_l+0x55a>
 800cba4:	4b12      	ldr	r3, [pc, #72]	@ (800cbf0 <_strtod_l+0x590>)
 800cba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbaa:	4650      	mov	r0, sl
 800cbac:	4659      	mov	r1, fp
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fe6b 	bl	800088c <__aeabi_ddiv>
 800cbb6:	4682      	mov	sl, r0
 800cbb8:	468b      	mov	fp, r1
 800cbba:	1124      	asrs	r4, r4, #4
 800cbbc:	d0dc      	beq.n	800cb78 <_strtod_l+0x518>
 800cbbe:	2c1f      	cmp	r4, #31
 800cbc0:	dd20      	ble.n	800cc04 <_strtod_l+0x5a4>
 800cbc2:	2400      	movs	r4, #0
 800cbc4:	46a0      	mov	r8, r4
 800cbc6:	940a      	str	r4, [sp, #40]	@ 0x28
 800cbc8:	46a1      	mov	r9, r4
 800cbca:	9a05      	ldr	r2, [sp, #20]
 800cbcc:	2322      	movs	r3, #34	@ 0x22
 800cbce:	f04f 0a00 	mov.w	sl, #0
 800cbd2:	f04f 0b00 	mov.w	fp, #0
 800cbd6:	6013      	str	r3, [r2, #0]
 800cbd8:	e768      	b.n	800caac <_strtod_l+0x44c>
 800cbda:	bf00      	nop
 800cbdc:	08011505 	.word	0x08011505
 800cbe0:	080114a8 	.word	0x080114a8
 800cbe4:	080114fd 	.word	0x080114fd
 800cbe8:	0801153c 	.word	0x0801153c
 800cbec:	080118cd 	.word	0x080118cd
 800cbf0:	080116b8 	.word	0x080116b8
 800cbf4:	08011690 	.word	0x08011690
 800cbf8:	7ff00000 	.word	0x7ff00000
 800cbfc:	7ca00000 	.word	0x7ca00000
 800cc00:	7fefffff 	.word	0x7fefffff
 800cc04:	f014 0310 	ands.w	r3, r4, #16
 800cc08:	bf18      	it	ne
 800cc0a:	236a      	movne	r3, #106	@ 0x6a
 800cc0c:	4ea9      	ldr	r6, [pc, #676]	@ (800ceb4 <_strtod_l+0x854>)
 800cc0e:	9308      	str	r3, [sp, #32]
 800cc10:	4650      	mov	r0, sl
 800cc12:	4659      	mov	r1, fp
 800cc14:	2300      	movs	r3, #0
 800cc16:	07e2      	lsls	r2, r4, #31
 800cc18:	d504      	bpl.n	800cc24 <_strtod_l+0x5c4>
 800cc1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc1e:	f7f3 fd0b 	bl	8000638 <__aeabi_dmul>
 800cc22:	2301      	movs	r3, #1
 800cc24:	1064      	asrs	r4, r4, #1
 800cc26:	f106 0608 	add.w	r6, r6, #8
 800cc2a:	d1f4      	bne.n	800cc16 <_strtod_l+0x5b6>
 800cc2c:	b10b      	cbz	r3, 800cc32 <_strtod_l+0x5d2>
 800cc2e:	4682      	mov	sl, r0
 800cc30:	468b      	mov	fp, r1
 800cc32:	9b08      	ldr	r3, [sp, #32]
 800cc34:	b1b3      	cbz	r3, 800cc64 <_strtod_l+0x604>
 800cc36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	4659      	mov	r1, fp
 800cc42:	dd0f      	ble.n	800cc64 <_strtod_l+0x604>
 800cc44:	2b1f      	cmp	r3, #31
 800cc46:	dd55      	ble.n	800ccf4 <_strtod_l+0x694>
 800cc48:	2b34      	cmp	r3, #52	@ 0x34
 800cc4a:	bfde      	ittt	le
 800cc4c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc50:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cc54:	4093      	lslle	r3, r2
 800cc56:	f04f 0a00 	mov.w	sl, #0
 800cc5a:	bfcc      	ite	gt
 800cc5c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cc60:	ea03 0b01 	andle.w	fp, r3, r1
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	4650      	mov	r0, sl
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	f7f3 ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 800cc70:	2800      	cmp	r0, #0
 800cc72:	d1a6      	bne.n	800cbc2 <_strtod_l+0x562>
 800cc74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cc7a:	9805      	ldr	r0, [sp, #20]
 800cc7c:	462b      	mov	r3, r5
 800cc7e:	463a      	mov	r2, r7
 800cc80:	f002 feae 	bl	800f9e0 <__s2b>
 800cc84:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc86:	2800      	cmp	r0, #0
 800cc88:	f43f af05 	beq.w	800ca96 <_strtod_l+0x436>
 800cc8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc8e:	2a00      	cmp	r2, #0
 800cc90:	eba9 0308 	sub.w	r3, r9, r8
 800cc94:	bfa8      	it	ge
 800cc96:	2300      	movge	r3, #0
 800cc98:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc9a:	2400      	movs	r4, #0
 800cc9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cca0:	9316      	str	r3, [sp, #88]	@ 0x58
 800cca2:	46a0      	mov	r8, r4
 800cca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cca6:	9805      	ldr	r0, [sp, #20]
 800cca8:	6859      	ldr	r1, [r3, #4]
 800ccaa:	f002 fdf1 	bl	800f890 <_Balloc>
 800ccae:	4681      	mov	r9, r0
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	f43f aef4 	beq.w	800ca9e <_strtod_l+0x43e>
 800ccb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccb8:	691a      	ldr	r2, [r3, #16]
 800ccba:	3202      	adds	r2, #2
 800ccbc:	f103 010c 	add.w	r1, r3, #12
 800ccc0:	0092      	lsls	r2, r2, #2
 800ccc2:	300c      	adds	r0, #12
 800ccc4:	f001 fb2b 	bl	800e31e <memcpy>
 800ccc8:	ec4b ab10 	vmov	d0, sl, fp
 800cccc:	9805      	ldr	r0, [sp, #20]
 800ccce:	aa1c      	add	r2, sp, #112	@ 0x70
 800ccd0:	a91b      	add	r1, sp, #108	@ 0x6c
 800ccd2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ccd6:	f003 f9bf 	bl	8010058 <__d2b>
 800ccda:	901a      	str	r0, [sp, #104]	@ 0x68
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	f43f aede 	beq.w	800ca9e <_strtod_l+0x43e>
 800cce2:	9805      	ldr	r0, [sp, #20]
 800cce4:	2101      	movs	r1, #1
 800cce6:	f002 ff11 	bl	800fb0c <__i2b>
 800ccea:	4680      	mov	r8, r0
 800ccec:	b948      	cbnz	r0, 800cd02 <_strtod_l+0x6a2>
 800ccee:	f04f 0800 	mov.w	r8, #0
 800ccf2:	e6d4      	b.n	800ca9e <_strtod_l+0x43e>
 800ccf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccfc:	ea03 0a0a 	and.w	sl, r3, sl
 800cd00:	e7b0      	b.n	800cc64 <_strtod_l+0x604>
 800cd02:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cd04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cd06:	2d00      	cmp	r5, #0
 800cd08:	bfab      	itete	ge
 800cd0a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cd0c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cd0e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cd10:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cd12:	bfac      	ite	ge
 800cd14:	18ef      	addge	r7, r5, r3
 800cd16:	1b5e      	sublt	r6, r3, r5
 800cd18:	9b08      	ldr	r3, [sp, #32]
 800cd1a:	1aed      	subs	r5, r5, r3
 800cd1c:	4415      	add	r5, r2
 800cd1e:	4b66      	ldr	r3, [pc, #408]	@ (800ceb8 <_strtod_l+0x858>)
 800cd20:	3d01      	subs	r5, #1
 800cd22:	429d      	cmp	r5, r3
 800cd24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cd28:	da50      	bge.n	800cdcc <_strtod_l+0x76c>
 800cd2a:	1b5b      	subs	r3, r3, r5
 800cd2c:	2b1f      	cmp	r3, #31
 800cd2e:	eba2 0203 	sub.w	r2, r2, r3
 800cd32:	f04f 0101 	mov.w	r1, #1
 800cd36:	dc3d      	bgt.n	800cdb4 <_strtod_l+0x754>
 800cd38:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd3e:	2300      	movs	r3, #0
 800cd40:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd42:	18bd      	adds	r5, r7, r2
 800cd44:	9b08      	ldr	r3, [sp, #32]
 800cd46:	42af      	cmp	r7, r5
 800cd48:	4416      	add	r6, r2
 800cd4a:	441e      	add	r6, r3
 800cd4c:	463b      	mov	r3, r7
 800cd4e:	bfa8      	it	ge
 800cd50:	462b      	movge	r3, r5
 800cd52:	42b3      	cmp	r3, r6
 800cd54:	bfa8      	it	ge
 800cd56:	4633      	movge	r3, r6
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bfc2      	ittt	gt
 800cd5c:	1aed      	subgt	r5, r5, r3
 800cd5e:	1af6      	subgt	r6, r6, r3
 800cd60:	1aff      	subgt	r7, r7, r3
 800cd62:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	dd16      	ble.n	800cd96 <_strtod_l+0x736>
 800cd68:	4641      	mov	r1, r8
 800cd6a:	9805      	ldr	r0, [sp, #20]
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	f002 ff8d 	bl	800fc8c <__pow5mult>
 800cd72:	4680      	mov	r8, r0
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d0ba      	beq.n	800ccee <_strtod_l+0x68e>
 800cd78:	4601      	mov	r1, r0
 800cd7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd7c:	9805      	ldr	r0, [sp, #20]
 800cd7e:	f002 fedb 	bl	800fb38 <__multiply>
 800cd82:	900e      	str	r0, [sp, #56]	@ 0x38
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f43f ae8a 	beq.w	800ca9e <_strtod_l+0x43e>
 800cd8a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd8c:	9805      	ldr	r0, [sp, #20]
 800cd8e:	f002 fdbf 	bl	800f910 <_Bfree>
 800cd92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd94:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd96:	2d00      	cmp	r5, #0
 800cd98:	dc1d      	bgt.n	800cdd6 <_strtod_l+0x776>
 800cd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	dd23      	ble.n	800cde8 <_strtod_l+0x788>
 800cda0:	4649      	mov	r1, r9
 800cda2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cda4:	9805      	ldr	r0, [sp, #20]
 800cda6:	f002 ff71 	bl	800fc8c <__pow5mult>
 800cdaa:	4681      	mov	r9, r0
 800cdac:	b9e0      	cbnz	r0, 800cde8 <_strtod_l+0x788>
 800cdae:	f04f 0900 	mov.w	r9, #0
 800cdb2:	e674      	b.n	800ca9e <_strtod_l+0x43e>
 800cdb4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cdb8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cdbc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cdc0:	35e2      	adds	r5, #226	@ 0xe2
 800cdc2:	fa01 f305 	lsl.w	r3, r1, r5
 800cdc6:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdc8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cdca:	e7ba      	b.n	800cd42 <_strtod_l+0x6e2>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cdd4:	e7b5      	b.n	800cd42 <_strtod_l+0x6e2>
 800cdd6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdd8:	9805      	ldr	r0, [sp, #20]
 800cdda:	462a      	mov	r2, r5
 800cddc:	f002 ffb0 	bl	800fd40 <__lshift>
 800cde0:	901a      	str	r0, [sp, #104]	@ 0x68
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d1d9      	bne.n	800cd9a <_strtod_l+0x73a>
 800cde6:	e65a      	b.n	800ca9e <_strtod_l+0x43e>
 800cde8:	2e00      	cmp	r6, #0
 800cdea:	dd07      	ble.n	800cdfc <_strtod_l+0x79c>
 800cdec:	4649      	mov	r1, r9
 800cdee:	9805      	ldr	r0, [sp, #20]
 800cdf0:	4632      	mov	r2, r6
 800cdf2:	f002 ffa5 	bl	800fd40 <__lshift>
 800cdf6:	4681      	mov	r9, r0
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d0d8      	beq.n	800cdae <_strtod_l+0x74e>
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	dd08      	ble.n	800ce12 <_strtod_l+0x7b2>
 800ce00:	4641      	mov	r1, r8
 800ce02:	9805      	ldr	r0, [sp, #20]
 800ce04:	463a      	mov	r2, r7
 800ce06:	f002 ff9b 	bl	800fd40 <__lshift>
 800ce0a:	4680      	mov	r8, r0
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f43f ae46 	beq.w	800ca9e <_strtod_l+0x43e>
 800ce12:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce14:	9805      	ldr	r0, [sp, #20]
 800ce16:	464a      	mov	r2, r9
 800ce18:	f003 f81a 	bl	800fe50 <__mdiff>
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	f43f ae3d 	beq.w	800ca9e <_strtod_l+0x43e>
 800ce24:	68c3      	ldr	r3, [r0, #12]
 800ce26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce28:	2300      	movs	r3, #0
 800ce2a:	60c3      	str	r3, [r0, #12]
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	f002 fff3 	bl	800fe18 <__mcmp>
 800ce32:	2800      	cmp	r0, #0
 800ce34:	da46      	bge.n	800cec4 <_strtod_l+0x864>
 800ce36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce38:	ea53 030a 	orrs.w	r3, r3, sl
 800ce3c:	d16c      	bne.n	800cf18 <_strtod_l+0x8b8>
 800ce3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d168      	bne.n	800cf18 <_strtod_l+0x8b8>
 800ce46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce4a:	0d1b      	lsrs	r3, r3, #20
 800ce4c:	051b      	lsls	r3, r3, #20
 800ce4e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce52:	d961      	bls.n	800cf18 <_strtod_l+0x8b8>
 800ce54:	6963      	ldr	r3, [r4, #20]
 800ce56:	b913      	cbnz	r3, 800ce5e <_strtod_l+0x7fe>
 800ce58:	6923      	ldr	r3, [r4, #16]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	dd5c      	ble.n	800cf18 <_strtod_l+0x8b8>
 800ce5e:	4621      	mov	r1, r4
 800ce60:	2201      	movs	r2, #1
 800ce62:	9805      	ldr	r0, [sp, #20]
 800ce64:	f002 ff6c 	bl	800fd40 <__lshift>
 800ce68:	4641      	mov	r1, r8
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	f002 ffd4 	bl	800fe18 <__mcmp>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	dd51      	ble.n	800cf18 <_strtod_l+0x8b8>
 800ce74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce78:	9a08      	ldr	r2, [sp, #32]
 800ce7a:	0d1b      	lsrs	r3, r3, #20
 800ce7c:	051b      	lsls	r3, r3, #20
 800ce7e:	2a00      	cmp	r2, #0
 800ce80:	d06b      	beq.n	800cf5a <_strtod_l+0x8fa>
 800ce82:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce86:	d868      	bhi.n	800cf5a <_strtod_l+0x8fa>
 800ce88:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ce8c:	f67f ae9d 	bls.w	800cbca <_strtod_l+0x56a>
 800ce90:	4b0a      	ldr	r3, [pc, #40]	@ (800cebc <_strtod_l+0x85c>)
 800ce92:	4650      	mov	r0, sl
 800ce94:	4659      	mov	r1, fp
 800ce96:	2200      	movs	r2, #0
 800ce98:	f7f3 fbce 	bl	8000638 <__aeabi_dmul>
 800ce9c:	4b08      	ldr	r3, [pc, #32]	@ (800cec0 <_strtod_l+0x860>)
 800ce9e:	400b      	ands	r3, r1
 800cea0:	4682      	mov	sl, r0
 800cea2:	468b      	mov	fp, r1
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f47f ae05 	bne.w	800cab4 <_strtod_l+0x454>
 800ceaa:	9a05      	ldr	r2, [sp, #20]
 800ceac:	2322      	movs	r3, #34	@ 0x22
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	e600      	b.n	800cab4 <_strtod_l+0x454>
 800ceb2:	bf00      	nop
 800ceb4:	080114d0 	.word	0x080114d0
 800ceb8:	fffffc02 	.word	0xfffffc02
 800cebc:	39500000 	.word	0x39500000
 800cec0:	7ff00000 	.word	0x7ff00000
 800cec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cec8:	d165      	bne.n	800cf96 <_strtod_l+0x936>
 800ceca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ced0:	b35a      	cbz	r2, 800cf2a <_strtod_l+0x8ca>
 800ced2:	4a9f      	ldr	r2, [pc, #636]	@ (800d150 <_strtod_l+0xaf0>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d12b      	bne.n	800cf30 <_strtod_l+0x8d0>
 800ced8:	9b08      	ldr	r3, [sp, #32]
 800ceda:	4651      	mov	r1, sl
 800cedc:	b303      	cbz	r3, 800cf20 <_strtod_l+0x8c0>
 800cede:	4b9d      	ldr	r3, [pc, #628]	@ (800d154 <_strtod_l+0xaf4>)
 800cee0:	465a      	mov	r2, fp
 800cee2:	4013      	ands	r3, r2
 800cee4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cee8:	f04f 32ff 	mov.w	r2, #4294967295
 800ceec:	d81b      	bhi.n	800cf26 <_strtod_l+0x8c6>
 800ceee:	0d1b      	lsrs	r3, r3, #20
 800cef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cef4:	fa02 f303 	lsl.w	r3, r2, r3
 800cef8:	4299      	cmp	r1, r3
 800cefa:	d119      	bne.n	800cf30 <_strtod_l+0x8d0>
 800cefc:	4b96      	ldr	r3, [pc, #600]	@ (800d158 <_strtod_l+0xaf8>)
 800cefe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d102      	bne.n	800cf0a <_strtod_l+0x8aa>
 800cf04:	3101      	adds	r1, #1
 800cf06:	f43f adca 	beq.w	800ca9e <_strtod_l+0x43e>
 800cf0a:	4b92      	ldr	r3, [pc, #584]	@ (800d154 <_strtod_l+0xaf4>)
 800cf0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf0e:	401a      	ands	r2, r3
 800cf10:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cf14:	f04f 0a00 	mov.w	sl, #0
 800cf18:	9b08      	ldr	r3, [sp, #32]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1b8      	bne.n	800ce90 <_strtod_l+0x830>
 800cf1e:	e5c9      	b.n	800cab4 <_strtod_l+0x454>
 800cf20:	f04f 33ff 	mov.w	r3, #4294967295
 800cf24:	e7e8      	b.n	800cef8 <_strtod_l+0x898>
 800cf26:	4613      	mov	r3, r2
 800cf28:	e7e6      	b.n	800cef8 <_strtod_l+0x898>
 800cf2a:	ea53 030a 	orrs.w	r3, r3, sl
 800cf2e:	d0a1      	beq.n	800ce74 <_strtod_l+0x814>
 800cf30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf32:	b1db      	cbz	r3, 800cf6c <_strtod_l+0x90c>
 800cf34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf36:	4213      	tst	r3, r2
 800cf38:	d0ee      	beq.n	800cf18 <_strtod_l+0x8b8>
 800cf3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf3c:	9a08      	ldr	r2, [sp, #32]
 800cf3e:	4650      	mov	r0, sl
 800cf40:	4659      	mov	r1, fp
 800cf42:	b1bb      	cbz	r3, 800cf74 <_strtod_l+0x914>
 800cf44:	f7ff fb6c 	bl	800c620 <sulp>
 800cf48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf4c:	ec53 2b10 	vmov	r2, r3, d0
 800cf50:	f7f3 f9bc 	bl	80002cc <__adddf3>
 800cf54:	4682      	mov	sl, r0
 800cf56:	468b      	mov	fp, r1
 800cf58:	e7de      	b.n	800cf18 <_strtod_l+0x8b8>
 800cf5a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cf5e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf62:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf66:	f04f 3aff 	mov.w	sl, #4294967295
 800cf6a:	e7d5      	b.n	800cf18 <_strtod_l+0x8b8>
 800cf6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf6e:	ea13 0f0a 	tst.w	r3, sl
 800cf72:	e7e1      	b.n	800cf38 <_strtod_l+0x8d8>
 800cf74:	f7ff fb54 	bl	800c620 <sulp>
 800cf78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf7c:	ec53 2b10 	vmov	r2, r3, d0
 800cf80:	f7f3 f9a2 	bl	80002c8 <__aeabi_dsub>
 800cf84:	2200      	movs	r2, #0
 800cf86:	2300      	movs	r3, #0
 800cf88:	4682      	mov	sl, r0
 800cf8a:	468b      	mov	fp, r1
 800cf8c:	f7f3 fdbc 	bl	8000b08 <__aeabi_dcmpeq>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d0c1      	beq.n	800cf18 <_strtod_l+0x8b8>
 800cf94:	e619      	b.n	800cbca <_strtod_l+0x56a>
 800cf96:	4641      	mov	r1, r8
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f003 f8b5 	bl	8010108 <__ratio>
 800cf9e:	ec57 6b10 	vmov	r6, r7, d0
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	4639      	mov	r1, r7
 800cfac:	f7f3 fdc0 	bl	8000b30 <__aeabi_dcmple>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	d06f      	beq.n	800d094 <_strtod_l+0xa34>
 800cfb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d17a      	bne.n	800d0b0 <_strtod_l+0xa50>
 800cfba:	f1ba 0f00 	cmp.w	sl, #0
 800cfbe:	d158      	bne.n	800d072 <_strtod_l+0xa12>
 800cfc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d15a      	bne.n	800d080 <_strtod_l+0xa20>
 800cfca:	4b64      	ldr	r3, [pc, #400]	@ (800d15c <_strtod_l+0xafc>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4630      	mov	r0, r6
 800cfd0:	4639      	mov	r1, r7
 800cfd2:	f7f3 fda3 	bl	8000b1c <__aeabi_dcmplt>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d159      	bne.n	800d08e <_strtod_l+0xa2e>
 800cfda:	4630      	mov	r0, r6
 800cfdc:	4639      	mov	r1, r7
 800cfde:	4b60      	ldr	r3, [pc, #384]	@ (800d160 <_strtod_l+0xb00>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f7f3 fb29 	bl	8000638 <__aeabi_dmul>
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460f      	mov	r7, r1
 800cfea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cfee:	9606      	str	r6, [sp, #24]
 800cff0:	9307      	str	r3, [sp, #28]
 800cff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cff6:	4d57      	ldr	r5, [pc, #348]	@ (800d154 <_strtod_l+0xaf4>)
 800cff8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cffe:	401d      	ands	r5, r3
 800d000:	4b58      	ldr	r3, [pc, #352]	@ (800d164 <_strtod_l+0xb04>)
 800d002:	429d      	cmp	r5, r3
 800d004:	f040 80b2 	bne.w	800d16c <_strtod_l+0xb0c>
 800d008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d00a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d00e:	ec4b ab10 	vmov	d0, sl, fp
 800d012:	f002 ffb1 	bl	800ff78 <__ulp>
 800d016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d01a:	ec51 0b10 	vmov	r0, r1, d0
 800d01e:	f7f3 fb0b 	bl	8000638 <__aeabi_dmul>
 800d022:	4652      	mov	r2, sl
 800d024:	465b      	mov	r3, fp
 800d026:	f7f3 f951 	bl	80002cc <__adddf3>
 800d02a:	460b      	mov	r3, r1
 800d02c:	4949      	ldr	r1, [pc, #292]	@ (800d154 <_strtod_l+0xaf4>)
 800d02e:	4a4e      	ldr	r2, [pc, #312]	@ (800d168 <_strtod_l+0xb08>)
 800d030:	4019      	ands	r1, r3
 800d032:	4291      	cmp	r1, r2
 800d034:	4682      	mov	sl, r0
 800d036:	d942      	bls.n	800d0be <_strtod_l+0xa5e>
 800d038:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d03a:	4b47      	ldr	r3, [pc, #284]	@ (800d158 <_strtod_l+0xaf8>)
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d103      	bne.n	800d048 <_strtod_l+0x9e8>
 800d040:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d042:	3301      	adds	r3, #1
 800d044:	f43f ad2b 	beq.w	800ca9e <_strtod_l+0x43e>
 800d048:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d158 <_strtod_l+0xaf8>
 800d04c:	f04f 3aff 	mov.w	sl, #4294967295
 800d050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d052:	9805      	ldr	r0, [sp, #20]
 800d054:	f002 fc5c 	bl	800f910 <_Bfree>
 800d058:	9805      	ldr	r0, [sp, #20]
 800d05a:	4649      	mov	r1, r9
 800d05c:	f002 fc58 	bl	800f910 <_Bfree>
 800d060:	9805      	ldr	r0, [sp, #20]
 800d062:	4641      	mov	r1, r8
 800d064:	f002 fc54 	bl	800f910 <_Bfree>
 800d068:	9805      	ldr	r0, [sp, #20]
 800d06a:	4621      	mov	r1, r4
 800d06c:	f002 fc50 	bl	800f910 <_Bfree>
 800d070:	e618      	b.n	800cca4 <_strtod_l+0x644>
 800d072:	f1ba 0f01 	cmp.w	sl, #1
 800d076:	d103      	bne.n	800d080 <_strtod_l+0xa20>
 800d078:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f43f ada5 	beq.w	800cbca <_strtod_l+0x56a>
 800d080:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d130 <_strtod_l+0xad0>
 800d084:	4f35      	ldr	r7, [pc, #212]	@ (800d15c <_strtod_l+0xafc>)
 800d086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d08a:	2600      	movs	r6, #0
 800d08c:	e7b1      	b.n	800cff2 <_strtod_l+0x992>
 800d08e:	4f34      	ldr	r7, [pc, #208]	@ (800d160 <_strtod_l+0xb00>)
 800d090:	2600      	movs	r6, #0
 800d092:	e7aa      	b.n	800cfea <_strtod_l+0x98a>
 800d094:	4b32      	ldr	r3, [pc, #200]	@ (800d160 <_strtod_l+0xb00>)
 800d096:	4630      	mov	r0, r6
 800d098:	4639      	mov	r1, r7
 800d09a:	2200      	movs	r2, #0
 800d09c:	f7f3 facc 	bl	8000638 <__aeabi_dmul>
 800d0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d09f      	beq.n	800cfea <_strtod_l+0x98a>
 800d0aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d0ae:	e7a0      	b.n	800cff2 <_strtod_l+0x992>
 800d0b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d138 <_strtod_l+0xad8>
 800d0b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d0b8:	ec57 6b17 	vmov	r6, r7, d7
 800d0bc:	e799      	b.n	800cff2 <_strtod_l+0x992>
 800d0be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d0c2:	9b08      	ldr	r3, [sp, #32]
 800d0c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1c1      	bne.n	800d050 <_strtod_l+0x9f0>
 800d0cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0d0:	0d1b      	lsrs	r3, r3, #20
 800d0d2:	051b      	lsls	r3, r3, #20
 800d0d4:	429d      	cmp	r5, r3
 800d0d6:	d1bb      	bne.n	800d050 <_strtod_l+0x9f0>
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 fe0c 	bl	8000cf8 <__aeabi_d2lz>
 800d0e0:	f7f3 fa7c 	bl	80005dc <__aeabi_l2d>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	4639      	mov	r1, r7
 800d0ec:	f7f3 f8ec 	bl	80002c8 <__aeabi_dsub>
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d0f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fe:	ea46 060a 	orr.w	r6, r6, sl
 800d102:	431e      	orrs	r6, r3
 800d104:	d06f      	beq.n	800d1e6 <_strtod_l+0xb86>
 800d106:	a30e      	add	r3, pc, #56	@ (adr r3, 800d140 <_strtod_l+0xae0>)
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f7f3 fd06 	bl	8000b1c <__aeabi_dcmplt>
 800d110:	2800      	cmp	r0, #0
 800d112:	f47f accf 	bne.w	800cab4 <_strtod_l+0x454>
 800d116:	a30c      	add	r3, pc, #48	@ (adr r3, 800d148 <_strtod_l+0xae8>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d120:	f7f3 fd1a 	bl	8000b58 <__aeabi_dcmpgt>
 800d124:	2800      	cmp	r0, #0
 800d126:	d093      	beq.n	800d050 <_strtod_l+0x9f0>
 800d128:	e4c4      	b.n	800cab4 <_strtod_l+0x454>
 800d12a:	bf00      	nop
 800d12c:	f3af 8000 	nop.w
 800d130:	00000000 	.word	0x00000000
 800d134:	bff00000 	.word	0xbff00000
 800d138:	00000000 	.word	0x00000000
 800d13c:	3ff00000 	.word	0x3ff00000
 800d140:	94a03595 	.word	0x94a03595
 800d144:	3fdfffff 	.word	0x3fdfffff
 800d148:	35afe535 	.word	0x35afe535
 800d14c:	3fe00000 	.word	0x3fe00000
 800d150:	000fffff 	.word	0x000fffff
 800d154:	7ff00000 	.word	0x7ff00000
 800d158:	7fefffff 	.word	0x7fefffff
 800d15c:	3ff00000 	.word	0x3ff00000
 800d160:	3fe00000 	.word	0x3fe00000
 800d164:	7fe00000 	.word	0x7fe00000
 800d168:	7c9fffff 	.word	0x7c9fffff
 800d16c:	9b08      	ldr	r3, [sp, #32]
 800d16e:	b323      	cbz	r3, 800d1ba <_strtod_l+0xb5a>
 800d170:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d174:	d821      	bhi.n	800d1ba <_strtod_l+0xb5a>
 800d176:	a328      	add	r3, pc, #160	@ (adr r3, 800d218 <_strtod_l+0xbb8>)
 800d178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17c:	4630      	mov	r0, r6
 800d17e:	4639      	mov	r1, r7
 800d180:	f7f3 fcd6 	bl	8000b30 <__aeabi_dcmple>
 800d184:	b1a0      	cbz	r0, 800d1b0 <_strtod_l+0xb50>
 800d186:	4639      	mov	r1, r7
 800d188:	4630      	mov	r0, r6
 800d18a:	f7f3 fd2d 	bl	8000be8 <__aeabi_d2uiz>
 800d18e:	2801      	cmp	r0, #1
 800d190:	bf38      	it	cc
 800d192:	2001      	movcc	r0, #1
 800d194:	f7f3 f9d6 	bl	8000544 <__aeabi_ui2d>
 800d198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	b9fb      	cbnz	r3, 800d1e0 <_strtod_l+0xb80>
 800d1a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d1a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d1a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d1ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d1b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d1b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d1b6:	1b5b      	subs	r3, r3, r5
 800d1b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d1ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d1be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d1c2:	f002 fed9 	bl	800ff78 <__ulp>
 800d1c6:	4650      	mov	r0, sl
 800d1c8:	ec53 2b10 	vmov	r2, r3, d0
 800d1cc:	4659      	mov	r1, fp
 800d1ce:	f7f3 fa33 	bl	8000638 <__aeabi_dmul>
 800d1d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d1d6:	f7f3 f879 	bl	80002cc <__adddf3>
 800d1da:	4682      	mov	sl, r0
 800d1dc:	468b      	mov	fp, r1
 800d1de:	e770      	b.n	800d0c2 <_strtod_l+0xa62>
 800d1e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d1e4:	e7e0      	b.n	800d1a8 <_strtod_l+0xb48>
 800d1e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d220 <_strtod_l+0xbc0>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 fc96 	bl	8000b1c <__aeabi_dcmplt>
 800d1f0:	e798      	b.n	800d124 <_strtod_l+0xac4>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d1f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1fa:	6013      	str	r3, [r2, #0]
 800d1fc:	f7ff ba6d 	b.w	800c6da <_strtod_l+0x7a>
 800d200:	2a65      	cmp	r2, #101	@ 0x65
 800d202:	f43f ab66 	beq.w	800c8d2 <_strtod_l+0x272>
 800d206:	2a45      	cmp	r2, #69	@ 0x45
 800d208:	f43f ab63 	beq.w	800c8d2 <_strtod_l+0x272>
 800d20c:	2301      	movs	r3, #1
 800d20e:	f7ff bb9e 	b.w	800c94e <_strtod_l+0x2ee>
 800d212:	bf00      	nop
 800d214:	f3af 8000 	nop.w
 800d218:	ffc00000 	.word	0xffc00000
 800d21c:	41dfffff 	.word	0x41dfffff
 800d220:	94a03595 	.word	0x94a03595
 800d224:	3fcfffff 	.word	0x3fcfffff

0800d228 <_strtod_r>:
 800d228:	4b01      	ldr	r3, [pc, #4]	@ (800d230 <_strtod_r+0x8>)
 800d22a:	f7ff ba19 	b.w	800c660 <_strtod_l>
 800d22e:	bf00      	nop
 800d230:	200000c4 	.word	0x200000c4

0800d234 <strtod>:
 800d234:	460a      	mov	r2, r1
 800d236:	4601      	mov	r1, r0
 800d238:	4802      	ldr	r0, [pc, #8]	@ (800d244 <strtod+0x10>)
 800d23a:	4b03      	ldr	r3, [pc, #12]	@ (800d248 <strtod+0x14>)
 800d23c:	6800      	ldr	r0, [r0, #0]
 800d23e:	f7ff ba0f 	b.w	800c660 <_strtod_l>
 800d242:	bf00      	nop
 800d244:	20000230 	.word	0x20000230
 800d248:	200000c4 	.word	0x200000c4

0800d24c <__cvt>:
 800d24c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d250:	ec57 6b10 	vmov	r6, r7, d0
 800d254:	2f00      	cmp	r7, #0
 800d256:	460c      	mov	r4, r1
 800d258:	4619      	mov	r1, r3
 800d25a:	463b      	mov	r3, r7
 800d25c:	bfbb      	ittet	lt
 800d25e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d262:	461f      	movlt	r7, r3
 800d264:	2300      	movge	r3, #0
 800d266:	232d      	movlt	r3, #45	@ 0x2d
 800d268:	700b      	strb	r3, [r1, #0]
 800d26a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d26c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d270:	4691      	mov	r9, r2
 800d272:	f023 0820 	bic.w	r8, r3, #32
 800d276:	bfbc      	itt	lt
 800d278:	4632      	movlt	r2, r6
 800d27a:	4616      	movlt	r6, r2
 800d27c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d280:	d005      	beq.n	800d28e <__cvt+0x42>
 800d282:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d286:	d100      	bne.n	800d28a <__cvt+0x3e>
 800d288:	3401      	adds	r4, #1
 800d28a:	2102      	movs	r1, #2
 800d28c:	e000      	b.n	800d290 <__cvt+0x44>
 800d28e:	2103      	movs	r1, #3
 800d290:	ab03      	add	r3, sp, #12
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	ab02      	add	r3, sp, #8
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	ec47 6b10 	vmov	d0, r6, r7
 800d29c:	4653      	mov	r3, sl
 800d29e:	4622      	mov	r2, r4
 800d2a0:	f001 f8e6 	bl	800e470 <_dtoa_r>
 800d2a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	d119      	bne.n	800d2e0 <__cvt+0x94>
 800d2ac:	f019 0f01 	tst.w	r9, #1
 800d2b0:	d00e      	beq.n	800d2d0 <__cvt+0x84>
 800d2b2:	eb00 0904 	add.w	r9, r0, r4
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	4639      	mov	r1, r7
 800d2be:	f7f3 fc23 	bl	8000b08 <__aeabi_dcmpeq>
 800d2c2:	b108      	cbz	r0, 800d2c8 <__cvt+0x7c>
 800d2c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d2c8:	2230      	movs	r2, #48	@ 0x30
 800d2ca:	9b03      	ldr	r3, [sp, #12]
 800d2cc:	454b      	cmp	r3, r9
 800d2ce:	d31e      	bcc.n	800d30e <__cvt+0xc2>
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2d4:	1b5b      	subs	r3, r3, r5
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	b004      	add	sp, #16
 800d2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d2e4:	eb00 0904 	add.w	r9, r0, r4
 800d2e8:	d1e5      	bne.n	800d2b6 <__cvt+0x6a>
 800d2ea:	7803      	ldrb	r3, [r0, #0]
 800d2ec:	2b30      	cmp	r3, #48	@ 0x30
 800d2ee:	d10a      	bne.n	800d306 <__cvt+0xba>
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7f3 fc06 	bl	8000b08 <__aeabi_dcmpeq>
 800d2fc:	b918      	cbnz	r0, 800d306 <__cvt+0xba>
 800d2fe:	f1c4 0401 	rsb	r4, r4, #1
 800d302:	f8ca 4000 	str.w	r4, [sl]
 800d306:	f8da 3000 	ldr.w	r3, [sl]
 800d30a:	4499      	add	r9, r3
 800d30c:	e7d3      	b.n	800d2b6 <__cvt+0x6a>
 800d30e:	1c59      	adds	r1, r3, #1
 800d310:	9103      	str	r1, [sp, #12]
 800d312:	701a      	strb	r2, [r3, #0]
 800d314:	e7d9      	b.n	800d2ca <__cvt+0x7e>

0800d316 <__exponent>:
 800d316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d318:	2900      	cmp	r1, #0
 800d31a:	bfba      	itte	lt
 800d31c:	4249      	neglt	r1, r1
 800d31e:	232d      	movlt	r3, #45	@ 0x2d
 800d320:	232b      	movge	r3, #43	@ 0x2b
 800d322:	2909      	cmp	r1, #9
 800d324:	7002      	strb	r2, [r0, #0]
 800d326:	7043      	strb	r3, [r0, #1]
 800d328:	dd29      	ble.n	800d37e <__exponent+0x68>
 800d32a:	f10d 0307 	add.w	r3, sp, #7
 800d32e:	461d      	mov	r5, r3
 800d330:	270a      	movs	r7, #10
 800d332:	461a      	mov	r2, r3
 800d334:	fbb1 f6f7 	udiv	r6, r1, r7
 800d338:	fb07 1416 	mls	r4, r7, r6, r1
 800d33c:	3430      	adds	r4, #48	@ 0x30
 800d33e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d342:	460c      	mov	r4, r1
 800d344:	2c63      	cmp	r4, #99	@ 0x63
 800d346:	f103 33ff 	add.w	r3, r3, #4294967295
 800d34a:	4631      	mov	r1, r6
 800d34c:	dcf1      	bgt.n	800d332 <__exponent+0x1c>
 800d34e:	3130      	adds	r1, #48	@ 0x30
 800d350:	1e94      	subs	r4, r2, #2
 800d352:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d356:	1c41      	adds	r1, r0, #1
 800d358:	4623      	mov	r3, r4
 800d35a:	42ab      	cmp	r3, r5
 800d35c:	d30a      	bcc.n	800d374 <__exponent+0x5e>
 800d35e:	f10d 0309 	add.w	r3, sp, #9
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	42ac      	cmp	r4, r5
 800d366:	bf88      	it	hi
 800d368:	2300      	movhi	r3, #0
 800d36a:	3302      	adds	r3, #2
 800d36c:	4403      	add	r3, r0
 800d36e:	1a18      	subs	r0, r3, r0
 800d370:	b003      	add	sp, #12
 800d372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d374:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d378:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d37c:	e7ed      	b.n	800d35a <__exponent+0x44>
 800d37e:	2330      	movs	r3, #48	@ 0x30
 800d380:	3130      	adds	r1, #48	@ 0x30
 800d382:	7083      	strb	r3, [r0, #2]
 800d384:	70c1      	strb	r1, [r0, #3]
 800d386:	1d03      	adds	r3, r0, #4
 800d388:	e7f1      	b.n	800d36e <__exponent+0x58>
	...

0800d38c <_printf_float>:
 800d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d390:	b08d      	sub	sp, #52	@ 0x34
 800d392:	460c      	mov	r4, r1
 800d394:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d398:	4616      	mov	r6, r2
 800d39a:	461f      	mov	r7, r3
 800d39c:	4605      	mov	r5, r0
 800d39e:	f000 ff47 	bl	800e230 <_localeconv_r>
 800d3a2:	6803      	ldr	r3, [r0, #0]
 800d3a4:	9304      	str	r3, [sp, #16]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7f2 ff82 	bl	80002b0 <strlen>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d3b4:	9005      	str	r0, [sp, #20]
 800d3b6:	3307      	adds	r3, #7
 800d3b8:	f023 0307 	bic.w	r3, r3, #7
 800d3bc:	f103 0208 	add.w	r2, r3, #8
 800d3c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d3c4:	f8d4 b000 	ldr.w	fp, [r4]
 800d3c8:	f8c8 2000 	str.w	r2, [r8]
 800d3cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d3d4:	9307      	str	r3, [sp, #28]
 800d3d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d3da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d3de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3e2:	4b9c      	ldr	r3, [pc, #624]	@ (800d654 <_printf_float+0x2c8>)
 800d3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e8:	f7f3 fbc0 	bl	8000b6c <__aeabi_dcmpun>
 800d3ec:	bb70      	cbnz	r0, 800d44c <_printf_float+0xc0>
 800d3ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3f2:	4b98      	ldr	r3, [pc, #608]	@ (800d654 <_printf_float+0x2c8>)
 800d3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f8:	f7f3 fb9a 	bl	8000b30 <__aeabi_dcmple>
 800d3fc:	bb30      	cbnz	r0, 800d44c <_printf_float+0xc0>
 800d3fe:	2200      	movs	r2, #0
 800d400:	2300      	movs	r3, #0
 800d402:	4640      	mov	r0, r8
 800d404:	4649      	mov	r1, r9
 800d406:	f7f3 fb89 	bl	8000b1c <__aeabi_dcmplt>
 800d40a:	b110      	cbz	r0, 800d412 <_printf_float+0x86>
 800d40c:	232d      	movs	r3, #45	@ 0x2d
 800d40e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d412:	4a91      	ldr	r2, [pc, #580]	@ (800d658 <_printf_float+0x2cc>)
 800d414:	4b91      	ldr	r3, [pc, #580]	@ (800d65c <_printf_float+0x2d0>)
 800d416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d41a:	bf94      	ite	ls
 800d41c:	4690      	movls	r8, r2
 800d41e:	4698      	movhi	r8, r3
 800d420:	2303      	movs	r3, #3
 800d422:	6123      	str	r3, [r4, #16]
 800d424:	f02b 0304 	bic.w	r3, fp, #4
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	f04f 0900 	mov.w	r9, #0
 800d42e:	9700      	str	r7, [sp, #0]
 800d430:	4633      	mov	r3, r6
 800d432:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d434:	4621      	mov	r1, r4
 800d436:	4628      	mov	r0, r5
 800d438:	f000 f9d2 	bl	800d7e0 <_printf_common>
 800d43c:	3001      	adds	r0, #1
 800d43e:	f040 808d 	bne.w	800d55c <_printf_float+0x1d0>
 800d442:	f04f 30ff 	mov.w	r0, #4294967295
 800d446:	b00d      	add	sp, #52	@ 0x34
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44c:	4642      	mov	r2, r8
 800d44e:	464b      	mov	r3, r9
 800d450:	4640      	mov	r0, r8
 800d452:	4649      	mov	r1, r9
 800d454:	f7f3 fb8a 	bl	8000b6c <__aeabi_dcmpun>
 800d458:	b140      	cbz	r0, 800d46c <_printf_float+0xe0>
 800d45a:	464b      	mov	r3, r9
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	bfbc      	itt	lt
 800d460:	232d      	movlt	r3, #45	@ 0x2d
 800d462:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d466:	4a7e      	ldr	r2, [pc, #504]	@ (800d660 <_printf_float+0x2d4>)
 800d468:	4b7e      	ldr	r3, [pc, #504]	@ (800d664 <_printf_float+0x2d8>)
 800d46a:	e7d4      	b.n	800d416 <_printf_float+0x8a>
 800d46c:	6863      	ldr	r3, [r4, #4]
 800d46e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d472:	9206      	str	r2, [sp, #24]
 800d474:	1c5a      	adds	r2, r3, #1
 800d476:	d13b      	bne.n	800d4f0 <_printf_float+0x164>
 800d478:	2306      	movs	r3, #6
 800d47a:	6063      	str	r3, [r4, #4]
 800d47c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d480:	2300      	movs	r3, #0
 800d482:	6022      	str	r2, [r4, #0]
 800d484:	9303      	str	r3, [sp, #12]
 800d486:	ab0a      	add	r3, sp, #40	@ 0x28
 800d488:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d48c:	ab09      	add	r3, sp, #36	@ 0x24
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	6861      	ldr	r1, [r4, #4]
 800d492:	ec49 8b10 	vmov	d0, r8, r9
 800d496:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d49a:	4628      	mov	r0, r5
 800d49c:	f7ff fed6 	bl	800d24c <__cvt>
 800d4a0:	9b06      	ldr	r3, [sp, #24]
 800d4a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4a4:	2b47      	cmp	r3, #71	@ 0x47
 800d4a6:	4680      	mov	r8, r0
 800d4a8:	d129      	bne.n	800d4fe <_printf_float+0x172>
 800d4aa:	1cc8      	adds	r0, r1, #3
 800d4ac:	db02      	blt.n	800d4b4 <_printf_float+0x128>
 800d4ae:	6863      	ldr	r3, [r4, #4]
 800d4b0:	4299      	cmp	r1, r3
 800d4b2:	dd41      	ble.n	800d538 <_printf_float+0x1ac>
 800d4b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d4b8:	fa5f fa8a 	uxtb.w	sl, sl
 800d4bc:	3901      	subs	r1, #1
 800d4be:	4652      	mov	r2, sl
 800d4c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d4c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4c6:	f7ff ff26 	bl	800d316 <__exponent>
 800d4ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d4cc:	1813      	adds	r3, r2, r0
 800d4ce:	2a01      	cmp	r2, #1
 800d4d0:	4681      	mov	r9, r0
 800d4d2:	6123      	str	r3, [r4, #16]
 800d4d4:	dc02      	bgt.n	800d4dc <_printf_float+0x150>
 800d4d6:	6822      	ldr	r2, [r4, #0]
 800d4d8:	07d2      	lsls	r2, r2, #31
 800d4da:	d501      	bpl.n	800d4e0 <_printf_float+0x154>
 800d4dc:	3301      	adds	r3, #1
 800d4de:	6123      	str	r3, [r4, #16]
 800d4e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d0a2      	beq.n	800d42e <_printf_float+0xa2>
 800d4e8:	232d      	movs	r3, #45	@ 0x2d
 800d4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4ee:	e79e      	b.n	800d42e <_printf_float+0xa2>
 800d4f0:	9a06      	ldr	r2, [sp, #24]
 800d4f2:	2a47      	cmp	r2, #71	@ 0x47
 800d4f4:	d1c2      	bne.n	800d47c <_printf_float+0xf0>
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1c0      	bne.n	800d47c <_printf_float+0xf0>
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e7bd      	b.n	800d47a <_printf_float+0xee>
 800d4fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d502:	d9db      	bls.n	800d4bc <_printf_float+0x130>
 800d504:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d508:	d118      	bne.n	800d53c <_printf_float+0x1b0>
 800d50a:	2900      	cmp	r1, #0
 800d50c:	6863      	ldr	r3, [r4, #4]
 800d50e:	dd0b      	ble.n	800d528 <_printf_float+0x19c>
 800d510:	6121      	str	r1, [r4, #16]
 800d512:	b913      	cbnz	r3, 800d51a <_printf_float+0x18e>
 800d514:	6822      	ldr	r2, [r4, #0]
 800d516:	07d0      	lsls	r0, r2, #31
 800d518:	d502      	bpl.n	800d520 <_printf_float+0x194>
 800d51a:	3301      	adds	r3, #1
 800d51c:	440b      	add	r3, r1
 800d51e:	6123      	str	r3, [r4, #16]
 800d520:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d522:	f04f 0900 	mov.w	r9, #0
 800d526:	e7db      	b.n	800d4e0 <_printf_float+0x154>
 800d528:	b913      	cbnz	r3, 800d530 <_printf_float+0x1a4>
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	07d2      	lsls	r2, r2, #31
 800d52e:	d501      	bpl.n	800d534 <_printf_float+0x1a8>
 800d530:	3302      	adds	r3, #2
 800d532:	e7f4      	b.n	800d51e <_printf_float+0x192>
 800d534:	2301      	movs	r3, #1
 800d536:	e7f2      	b.n	800d51e <_printf_float+0x192>
 800d538:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d53e:	4299      	cmp	r1, r3
 800d540:	db05      	blt.n	800d54e <_printf_float+0x1c2>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	6121      	str	r1, [r4, #16]
 800d546:	07d8      	lsls	r0, r3, #31
 800d548:	d5ea      	bpl.n	800d520 <_printf_float+0x194>
 800d54a:	1c4b      	adds	r3, r1, #1
 800d54c:	e7e7      	b.n	800d51e <_printf_float+0x192>
 800d54e:	2900      	cmp	r1, #0
 800d550:	bfd4      	ite	le
 800d552:	f1c1 0202 	rsble	r2, r1, #2
 800d556:	2201      	movgt	r2, #1
 800d558:	4413      	add	r3, r2
 800d55a:	e7e0      	b.n	800d51e <_printf_float+0x192>
 800d55c:	6823      	ldr	r3, [r4, #0]
 800d55e:	055a      	lsls	r2, r3, #21
 800d560:	d407      	bmi.n	800d572 <_printf_float+0x1e6>
 800d562:	6923      	ldr	r3, [r4, #16]
 800d564:	4642      	mov	r2, r8
 800d566:	4631      	mov	r1, r6
 800d568:	4628      	mov	r0, r5
 800d56a:	47b8      	blx	r7
 800d56c:	3001      	adds	r0, #1
 800d56e:	d12b      	bne.n	800d5c8 <_printf_float+0x23c>
 800d570:	e767      	b.n	800d442 <_printf_float+0xb6>
 800d572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d576:	f240 80dd 	bls.w	800d734 <_printf_float+0x3a8>
 800d57a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d57e:	2200      	movs	r2, #0
 800d580:	2300      	movs	r3, #0
 800d582:	f7f3 fac1 	bl	8000b08 <__aeabi_dcmpeq>
 800d586:	2800      	cmp	r0, #0
 800d588:	d033      	beq.n	800d5f2 <_printf_float+0x266>
 800d58a:	4a37      	ldr	r2, [pc, #220]	@ (800d668 <_printf_float+0x2dc>)
 800d58c:	2301      	movs	r3, #1
 800d58e:	4631      	mov	r1, r6
 800d590:	4628      	mov	r0, r5
 800d592:	47b8      	blx	r7
 800d594:	3001      	adds	r0, #1
 800d596:	f43f af54 	beq.w	800d442 <_printf_float+0xb6>
 800d59a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d59e:	4543      	cmp	r3, r8
 800d5a0:	db02      	blt.n	800d5a8 <_printf_float+0x21c>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	07d8      	lsls	r0, r3, #31
 800d5a6:	d50f      	bpl.n	800d5c8 <_printf_float+0x23c>
 800d5a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5ac:	4631      	mov	r1, r6
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	47b8      	blx	r7
 800d5b2:	3001      	adds	r0, #1
 800d5b4:	f43f af45 	beq.w	800d442 <_printf_float+0xb6>
 800d5b8:	f04f 0900 	mov.w	r9, #0
 800d5bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d5c0:	f104 0a1a 	add.w	sl, r4, #26
 800d5c4:	45c8      	cmp	r8, r9
 800d5c6:	dc09      	bgt.n	800d5dc <_printf_float+0x250>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	079b      	lsls	r3, r3, #30
 800d5cc:	f100 8103 	bmi.w	800d7d6 <_printf_float+0x44a>
 800d5d0:	68e0      	ldr	r0, [r4, #12]
 800d5d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5d4:	4298      	cmp	r0, r3
 800d5d6:	bfb8      	it	lt
 800d5d8:	4618      	movlt	r0, r3
 800d5da:	e734      	b.n	800d446 <_printf_float+0xba>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	4652      	mov	r2, sl
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	47b8      	blx	r7
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	f43f af2b 	beq.w	800d442 <_printf_float+0xb6>
 800d5ec:	f109 0901 	add.w	r9, r9, #1
 800d5f0:	e7e8      	b.n	800d5c4 <_printf_float+0x238>
 800d5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	dc39      	bgt.n	800d66c <_printf_float+0x2e0>
 800d5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800d668 <_printf_float+0x2dc>)
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4628      	mov	r0, r5
 800d600:	47b8      	blx	r7
 800d602:	3001      	adds	r0, #1
 800d604:	f43f af1d 	beq.w	800d442 <_printf_float+0xb6>
 800d608:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d60c:	ea59 0303 	orrs.w	r3, r9, r3
 800d610:	d102      	bne.n	800d618 <_printf_float+0x28c>
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	07d9      	lsls	r1, r3, #31
 800d616:	d5d7      	bpl.n	800d5c8 <_printf_float+0x23c>
 800d618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d61c:	4631      	mov	r1, r6
 800d61e:	4628      	mov	r0, r5
 800d620:	47b8      	blx	r7
 800d622:	3001      	adds	r0, #1
 800d624:	f43f af0d 	beq.w	800d442 <_printf_float+0xb6>
 800d628:	f04f 0a00 	mov.w	sl, #0
 800d62c:	f104 0b1a 	add.w	fp, r4, #26
 800d630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d632:	425b      	negs	r3, r3
 800d634:	4553      	cmp	r3, sl
 800d636:	dc01      	bgt.n	800d63c <_printf_float+0x2b0>
 800d638:	464b      	mov	r3, r9
 800d63a:	e793      	b.n	800d564 <_printf_float+0x1d8>
 800d63c:	2301      	movs	r3, #1
 800d63e:	465a      	mov	r2, fp
 800d640:	4631      	mov	r1, r6
 800d642:	4628      	mov	r0, r5
 800d644:	47b8      	blx	r7
 800d646:	3001      	adds	r0, #1
 800d648:	f43f aefb 	beq.w	800d442 <_printf_float+0xb6>
 800d64c:	f10a 0a01 	add.w	sl, sl, #1
 800d650:	e7ee      	b.n	800d630 <_printf_float+0x2a4>
 800d652:	bf00      	nop
 800d654:	7fefffff 	.word	0x7fefffff
 800d658:	080114f8 	.word	0x080114f8
 800d65c:	080114fc 	.word	0x080114fc
 800d660:	08011500 	.word	0x08011500
 800d664:	08011504 	.word	0x08011504
 800d668:	08011508 	.word	0x08011508
 800d66c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d66e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d672:	4553      	cmp	r3, sl
 800d674:	bfa8      	it	ge
 800d676:	4653      	movge	r3, sl
 800d678:	2b00      	cmp	r3, #0
 800d67a:	4699      	mov	r9, r3
 800d67c:	dc36      	bgt.n	800d6ec <_printf_float+0x360>
 800d67e:	f04f 0b00 	mov.w	fp, #0
 800d682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d686:	f104 021a 	add.w	r2, r4, #26
 800d68a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d68c:	9306      	str	r3, [sp, #24]
 800d68e:	eba3 0309 	sub.w	r3, r3, r9
 800d692:	455b      	cmp	r3, fp
 800d694:	dc31      	bgt.n	800d6fa <_printf_float+0x36e>
 800d696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d698:	459a      	cmp	sl, r3
 800d69a:	dc3a      	bgt.n	800d712 <_printf_float+0x386>
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	07da      	lsls	r2, r3, #31
 800d6a0:	d437      	bmi.n	800d712 <_printf_float+0x386>
 800d6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6a4:	ebaa 0903 	sub.w	r9, sl, r3
 800d6a8:	9b06      	ldr	r3, [sp, #24]
 800d6aa:	ebaa 0303 	sub.w	r3, sl, r3
 800d6ae:	4599      	cmp	r9, r3
 800d6b0:	bfa8      	it	ge
 800d6b2:	4699      	movge	r9, r3
 800d6b4:	f1b9 0f00 	cmp.w	r9, #0
 800d6b8:	dc33      	bgt.n	800d722 <_printf_float+0x396>
 800d6ba:	f04f 0800 	mov.w	r8, #0
 800d6be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d6c2:	f104 0b1a 	add.w	fp, r4, #26
 800d6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6c8:	ebaa 0303 	sub.w	r3, sl, r3
 800d6cc:	eba3 0309 	sub.w	r3, r3, r9
 800d6d0:	4543      	cmp	r3, r8
 800d6d2:	f77f af79 	ble.w	800d5c8 <_printf_float+0x23c>
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	465a      	mov	r2, fp
 800d6da:	4631      	mov	r1, r6
 800d6dc:	4628      	mov	r0, r5
 800d6de:	47b8      	blx	r7
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	f43f aeae 	beq.w	800d442 <_printf_float+0xb6>
 800d6e6:	f108 0801 	add.w	r8, r8, #1
 800d6ea:	e7ec      	b.n	800d6c6 <_printf_float+0x33a>
 800d6ec:	4642      	mov	r2, r8
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	47b8      	blx	r7
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d1c2      	bne.n	800d67e <_printf_float+0x2f2>
 800d6f8:	e6a3      	b.n	800d442 <_printf_float+0xb6>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	4631      	mov	r1, r6
 800d6fe:	4628      	mov	r0, r5
 800d700:	9206      	str	r2, [sp, #24]
 800d702:	47b8      	blx	r7
 800d704:	3001      	adds	r0, #1
 800d706:	f43f ae9c 	beq.w	800d442 <_printf_float+0xb6>
 800d70a:	9a06      	ldr	r2, [sp, #24]
 800d70c:	f10b 0b01 	add.w	fp, fp, #1
 800d710:	e7bb      	b.n	800d68a <_printf_float+0x2fe>
 800d712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d716:	4631      	mov	r1, r6
 800d718:	4628      	mov	r0, r5
 800d71a:	47b8      	blx	r7
 800d71c:	3001      	adds	r0, #1
 800d71e:	d1c0      	bne.n	800d6a2 <_printf_float+0x316>
 800d720:	e68f      	b.n	800d442 <_printf_float+0xb6>
 800d722:	9a06      	ldr	r2, [sp, #24]
 800d724:	464b      	mov	r3, r9
 800d726:	4442      	add	r2, r8
 800d728:	4631      	mov	r1, r6
 800d72a:	4628      	mov	r0, r5
 800d72c:	47b8      	blx	r7
 800d72e:	3001      	adds	r0, #1
 800d730:	d1c3      	bne.n	800d6ba <_printf_float+0x32e>
 800d732:	e686      	b.n	800d442 <_printf_float+0xb6>
 800d734:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d738:	f1ba 0f01 	cmp.w	sl, #1
 800d73c:	dc01      	bgt.n	800d742 <_printf_float+0x3b6>
 800d73e:	07db      	lsls	r3, r3, #31
 800d740:	d536      	bpl.n	800d7b0 <_printf_float+0x424>
 800d742:	2301      	movs	r3, #1
 800d744:	4642      	mov	r2, r8
 800d746:	4631      	mov	r1, r6
 800d748:	4628      	mov	r0, r5
 800d74a:	47b8      	blx	r7
 800d74c:	3001      	adds	r0, #1
 800d74e:	f43f ae78 	beq.w	800d442 <_printf_float+0xb6>
 800d752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d756:	4631      	mov	r1, r6
 800d758:	4628      	mov	r0, r5
 800d75a:	47b8      	blx	r7
 800d75c:	3001      	adds	r0, #1
 800d75e:	f43f ae70 	beq.w	800d442 <_printf_float+0xb6>
 800d762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d766:	2200      	movs	r2, #0
 800d768:	2300      	movs	r3, #0
 800d76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d76e:	f7f3 f9cb 	bl	8000b08 <__aeabi_dcmpeq>
 800d772:	b9c0      	cbnz	r0, 800d7a6 <_printf_float+0x41a>
 800d774:	4653      	mov	r3, sl
 800d776:	f108 0201 	add.w	r2, r8, #1
 800d77a:	4631      	mov	r1, r6
 800d77c:	4628      	mov	r0, r5
 800d77e:	47b8      	blx	r7
 800d780:	3001      	adds	r0, #1
 800d782:	d10c      	bne.n	800d79e <_printf_float+0x412>
 800d784:	e65d      	b.n	800d442 <_printf_float+0xb6>
 800d786:	2301      	movs	r3, #1
 800d788:	465a      	mov	r2, fp
 800d78a:	4631      	mov	r1, r6
 800d78c:	4628      	mov	r0, r5
 800d78e:	47b8      	blx	r7
 800d790:	3001      	adds	r0, #1
 800d792:	f43f ae56 	beq.w	800d442 <_printf_float+0xb6>
 800d796:	f108 0801 	add.w	r8, r8, #1
 800d79a:	45d0      	cmp	r8, sl
 800d79c:	dbf3      	blt.n	800d786 <_printf_float+0x3fa>
 800d79e:	464b      	mov	r3, r9
 800d7a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d7a4:	e6df      	b.n	800d566 <_printf_float+0x1da>
 800d7a6:	f04f 0800 	mov.w	r8, #0
 800d7aa:	f104 0b1a 	add.w	fp, r4, #26
 800d7ae:	e7f4      	b.n	800d79a <_printf_float+0x40e>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4642      	mov	r2, r8
 800d7b4:	e7e1      	b.n	800d77a <_printf_float+0x3ee>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	464a      	mov	r2, r9
 800d7ba:	4631      	mov	r1, r6
 800d7bc:	4628      	mov	r0, r5
 800d7be:	47b8      	blx	r7
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	f43f ae3e 	beq.w	800d442 <_printf_float+0xb6>
 800d7c6:	f108 0801 	add.w	r8, r8, #1
 800d7ca:	68e3      	ldr	r3, [r4, #12]
 800d7cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d7ce:	1a5b      	subs	r3, r3, r1
 800d7d0:	4543      	cmp	r3, r8
 800d7d2:	dcf0      	bgt.n	800d7b6 <_printf_float+0x42a>
 800d7d4:	e6fc      	b.n	800d5d0 <_printf_float+0x244>
 800d7d6:	f04f 0800 	mov.w	r8, #0
 800d7da:	f104 0919 	add.w	r9, r4, #25
 800d7de:	e7f4      	b.n	800d7ca <_printf_float+0x43e>

0800d7e0 <_printf_common>:
 800d7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e4:	4616      	mov	r6, r2
 800d7e6:	4698      	mov	r8, r3
 800d7e8:	688a      	ldr	r2, [r1, #8]
 800d7ea:	690b      	ldr	r3, [r1, #16]
 800d7ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	bfb8      	it	lt
 800d7f4:	4613      	movlt	r3, r2
 800d7f6:	6033      	str	r3, [r6, #0]
 800d7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	460c      	mov	r4, r1
 800d800:	b10a      	cbz	r2, 800d806 <_printf_common+0x26>
 800d802:	3301      	adds	r3, #1
 800d804:	6033      	str	r3, [r6, #0]
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	0699      	lsls	r1, r3, #26
 800d80a:	bf42      	ittt	mi
 800d80c:	6833      	ldrmi	r3, [r6, #0]
 800d80e:	3302      	addmi	r3, #2
 800d810:	6033      	strmi	r3, [r6, #0]
 800d812:	6825      	ldr	r5, [r4, #0]
 800d814:	f015 0506 	ands.w	r5, r5, #6
 800d818:	d106      	bne.n	800d828 <_printf_common+0x48>
 800d81a:	f104 0a19 	add.w	sl, r4, #25
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	6832      	ldr	r2, [r6, #0]
 800d822:	1a9b      	subs	r3, r3, r2
 800d824:	42ab      	cmp	r3, r5
 800d826:	dc26      	bgt.n	800d876 <_printf_common+0x96>
 800d828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d82c:	6822      	ldr	r2, [r4, #0]
 800d82e:	3b00      	subs	r3, #0
 800d830:	bf18      	it	ne
 800d832:	2301      	movne	r3, #1
 800d834:	0692      	lsls	r2, r2, #26
 800d836:	d42b      	bmi.n	800d890 <_printf_common+0xb0>
 800d838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d83c:	4641      	mov	r1, r8
 800d83e:	4638      	mov	r0, r7
 800d840:	47c8      	blx	r9
 800d842:	3001      	adds	r0, #1
 800d844:	d01e      	beq.n	800d884 <_printf_common+0xa4>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	6922      	ldr	r2, [r4, #16]
 800d84a:	f003 0306 	and.w	r3, r3, #6
 800d84e:	2b04      	cmp	r3, #4
 800d850:	bf02      	ittt	eq
 800d852:	68e5      	ldreq	r5, [r4, #12]
 800d854:	6833      	ldreq	r3, [r6, #0]
 800d856:	1aed      	subeq	r5, r5, r3
 800d858:	68a3      	ldr	r3, [r4, #8]
 800d85a:	bf0c      	ite	eq
 800d85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d860:	2500      	movne	r5, #0
 800d862:	4293      	cmp	r3, r2
 800d864:	bfc4      	itt	gt
 800d866:	1a9b      	subgt	r3, r3, r2
 800d868:	18ed      	addgt	r5, r5, r3
 800d86a:	2600      	movs	r6, #0
 800d86c:	341a      	adds	r4, #26
 800d86e:	42b5      	cmp	r5, r6
 800d870:	d11a      	bne.n	800d8a8 <_printf_common+0xc8>
 800d872:	2000      	movs	r0, #0
 800d874:	e008      	b.n	800d888 <_printf_common+0xa8>
 800d876:	2301      	movs	r3, #1
 800d878:	4652      	mov	r2, sl
 800d87a:	4641      	mov	r1, r8
 800d87c:	4638      	mov	r0, r7
 800d87e:	47c8      	blx	r9
 800d880:	3001      	adds	r0, #1
 800d882:	d103      	bne.n	800d88c <_printf_common+0xac>
 800d884:	f04f 30ff 	mov.w	r0, #4294967295
 800d888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d88c:	3501      	adds	r5, #1
 800d88e:	e7c6      	b.n	800d81e <_printf_common+0x3e>
 800d890:	18e1      	adds	r1, r4, r3
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	2030      	movs	r0, #48	@ 0x30
 800d896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d89a:	4422      	add	r2, r4
 800d89c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8a4:	3302      	adds	r3, #2
 800d8a6:	e7c7      	b.n	800d838 <_printf_common+0x58>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	4622      	mov	r2, r4
 800d8ac:	4641      	mov	r1, r8
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	47c8      	blx	r9
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	d0e6      	beq.n	800d884 <_printf_common+0xa4>
 800d8b6:	3601      	adds	r6, #1
 800d8b8:	e7d9      	b.n	800d86e <_printf_common+0x8e>
	...

0800d8bc <_printf_i>:
 800d8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c0:	7e0f      	ldrb	r7, [r1, #24]
 800d8c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d8c4:	2f78      	cmp	r7, #120	@ 0x78
 800d8c6:	4691      	mov	r9, r2
 800d8c8:	4680      	mov	r8, r0
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	469a      	mov	sl, r3
 800d8ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8d2:	d807      	bhi.n	800d8e4 <_printf_i+0x28>
 800d8d4:	2f62      	cmp	r7, #98	@ 0x62
 800d8d6:	d80a      	bhi.n	800d8ee <_printf_i+0x32>
 800d8d8:	2f00      	cmp	r7, #0
 800d8da:	f000 80d2 	beq.w	800da82 <_printf_i+0x1c6>
 800d8de:	2f58      	cmp	r7, #88	@ 0x58
 800d8e0:	f000 80b9 	beq.w	800da56 <_printf_i+0x19a>
 800d8e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8ec:	e03a      	b.n	800d964 <_printf_i+0xa8>
 800d8ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8f2:	2b15      	cmp	r3, #21
 800d8f4:	d8f6      	bhi.n	800d8e4 <_printf_i+0x28>
 800d8f6:	a101      	add	r1, pc, #4	@ (adr r1, 800d8fc <_printf_i+0x40>)
 800d8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8fc:	0800d955 	.word	0x0800d955
 800d900:	0800d969 	.word	0x0800d969
 800d904:	0800d8e5 	.word	0x0800d8e5
 800d908:	0800d8e5 	.word	0x0800d8e5
 800d90c:	0800d8e5 	.word	0x0800d8e5
 800d910:	0800d8e5 	.word	0x0800d8e5
 800d914:	0800d969 	.word	0x0800d969
 800d918:	0800d8e5 	.word	0x0800d8e5
 800d91c:	0800d8e5 	.word	0x0800d8e5
 800d920:	0800d8e5 	.word	0x0800d8e5
 800d924:	0800d8e5 	.word	0x0800d8e5
 800d928:	0800da69 	.word	0x0800da69
 800d92c:	0800d993 	.word	0x0800d993
 800d930:	0800da23 	.word	0x0800da23
 800d934:	0800d8e5 	.word	0x0800d8e5
 800d938:	0800d8e5 	.word	0x0800d8e5
 800d93c:	0800da8b 	.word	0x0800da8b
 800d940:	0800d8e5 	.word	0x0800d8e5
 800d944:	0800d993 	.word	0x0800d993
 800d948:	0800d8e5 	.word	0x0800d8e5
 800d94c:	0800d8e5 	.word	0x0800d8e5
 800d950:	0800da2b 	.word	0x0800da2b
 800d954:	6833      	ldr	r3, [r6, #0]
 800d956:	1d1a      	adds	r2, r3, #4
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6032      	str	r2, [r6, #0]
 800d95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d964:	2301      	movs	r3, #1
 800d966:	e09d      	b.n	800daa4 <_printf_i+0x1e8>
 800d968:	6833      	ldr	r3, [r6, #0]
 800d96a:	6820      	ldr	r0, [r4, #0]
 800d96c:	1d19      	adds	r1, r3, #4
 800d96e:	6031      	str	r1, [r6, #0]
 800d970:	0606      	lsls	r6, r0, #24
 800d972:	d501      	bpl.n	800d978 <_printf_i+0xbc>
 800d974:	681d      	ldr	r5, [r3, #0]
 800d976:	e003      	b.n	800d980 <_printf_i+0xc4>
 800d978:	0645      	lsls	r5, r0, #25
 800d97a:	d5fb      	bpl.n	800d974 <_printf_i+0xb8>
 800d97c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d980:	2d00      	cmp	r5, #0
 800d982:	da03      	bge.n	800d98c <_printf_i+0xd0>
 800d984:	232d      	movs	r3, #45	@ 0x2d
 800d986:	426d      	negs	r5, r5
 800d988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d98c:	4859      	ldr	r0, [pc, #356]	@ (800daf4 <_printf_i+0x238>)
 800d98e:	230a      	movs	r3, #10
 800d990:	e011      	b.n	800d9b6 <_printf_i+0xfa>
 800d992:	6821      	ldr	r1, [r4, #0]
 800d994:	6833      	ldr	r3, [r6, #0]
 800d996:	0608      	lsls	r0, r1, #24
 800d998:	f853 5b04 	ldr.w	r5, [r3], #4
 800d99c:	d402      	bmi.n	800d9a4 <_printf_i+0xe8>
 800d99e:	0649      	lsls	r1, r1, #25
 800d9a0:	bf48      	it	mi
 800d9a2:	b2ad      	uxthmi	r5, r5
 800d9a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9a6:	4853      	ldr	r0, [pc, #332]	@ (800daf4 <_printf_i+0x238>)
 800d9a8:	6033      	str	r3, [r6, #0]
 800d9aa:	bf14      	ite	ne
 800d9ac:	230a      	movne	r3, #10
 800d9ae:	2308      	moveq	r3, #8
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d9b6:	6866      	ldr	r6, [r4, #4]
 800d9b8:	60a6      	str	r6, [r4, #8]
 800d9ba:	2e00      	cmp	r6, #0
 800d9bc:	bfa2      	ittt	ge
 800d9be:	6821      	ldrge	r1, [r4, #0]
 800d9c0:	f021 0104 	bicge.w	r1, r1, #4
 800d9c4:	6021      	strge	r1, [r4, #0]
 800d9c6:	b90d      	cbnz	r5, 800d9cc <_printf_i+0x110>
 800d9c8:	2e00      	cmp	r6, #0
 800d9ca:	d04b      	beq.n	800da64 <_printf_i+0x1a8>
 800d9cc:	4616      	mov	r6, r2
 800d9ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9d2:	fb03 5711 	mls	r7, r3, r1, r5
 800d9d6:	5dc7      	ldrb	r7, [r0, r7]
 800d9d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9dc:	462f      	mov	r7, r5
 800d9de:	42bb      	cmp	r3, r7
 800d9e0:	460d      	mov	r5, r1
 800d9e2:	d9f4      	bls.n	800d9ce <_printf_i+0x112>
 800d9e4:	2b08      	cmp	r3, #8
 800d9e6:	d10b      	bne.n	800da00 <_printf_i+0x144>
 800d9e8:	6823      	ldr	r3, [r4, #0]
 800d9ea:	07df      	lsls	r7, r3, #31
 800d9ec:	d508      	bpl.n	800da00 <_printf_i+0x144>
 800d9ee:	6923      	ldr	r3, [r4, #16]
 800d9f0:	6861      	ldr	r1, [r4, #4]
 800d9f2:	4299      	cmp	r1, r3
 800d9f4:	bfde      	ittt	le
 800d9f6:	2330      	movle	r3, #48	@ 0x30
 800d9f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da00:	1b92      	subs	r2, r2, r6
 800da02:	6122      	str	r2, [r4, #16]
 800da04:	f8cd a000 	str.w	sl, [sp]
 800da08:	464b      	mov	r3, r9
 800da0a:	aa03      	add	r2, sp, #12
 800da0c:	4621      	mov	r1, r4
 800da0e:	4640      	mov	r0, r8
 800da10:	f7ff fee6 	bl	800d7e0 <_printf_common>
 800da14:	3001      	adds	r0, #1
 800da16:	d14a      	bne.n	800daae <_printf_i+0x1f2>
 800da18:	f04f 30ff 	mov.w	r0, #4294967295
 800da1c:	b004      	add	sp, #16
 800da1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	f043 0320 	orr.w	r3, r3, #32
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	4833      	ldr	r0, [pc, #204]	@ (800daf8 <_printf_i+0x23c>)
 800da2c:	2778      	movs	r7, #120	@ 0x78
 800da2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	6831      	ldr	r1, [r6, #0]
 800da36:	061f      	lsls	r7, r3, #24
 800da38:	f851 5b04 	ldr.w	r5, [r1], #4
 800da3c:	d402      	bmi.n	800da44 <_printf_i+0x188>
 800da3e:	065f      	lsls	r7, r3, #25
 800da40:	bf48      	it	mi
 800da42:	b2ad      	uxthmi	r5, r5
 800da44:	6031      	str	r1, [r6, #0]
 800da46:	07d9      	lsls	r1, r3, #31
 800da48:	bf44      	itt	mi
 800da4a:	f043 0320 	orrmi.w	r3, r3, #32
 800da4e:	6023      	strmi	r3, [r4, #0]
 800da50:	b11d      	cbz	r5, 800da5a <_printf_i+0x19e>
 800da52:	2310      	movs	r3, #16
 800da54:	e7ac      	b.n	800d9b0 <_printf_i+0xf4>
 800da56:	4827      	ldr	r0, [pc, #156]	@ (800daf4 <_printf_i+0x238>)
 800da58:	e7e9      	b.n	800da2e <_printf_i+0x172>
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	f023 0320 	bic.w	r3, r3, #32
 800da60:	6023      	str	r3, [r4, #0]
 800da62:	e7f6      	b.n	800da52 <_printf_i+0x196>
 800da64:	4616      	mov	r6, r2
 800da66:	e7bd      	b.n	800d9e4 <_printf_i+0x128>
 800da68:	6833      	ldr	r3, [r6, #0]
 800da6a:	6825      	ldr	r5, [r4, #0]
 800da6c:	6961      	ldr	r1, [r4, #20]
 800da6e:	1d18      	adds	r0, r3, #4
 800da70:	6030      	str	r0, [r6, #0]
 800da72:	062e      	lsls	r6, r5, #24
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	d501      	bpl.n	800da7c <_printf_i+0x1c0>
 800da78:	6019      	str	r1, [r3, #0]
 800da7a:	e002      	b.n	800da82 <_printf_i+0x1c6>
 800da7c:	0668      	lsls	r0, r5, #25
 800da7e:	d5fb      	bpl.n	800da78 <_printf_i+0x1bc>
 800da80:	8019      	strh	r1, [r3, #0]
 800da82:	2300      	movs	r3, #0
 800da84:	6123      	str	r3, [r4, #16]
 800da86:	4616      	mov	r6, r2
 800da88:	e7bc      	b.n	800da04 <_printf_i+0x148>
 800da8a:	6833      	ldr	r3, [r6, #0]
 800da8c:	1d1a      	adds	r2, r3, #4
 800da8e:	6032      	str	r2, [r6, #0]
 800da90:	681e      	ldr	r6, [r3, #0]
 800da92:	6862      	ldr	r2, [r4, #4]
 800da94:	2100      	movs	r1, #0
 800da96:	4630      	mov	r0, r6
 800da98:	f7f2 fbba 	bl	8000210 <memchr>
 800da9c:	b108      	cbz	r0, 800daa2 <_printf_i+0x1e6>
 800da9e:	1b80      	subs	r0, r0, r6
 800daa0:	6060      	str	r0, [r4, #4]
 800daa2:	6863      	ldr	r3, [r4, #4]
 800daa4:	6123      	str	r3, [r4, #16]
 800daa6:	2300      	movs	r3, #0
 800daa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daac:	e7aa      	b.n	800da04 <_printf_i+0x148>
 800daae:	6923      	ldr	r3, [r4, #16]
 800dab0:	4632      	mov	r2, r6
 800dab2:	4649      	mov	r1, r9
 800dab4:	4640      	mov	r0, r8
 800dab6:	47d0      	blx	sl
 800dab8:	3001      	adds	r0, #1
 800daba:	d0ad      	beq.n	800da18 <_printf_i+0x15c>
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	079b      	lsls	r3, r3, #30
 800dac0:	d413      	bmi.n	800daea <_printf_i+0x22e>
 800dac2:	68e0      	ldr	r0, [r4, #12]
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	4298      	cmp	r0, r3
 800dac8:	bfb8      	it	lt
 800daca:	4618      	movlt	r0, r3
 800dacc:	e7a6      	b.n	800da1c <_printf_i+0x160>
 800dace:	2301      	movs	r3, #1
 800dad0:	4632      	mov	r2, r6
 800dad2:	4649      	mov	r1, r9
 800dad4:	4640      	mov	r0, r8
 800dad6:	47d0      	blx	sl
 800dad8:	3001      	adds	r0, #1
 800dada:	d09d      	beq.n	800da18 <_printf_i+0x15c>
 800dadc:	3501      	adds	r5, #1
 800dade:	68e3      	ldr	r3, [r4, #12]
 800dae0:	9903      	ldr	r1, [sp, #12]
 800dae2:	1a5b      	subs	r3, r3, r1
 800dae4:	42ab      	cmp	r3, r5
 800dae6:	dcf2      	bgt.n	800dace <_printf_i+0x212>
 800dae8:	e7eb      	b.n	800dac2 <_printf_i+0x206>
 800daea:	2500      	movs	r5, #0
 800daec:	f104 0619 	add.w	r6, r4, #25
 800daf0:	e7f5      	b.n	800dade <_printf_i+0x222>
 800daf2:	bf00      	nop
 800daf4:	0801150a 	.word	0x0801150a
 800daf8:	0801151b 	.word	0x0801151b

0800dafc <_scanf_float>:
 800dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	b087      	sub	sp, #28
 800db02:	4617      	mov	r7, r2
 800db04:	9303      	str	r3, [sp, #12]
 800db06:	688b      	ldr	r3, [r1, #8]
 800db08:	1e5a      	subs	r2, r3, #1
 800db0a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800db0e:	bf81      	itttt	hi
 800db10:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800db14:	eb03 0b05 	addhi.w	fp, r3, r5
 800db18:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800db1c:	608b      	strhi	r3, [r1, #8]
 800db1e:	680b      	ldr	r3, [r1, #0]
 800db20:	460a      	mov	r2, r1
 800db22:	f04f 0500 	mov.w	r5, #0
 800db26:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800db2a:	f842 3b1c 	str.w	r3, [r2], #28
 800db2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800db32:	4680      	mov	r8, r0
 800db34:	460c      	mov	r4, r1
 800db36:	bf98      	it	ls
 800db38:	f04f 0b00 	movls.w	fp, #0
 800db3c:	9201      	str	r2, [sp, #4]
 800db3e:	4616      	mov	r6, r2
 800db40:	46aa      	mov	sl, r5
 800db42:	46a9      	mov	r9, r5
 800db44:	9502      	str	r5, [sp, #8]
 800db46:	68a2      	ldr	r2, [r4, #8]
 800db48:	b152      	cbz	r2, 800db60 <_scanf_float+0x64>
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b4e      	cmp	r3, #78	@ 0x4e
 800db50:	d864      	bhi.n	800dc1c <_scanf_float+0x120>
 800db52:	2b40      	cmp	r3, #64	@ 0x40
 800db54:	d83c      	bhi.n	800dbd0 <_scanf_float+0xd4>
 800db56:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800db5a:	b2c8      	uxtb	r0, r1
 800db5c:	280e      	cmp	r0, #14
 800db5e:	d93a      	bls.n	800dbd6 <_scanf_float+0xda>
 800db60:	f1b9 0f00 	cmp.w	r9, #0
 800db64:	d003      	beq.n	800db6e <_scanf_float+0x72>
 800db66:	6823      	ldr	r3, [r4, #0]
 800db68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db72:	f1ba 0f01 	cmp.w	sl, #1
 800db76:	f200 8117 	bhi.w	800dda8 <_scanf_float+0x2ac>
 800db7a:	9b01      	ldr	r3, [sp, #4]
 800db7c:	429e      	cmp	r6, r3
 800db7e:	f200 8108 	bhi.w	800dd92 <_scanf_float+0x296>
 800db82:	2001      	movs	r0, #1
 800db84:	b007      	add	sp, #28
 800db86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800db8e:	2a0d      	cmp	r2, #13
 800db90:	d8e6      	bhi.n	800db60 <_scanf_float+0x64>
 800db92:	a101      	add	r1, pc, #4	@ (adr r1, 800db98 <_scanf_float+0x9c>)
 800db94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800db98:	0800dcdf 	.word	0x0800dcdf
 800db9c:	0800db61 	.word	0x0800db61
 800dba0:	0800db61 	.word	0x0800db61
 800dba4:	0800db61 	.word	0x0800db61
 800dba8:	0800dd3f 	.word	0x0800dd3f
 800dbac:	0800dd17 	.word	0x0800dd17
 800dbb0:	0800db61 	.word	0x0800db61
 800dbb4:	0800db61 	.word	0x0800db61
 800dbb8:	0800dced 	.word	0x0800dced
 800dbbc:	0800db61 	.word	0x0800db61
 800dbc0:	0800db61 	.word	0x0800db61
 800dbc4:	0800db61 	.word	0x0800db61
 800dbc8:	0800db61 	.word	0x0800db61
 800dbcc:	0800dca5 	.word	0x0800dca5
 800dbd0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dbd4:	e7db      	b.n	800db8e <_scanf_float+0x92>
 800dbd6:	290e      	cmp	r1, #14
 800dbd8:	d8c2      	bhi.n	800db60 <_scanf_float+0x64>
 800dbda:	a001      	add	r0, pc, #4	@ (adr r0, 800dbe0 <_scanf_float+0xe4>)
 800dbdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dbe0:	0800dc95 	.word	0x0800dc95
 800dbe4:	0800db61 	.word	0x0800db61
 800dbe8:	0800dc95 	.word	0x0800dc95
 800dbec:	0800dd2b 	.word	0x0800dd2b
 800dbf0:	0800db61 	.word	0x0800db61
 800dbf4:	0800dc3d 	.word	0x0800dc3d
 800dbf8:	0800dc7b 	.word	0x0800dc7b
 800dbfc:	0800dc7b 	.word	0x0800dc7b
 800dc00:	0800dc7b 	.word	0x0800dc7b
 800dc04:	0800dc7b 	.word	0x0800dc7b
 800dc08:	0800dc7b 	.word	0x0800dc7b
 800dc0c:	0800dc7b 	.word	0x0800dc7b
 800dc10:	0800dc7b 	.word	0x0800dc7b
 800dc14:	0800dc7b 	.word	0x0800dc7b
 800dc18:	0800dc7b 	.word	0x0800dc7b
 800dc1c:	2b6e      	cmp	r3, #110	@ 0x6e
 800dc1e:	d809      	bhi.n	800dc34 <_scanf_float+0x138>
 800dc20:	2b60      	cmp	r3, #96	@ 0x60
 800dc22:	d8b2      	bhi.n	800db8a <_scanf_float+0x8e>
 800dc24:	2b54      	cmp	r3, #84	@ 0x54
 800dc26:	d07b      	beq.n	800dd20 <_scanf_float+0x224>
 800dc28:	2b59      	cmp	r3, #89	@ 0x59
 800dc2a:	d199      	bne.n	800db60 <_scanf_float+0x64>
 800dc2c:	2d07      	cmp	r5, #7
 800dc2e:	d197      	bne.n	800db60 <_scanf_float+0x64>
 800dc30:	2508      	movs	r5, #8
 800dc32:	e02c      	b.n	800dc8e <_scanf_float+0x192>
 800dc34:	2b74      	cmp	r3, #116	@ 0x74
 800dc36:	d073      	beq.n	800dd20 <_scanf_float+0x224>
 800dc38:	2b79      	cmp	r3, #121	@ 0x79
 800dc3a:	e7f6      	b.n	800dc2a <_scanf_float+0x12e>
 800dc3c:	6821      	ldr	r1, [r4, #0]
 800dc3e:	05c8      	lsls	r0, r1, #23
 800dc40:	d51b      	bpl.n	800dc7a <_scanf_float+0x17e>
 800dc42:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800dc46:	6021      	str	r1, [r4, #0]
 800dc48:	f109 0901 	add.w	r9, r9, #1
 800dc4c:	f1bb 0f00 	cmp.w	fp, #0
 800dc50:	d003      	beq.n	800dc5a <_scanf_float+0x15e>
 800dc52:	3201      	adds	r2, #1
 800dc54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc58:	60a2      	str	r2, [r4, #8]
 800dc5a:	68a3      	ldr	r3, [r4, #8]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	60a3      	str	r3, [r4, #8]
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	3301      	adds	r3, #1
 800dc64:	6123      	str	r3, [r4, #16]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3b01      	subs	r3, #1
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	607b      	str	r3, [r7, #4]
 800dc6e:	f340 8087 	ble.w	800dd80 <_scanf_float+0x284>
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	3301      	adds	r3, #1
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	e765      	b.n	800db46 <_scanf_float+0x4a>
 800dc7a:	eb1a 0105 	adds.w	r1, sl, r5
 800dc7e:	f47f af6f 	bne.w	800db60 <_scanf_float+0x64>
 800dc82:	6822      	ldr	r2, [r4, #0]
 800dc84:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800dc88:	6022      	str	r2, [r4, #0]
 800dc8a:	460d      	mov	r5, r1
 800dc8c:	468a      	mov	sl, r1
 800dc8e:	f806 3b01 	strb.w	r3, [r6], #1
 800dc92:	e7e2      	b.n	800dc5a <_scanf_float+0x15e>
 800dc94:	6822      	ldr	r2, [r4, #0]
 800dc96:	0610      	lsls	r0, r2, #24
 800dc98:	f57f af62 	bpl.w	800db60 <_scanf_float+0x64>
 800dc9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dca0:	6022      	str	r2, [r4, #0]
 800dca2:	e7f4      	b.n	800dc8e <_scanf_float+0x192>
 800dca4:	f1ba 0f00 	cmp.w	sl, #0
 800dca8:	d10e      	bne.n	800dcc8 <_scanf_float+0x1cc>
 800dcaa:	f1b9 0f00 	cmp.w	r9, #0
 800dcae:	d10e      	bne.n	800dcce <_scanf_float+0x1d2>
 800dcb0:	6822      	ldr	r2, [r4, #0]
 800dcb2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dcb6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dcba:	d108      	bne.n	800dcce <_scanf_float+0x1d2>
 800dcbc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dcc0:	6022      	str	r2, [r4, #0]
 800dcc2:	f04f 0a01 	mov.w	sl, #1
 800dcc6:	e7e2      	b.n	800dc8e <_scanf_float+0x192>
 800dcc8:	f1ba 0f02 	cmp.w	sl, #2
 800dccc:	d055      	beq.n	800dd7a <_scanf_float+0x27e>
 800dcce:	2d01      	cmp	r5, #1
 800dcd0:	d002      	beq.n	800dcd8 <_scanf_float+0x1dc>
 800dcd2:	2d04      	cmp	r5, #4
 800dcd4:	f47f af44 	bne.w	800db60 <_scanf_float+0x64>
 800dcd8:	3501      	adds	r5, #1
 800dcda:	b2ed      	uxtb	r5, r5
 800dcdc:	e7d7      	b.n	800dc8e <_scanf_float+0x192>
 800dcde:	f1ba 0f01 	cmp.w	sl, #1
 800dce2:	f47f af3d 	bne.w	800db60 <_scanf_float+0x64>
 800dce6:	f04f 0a02 	mov.w	sl, #2
 800dcea:	e7d0      	b.n	800dc8e <_scanf_float+0x192>
 800dcec:	b97d      	cbnz	r5, 800dd0e <_scanf_float+0x212>
 800dcee:	f1b9 0f00 	cmp.w	r9, #0
 800dcf2:	f47f af38 	bne.w	800db66 <_scanf_float+0x6a>
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dcfc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dd00:	f040 8108 	bne.w	800df14 <_scanf_float+0x418>
 800dd04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dd08:	6022      	str	r2, [r4, #0]
 800dd0a:	2501      	movs	r5, #1
 800dd0c:	e7bf      	b.n	800dc8e <_scanf_float+0x192>
 800dd0e:	2d03      	cmp	r5, #3
 800dd10:	d0e2      	beq.n	800dcd8 <_scanf_float+0x1dc>
 800dd12:	2d05      	cmp	r5, #5
 800dd14:	e7de      	b.n	800dcd4 <_scanf_float+0x1d8>
 800dd16:	2d02      	cmp	r5, #2
 800dd18:	f47f af22 	bne.w	800db60 <_scanf_float+0x64>
 800dd1c:	2503      	movs	r5, #3
 800dd1e:	e7b6      	b.n	800dc8e <_scanf_float+0x192>
 800dd20:	2d06      	cmp	r5, #6
 800dd22:	f47f af1d 	bne.w	800db60 <_scanf_float+0x64>
 800dd26:	2507      	movs	r5, #7
 800dd28:	e7b1      	b.n	800dc8e <_scanf_float+0x192>
 800dd2a:	6822      	ldr	r2, [r4, #0]
 800dd2c:	0591      	lsls	r1, r2, #22
 800dd2e:	f57f af17 	bpl.w	800db60 <_scanf_float+0x64>
 800dd32:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800dd36:	6022      	str	r2, [r4, #0]
 800dd38:	f8cd 9008 	str.w	r9, [sp, #8]
 800dd3c:	e7a7      	b.n	800dc8e <_scanf_float+0x192>
 800dd3e:	6822      	ldr	r2, [r4, #0]
 800dd40:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800dd44:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800dd48:	d006      	beq.n	800dd58 <_scanf_float+0x25c>
 800dd4a:	0550      	lsls	r0, r2, #21
 800dd4c:	f57f af08 	bpl.w	800db60 <_scanf_float+0x64>
 800dd50:	f1b9 0f00 	cmp.w	r9, #0
 800dd54:	f000 80de 	beq.w	800df14 <_scanf_float+0x418>
 800dd58:	0591      	lsls	r1, r2, #22
 800dd5a:	bf58      	it	pl
 800dd5c:	9902      	ldrpl	r1, [sp, #8]
 800dd5e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dd62:	bf58      	it	pl
 800dd64:	eba9 0101 	subpl.w	r1, r9, r1
 800dd68:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800dd6c:	bf58      	it	pl
 800dd6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dd72:	6022      	str	r2, [r4, #0]
 800dd74:	f04f 0900 	mov.w	r9, #0
 800dd78:	e789      	b.n	800dc8e <_scanf_float+0x192>
 800dd7a:	f04f 0a03 	mov.w	sl, #3
 800dd7e:	e786      	b.n	800dc8e <_scanf_float+0x192>
 800dd80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dd84:	4639      	mov	r1, r7
 800dd86:	4640      	mov	r0, r8
 800dd88:	4798      	blx	r3
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	f43f aedb 	beq.w	800db46 <_scanf_float+0x4a>
 800dd90:	e6e6      	b.n	800db60 <_scanf_float+0x64>
 800dd92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800dd9a:	463a      	mov	r2, r7
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	4798      	blx	r3
 800dda0:	6923      	ldr	r3, [r4, #16]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	6123      	str	r3, [r4, #16]
 800dda6:	e6e8      	b.n	800db7a <_scanf_float+0x7e>
 800dda8:	1e6b      	subs	r3, r5, #1
 800ddaa:	2b06      	cmp	r3, #6
 800ddac:	d824      	bhi.n	800ddf8 <_scanf_float+0x2fc>
 800ddae:	2d02      	cmp	r5, #2
 800ddb0:	d836      	bhi.n	800de20 <_scanf_float+0x324>
 800ddb2:	9b01      	ldr	r3, [sp, #4]
 800ddb4:	429e      	cmp	r6, r3
 800ddb6:	f67f aee4 	bls.w	800db82 <_scanf_float+0x86>
 800ddba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ddbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ddc2:	463a      	mov	r2, r7
 800ddc4:	4640      	mov	r0, r8
 800ddc6:	4798      	blx	r3
 800ddc8:	6923      	ldr	r3, [r4, #16]
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	e7f0      	b.n	800ddb2 <_scanf_float+0x2b6>
 800ddd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ddd4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ddd8:	463a      	mov	r2, r7
 800ddda:	4640      	mov	r0, r8
 800dddc:	4798      	blx	r3
 800ddde:	6923      	ldr	r3, [r4, #16]
 800dde0:	3b01      	subs	r3, #1
 800dde2:	6123      	str	r3, [r4, #16]
 800dde4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dde8:	fa5f fa8a 	uxtb.w	sl, sl
 800ddec:	f1ba 0f02 	cmp.w	sl, #2
 800ddf0:	d1ee      	bne.n	800ddd0 <_scanf_float+0x2d4>
 800ddf2:	3d03      	subs	r5, #3
 800ddf4:	b2ed      	uxtb	r5, r5
 800ddf6:	1b76      	subs	r6, r6, r5
 800ddf8:	6823      	ldr	r3, [r4, #0]
 800ddfa:	05da      	lsls	r2, r3, #23
 800ddfc:	d530      	bpl.n	800de60 <_scanf_float+0x364>
 800ddfe:	055b      	lsls	r3, r3, #21
 800de00:	d511      	bpl.n	800de26 <_scanf_float+0x32a>
 800de02:	9b01      	ldr	r3, [sp, #4]
 800de04:	429e      	cmp	r6, r3
 800de06:	f67f aebc 	bls.w	800db82 <_scanf_float+0x86>
 800de0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800de0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800de12:	463a      	mov	r2, r7
 800de14:	4640      	mov	r0, r8
 800de16:	4798      	blx	r3
 800de18:	6923      	ldr	r3, [r4, #16]
 800de1a:	3b01      	subs	r3, #1
 800de1c:	6123      	str	r3, [r4, #16]
 800de1e:	e7f0      	b.n	800de02 <_scanf_float+0x306>
 800de20:	46aa      	mov	sl, r5
 800de22:	46b3      	mov	fp, r6
 800de24:	e7de      	b.n	800dde4 <_scanf_float+0x2e8>
 800de26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800de2a:	6923      	ldr	r3, [r4, #16]
 800de2c:	2965      	cmp	r1, #101	@ 0x65
 800de2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800de32:	f106 35ff 	add.w	r5, r6, #4294967295
 800de36:	6123      	str	r3, [r4, #16]
 800de38:	d00c      	beq.n	800de54 <_scanf_float+0x358>
 800de3a:	2945      	cmp	r1, #69	@ 0x45
 800de3c:	d00a      	beq.n	800de54 <_scanf_float+0x358>
 800de3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800de42:	463a      	mov	r2, r7
 800de44:	4640      	mov	r0, r8
 800de46:	4798      	blx	r3
 800de48:	6923      	ldr	r3, [r4, #16]
 800de4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800de4e:	3b01      	subs	r3, #1
 800de50:	1eb5      	subs	r5, r6, #2
 800de52:	6123      	str	r3, [r4, #16]
 800de54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800de58:	463a      	mov	r2, r7
 800de5a:	4640      	mov	r0, r8
 800de5c:	4798      	blx	r3
 800de5e:	462e      	mov	r6, r5
 800de60:	6822      	ldr	r2, [r4, #0]
 800de62:	f012 0210 	ands.w	r2, r2, #16
 800de66:	d001      	beq.n	800de6c <_scanf_float+0x370>
 800de68:	2000      	movs	r0, #0
 800de6a:	e68b      	b.n	800db84 <_scanf_float+0x88>
 800de6c:	7032      	strb	r2, [r6, #0]
 800de6e:	6823      	ldr	r3, [r4, #0]
 800de70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800de74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de78:	d11c      	bne.n	800deb4 <_scanf_float+0x3b8>
 800de7a:	9b02      	ldr	r3, [sp, #8]
 800de7c:	454b      	cmp	r3, r9
 800de7e:	eba3 0209 	sub.w	r2, r3, r9
 800de82:	d123      	bne.n	800decc <_scanf_float+0x3d0>
 800de84:	9901      	ldr	r1, [sp, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	4640      	mov	r0, r8
 800de8a:	f7ff f9cd 	bl	800d228 <_strtod_r>
 800de8e:	9b03      	ldr	r3, [sp, #12]
 800de90:	6821      	ldr	r1, [r4, #0]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	f011 0f02 	tst.w	r1, #2
 800de98:	ec57 6b10 	vmov	r6, r7, d0
 800de9c:	f103 0204 	add.w	r2, r3, #4
 800dea0:	d01f      	beq.n	800dee2 <_scanf_float+0x3e6>
 800dea2:	9903      	ldr	r1, [sp, #12]
 800dea4:	600a      	str	r2, [r1, #0]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	e9c3 6700 	strd	r6, r7, [r3]
 800deac:	68e3      	ldr	r3, [r4, #12]
 800deae:	3301      	adds	r3, #1
 800deb0:	60e3      	str	r3, [r4, #12]
 800deb2:	e7d9      	b.n	800de68 <_scanf_float+0x36c>
 800deb4:	9b04      	ldr	r3, [sp, #16]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0e4      	beq.n	800de84 <_scanf_float+0x388>
 800deba:	9905      	ldr	r1, [sp, #20]
 800debc:	230a      	movs	r3, #10
 800debe:	3101      	adds	r1, #1
 800dec0:	4640      	mov	r0, r8
 800dec2:	f002 fa11 	bl	80102e8 <_strtol_r>
 800dec6:	9b04      	ldr	r3, [sp, #16]
 800dec8:	9e05      	ldr	r6, [sp, #20]
 800deca:	1ac2      	subs	r2, r0, r3
 800decc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ded0:	429e      	cmp	r6, r3
 800ded2:	bf28      	it	cs
 800ded4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ded8:	4910      	ldr	r1, [pc, #64]	@ (800df1c <_scanf_float+0x420>)
 800deda:	4630      	mov	r0, r6
 800dedc:	f000 f92a 	bl	800e134 <siprintf>
 800dee0:	e7d0      	b.n	800de84 <_scanf_float+0x388>
 800dee2:	f011 0f04 	tst.w	r1, #4
 800dee6:	9903      	ldr	r1, [sp, #12]
 800dee8:	600a      	str	r2, [r1, #0]
 800deea:	d1dc      	bne.n	800dea6 <_scanf_float+0x3aa>
 800deec:	681d      	ldr	r5, [r3, #0]
 800deee:	4632      	mov	r2, r6
 800def0:	463b      	mov	r3, r7
 800def2:	4630      	mov	r0, r6
 800def4:	4639      	mov	r1, r7
 800def6:	f7f2 fe39 	bl	8000b6c <__aeabi_dcmpun>
 800defa:	b128      	cbz	r0, 800df08 <_scanf_float+0x40c>
 800defc:	4808      	ldr	r0, [pc, #32]	@ (800df20 <_scanf_float+0x424>)
 800defe:	f000 fa27 	bl	800e350 <nanf>
 800df02:	ed85 0a00 	vstr	s0, [r5]
 800df06:	e7d1      	b.n	800deac <_scanf_float+0x3b0>
 800df08:	4630      	mov	r0, r6
 800df0a:	4639      	mov	r1, r7
 800df0c:	f7f2 fe8c 	bl	8000c28 <__aeabi_d2f>
 800df10:	6028      	str	r0, [r5, #0]
 800df12:	e7cb      	b.n	800deac <_scanf_float+0x3b0>
 800df14:	f04f 0900 	mov.w	r9, #0
 800df18:	e629      	b.n	800db6e <_scanf_float+0x72>
 800df1a:	bf00      	nop
 800df1c:	0801152c 	.word	0x0801152c
 800df20:	080118cd 	.word	0x080118cd

0800df24 <std>:
 800df24:	2300      	movs	r3, #0
 800df26:	b510      	push	{r4, lr}
 800df28:	4604      	mov	r4, r0
 800df2a:	e9c0 3300 	strd	r3, r3, [r0]
 800df2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df32:	6083      	str	r3, [r0, #8]
 800df34:	8181      	strh	r1, [r0, #12]
 800df36:	6643      	str	r3, [r0, #100]	@ 0x64
 800df38:	81c2      	strh	r2, [r0, #14]
 800df3a:	6183      	str	r3, [r0, #24]
 800df3c:	4619      	mov	r1, r3
 800df3e:	2208      	movs	r2, #8
 800df40:	305c      	adds	r0, #92	@ 0x5c
 800df42:	f000 f95a 	bl	800e1fa <memset>
 800df46:	4b0d      	ldr	r3, [pc, #52]	@ (800df7c <std+0x58>)
 800df48:	6263      	str	r3, [r4, #36]	@ 0x24
 800df4a:	4b0d      	ldr	r3, [pc, #52]	@ (800df80 <std+0x5c>)
 800df4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800df4e:	4b0d      	ldr	r3, [pc, #52]	@ (800df84 <std+0x60>)
 800df50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800df52:	4b0d      	ldr	r3, [pc, #52]	@ (800df88 <std+0x64>)
 800df54:	6323      	str	r3, [r4, #48]	@ 0x30
 800df56:	4b0d      	ldr	r3, [pc, #52]	@ (800df8c <std+0x68>)
 800df58:	6224      	str	r4, [r4, #32]
 800df5a:	429c      	cmp	r4, r3
 800df5c:	d006      	beq.n	800df6c <std+0x48>
 800df5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800df62:	4294      	cmp	r4, r2
 800df64:	d002      	beq.n	800df6c <std+0x48>
 800df66:	33d0      	adds	r3, #208	@ 0xd0
 800df68:	429c      	cmp	r4, r3
 800df6a:	d105      	bne.n	800df78 <std+0x54>
 800df6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800df70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df74:	f000 b9d0 	b.w	800e318 <__retarget_lock_init_recursive>
 800df78:	bd10      	pop	{r4, pc}
 800df7a:	bf00      	nop
 800df7c:	0800e175 	.word	0x0800e175
 800df80:	0800e197 	.word	0x0800e197
 800df84:	0800e1cf 	.word	0x0800e1cf
 800df88:	0800e1f3 	.word	0x0800e1f3
 800df8c:	2000289c 	.word	0x2000289c

0800df90 <stdio_exit_handler>:
 800df90:	4a02      	ldr	r2, [pc, #8]	@ (800df9c <stdio_exit_handler+0xc>)
 800df92:	4903      	ldr	r1, [pc, #12]	@ (800dfa0 <stdio_exit_handler+0x10>)
 800df94:	4803      	ldr	r0, [pc, #12]	@ (800dfa4 <stdio_exit_handler+0x14>)
 800df96:	f000 b869 	b.w	800e06c <_fwalk_sglue>
 800df9a:	bf00      	nop
 800df9c:	200000b8 	.word	0x200000b8
 800dfa0:	08010941 	.word	0x08010941
 800dfa4:	20000234 	.word	0x20000234

0800dfa8 <cleanup_stdio>:
 800dfa8:	6841      	ldr	r1, [r0, #4]
 800dfaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dfdc <cleanup_stdio+0x34>)
 800dfac:	4299      	cmp	r1, r3
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	d001      	beq.n	800dfb8 <cleanup_stdio+0x10>
 800dfb4:	f002 fcc4 	bl	8010940 <_fflush_r>
 800dfb8:	68a1      	ldr	r1, [r4, #8]
 800dfba:	4b09      	ldr	r3, [pc, #36]	@ (800dfe0 <cleanup_stdio+0x38>)
 800dfbc:	4299      	cmp	r1, r3
 800dfbe:	d002      	beq.n	800dfc6 <cleanup_stdio+0x1e>
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f002 fcbd 	bl	8010940 <_fflush_r>
 800dfc6:	68e1      	ldr	r1, [r4, #12]
 800dfc8:	4b06      	ldr	r3, [pc, #24]	@ (800dfe4 <cleanup_stdio+0x3c>)
 800dfca:	4299      	cmp	r1, r3
 800dfcc:	d004      	beq.n	800dfd8 <cleanup_stdio+0x30>
 800dfce:	4620      	mov	r0, r4
 800dfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfd4:	f002 bcb4 	b.w	8010940 <_fflush_r>
 800dfd8:	bd10      	pop	{r4, pc}
 800dfda:	bf00      	nop
 800dfdc:	2000289c 	.word	0x2000289c
 800dfe0:	20002904 	.word	0x20002904
 800dfe4:	2000296c 	.word	0x2000296c

0800dfe8 <global_stdio_init.part.0>:
 800dfe8:	b510      	push	{r4, lr}
 800dfea:	4b0b      	ldr	r3, [pc, #44]	@ (800e018 <global_stdio_init.part.0+0x30>)
 800dfec:	4c0b      	ldr	r4, [pc, #44]	@ (800e01c <global_stdio_init.part.0+0x34>)
 800dfee:	4a0c      	ldr	r2, [pc, #48]	@ (800e020 <global_stdio_init.part.0+0x38>)
 800dff0:	601a      	str	r2, [r3, #0]
 800dff2:	4620      	mov	r0, r4
 800dff4:	2200      	movs	r2, #0
 800dff6:	2104      	movs	r1, #4
 800dff8:	f7ff ff94 	bl	800df24 <std>
 800dffc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e000:	2201      	movs	r2, #1
 800e002:	2109      	movs	r1, #9
 800e004:	f7ff ff8e 	bl	800df24 <std>
 800e008:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e00c:	2202      	movs	r2, #2
 800e00e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e012:	2112      	movs	r1, #18
 800e014:	f7ff bf86 	b.w	800df24 <std>
 800e018:	200029d4 	.word	0x200029d4
 800e01c:	2000289c 	.word	0x2000289c
 800e020:	0800df91 	.word	0x0800df91

0800e024 <__sfp_lock_acquire>:
 800e024:	4801      	ldr	r0, [pc, #4]	@ (800e02c <__sfp_lock_acquire+0x8>)
 800e026:	f000 b978 	b.w	800e31a <__retarget_lock_acquire_recursive>
 800e02a:	bf00      	nop
 800e02c:	200029dd 	.word	0x200029dd

0800e030 <__sfp_lock_release>:
 800e030:	4801      	ldr	r0, [pc, #4]	@ (800e038 <__sfp_lock_release+0x8>)
 800e032:	f000 b973 	b.w	800e31c <__retarget_lock_release_recursive>
 800e036:	bf00      	nop
 800e038:	200029dd 	.word	0x200029dd

0800e03c <__sinit>:
 800e03c:	b510      	push	{r4, lr}
 800e03e:	4604      	mov	r4, r0
 800e040:	f7ff fff0 	bl	800e024 <__sfp_lock_acquire>
 800e044:	6a23      	ldr	r3, [r4, #32]
 800e046:	b11b      	cbz	r3, 800e050 <__sinit+0x14>
 800e048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e04c:	f7ff bff0 	b.w	800e030 <__sfp_lock_release>
 800e050:	4b04      	ldr	r3, [pc, #16]	@ (800e064 <__sinit+0x28>)
 800e052:	6223      	str	r3, [r4, #32]
 800e054:	4b04      	ldr	r3, [pc, #16]	@ (800e068 <__sinit+0x2c>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1f5      	bne.n	800e048 <__sinit+0xc>
 800e05c:	f7ff ffc4 	bl	800dfe8 <global_stdio_init.part.0>
 800e060:	e7f2      	b.n	800e048 <__sinit+0xc>
 800e062:	bf00      	nop
 800e064:	0800dfa9 	.word	0x0800dfa9
 800e068:	200029d4 	.word	0x200029d4

0800e06c <_fwalk_sglue>:
 800e06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e070:	4607      	mov	r7, r0
 800e072:	4688      	mov	r8, r1
 800e074:	4614      	mov	r4, r2
 800e076:	2600      	movs	r6, #0
 800e078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e07c:	f1b9 0901 	subs.w	r9, r9, #1
 800e080:	d505      	bpl.n	800e08e <_fwalk_sglue+0x22>
 800e082:	6824      	ldr	r4, [r4, #0]
 800e084:	2c00      	cmp	r4, #0
 800e086:	d1f7      	bne.n	800e078 <_fwalk_sglue+0xc>
 800e088:	4630      	mov	r0, r6
 800e08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e08e:	89ab      	ldrh	r3, [r5, #12]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d907      	bls.n	800e0a4 <_fwalk_sglue+0x38>
 800e094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e098:	3301      	adds	r3, #1
 800e09a:	d003      	beq.n	800e0a4 <_fwalk_sglue+0x38>
 800e09c:	4629      	mov	r1, r5
 800e09e:	4638      	mov	r0, r7
 800e0a0:	47c0      	blx	r8
 800e0a2:	4306      	orrs	r6, r0
 800e0a4:	3568      	adds	r5, #104	@ 0x68
 800e0a6:	e7e9      	b.n	800e07c <_fwalk_sglue+0x10>

0800e0a8 <iprintf>:
 800e0a8:	b40f      	push	{r0, r1, r2, r3}
 800e0aa:	b507      	push	{r0, r1, r2, lr}
 800e0ac:	4906      	ldr	r1, [pc, #24]	@ (800e0c8 <iprintf+0x20>)
 800e0ae:	ab04      	add	r3, sp, #16
 800e0b0:	6808      	ldr	r0, [r1, #0]
 800e0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0b6:	6881      	ldr	r1, [r0, #8]
 800e0b8:	9301      	str	r3, [sp, #4]
 800e0ba:	f002 faa5 	bl	8010608 <_vfiprintf_r>
 800e0be:	b003      	add	sp, #12
 800e0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0c4:	b004      	add	sp, #16
 800e0c6:	4770      	bx	lr
 800e0c8:	20000230 	.word	0x20000230

0800e0cc <sniprintf>:
 800e0cc:	b40c      	push	{r2, r3}
 800e0ce:	b530      	push	{r4, r5, lr}
 800e0d0:	4b17      	ldr	r3, [pc, #92]	@ (800e130 <sniprintf+0x64>)
 800e0d2:	1e0c      	subs	r4, r1, #0
 800e0d4:	681d      	ldr	r5, [r3, #0]
 800e0d6:	b09d      	sub	sp, #116	@ 0x74
 800e0d8:	da08      	bge.n	800e0ec <sniprintf+0x20>
 800e0da:	238b      	movs	r3, #139	@ 0x8b
 800e0dc:	602b      	str	r3, [r5, #0]
 800e0de:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e2:	b01d      	add	sp, #116	@ 0x74
 800e0e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0e8:	b002      	add	sp, #8
 800e0ea:	4770      	bx	lr
 800e0ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e0f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e0f4:	bf14      	ite	ne
 800e0f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e0fa:	4623      	moveq	r3, r4
 800e0fc:	9304      	str	r3, [sp, #16]
 800e0fe:	9307      	str	r3, [sp, #28]
 800e100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e104:	9002      	str	r0, [sp, #8]
 800e106:	9006      	str	r0, [sp, #24]
 800e108:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e10c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e10e:	ab21      	add	r3, sp, #132	@ 0x84
 800e110:	a902      	add	r1, sp, #8
 800e112:	4628      	mov	r0, r5
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	f002 f951 	bl	80103bc <_svfiprintf_r>
 800e11a:	1c43      	adds	r3, r0, #1
 800e11c:	bfbc      	itt	lt
 800e11e:	238b      	movlt	r3, #139	@ 0x8b
 800e120:	602b      	strlt	r3, [r5, #0]
 800e122:	2c00      	cmp	r4, #0
 800e124:	d0dd      	beq.n	800e0e2 <sniprintf+0x16>
 800e126:	9b02      	ldr	r3, [sp, #8]
 800e128:	2200      	movs	r2, #0
 800e12a:	701a      	strb	r2, [r3, #0]
 800e12c:	e7d9      	b.n	800e0e2 <sniprintf+0x16>
 800e12e:	bf00      	nop
 800e130:	20000230 	.word	0x20000230

0800e134 <siprintf>:
 800e134:	b40e      	push	{r1, r2, r3}
 800e136:	b500      	push	{lr}
 800e138:	b09c      	sub	sp, #112	@ 0x70
 800e13a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e13c:	9002      	str	r0, [sp, #8]
 800e13e:	9006      	str	r0, [sp, #24]
 800e140:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e144:	4809      	ldr	r0, [pc, #36]	@ (800e16c <siprintf+0x38>)
 800e146:	9107      	str	r1, [sp, #28]
 800e148:	9104      	str	r1, [sp, #16]
 800e14a:	4909      	ldr	r1, [pc, #36]	@ (800e170 <siprintf+0x3c>)
 800e14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e150:	9105      	str	r1, [sp, #20]
 800e152:	6800      	ldr	r0, [r0, #0]
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	a902      	add	r1, sp, #8
 800e158:	f002 f930 	bl	80103bc <_svfiprintf_r>
 800e15c:	9b02      	ldr	r3, [sp, #8]
 800e15e:	2200      	movs	r2, #0
 800e160:	701a      	strb	r2, [r3, #0]
 800e162:	b01c      	add	sp, #112	@ 0x70
 800e164:	f85d eb04 	ldr.w	lr, [sp], #4
 800e168:	b003      	add	sp, #12
 800e16a:	4770      	bx	lr
 800e16c:	20000230 	.word	0x20000230
 800e170:	ffff0208 	.word	0xffff0208

0800e174 <__sread>:
 800e174:	b510      	push	{r4, lr}
 800e176:	460c      	mov	r4, r1
 800e178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e17c:	f000 f87e 	bl	800e27c <_read_r>
 800e180:	2800      	cmp	r0, #0
 800e182:	bfab      	itete	ge
 800e184:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e186:	89a3      	ldrhlt	r3, [r4, #12]
 800e188:	181b      	addge	r3, r3, r0
 800e18a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e18e:	bfac      	ite	ge
 800e190:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e192:	81a3      	strhlt	r3, [r4, #12]
 800e194:	bd10      	pop	{r4, pc}

0800e196 <__swrite>:
 800e196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e19a:	461f      	mov	r7, r3
 800e19c:	898b      	ldrh	r3, [r1, #12]
 800e19e:	05db      	lsls	r3, r3, #23
 800e1a0:	4605      	mov	r5, r0
 800e1a2:	460c      	mov	r4, r1
 800e1a4:	4616      	mov	r6, r2
 800e1a6:	d505      	bpl.n	800e1b4 <__swrite+0x1e>
 800e1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f000 f852 	bl	800e258 <_lseek_r>
 800e1b4:	89a3      	ldrh	r3, [r4, #12]
 800e1b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e1be:	81a3      	strh	r3, [r4, #12]
 800e1c0:	4632      	mov	r2, r6
 800e1c2:	463b      	mov	r3, r7
 800e1c4:	4628      	mov	r0, r5
 800e1c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ca:	f000 b869 	b.w	800e2a0 <_write_r>

0800e1ce <__sseek>:
 800e1ce:	b510      	push	{r4, lr}
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1d6:	f000 f83f 	bl	800e258 <_lseek_r>
 800e1da:	1c43      	adds	r3, r0, #1
 800e1dc:	89a3      	ldrh	r3, [r4, #12]
 800e1de:	bf15      	itete	ne
 800e1e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e1e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e1e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e1ea:	81a3      	strheq	r3, [r4, #12]
 800e1ec:	bf18      	it	ne
 800e1ee:	81a3      	strhne	r3, [r4, #12]
 800e1f0:	bd10      	pop	{r4, pc}

0800e1f2 <__sclose>:
 800e1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1f6:	f000 b81f 	b.w	800e238 <_close_r>

0800e1fa <memset>:
 800e1fa:	4402      	add	r2, r0
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d100      	bne.n	800e204 <memset+0xa>
 800e202:	4770      	bx	lr
 800e204:	f803 1b01 	strb.w	r1, [r3], #1
 800e208:	e7f9      	b.n	800e1fe <memset+0x4>

0800e20a <strncmp>:
 800e20a:	b510      	push	{r4, lr}
 800e20c:	b16a      	cbz	r2, 800e22a <strncmp+0x20>
 800e20e:	3901      	subs	r1, #1
 800e210:	1884      	adds	r4, r0, r2
 800e212:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e216:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d103      	bne.n	800e226 <strncmp+0x1c>
 800e21e:	42a0      	cmp	r0, r4
 800e220:	d001      	beq.n	800e226 <strncmp+0x1c>
 800e222:	2a00      	cmp	r2, #0
 800e224:	d1f5      	bne.n	800e212 <strncmp+0x8>
 800e226:	1ad0      	subs	r0, r2, r3
 800e228:	bd10      	pop	{r4, pc}
 800e22a:	4610      	mov	r0, r2
 800e22c:	e7fc      	b.n	800e228 <strncmp+0x1e>
	...

0800e230 <_localeconv_r>:
 800e230:	4800      	ldr	r0, [pc, #0]	@ (800e234 <_localeconv_r+0x4>)
 800e232:	4770      	bx	lr
 800e234:	200001b4 	.word	0x200001b4

0800e238 <_close_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d06      	ldr	r5, [pc, #24]	@ (800e254 <_close_r+0x1c>)
 800e23c:	2300      	movs	r3, #0
 800e23e:	4604      	mov	r4, r0
 800e240:	4608      	mov	r0, r1
 800e242:	602b      	str	r3, [r5, #0]
 800e244:	f7f5 fec2 	bl	8003fcc <_close>
 800e248:	1c43      	adds	r3, r0, #1
 800e24a:	d102      	bne.n	800e252 <_close_r+0x1a>
 800e24c:	682b      	ldr	r3, [r5, #0]
 800e24e:	b103      	cbz	r3, 800e252 <_close_r+0x1a>
 800e250:	6023      	str	r3, [r4, #0]
 800e252:	bd38      	pop	{r3, r4, r5, pc}
 800e254:	200029d8 	.word	0x200029d8

0800e258 <_lseek_r>:
 800e258:	b538      	push	{r3, r4, r5, lr}
 800e25a:	4d07      	ldr	r5, [pc, #28]	@ (800e278 <_lseek_r+0x20>)
 800e25c:	4604      	mov	r4, r0
 800e25e:	4608      	mov	r0, r1
 800e260:	4611      	mov	r1, r2
 800e262:	2200      	movs	r2, #0
 800e264:	602a      	str	r2, [r5, #0]
 800e266:	461a      	mov	r2, r3
 800e268:	f7f5 fed7 	bl	800401a <_lseek>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_lseek_r+0x1e>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_lseek_r+0x1e>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	200029d8 	.word	0x200029d8

0800e27c <_read_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4d07      	ldr	r5, [pc, #28]	@ (800e29c <_read_r+0x20>)
 800e280:	4604      	mov	r4, r0
 800e282:	4608      	mov	r0, r1
 800e284:	4611      	mov	r1, r2
 800e286:	2200      	movs	r2, #0
 800e288:	602a      	str	r2, [r5, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	f7f5 fe81 	bl	8003f92 <_read>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d102      	bne.n	800e29a <_read_r+0x1e>
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	b103      	cbz	r3, 800e29a <_read_r+0x1e>
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	200029d8 	.word	0x200029d8

0800e2a0 <_write_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	4d07      	ldr	r5, [pc, #28]	@ (800e2c0 <_write_r+0x20>)
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	4608      	mov	r0, r1
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	602a      	str	r2, [r5, #0]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	f7f5 f890 	bl	80033d4 <_write>
 800e2b4:	1c43      	adds	r3, r0, #1
 800e2b6:	d102      	bne.n	800e2be <_write_r+0x1e>
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	b103      	cbz	r3, 800e2be <_write_r+0x1e>
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	200029d8 	.word	0x200029d8

0800e2c4 <__errno>:
 800e2c4:	4b01      	ldr	r3, [pc, #4]	@ (800e2cc <__errno+0x8>)
 800e2c6:	6818      	ldr	r0, [r3, #0]
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	20000230 	.word	0x20000230

0800e2d0 <__libc_init_array>:
 800e2d0:	b570      	push	{r4, r5, r6, lr}
 800e2d2:	4d0d      	ldr	r5, [pc, #52]	@ (800e308 <__libc_init_array+0x38>)
 800e2d4:	4c0d      	ldr	r4, [pc, #52]	@ (800e30c <__libc_init_array+0x3c>)
 800e2d6:	1b64      	subs	r4, r4, r5
 800e2d8:	10a4      	asrs	r4, r4, #2
 800e2da:	2600      	movs	r6, #0
 800e2dc:	42a6      	cmp	r6, r4
 800e2de:	d109      	bne.n	800e2f4 <__libc_init_array+0x24>
 800e2e0:	4d0b      	ldr	r5, [pc, #44]	@ (800e310 <__libc_init_array+0x40>)
 800e2e2:	4c0c      	ldr	r4, [pc, #48]	@ (800e314 <__libc_init_array+0x44>)
 800e2e4:	f002 fdb2 	bl	8010e4c <_init>
 800e2e8:	1b64      	subs	r4, r4, r5
 800e2ea:	10a4      	asrs	r4, r4, #2
 800e2ec:	2600      	movs	r6, #0
 800e2ee:	42a6      	cmp	r6, r4
 800e2f0:	d105      	bne.n	800e2fe <__libc_init_array+0x2e>
 800e2f2:	bd70      	pop	{r4, r5, r6, pc}
 800e2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2f8:	4798      	blx	r3
 800e2fa:	3601      	adds	r6, #1
 800e2fc:	e7ee      	b.n	800e2dc <__libc_init_array+0xc>
 800e2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e302:	4798      	blx	r3
 800e304:	3601      	adds	r6, #1
 800e306:	e7f2      	b.n	800e2ee <__libc_init_array+0x1e>
 800e308:	080118d8 	.word	0x080118d8
 800e30c:	080118d8 	.word	0x080118d8
 800e310:	080118d8 	.word	0x080118d8
 800e314:	080118dc 	.word	0x080118dc

0800e318 <__retarget_lock_init_recursive>:
 800e318:	4770      	bx	lr

0800e31a <__retarget_lock_acquire_recursive>:
 800e31a:	4770      	bx	lr

0800e31c <__retarget_lock_release_recursive>:
 800e31c:	4770      	bx	lr

0800e31e <memcpy>:
 800e31e:	440a      	add	r2, r1
 800e320:	4291      	cmp	r1, r2
 800e322:	f100 33ff 	add.w	r3, r0, #4294967295
 800e326:	d100      	bne.n	800e32a <memcpy+0xc>
 800e328:	4770      	bx	lr
 800e32a:	b510      	push	{r4, lr}
 800e32c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e330:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e334:	4291      	cmp	r1, r2
 800e336:	d1f9      	bne.n	800e32c <memcpy+0xe>
 800e338:	bd10      	pop	{r4, pc}
 800e33a:	0000      	movs	r0, r0
 800e33c:	0000      	movs	r0, r0
	...

0800e340 <nan>:
 800e340:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e348 <nan+0x8>
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop
 800e348:	00000000 	.word	0x00000000
 800e34c:	7ff80000 	.word	0x7ff80000

0800e350 <nanf>:
 800e350:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e358 <nanf+0x8>
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	7fc00000 	.word	0x7fc00000

0800e35c <quorem>:
 800e35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e360:	6903      	ldr	r3, [r0, #16]
 800e362:	690c      	ldr	r4, [r1, #16]
 800e364:	42a3      	cmp	r3, r4
 800e366:	4607      	mov	r7, r0
 800e368:	db7e      	blt.n	800e468 <quorem+0x10c>
 800e36a:	3c01      	subs	r4, #1
 800e36c:	f101 0814 	add.w	r8, r1, #20
 800e370:	00a3      	lsls	r3, r4, #2
 800e372:	f100 0514 	add.w	r5, r0, #20
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e37c:	9301      	str	r3, [sp, #4]
 800e37e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e386:	3301      	adds	r3, #1
 800e388:	429a      	cmp	r2, r3
 800e38a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e38e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e392:	d32e      	bcc.n	800e3f2 <quorem+0x96>
 800e394:	f04f 0a00 	mov.w	sl, #0
 800e398:	46c4      	mov	ip, r8
 800e39a:	46ae      	mov	lr, r5
 800e39c:	46d3      	mov	fp, sl
 800e39e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e3a2:	b298      	uxth	r0, r3
 800e3a4:	fb06 a000 	mla	r0, r6, r0, sl
 800e3a8:	0c02      	lsrs	r2, r0, #16
 800e3aa:	0c1b      	lsrs	r3, r3, #16
 800e3ac:	fb06 2303 	mla	r3, r6, r3, r2
 800e3b0:	f8de 2000 	ldr.w	r2, [lr]
 800e3b4:	b280      	uxth	r0, r0
 800e3b6:	b292      	uxth	r2, r2
 800e3b8:	1a12      	subs	r2, r2, r0
 800e3ba:	445a      	add	r2, fp
 800e3bc:	f8de 0000 	ldr.w	r0, [lr]
 800e3c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e3ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e3ce:	b292      	uxth	r2, r2
 800e3d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e3d4:	45e1      	cmp	r9, ip
 800e3d6:	f84e 2b04 	str.w	r2, [lr], #4
 800e3da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e3de:	d2de      	bcs.n	800e39e <quorem+0x42>
 800e3e0:	9b00      	ldr	r3, [sp, #0]
 800e3e2:	58eb      	ldr	r3, [r5, r3]
 800e3e4:	b92b      	cbnz	r3, 800e3f2 <quorem+0x96>
 800e3e6:	9b01      	ldr	r3, [sp, #4]
 800e3e8:	3b04      	subs	r3, #4
 800e3ea:	429d      	cmp	r5, r3
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	d32f      	bcc.n	800e450 <quorem+0xf4>
 800e3f0:	613c      	str	r4, [r7, #16]
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	f001 fd10 	bl	800fe18 <__mcmp>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	db25      	blt.n	800e448 <quorem+0xec>
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	2000      	movs	r0, #0
 800e400:	f858 2b04 	ldr.w	r2, [r8], #4
 800e404:	f8d1 c000 	ldr.w	ip, [r1]
 800e408:	fa1f fe82 	uxth.w	lr, r2
 800e40c:	fa1f f38c 	uxth.w	r3, ip
 800e410:	eba3 030e 	sub.w	r3, r3, lr
 800e414:	4403      	add	r3, r0
 800e416:	0c12      	lsrs	r2, r2, #16
 800e418:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e41c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e420:	b29b      	uxth	r3, r3
 800e422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e426:	45c1      	cmp	r9, r8
 800e428:	f841 3b04 	str.w	r3, [r1], #4
 800e42c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e430:	d2e6      	bcs.n	800e400 <quorem+0xa4>
 800e432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e43a:	b922      	cbnz	r2, 800e446 <quorem+0xea>
 800e43c:	3b04      	subs	r3, #4
 800e43e:	429d      	cmp	r5, r3
 800e440:	461a      	mov	r2, r3
 800e442:	d30b      	bcc.n	800e45c <quorem+0x100>
 800e444:	613c      	str	r4, [r7, #16]
 800e446:	3601      	adds	r6, #1
 800e448:	4630      	mov	r0, r6
 800e44a:	b003      	add	sp, #12
 800e44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e450:	6812      	ldr	r2, [r2, #0]
 800e452:	3b04      	subs	r3, #4
 800e454:	2a00      	cmp	r2, #0
 800e456:	d1cb      	bne.n	800e3f0 <quorem+0x94>
 800e458:	3c01      	subs	r4, #1
 800e45a:	e7c6      	b.n	800e3ea <quorem+0x8e>
 800e45c:	6812      	ldr	r2, [r2, #0]
 800e45e:	3b04      	subs	r3, #4
 800e460:	2a00      	cmp	r2, #0
 800e462:	d1ef      	bne.n	800e444 <quorem+0xe8>
 800e464:	3c01      	subs	r4, #1
 800e466:	e7ea      	b.n	800e43e <quorem+0xe2>
 800e468:	2000      	movs	r0, #0
 800e46a:	e7ee      	b.n	800e44a <quorem+0xee>
 800e46c:	0000      	movs	r0, r0
	...

0800e470 <_dtoa_r>:
 800e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	69c7      	ldr	r7, [r0, #28]
 800e476:	b099      	sub	sp, #100	@ 0x64
 800e478:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e47c:	ec55 4b10 	vmov	r4, r5, d0
 800e480:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e482:	9109      	str	r1, [sp, #36]	@ 0x24
 800e484:	4683      	mov	fp, r0
 800e486:	920e      	str	r2, [sp, #56]	@ 0x38
 800e488:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e48a:	b97f      	cbnz	r7, 800e4ac <_dtoa_r+0x3c>
 800e48c:	2010      	movs	r0, #16
 800e48e:	f001 f937 	bl	800f700 <malloc>
 800e492:	4602      	mov	r2, r0
 800e494:	f8cb 001c 	str.w	r0, [fp, #28]
 800e498:	b920      	cbnz	r0, 800e4a4 <_dtoa_r+0x34>
 800e49a:	4ba7      	ldr	r3, [pc, #668]	@ (800e738 <_dtoa_r+0x2c8>)
 800e49c:	21ef      	movs	r1, #239	@ 0xef
 800e49e:	48a7      	ldr	r0, [pc, #668]	@ (800e73c <_dtoa_r+0x2cc>)
 800e4a0:	f002 fb34 	bl	8010b0c <__assert_func>
 800e4a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e4a8:	6007      	str	r7, [r0, #0]
 800e4aa:	60c7      	str	r7, [r0, #12]
 800e4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4b0:	6819      	ldr	r1, [r3, #0]
 800e4b2:	b159      	cbz	r1, 800e4cc <_dtoa_r+0x5c>
 800e4b4:	685a      	ldr	r2, [r3, #4]
 800e4b6:	604a      	str	r2, [r1, #4]
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	4093      	lsls	r3, r2
 800e4bc:	608b      	str	r3, [r1, #8]
 800e4be:	4658      	mov	r0, fp
 800e4c0:	f001 fa26 	bl	800f910 <_Bfree>
 800e4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	601a      	str	r2, [r3, #0]
 800e4cc:	1e2b      	subs	r3, r5, #0
 800e4ce:	bfb9      	ittee	lt
 800e4d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e4d4:	9303      	strlt	r3, [sp, #12]
 800e4d6:	2300      	movge	r3, #0
 800e4d8:	6033      	strge	r3, [r6, #0]
 800e4da:	9f03      	ldr	r7, [sp, #12]
 800e4dc:	4b98      	ldr	r3, [pc, #608]	@ (800e740 <_dtoa_r+0x2d0>)
 800e4de:	bfbc      	itt	lt
 800e4e0:	2201      	movlt	r2, #1
 800e4e2:	6032      	strlt	r2, [r6, #0]
 800e4e4:	43bb      	bics	r3, r7
 800e4e6:	d112      	bne.n	800e50e <_dtoa_r+0x9e>
 800e4e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e4ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e4ee:	6013      	str	r3, [r2, #0]
 800e4f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e4f4:	4323      	orrs	r3, r4
 800e4f6:	f000 854d 	beq.w	800ef94 <_dtoa_r+0xb24>
 800e4fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e754 <_dtoa_r+0x2e4>
 800e500:	2b00      	cmp	r3, #0
 800e502:	f000 854f 	beq.w	800efa4 <_dtoa_r+0xb34>
 800e506:	f10a 0303 	add.w	r3, sl, #3
 800e50a:	f000 bd49 	b.w	800efa0 <_dtoa_r+0xb30>
 800e50e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e512:	2200      	movs	r2, #0
 800e514:	ec51 0b17 	vmov	r0, r1, d7
 800e518:	2300      	movs	r3, #0
 800e51a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e51e:	f7f2 faf3 	bl	8000b08 <__aeabi_dcmpeq>
 800e522:	4680      	mov	r8, r0
 800e524:	b158      	cbz	r0, 800e53e <_dtoa_r+0xce>
 800e526:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e528:	2301      	movs	r3, #1
 800e52a:	6013      	str	r3, [r2, #0]
 800e52c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e52e:	b113      	cbz	r3, 800e536 <_dtoa_r+0xc6>
 800e530:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e532:	4b84      	ldr	r3, [pc, #528]	@ (800e744 <_dtoa_r+0x2d4>)
 800e534:	6013      	str	r3, [r2, #0]
 800e536:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e758 <_dtoa_r+0x2e8>
 800e53a:	f000 bd33 	b.w	800efa4 <_dtoa_r+0xb34>
 800e53e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e542:	aa16      	add	r2, sp, #88	@ 0x58
 800e544:	a917      	add	r1, sp, #92	@ 0x5c
 800e546:	4658      	mov	r0, fp
 800e548:	f001 fd86 	bl	8010058 <__d2b>
 800e54c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e550:	4681      	mov	r9, r0
 800e552:	2e00      	cmp	r6, #0
 800e554:	d077      	beq.n	800e646 <_dtoa_r+0x1d6>
 800e556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e558:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e55c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e564:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e568:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e56c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e570:	4619      	mov	r1, r3
 800e572:	2200      	movs	r2, #0
 800e574:	4b74      	ldr	r3, [pc, #464]	@ (800e748 <_dtoa_r+0x2d8>)
 800e576:	f7f1 fea7 	bl	80002c8 <__aeabi_dsub>
 800e57a:	a369      	add	r3, pc, #420	@ (adr r3, 800e720 <_dtoa_r+0x2b0>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	f7f2 f85a 	bl	8000638 <__aeabi_dmul>
 800e584:	a368      	add	r3, pc, #416	@ (adr r3, 800e728 <_dtoa_r+0x2b8>)
 800e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58a:	f7f1 fe9f 	bl	80002cc <__adddf3>
 800e58e:	4604      	mov	r4, r0
 800e590:	4630      	mov	r0, r6
 800e592:	460d      	mov	r5, r1
 800e594:	f7f1 ffe6 	bl	8000564 <__aeabi_i2d>
 800e598:	a365      	add	r3, pc, #404	@ (adr r3, 800e730 <_dtoa_r+0x2c0>)
 800e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59e:	f7f2 f84b 	bl	8000638 <__aeabi_dmul>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	f7f1 fe8f 	bl	80002cc <__adddf3>
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	460d      	mov	r5, r1
 800e5b2:	f7f2 faf1 	bl	8000b98 <__aeabi_d2iz>
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	4607      	mov	r7, r0
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	4620      	mov	r0, r4
 800e5be:	4629      	mov	r1, r5
 800e5c0:	f7f2 faac 	bl	8000b1c <__aeabi_dcmplt>
 800e5c4:	b140      	cbz	r0, 800e5d8 <_dtoa_r+0x168>
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f7f1 ffcc 	bl	8000564 <__aeabi_i2d>
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	462b      	mov	r3, r5
 800e5d0:	f7f2 fa9a 	bl	8000b08 <__aeabi_dcmpeq>
 800e5d4:	b900      	cbnz	r0, 800e5d8 <_dtoa_r+0x168>
 800e5d6:	3f01      	subs	r7, #1
 800e5d8:	2f16      	cmp	r7, #22
 800e5da:	d851      	bhi.n	800e680 <_dtoa_r+0x210>
 800e5dc:	4b5b      	ldr	r3, [pc, #364]	@ (800e74c <_dtoa_r+0x2dc>)
 800e5de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e5ea:	f7f2 fa97 	bl	8000b1c <__aeabi_dcmplt>
 800e5ee:	2800      	cmp	r0, #0
 800e5f0:	d048      	beq.n	800e684 <_dtoa_r+0x214>
 800e5f2:	3f01      	subs	r7, #1
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e5f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5fa:	1b9b      	subs	r3, r3, r6
 800e5fc:	1e5a      	subs	r2, r3, #1
 800e5fe:	bf44      	itt	mi
 800e600:	f1c3 0801 	rsbmi	r8, r3, #1
 800e604:	2300      	movmi	r3, #0
 800e606:	9208      	str	r2, [sp, #32]
 800e608:	bf54      	ite	pl
 800e60a:	f04f 0800 	movpl.w	r8, #0
 800e60e:	9308      	strmi	r3, [sp, #32]
 800e610:	2f00      	cmp	r7, #0
 800e612:	db39      	blt.n	800e688 <_dtoa_r+0x218>
 800e614:	9b08      	ldr	r3, [sp, #32]
 800e616:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e618:	443b      	add	r3, r7
 800e61a:	9308      	str	r3, [sp, #32]
 800e61c:	2300      	movs	r3, #0
 800e61e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e622:	2b09      	cmp	r3, #9
 800e624:	d864      	bhi.n	800e6f0 <_dtoa_r+0x280>
 800e626:	2b05      	cmp	r3, #5
 800e628:	bfc4      	itt	gt
 800e62a:	3b04      	subgt	r3, #4
 800e62c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e630:	f1a3 0302 	sub.w	r3, r3, #2
 800e634:	bfcc      	ite	gt
 800e636:	2400      	movgt	r4, #0
 800e638:	2401      	movle	r4, #1
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d863      	bhi.n	800e706 <_dtoa_r+0x296>
 800e63e:	e8df f003 	tbb	[pc, r3]
 800e642:	372a      	.short	0x372a
 800e644:	5535      	.short	0x5535
 800e646:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e64a:	441e      	add	r6, r3
 800e64c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e650:	2b20      	cmp	r3, #32
 800e652:	bfc1      	itttt	gt
 800e654:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e658:	409f      	lslgt	r7, r3
 800e65a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e65e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e662:	bfd6      	itet	le
 800e664:	f1c3 0320 	rsble	r3, r3, #32
 800e668:	ea47 0003 	orrgt.w	r0, r7, r3
 800e66c:	fa04 f003 	lslle.w	r0, r4, r3
 800e670:	f7f1 ff68 	bl	8000544 <__aeabi_ui2d>
 800e674:	2201      	movs	r2, #1
 800e676:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e67a:	3e01      	subs	r6, #1
 800e67c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e67e:	e777      	b.n	800e570 <_dtoa_r+0x100>
 800e680:	2301      	movs	r3, #1
 800e682:	e7b8      	b.n	800e5f6 <_dtoa_r+0x186>
 800e684:	9012      	str	r0, [sp, #72]	@ 0x48
 800e686:	e7b7      	b.n	800e5f8 <_dtoa_r+0x188>
 800e688:	427b      	negs	r3, r7
 800e68a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e68c:	2300      	movs	r3, #0
 800e68e:	eba8 0807 	sub.w	r8, r8, r7
 800e692:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e694:	e7c4      	b.n	800e620 <_dtoa_r+0x1b0>
 800e696:	2300      	movs	r3, #0
 800e698:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e69a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	dc35      	bgt.n	800e70c <_dtoa_r+0x29c>
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	9307      	str	r3, [sp, #28]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6aa:	e00b      	b.n	800e6c4 <_dtoa_r+0x254>
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	e7f3      	b.n	800e698 <_dtoa_r+0x228>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e6b6:	18fb      	adds	r3, r7, r3
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	9307      	str	r3, [sp, #28]
 800e6c0:	bfb8      	it	lt
 800e6c2:	2301      	movlt	r3, #1
 800e6c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e6c8:	2100      	movs	r1, #0
 800e6ca:	2204      	movs	r2, #4
 800e6cc:	f102 0514 	add.w	r5, r2, #20
 800e6d0:	429d      	cmp	r5, r3
 800e6d2:	d91f      	bls.n	800e714 <_dtoa_r+0x2a4>
 800e6d4:	6041      	str	r1, [r0, #4]
 800e6d6:	4658      	mov	r0, fp
 800e6d8:	f001 f8da 	bl	800f890 <_Balloc>
 800e6dc:	4682      	mov	sl, r0
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d13c      	bne.n	800e75c <_dtoa_r+0x2ec>
 800e6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e750 <_dtoa_r+0x2e0>)
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e6ea:	e6d8      	b.n	800e49e <_dtoa_r+0x2e>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e7e0      	b.n	800e6b2 <_dtoa_r+0x242>
 800e6f0:	2401      	movs	r4, #1
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	9307      	str	r3, [sp, #28]
 800e700:	2200      	movs	r2, #0
 800e702:	2312      	movs	r3, #18
 800e704:	e7d0      	b.n	800e6a8 <_dtoa_r+0x238>
 800e706:	2301      	movs	r3, #1
 800e708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e70a:	e7f5      	b.n	800e6f8 <_dtoa_r+0x288>
 800e70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e70e:	9300      	str	r3, [sp, #0]
 800e710:	9307      	str	r3, [sp, #28]
 800e712:	e7d7      	b.n	800e6c4 <_dtoa_r+0x254>
 800e714:	3101      	adds	r1, #1
 800e716:	0052      	lsls	r2, r2, #1
 800e718:	e7d8      	b.n	800e6cc <_dtoa_r+0x25c>
 800e71a:	bf00      	nop
 800e71c:	f3af 8000 	nop.w
 800e720:	636f4361 	.word	0x636f4361
 800e724:	3fd287a7 	.word	0x3fd287a7
 800e728:	8b60c8b3 	.word	0x8b60c8b3
 800e72c:	3fc68a28 	.word	0x3fc68a28
 800e730:	509f79fb 	.word	0x509f79fb
 800e734:	3fd34413 	.word	0x3fd34413
 800e738:	08011546 	.word	0x08011546
 800e73c:	0801155d 	.word	0x0801155d
 800e740:	7ff00000 	.word	0x7ff00000
 800e744:	08011509 	.word	0x08011509
 800e748:	3ff80000 	.word	0x3ff80000
 800e74c:	080116b8 	.word	0x080116b8
 800e750:	080115b5 	.word	0x080115b5
 800e754:	08011542 	.word	0x08011542
 800e758:	08011508 	.word	0x08011508
 800e75c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e760:	6018      	str	r0, [r3, #0]
 800e762:	9b07      	ldr	r3, [sp, #28]
 800e764:	2b0e      	cmp	r3, #14
 800e766:	f200 80a4 	bhi.w	800e8b2 <_dtoa_r+0x442>
 800e76a:	2c00      	cmp	r4, #0
 800e76c:	f000 80a1 	beq.w	800e8b2 <_dtoa_r+0x442>
 800e770:	2f00      	cmp	r7, #0
 800e772:	dd33      	ble.n	800e7dc <_dtoa_r+0x36c>
 800e774:	4bad      	ldr	r3, [pc, #692]	@ (800ea2c <_dtoa_r+0x5bc>)
 800e776:	f007 020f 	and.w	r2, r7, #15
 800e77a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e77e:	ed93 7b00 	vldr	d7, [r3]
 800e782:	05f8      	lsls	r0, r7, #23
 800e784:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e788:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e78c:	d516      	bpl.n	800e7bc <_dtoa_r+0x34c>
 800e78e:	4ba8      	ldr	r3, [pc, #672]	@ (800ea30 <_dtoa_r+0x5c0>)
 800e790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e798:	f7f2 f878 	bl	800088c <__aeabi_ddiv>
 800e79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7a0:	f004 040f 	and.w	r4, r4, #15
 800e7a4:	2603      	movs	r6, #3
 800e7a6:	4da2      	ldr	r5, [pc, #648]	@ (800ea30 <_dtoa_r+0x5c0>)
 800e7a8:	b954      	cbnz	r4, 800e7c0 <_dtoa_r+0x350>
 800e7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7b2:	f7f2 f86b 	bl	800088c <__aeabi_ddiv>
 800e7b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7ba:	e028      	b.n	800e80e <_dtoa_r+0x39e>
 800e7bc:	2602      	movs	r6, #2
 800e7be:	e7f2      	b.n	800e7a6 <_dtoa_r+0x336>
 800e7c0:	07e1      	lsls	r1, r4, #31
 800e7c2:	d508      	bpl.n	800e7d6 <_dtoa_r+0x366>
 800e7c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7cc:	f7f1 ff34 	bl	8000638 <__aeabi_dmul>
 800e7d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7d4:	3601      	adds	r6, #1
 800e7d6:	1064      	asrs	r4, r4, #1
 800e7d8:	3508      	adds	r5, #8
 800e7da:	e7e5      	b.n	800e7a8 <_dtoa_r+0x338>
 800e7dc:	f000 80d2 	beq.w	800e984 <_dtoa_r+0x514>
 800e7e0:	427c      	negs	r4, r7
 800e7e2:	4b92      	ldr	r3, [pc, #584]	@ (800ea2c <_dtoa_r+0x5bc>)
 800e7e4:	4d92      	ldr	r5, [pc, #584]	@ (800ea30 <_dtoa_r+0x5c0>)
 800e7e6:	f004 020f 	and.w	r2, r4, #15
 800e7ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e7f6:	f7f1 ff1f 	bl	8000638 <__aeabi_dmul>
 800e7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7fe:	1124      	asrs	r4, r4, #4
 800e800:	2300      	movs	r3, #0
 800e802:	2602      	movs	r6, #2
 800e804:	2c00      	cmp	r4, #0
 800e806:	f040 80b2 	bne.w	800e96e <_dtoa_r+0x4fe>
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1d3      	bne.n	800e7b6 <_dtoa_r+0x346>
 800e80e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 80b7 	beq.w	800e988 <_dtoa_r+0x518>
 800e81a:	4b86      	ldr	r3, [pc, #536]	@ (800ea34 <_dtoa_r+0x5c4>)
 800e81c:	2200      	movs	r2, #0
 800e81e:	4620      	mov	r0, r4
 800e820:	4629      	mov	r1, r5
 800e822:	f7f2 f97b 	bl	8000b1c <__aeabi_dcmplt>
 800e826:	2800      	cmp	r0, #0
 800e828:	f000 80ae 	beq.w	800e988 <_dtoa_r+0x518>
 800e82c:	9b07      	ldr	r3, [sp, #28]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f000 80aa 	beq.w	800e988 <_dtoa_r+0x518>
 800e834:	9b00      	ldr	r3, [sp, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	dd37      	ble.n	800e8aa <_dtoa_r+0x43a>
 800e83a:	1e7b      	subs	r3, r7, #1
 800e83c:	9304      	str	r3, [sp, #16]
 800e83e:	4620      	mov	r0, r4
 800e840:	4b7d      	ldr	r3, [pc, #500]	@ (800ea38 <_dtoa_r+0x5c8>)
 800e842:	2200      	movs	r2, #0
 800e844:	4629      	mov	r1, r5
 800e846:	f7f1 fef7 	bl	8000638 <__aeabi_dmul>
 800e84a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e84e:	9c00      	ldr	r4, [sp, #0]
 800e850:	3601      	adds	r6, #1
 800e852:	4630      	mov	r0, r6
 800e854:	f7f1 fe86 	bl	8000564 <__aeabi_i2d>
 800e858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e85c:	f7f1 feec 	bl	8000638 <__aeabi_dmul>
 800e860:	4b76      	ldr	r3, [pc, #472]	@ (800ea3c <_dtoa_r+0x5cc>)
 800e862:	2200      	movs	r2, #0
 800e864:	f7f1 fd32 	bl	80002cc <__adddf3>
 800e868:	4605      	mov	r5, r0
 800e86a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e86e:	2c00      	cmp	r4, #0
 800e870:	f040 808d 	bne.w	800e98e <_dtoa_r+0x51e>
 800e874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e878:	4b71      	ldr	r3, [pc, #452]	@ (800ea40 <_dtoa_r+0x5d0>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	f7f1 fd24 	bl	80002c8 <__aeabi_dsub>
 800e880:	4602      	mov	r2, r0
 800e882:	460b      	mov	r3, r1
 800e884:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e888:	462a      	mov	r2, r5
 800e88a:	4633      	mov	r3, r6
 800e88c:	f7f2 f964 	bl	8000b58 <__aeabi_dcmpgt>
 800e890:	2800      	cmp	r0, #0
 800e892:	f040 828b 	bne.w	800edac <_dtoa_r+0x93c>
 800e896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e89a:	462a      	mov	r2, r5
 800e89c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e8a0:	f7f2 f93c 	bl	8000b1c <__aeabi_dcmplt>
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	f040 8128 	bne.w	800eafa <_dtoa_r+0x68a>
 800e8aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e8ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e8b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f2c0 815a 	blt.w	800eb6e <_dtoa_r+0x6fe>
 800e8ba:	2f0e      	cmp	r7, #14
 800e8bc:	f300 8157 	bgt.w	800eb6e <_dtoa_r+0x6fe>
 800e8c0:	4b5a      	ldr	r3, [pc, #360]	@ (800ea2c <_dtoa_r+0x5bc>)
 800e8c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e8c6:	ed93 7b00 	vldr	d7, [r3]
 800e8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	ed8d 7b00 	vstr	d7, [sp]
 800e8d2:	da03      	bge.n	800e8dc <_dtoa_r+0x46c>
 800e8d4:	9b07      	ldr	r3, [sp, #28]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	f340 8101 	ble.w	800eade <_dtoa_r+0x66e>
 800e8dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e8e0:	4656      	mov	r6, sl
 800e8e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7f1 ffcf 	bl	800088c <__aeabi_ddiv>
 800e8ee:	f7f2 f953 	bl	8000b98 <__aeabi_d2iz>
 800e8f2:	4680      	mov	r8, r0
 800e8f4:	f7f1 fe36 	bl	8000564 <__aeabi_i2d>
 800e8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8fc:	f7f1 fe9c 	bl	8000638 <__aeabi_dmul>
 800e900:	4602      	mov	r2, r0
 800e902:	460b      	mov	r3, r1
 800e904:	4620      	mov	r0, r4
 800e906:	4629      	mov	r1, r5
 800e908:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e90c:	f7f1 fcdc 	bl	80002c8 <__aeabi_dsub>
 800e910:	f806 4b01 	strb.w	r4, [r6], #1
 800e914:	9d07      	ldr	r5, [sp, #28]
 800e916:	eba6 040a 	sub.w	r4, r6, sl
 800e91a:	42a5      	cmp	r5, r4
 800e91c:	4602      	mov	r2, r0
 800e91e:	460b      	mov	r3, r1
 800e920:	f040 8117 	bne.w	800eb52 <_dtoa_r+0x6e2>
 800e924:	f7f1 fcd2 	bl	80002cc <__adddf3>
 800e928:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e92c:	4604      	mov	r4, r0
 800e92e:	460d      	mov	r5, r1
 800e930:	f7f2 f912 	bl	8000b58 <__aeabi_dcmpgt>
 800e934:	2800      	cmp	r0, #0
 800e936:	f040 80f9 	bne.w	800eb2c <_dtoa_r+0x6bc>
 800e93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e93e:	4620      	mov	r0, r4
 800e940:	4629      	mov	r1, r5
 800e942:	f7f2 f8e1 	bl	8000b08 <__aeabi_dcmpeq>
 800e946:	b118      	cbz	r0, 800e950 <_dtoa_r+0x4e0>
 800e948:	f018 0f01 	tst.w	r8, #1
 800e94c:	f040 80ee 	bne.w	800eb2c <_dtoa_r+0x6bc>
 800e950:	4649      	mov	r1, r9
 800e952:	4658      	mov	r0, fp
 800e954:	f000 ffdc 	bl	800f910 <_Bfree>
 800e958:	2300      	movs	r3, #0
 800e95a:	7033      	strb	r3, [r6, #0]
 800e95c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e95e:	3701      	adds	r7, #1
 800e960:	601f      	str	r7, [r3, #0]
 800e962:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e964:	2b00      	cmp	r3, #0
 800e966:	f000 831d 	beq.w	800efa4 <_dtoa_r+0xb34>
 800e96a:	601e      	str	r6, [r3, #0]
 800e96c:	e31a      	b.n	800efa4 <_dtoa_r+0xb34>
 800e96e:	07e2      	lsls	r2, r4, #31
 800e970:	d505      	bpl.n	800e97e <_dtoa_r+0x50e>
 800e972:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e976:	f7f1 fe5f 	bl	8000638 <__aeabi_dmul>
 800e97a:	3601      	adds	r6, #1
 800e97c:	2301      	movs	r3, #1
 800e97e:	1064      	asrs	r4, r4, #1
 800e980:	3508      	adds	r5, #8
 800e982:	e73f      	b.n	800e804 <_dtoa_r+0x394>
 800e984:	2602      	movs	r6, #2
 800e986:	e742      	b.n	800e80e <_dtoa_r+0x39e>
 800e988:	9c07      	ldr	r4, [sp, #28]
 800e98a:	9704      	str	r7, [sp, #16]
 800e98c:	e761      	b.n	800e852 <_dtoa_r+0x3e2>
 800e98e:	4b27      	ldr	r3, [pc, #156]	@ (800ea2c <_dtoa_r+0x5bc>)
 800e990:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e992:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e996:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e99a:	4454      	add	r4, sl
 800e99c:	2900      	cmp	r1, #0
 800e99e:	d053      	beq.n	800ea48 <_dtoa_r+0x5d8>
 800e9a0:	4928      	ldr	r1, [pc, #160]	@ (800ea44 <_dtoa_r+0x5d4>)
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	f7f1 ff72 	bl	800088c <__aeabi_ddiv>
 800e9a8:	4633      	mov	r3, r6
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	f7f1 fc8c 	bl	80002c8 <__aeabi_dsub>
 800e9b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e9b4:	4656      	mov	r6, sl
 800e9b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9ba:	f7f2 f8ed 	bl	8000b98 <__aeabi_d2iz>
 800e9be:	4605      	mov	r5, r0
 800e9c0:	f7f1 fdd0 	bl	8000564 <__aeabi_i2d>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9cc:	f7f1 fc7c 	bl	80002c8 <__aeabi_dsub>
 800e9d0:	3530      	adds	r5, #48	@ 0x30
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9da:	f806 5b01 	strb.w	r5, [r6], #1
 800e9de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e9e2:	f7f2 f89b 	bl	8000b1c <__aeabi_dcmplt>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	d171      	bne.n	800eace <_dtoa_r+0x65e>
 800e9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9ee:	4911      	ldr	r1, [pc, #68]	@ (800ea34 <_dtoa_r+0x5c4>)
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	f7f1 fc69 	bl	80002c8 <__aeabi_dsub>
 800e9f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e9fa:	f7f2 f88f 	bl	8000b1c <__aeabi_dcmplt>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	f040 8095 	bne.w	800eb2e <_dtoa_r+0x6be>
 800ea04:	42a6      	cmp	r6, r4
 800ea06:	f43f af50 	beq.w	800e8aa <_dtoa_r+0x43a>
 800ea0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ea38 <_dtoa_r+0x5c8>)
 800ea10:	2200      	movs	r2, #0
 800ea12:	f7f1 fe11 	bl	8000638 <__aeabi_dmul>
 800ea16:	4b08      	ldr	r3, [pc, #32]	@ (800ea38 <_dtoa_r+0x5c8>)
 800ea18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea22:	f7f1 fe09 	bl	8000638 <__aeabi_dmul>
 800ea26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea2a:	e7c4      	b.n	800e9b6 <_dtoa_r+0x546>
 800ea2c:	080116b8 	.word	0x080116b8
 800ea30:	08011690 	.word	0x08011690
 800ea34:	3ff00000 	.word	0x3ff00000
 800ea38:	40240000 	.word	0x40240000
 800ea3c:	401c0000 	.word	0x401c0000
 800ea40:	40140000 	.word	0x40140000
 800ea44:	3fe00000 	.word	0x3fe00000
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	f7f1 fdf4 	bl	8000638 <__aeabi_dmul>
 800ea50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ea54:	9415      	str	r4, [sp, #84]	@ 0x54
 800ea56:	4656      	mov	r6, sl
 800ea58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea5c:	f7f2 f89c 	bl	8000b98 <__aeabi_d2iz>
 800ea60:	4605      	mov	r5, r0
 800ea62:	f7f1 fd7f 	bl	8000564 <__aeabi_i2d>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea6e:	f7f1 fc2b 	bl	80002c8 <__aeabi_dsub>
 800ea72:	3530      	adds	r5, #48	@ 0x30
 800ea74:	f806 5b01 	strb.w	r5, [r6], #1
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	42a6      	cmp	r6, r4
 800ea7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea82:	f04f 0200 	mov.w	r2, #0
 800ea86:	d124      	bne.n	800ead2 <_dtoa_r+0x662>
 800ea88:	4bac      	ldr	r3, [pc, #688]	@ (800ed3c <_dtoa_r+0x8cc>)
 800ea8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ea8e:	f7f1 fc1d 	bl	80002cc <__adddf3>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea9a:	f7f2 f85d 	bl	8000b58 <__aeabi_dcmpgt>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d145      	bne.n	800eb2e <_dtoa_r+0x6be>
 800eaa2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eaa6:	49a5      	ldr	r1, [pc, #660]	@ (800ed3c <_dtoa_r+0x8cc>)
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	f7f1 fc0d 	bl	80002c8 <__aeabi_dsub>
 800eaae:	4602      	mov	r2, r0
 800eab0:	460b      	mov	r3, r1
 800eab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eab6:	f7f2 f831 	bl	8000b1c <__aeabi_dcmplt>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f43f aef5 	beq.w	800e8aa <_dtoa_r+0x43a>
 800eac0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800eac2:	1e73      	subs	r3, r6, #1
 800eac4:	9315      	str	r3, [sp, #84]	@ 0x54
 800eac6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eaca:	2b30      	cmp	r3, #48	@ 0x30
 800eacc:	d0f8      	beq.n	800eac0 <_dtoa_r+0x650>
 800eace:	9f04      	ldr	r7, [sp, #16]
 800ead0:	e73e      	b.n	800e950 <_dtoa_r+0x4e0>
 800ead2:	4b9b      	ldr	r3, [pc, #620]	@ (800ed40 <_dtoa_r+0x8d0>)
 800ead4:	f7f1 fdb0 	bl	8000638 <__aeabi_dmul>
 800ead8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eadc:	e7bc      	b.n	800ea58 <_dtoa_r+0x5e8>
 800eade:	d10c      	bne.n	800eafa <_dtoa_r+0x68a>
 800eae0:	4b98      	ldr	r3, [pc, #608]	@ (800ed44 <_dtoa_r+0x8d4>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eae8:	f7f1 fda6 	bl	8000638 <__aeabi_dmul>
 800eaec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaf0:	f7f2 f828 	bl	8000b44 <__aeabi_dcmpge>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	f000 8157 	beq.w	800eda8 <_dtoa_r+0x938>
 800eafa:	2400      	movs	r4, #0
 800eafc:	4625      	mov	r5, r4
 800eafe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb00:	43db      	mvns	r3, r3
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	4656      	mov	r6, sl
 800eb06:	2700      	movs	r7, #0
 800eb08:	4621      	mov	r1, r4
 800eb0a:	4658      	mov	r0, fp
 800eb0c:	f000 ff00 	bl	800f910 <_Bfree>
 800eb10:	2d00      	cmp	r5, #0
 800eb12:	d0dc      	beq.n	800eace <_dtoa_r+0x65e>
 800eb14:	b12f      	cbz	r7, 800eb22 <_dtoa_r+0x6b2>
 800eb16:	42af      	cmp	r7, r5
 800eb18:	d003      	beq.n	800eb22 <_dtoa_r+0x6b2>
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	4658      	mov	r0, fp
 800eb1e:	f000 fef7 	bl	800f910 <_Bfree>
 800eb22:	4629      	mov	r1, r5
 800eb24:	4658      	mov	r0, fp
 800eb26:	f000 fef3 	bl	800f910 <_Bfree>
 800eb2a:	e7d0      	b.n	800eace <_dtoa_r+0x65e>
 800eb2c:	9704      	str	r7, [sp, #16]
 800eb2e:	4633      	mov	r3, r6
 800eb30:	461e      	mov	r6, r3
 800eb32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb36:	2a39      	cmp	r2, #57	@ 0x39
 800eb38:	d107      	bne.n	800eb4a <_dtoa_r+0x6da>
 800eb3a:	459a      	cmp	sl, r3
 800eb3c:	d1f8      	bne.n	800eb30 <_dtoa_r+0x6c0>
 800eb3e:	9a04      	ldr	r2, [sp, #16]
 800eb40:	3201      	adds	r2, #1
 800eb42:	9204      	str	r2, [sp, #16]
 800eb44:	2230      	movs	r2, #48	@ 0x30
 800eb46:	f88a 2000 	strb.w	r2, [sl]
 800eb4a:	781a      	ldrb	r2, [r3, #0]
 800eb4c:	3201      	adds	r2, #1
 800eb4e:	701a      	strb	r2, [r3, #0]
 800eb50:	e7bd      	b.n	800eace <_dtoa_r+0x65e>
 800eb52:	4b7b      	ldr	r3, [pc, #492]	@ (800ed40 <_dtoa_r+0x8d0>)
 800eb54:	2200      	movs	r2, #0
 800eb56:	f7f1 fd6f 	bl	8000638 <__aeabi_dmul>
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4604      	mov	r4, r0
 800eb60:	460d      	mov	r5, r1
 800eb62:	f7f1 ffd1 	bl	8000b08 <__aeabi_dcmpeq>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	f43f aebb 	beq.w	800e8e2 <_dtoa_r+0x472>
 800eb6c:	e6f0      	b.n	800e950 <_dtoa_r+0x4e0>
 800eb6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eb70:	2a00      	cmp	r2, #0
 800eb72:	f000 80db 	beq.w	800ed2c <_dtoa_r+0x8bc>
 800eb76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb78:	2a01      	cmp	r2, #1
 800eb7a:	f300 80bf 	bgt.w	800ecfc <_dtoa_r+0x88c>
 800eb7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eb80:	2a00      	cmp	r2, #0
 800eb82:	f000 80b7 	beq.w	800ecf4 <_dtoa_r+0x884>
 800eb86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800eb8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800eb8c:	4646      	mov	r6, r8
 800eb8e:	9a08      	ldr	r2, [sp, #32]
 800eb90:	2101      	movs	r1, #1
 800eb92:	441a      	add	r2, r3
 800eb94:	4658      	mov	r0, fp
 800eb96:	4498      	add	r8, r3
 800eb98:	9208      	str	r2, [sp, #32]
 800eb9a:	f000 ffb7 	bl	800fb0c <__i2b>
 800eb9e:	4605      	mov	r5, r0
 800eba0:	b15e      	cbz	r6, 800ebba <_dtoa_r+0x74a>
 800eba2:	9b08      	ldr	r3, [sp, #32]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	dd08      	ble.n	800ebba <_dtoa_r+0x74a>
 800eba8:	42b3      	cmp	r3, r6
 800ebaa:	9a08      	ldr	r2, [sp, #32]
 800ebac:	bfa8      	it	ge
 800ebae:	4633      	movge	r3, r6
 800ebb0:	eba8 0803 	sub.w	r8, r8, r3
 800ebb4:	1af6      	subs	r6, r6, r3
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	9308      	str	r3, [sp, #32]
 800ebba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebbc:	b1f3      	cbz	r3, 800ebfc <_dtoa_r+0x78c>
 800ebbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f000 80b7 	beq.w	800ed34 <_dtoa_r+0x8c4>
 800ebc6:	b18c      	cbz	r4, 800ebec <_dtoa_r+0x77c>
 800ebc8:	4629      	mov	r1, r5
 800ebca:	4622      	mov	r2, r4
 800ebcc:	4658      	mov	r0, fp
 800ebce:	f001 f85d 	bl	800fc8c <__pow5mult>
 800ebd2:	464a      	mov	r2, r9
 800ebd4:	4601      	mov	r1, r0
 800ebd6:	4605      	mov	r5, r0
 800ebd8:	4658      	mov	r0, fp
 800ebda:	f000 ffad 	bl	800fb38 <__multiply>
 800ebde:	4649      	mov	r1, r9
 800ebe0:	9004      	str	r0, [sp, #16]
 800ebe2:	4658      	mov	r0, fp
 800ebe4:	f000 fe94 	bl	800f910 <_Bfree>
 800ebe8:	9b04      	ldr	r3, [sp, #16]
 800ebea:	4699      	mov	r9, r3
 800ebec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebee:	1b1a      	subs	r2, r3, r4
 800ebf0:	d004      	beq.n	800ebfc <_dtoa_r+0x78c>
 800ebf2:	4649      	mov	r1, r9
 800ebf4:	4658      	mov	r0, fp
 800ebf6:	f001 f849 	bl	800fc8c <__pow5mult>
 800ebfa:	4681      	mov	r9, r0
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	4658      	mov	r0, fp
 800ec00:	f000 ff84 	bl	800fb0c <__i2b>
 800ec04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec06:	4604      	mov	r4, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	f000 81cf 	beq.w	800efac <_dtoa_r+0xb3c>
 800ec0e:	461a      	mov	r2, r3
 800ec10:	4601      	mov	r1, r0
 800ec12:	4658      	mov	r0, fp
 800ec14:	f001 f83a 	bl	800fc8c <__pow5mult>
 800ec18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	f300 8095 	bgt.w	800ed4c <_dtoa_r+0x8dc>
 800ec22:	9b02      	ldr	r3, [sp, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f040 8087 	bne.w	800ed38 <_dtoa_r+0x8c8>
 800ec2a:	9b03      	ldr	r3, [sp, #12]
 800ec2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	f040 8089 	bne.w	800ed48 <_dtoa_r+0x8d8>
 800ec36:	9b03      	ldr	r3, [sp, #12]
 800ec38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec3c:	0d1b      	lsrs	r3, r3, #20
 800ec3e:	051b      	lsls	r3, r3, #20
 800ec40:	b12b      	cbz	r3, 800ec4e <_dtoa_r+0x7de>
 800ec42:	9b08      	ldr	r3, [sp, #32]
 800ec44:	3301      	adds	r3, #1
 800ec46:	9308      	str	r3, [sp, #32]
 800ec48:	f108 0801 	add.w	r8, r8, #1
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f000 81b0 	beq.w	800efb8 <_dtoa_r+0xb48>
 800ec58:	6923      	ldr	r3, [r4, #16]
 800ec5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec5e:	6918      	ldr	r0, [r3, #16]
 800ec60:	f000 ff08 	bl	800fa74 <__hi0bits>
 800ec64:	f1c0 0020 	rsb	r0, r0, #32
 800ec68:	9b08      	ldr	r3, [sp, #32]
 800ec6a:	4418      	add	r0, r3
 800ec6c:	f010 001f 	ands.w	r0, r0, #31
 800ec70:	d077      	beq.n	800ed62 <_dtoa_r+0x8f2>
 800ec72:	f1c0 0320 	rsb	r3, r0, #32
 800ec76:	2b04      	cmp	r3, #4
 800ec78:	dd6b      	ble.n	800ed52 <_dtoa_r+0x8e2>
 800ec7a:	9b08      	ldr	r3, [sp, #32]
 800ec7c:	f1c0 001c 	rsb	r0, r0, #28
 800ec80:	4403      	add	r3, r0
 800ec82:	4480      	add	r8, r0
 800ec84:	4406      	add	r6, r0
 800ec86:	9308      	str	r3, [sp, #32]
 800ec88:	f1b8 0f00 	cmp.w	r8, #0
 800ec8c:	dd05      	ble.n	800ec9a <_dtoa_r+0x82a>
 800ec8e:	4649      	mov	r1, r9
 800ec90:	4642      	mov	r2, r8
 800ec92:	4658      	mov	r0, fp
 800ec94:	f001 f854 	bl	800fd40 <__lshift>
 800ec98:	4681      	mov	r9, r0
 800ec9a:	9b08      	ldr	r3, [sp, #32]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dd05      	ble.n	800ecac <_dtoa_r+0x83c>
 800eca0:	4621      	mov	r1, r4
 800eca2:	461a      	mov	r2, r3
 800eca4:	4658      	mov	r0, fp
 800eca6:	f001 f84b 	bl	800fd40 <__lshift>
 800ecaa:	4604      	mov	r4, r0
 800ecac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d059      	beq.n	800ed66 <_dtoa_r+0x8f6>
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	4648      	mov	r0, r9
 800ecb6:	f001 f8af 	bl	800fe18 <__mcmp>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	da53      	bge.n	800ed66 <_dtoa_r+0x8f6>
 800ecbe:	1e7b      	subs	r3, r7, #1
 800ecc0:	9304      	str	r3, [sp, #16]
 800ecc2:	4649      	mov	r1, r9
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	220a      	movs	r2, #10
 800ecc8:	4658      	mov	r0, fp
 800ecca:	f000 fe43 	bl	800f954 <__multadd>
 800ecce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecd0:	4681      	mov	r9, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 8172 	beq.w	800efbc <_dtoa_r+0xb4c>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4629      	mov	r1, r5
 800ecdc:	220a      	movs	r2, #10
 800ecde:	4658      	mov	r0, fp
 800ece0:	f000 fe38 	bl	800f954 <__multadd>
 800ece4:	9b00      	ldr	r3, [sp, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	4605      	mov	r5, r0
 800ecea:	dc67      	bgt.n	800edbc <_dtoa_r+0x94c>
 800ecec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	dc41      	bgt.n	800ed76 <_dtoa_r+0x906>
 800ecf2:	e063      	b.n	800edbc <_dtoa_r+0x94c>
 800ecf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ecf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ecfa:	e746      	b.n	800eb8a <_dtoa_r+0x71a>
 800ecfc:	9b07      	ldr	r3, [sp, #28]
 800ecfe:	1e5c      	subs	r4, r3, #1
 800ed00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed02:	42a3      	cmp	r3, r4
 800ed04:	bfbf      	itttt	lt
 800ed06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ed08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ed0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ed0c:	1ae3      	sublt	r3, r4, r3
 800ed0e:	bfb4      	ite	lt
 800ed10:	18d2      	addlt	r2, r2, r3
 800ed12:	1b1c      	subge	r4, r3, r4
 800ed14:	9b07      	ldr	r3, [sp, #28]
 800ed16:	bfbc      	itt	lt
 800ed18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ed1a:	2400      	movlt	r4, #0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	bfb5      	itete	lt
 800ed20:	eba8 0603 	sublt.w	r6, r8, r3
 800ed24:	9b07      	ldrge	r3, [sp, #28]
 800ed26:	2300      	movlt	r3, #0
 800ed28:	4646      	movge	r6, r8
 800ed2a:	e730      	b.n	800eb8e <_dtoa_r+0x71e>
 800ed2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ed2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ed30:	4646      	mov	r6, r8
 800ed32:	e735      	b.n	800eba0 <_dtoa_r+0x730>
 800ed34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed36:	e75c      	b.n	800ebf2 <_dtoa_r+0x782>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e788      	b.n	800ec4e <_dtoa_r+0x7de>
 800ed3c:	3fe00000 	.word	0x3fe00000
 800ed40:	40240000 	.word	0x40240000
 800ed44:	40140000 	.word	0x40140000
 800ed48:	9b02      	ldr	r3, [sp, #8]
 800ed4a:	e780      	b.n	800ec4e <_dtoa_r+0x7de>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed50:	e782      	b.n	800ec58 <_dtoa_r+0x7e8>
 800ed52:	d099      	beq.n	800ec88 <_dtoa_r+0x818>
 800ed54:	9a08      	ldr	r2, [sp, #32]
 800ed56:	331c      	adds	r3, #28
 800ed58:	441a      	add	r2, r3
 800ed5a:	4498      	add	r8, r3
 800ed5c:	441e      	add	r6, r3
 800ed5e:	9208      	str	r2, [sp, #32]
 800ed60:	e792      	b.n	800ec88 <_dtoa_r+0x818>
 800ed62:	4603      	mov	r3, r0
 800ed64:	e7f6      	b.n	800ed54 <_dtoa_r+0x8e4>
 800ed66:	9b07      	ldr	r3, [sp, #28]
 800ed68:	9704      	str	r7, [sp, #16]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	dc20      	bgt.n	800edb0 <_dtoa_r+0x940>
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed72:	2b02      	cmp	r3, #2
 800ed74:	dd1e      	ble.n	800edb4 <_dtoa_r+0x944>
 800ed76:	9b00      	ldr	r3, [sp, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f47f aec0 	bne.w	800eafe <_dtoa_r+0x68e>
 800ed7e:	4621      	mov	r1, r4
 800ed80:	2205      	movs	r2, #5
 800ed82:	4658      	mov	r0, fp
 800ed84:	f000 fde6 	bl	800f954 <__multadd>
 800ed88:	4601      	mov	r1, r0
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	4648      	mov	r0, r9
 800ed8e:	f001 f843 	bl	800fe18 <__mcmp>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	f77f aeb3 	ble.w	800eafe <_dtoa_r+0x68e>
 800ed98:	4656      	mov	r6, sl
 800ed9a:	2331      	movs	r3, #49	@ 0x31
 800ed9c:	f806 3b01 	strb.w	r3, [r6], #1
 800eda0:	9b04      	ldr	r3, [sp, #16]
 800eda2:	3301      	adds	r3, #1
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	e6ae      	b.n	800eb06 <_dtoa_r+0x696>
 800eda8:	9c07      	ldr	r4, [sp, #28]
 800edaa:	9704      	str	r7, [sp, #16]
 800edac:	4625      	mov	r5, r4
 800edae:	e7f3      	b.n	800ed98 <_dtoa_r+0x928>
 800edb0:	9b07      	ldr	r3, [sp, #28]
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f000 8104 	beq.w	800efc4 <_dtoa_r+0xb54>
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	dd05      	ble.n	800edcc <_dtoa_r+0x95c>
 800edc0:	4629      	mov	r1, r5
 800edc2:	4632      	mov	r2, r6
 800edc4:	4658      	mov	r0, fp
 800edc6:	f000 ffbb 	bl	800fd40 <__lshift>
 800edca:	4605      	mov	r5, r0
 800edcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d05a      	beq.n	800ee88 <_dtoa_r+0xa18>
 800edd2:	6869      	ldr	r1, [r5, #4]
 800edd4:	4658      	mov	r0, fp
 800edd6:	f000 fd5b 	bl	800f890 <_Balloc>
 800edda:	4606      	mov	r6, r0
 800eddc:	b928      	cbnz	r0, 800edea <_dtoa_r+0x97a>
 800edde:	4b84      	ldr	r3, [pc, #528]	@ (800eff0 <_dtoa_r+0xb80>)
 800ede0:	4602      	mov	r2, r0
 800ede2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ede6:	f7ff bb5a 	b.w	800e49e <_dtoa_r+0x2e>
 800edea:	692a      	ldr	r2, [r5, #16]
 800edec:	3202      	adds	r2, #2
 800edee:	0092      	lsls	r2, r2, #2
 800edf0:	f105 010c 	add.w	r1, r5, #12
 800edf4:	300c      	adds	r0, #12
 800edf6:	f7ff fa92 	bl	800e31e <memcpy>
 800edfa:	2201      	movs	r2, #1
 800edfc:	4631      	mov	r1, r6
 800edfe:	4658      	mov	r0, fp
 800ee00:	f000 ff9e 	bl	800fd40 <__lshift>
 800ee04:	f10a 0301 	add.w	r3, sl, #1
 800ee08:	9307      	str	r3, [sp, #28]
 800ee0a:	9b00      	ldr	r3, [sp, #0]
 800ee0c:	4453      	add	r3, sl
 800ee0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee10:	9b02      	ldr	r3, [sp, #8]
 800ee12:	f003 0301 	and.w	r3, r3, #1
 800ee16:	462f      	mov	r7, r5
 800ee18:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee1a:	4605      	mov	r5, r0
 800ee1c:	9b07      	ldr	r3, [sp, #28]
 800ee1e:	4621      	mov	r1, r4
 800ee20:	3b01      	subs	r3, #1
 800ee22:	4648      	mov	r0, r9
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	f7ff fa99 	bl	800e35c <quorem>
 800ee2a:	4639      	mov	r1, r7
 800ee2c:	9002      	str	r0, [sp, #8]
 800ee2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ee32:	4648      	mov	r0, r9
 800ee34:	f000 fff0 	bl	800fe18 <__mcmp>
 800ee38:	462a      	mov	r2, r5
 800ee3a:	9008      	str	r0, [sp, #32]
 800ee3c:	4621      	mov	r1, r4
 800ee3e:	4658      	mov	r0, fp
 800ee40:	f001 f806 	bl	800fe50 <__mdiff>
 800ee44:	68c2      	ldr	r2, [r0, #12]
 800ee46:	4606      	mov	r6, r0
 800ee48:	bb02      	cbnz	r2, 800ee8c <_dtoa_r+0xa1c>
 800ee4a:	4601      	mov	r1, r0
 800ee4c:	4648      	mov	r0, r9
 800ee4e:	f000 ffe3 	bl	800fe18 <__mcmp>
 800ee52:	4602      	mov	r2, r0
 800ee54:	4631      	mov	r1, r6
 800ee56:	4658      	mov	r0, fp
 800ee58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ee5a:	f000 fd59 	bl	800f910 <_Bfree>
 800ee5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee62:	9e07      	ldr	r6, [sp, #28]
 800ee64:	ea43 0102 	orr.w	r1, r3, r2
 800ee68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee6a:	4319      	orrs	r1, r3
 800ee6c:	d110      	bne.n	800ee90 <_dtoa_r+0xa20>
 800ee6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ee72:	d029      	beq.n	800eec8 <_dtoa_r+0xa58>
 800ee74:	9b08      	ldr	r3, [sp, #32]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	dd02      	ble.n	800ee80 <_dtoa_r+0xa10>
 800ee7a:	9b02      	ldr	r3, [sp, #8]
 800ee7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ee80:	9b00      	ldr	r3, [sp, #0]
 800ee82:	f883 8000 	strb.w	r8, [r3]
 800ee86:	e63f      	b.n	800eb08 <_dtoa_r+0x698>
 800ee88:	4628      	mov	r0, r5
 800ee8a:	e7bb      	b.n	800ee04 <_dtoa_r+0x994>
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	e7e1      	b.n	800ee54 <_dtoa_r+0x9e4>
 800ee90:	9b08      	ldr	r3, [sp, #32]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	db04      	blt.n	800eea0 <_dtoa_r+0xa30>
 800ee96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ee98:	430b      	orrs	r3, r1
 800ee9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee9c:	430b      	orrs	r3, r1
 800ee9e:	d120      	bne.n	800eee2 <_dtoa_r+0xa72>
 800eea0:	2a00      	cmp	r2, #0
 800eea2:	dded      	ble.n	800ee80 <_dtoa_r+0xa10>
 800eea4:	4649      	mov	r1, r9
 800eea6:	2201      	movs	r2, #1
 800eea8:	4658      	mov	r0, fp
 800eeaa:	f000 ff49 	bl	800fd40 <__lshift>
 800eeae:	4621      	mov	r1, r4
 800eeb0:	4681      	mov	r9, r0
 800eeb2:	f000 ffb1 	bl	800fe18 <__mcmp>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	dc03      	bgt.n	800eec2 <_dtoa_r+0xa52>
 800eeba:	d1e1      	bne.n	800ee80 <_dtoa_r+0xa10>
 800eebc:	f018 0f01 	tst.w	r8, #1
 800eec0:	d0de      	beq.n	800ee80 <_dtoa_r+0xa10>
 800eec2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eec6:	d1d8      	bne.n	800ee7a <_dtoa_r+0xa0a>
 800eec8:	9a00      	ldr	r2, [sp, #0]
 800eeca:	2339      	movs	r3, #57	@ 0x39
 800eecc:	7013      	strb	r3, [r2, #0]
 800eece:	4633      	mov	r3, r6
 800eed0:	461e      	mov	r6, r3
 800eed2:	3b01      	subs	r3, #1
 800eed4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eed8:	2a39      	cmp	r2, #57	@ 0x39
 800eeda:	d052      	beq.n	800ef82 <_dtoa_r+0xb12>
 800eedc:	3201      	adds	r2, #1
 800eede:	701a      	strb	r2, [r3, #0]
 800eee0:	e612      	b.n	800eb08 <_dtoa_r+0x698>
 800eee2:	2a00      	cmp	r2, #0
 800eee4:	dd07      	ble.n	800eef6 <_dtoa_r+0xa86>
 800eee6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eeea:	d0ed      	beq.n	800eec8 <_dtoa_r+0xa58>
 800eeec:	9a00      	ldr	r2, [sp, #0]
 800eeee:	f108 0301 	add.w	r3, r8, #1
 800eef2:	7013      	strb	r3, [r2, #0]
 800eef4:	e608      	b.n	800eb08 <_dtoa_r+0x698>
 800eef6:	9b07      	ldr	r3, [sp, #28]
 800eef8:	9a07      	ldr	r2, [sp, #28]
 800eefa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800eefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d028      	beq.n	800ef56 <_dtoa_r+0xae6>
 800ef04:	4649      	mov	r1, r9
 800ef06:	2300      	movs	r3, #0
 800ef08:	220a      	movs	r2, #10
 800ef0a:	4658      	mov	r0, fp
 800ef0c:	f000 fd22 	bl	800f954 <__multadd>
 800ef10:	42af      	cmp	r7, r5
 800ef12:	4681      	mov	r9, r0
 800ef14:	f04f 0300 	mov.w	r3, #0
 800ef18:	f04f 020a 	mov.w	r2, #10
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	4658      	mov	r0, fp
 800ef20:	d107      	bne.n	800ef32 <_dtoa_r+0xac2>
 800ef22:	f000 fd17 	bl	800f954 <__multadd>
 800ef26:	4607      	mov	r7, r0
 800ef28:	4605      	mov	r5, r0
 800ef2a:	9b07      	ldr	r3, [sp, #28]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	9307      	str	r3, [sp, #28]
 800ef30:	e774      	b.n	800ee1c <_dtoa_r+0x9ac>
 800ef32:	f000 fd0f 	bl	800f954 <__multadd>
 800ef36:	4629      	mov	r1, r5
 800ef38:	4607      	mov	r7, r0
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	220a      	movs	r2, #10
 800ef3e:	4658      	mov	r0, fp
 800ef40:	f000 fd08 	bl	800f954 <__multadd>
 800ef44:	4605      	mov	r5, r0
 800ef46:	e7f0      	b.n	800ef2a <_dtoa_r+0xaba>
 800ef48:	9b00      	ldr	r3, [sp, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	bfcc      	ite	gt
 800ef4e:	461e      	movgt	r6, r3
 800ef50:	2601      	movle	r6, #1
 800ef52:	4456      	add	r6, sl
 800ef54:	2700      	movs	r7, #0
 800ef56:	4649      	mov	r1, r9
 800ef58:	2201      	movs	r2, #1
 800ef5a:	4658      	mov	r0, fp
 800ef5c:	f000 fef0 	bl	800fd40 <__lshift>
 800ef60:	4621      	mov	r1, r4
 800ef62:	4681      	mov	r9, r0
 800ef64:	f000 ff58 	bl	800fe18 <__mcmp>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	dcb0      	bgt.n	800eece <_dtoa_r+0xa5e>
 800ef6c:	d102      	bne.n	800ef74 <_dtoa_r+0xb04>
 800ef6e:	f018 0f01 	tst.w	r8, #1
 800ef72:	d1ac      	bne.n	800eece <_dtoa_r+0xa5e>
 800ef74:	4633      	mov	r3, r6
 800ef76:	461e      	mov	r6, r3
 800ef78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef7c:	2a30      	cmp	r2, #48	@ 0x30
 800ef7e:	d0fa      	beq.n	800ef76 <_dtoa_r+0xb06>
 800ef80:	e5c2      	b.n	800eb08 <_dtoa_r+0x698>
 800ef82:	459a      	cmp	sl, r3
 800ef84:	d1a4      	bne.n	800eed0 <_dtoa_r+0xa60>
 800ef86:	9b04      	ldr	r3, [sp, #16]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	9304      	str	r3, [sp, #16]
 800ef8c:	2331      	movs	r3, #49	@ 0x31
 800ef8e:	f88a 3000 	strb.w	r3, [sl]
 800ef92:	e5b9      	b.n	800eb08 <_dtoa_r+0x698>
 800ef94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eff4 <_dtoa_r+0xb84>
 800ef9a:	b11b      	cbz	r3, 800efa4 <_dtoa_r+0xb34>
 800ef9c:	f10a 0308 	add.w	r3, sl, #8
 800efa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800efa2:	6013      	str	r3, [r2, #0]
 800efa4:	4650      	mov	r0, sl
 800efa6:	b019      	add	sp, #100	@ 0x64
 800efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efae:	2b01      	cmp	r3, #1
 800efb0:	f77f ae37 	ble.w	800ec22 <_dtoa_r+0x7b2>
 800efb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800efb8:	2001      	movs	r0, #1
 800efba:	e655      	b.n	800ec68 <_dtoa_r+0x7f8>
 800efbc:	9b00      	ldr	r3, [sp, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f77f aed6 	ble.w	800ed70 <_dtoa_r+0x900>
 800efc4:	4656      	mov	r6, sl
 800efc6:	4621      	mov	r1, r4
 800efc8:	4648      	mov	r0, r9
 800efca:	f7ff f9c7 	bl	800e35c <quorem>
 800efce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800efd2:	f806 8b01 	strb.w	r8, [r6], #1
 800efd6:	9b00      	ldr	r3, [sp, #0]
 800efd8:	eba6 020a 	sub.w	r2, r6, sl
 800efdc:	4293      	cmp	r3, r2
 800efde:	ddb3      	ble.n	800ef48 <_dtoa_r+0xad8>
 800efe0:	4649      	mov	r1, r9
 800efe2:	2300      	movs	r3, #0
 800efe4:	220a      	movs	r2, #10
 800efe6:	4658      	mov	r0, fp
 800efe8:	f000 fcb4 	bl	800f954 <__multadd>
 800efec:	4681      	mov	r9, r0
 800efee:	e7ea      	b.n	800efc6 <_dtoa_r+0xb56>
 800eff0:	080115b5 	.word	0x080115b5
 800eff4:	08011539 	.word	0x08011539

0800eff8 <_free_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4605      	mov	r5, r0
 800effc:	2900      	cmp	r1, #0
 800effe:	d041      	beq.n	800f084 <_free_r+0x8c>
 800f000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f004:	1f0c      	subs	r4, r1, #4
 800f006:	2b00      	cmp	r3, #0
 800f008:	bfb8      	it	lt
 800f00a:	18e4      	addlt	r4, r4, r3
 800f00c:	f000 fc34 	bl	800f878 <__malloc_lock>
 800f010:	4a1d      	ldr	r2, [pc, #116]	@ (800f088 <_free_r+0x90>)
 800f012:	6813      	ldr	r3, [r2, #0]
 800f014:	b933      	cbnz	r3, 800f024 <_free_r+0x2c>
 800f016:	6063      	str	r3, [r4, #4]
 800f018:	6014      	str	r4, [r2, #0]
 800f01a:	4628      	mov	r0, r5
 800f01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f020:	f000 bc30 	b.w	800f884 <__malloc_unlock>
 800f024:	42a3      	cmp	r3, r4
 800f026:	d908      	bls.n	800f03a <_free_r+0x42>
 800f028:	6820      	ldr	r0, [r4, #0]
 800f02a:	1821      	adds	r1, r4, r0
 800f02c:	428b      	cmp	r3, r1
 800f02e:	bf01      	itttt	eq
 800f030:	6819      	ldreq	r1, [r3, #0]
 800f032:	685b      	ldreq	r3, [r3, #4]
 800f034:	1809      	addeq	r1, r1, r0
 800f036:	6021      	streq	r1, [r4, #0]
 800f038:	e7ed      	b.n	800f016 <_free_r+0x1e>
 800f03a:	461a      	mov	r2, r3
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	b10b      	cbz	r3, 800f044 <_free_r+0x4c>
 800f040:	42a3      	cmp	r3, r4
 800f042:	d9fa      	bls.n	800f03a <_free_r+0x42>
 800f044:	6811      	ldr	r1, [r2, #0]
 800f046:	1850      	adds	r0, r2, r1
 800f048:	42a0      	cmp	r0, r4
 800f04a:	d10b      	bne.n	800f064 <_free_r+0x6c>
 800f04c:	6820      	ldr	r0, [r4, #0]
 800f04e:	4401      	add	r1, r0
 800f050:	1850      	adds	r0, r2, r1
 800f052:	4283      	cmp	r3, r0
 800f054:	6011      	str	r1, [r2, #0]
 800f056:	d1e0      	bne.n	800f01a <_free_r+0x22>
 800f058:	6818      	ldr	r0, [r3, #0]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	6053      	str	r3, [r2, #4]
 800f05e:	4408      	add	r0, r1
 800f060:	6010      	str	r0, [r2, #0]
 800f062:	e7da      	b.n	800f01a <_free_r+0x22>
 800f064:	d902      	bls.n	800f06c <_free_r+0x74>
 800f066:	230c      	movs	r3, #12
 800f068:	602b      	str	r3, [r5, #0]
 800f06a:	e7d6      	b.n	800f01a <_free_r+0x22>
 800f06c:	6820      	ldr	r0, [r4, #0]
 800f06e:	1821      	adds	r1, r4, r0
 800f070:	428b      	cmp	r3, r1
 800f072:	bf04      	itt	eq
 800f074:	6819      	ldreq	r1, [r3, #0]
 800f076:	685b      	ldreq	r3, [r3, #4]
 800f078:	6063      	str	r3, [r4, #4]
 800f07a:	bf04      	itt	eq
 800f07c:	1809      	addeq	r1, r1, r0
 800f07e:	6021      	streq	r1, [r4, #0]
 800f080:	6054      	str	r4, [r2, #4]
 800f082:	e7ca      	b.n	800f01a <_free_r+0x22>
 800f084:	bd38      	pop	{r3, r4, r5, pc}
 800f086:	bf00      	nop
 800f088:	200029e4 	.word	0x200029e4

0800f08c <rshift>:
 800f08c:	6903      	ldr	r3, [r0, #16]
 800f08e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f096:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f09a:	f100 0414 	add.w	r4, r0, #20
 800f09e:	dd45      	ble.n	800f12c <rshift+0xa0>
 800f0a0:	f011 011f 	ands.w	r1, r1, #31
 800f0a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f0a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f0ac:	d10c      	bne.n	800f0c8 <rshift+0x3c>
 800f0ae:	f100 0710 	add.w	r7, r0, #16
 800f0b2:	4629      	mov	r1, r5
 800f0b4:	42b1      	cmp	r1, r6
 800f0b6:	d334      	bcc.n	800f122 <rshift+0x96>
 800f0b8:	1a9b      	subs	r3, r3, r2
 800f0ba:	009b      	lsls	r3, r3, #2
 800f0bc:	1eea      	subs	r2, r5, #3
 800f0be:	4296      	cmp	r6, r2
 800f0c0:	bf38      	it	cc
 800f0c2:	2300      	movcc	r3, #0
 800f0c4:	4423      	add	r3, r4
 800f0c6:	e015      	b.n	800f0f4 <rshift+0x68>
 800f0c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f0cc:	f1c1 0820 	rsb	r8, r1, #32
 800f0d0:	40cf      	lsrs	r7, r1
 800f0d2:	f105 0e04 	add.w	lr, r5, #4
 800f0d6:	46a1      	mov	r9, r4
 800f0d8:	4576      	cmp	r6, lr
 800f0da:	46f4      	mov	ip, lr
 800f0dc:	d815      	bhi.n	800f10a <rshift+0x7e>
 800f0de:	1a9a      	subs	r2, r3, r2
 800f0e0:	0092      	lsls	r2, r2, #2
 800f0e2:	3a04      	subs	r2, #4
 800f0e4:	3501      	adds	r5, #1
 800f0e6:	42ae      	cmp	r6, r5
 800f0e8:	bf38      	it	cc
 800f0ea:	2200      	movcc	r2, #0
 800f0ec:	18a3      	adds	r3, r4, r2
 800f0ee:	50a7      	str	r7, [r4, r2]
 800f0f0:	b107      	cbz	r7, 800f0f4 <rshift+0x68>
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	1b1a      	subs	r2, r3, r4
 800f0f6:	42a3      	cmp	r3, r4
 800f0f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f0fc:	bf08      	it	eq
 800f0fe:	2300      	moveq	r3, #0
 800f100:	6102      	str	r2, [r0, #16]
 800f102:	bf08      	it	eq
 800f104:	6143      	streq	r3, [r0, #20]
 800f106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f10a:	f8dc c000 	ldr.w	ip, [ip]
 800f10e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f112:	ea4c 0707 	orr.w	r7, ip, r7
 800f116:	f849 7b04 	str.w	r7, [r9], #4
 800f11a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f11e:	40cf      	lsrs	r7, r1
 800f120:	e7da      	b.n	800f0d8 <rshift+0x4c>
 800f122:	f851 cb04 	ldr.w	ip, [r1], #4
 800f126:	f847 cf04 	str.w	ip, [r7, #4]!
 800f12a:	e7c3      	b.n	800f0b4 <rshift+0x28>
 800f12c:	4623      	mov	r3, r4
 800f12e:	e7e1      	b.n	800f0f4 <rshift+0x68>

0800f130 <__hexdig_fun>:
 800f130:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f134:	2b09      	cmp	r3, #9
 800f136:	d802      	bhi.n	800f13e <__hexdig_fun+0xe>
 800f138:	3820      	subs	r0, #32
 800f13a:	b2c0      	uxtb	r0, r0
 800f13c:	4770      	bx	lr
 800f13e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f142:	2b05      	cmp	r3, #5
 800f144:	d801      	bhi.n	800f14a <__hexdig_fun+0x1a>
 800f146:	3847      	subs	r0, #71	@ 0x47
 800f148:	e7f7      	b.n	800f13a <__hexdig_fun+0xa>
 800f14a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f14e:	2b05      	cmp	r3, #5
 800f150:	d801      	bhi.n	800f156 <__hexdig_fun+0x26>
 800f152:	3827      	subs	r0, #39	@ 0x27
 800f154:	e7f1      	b.n	800f13a <__hexdig_fun+0xa>
 800f156:	2000      	movs	r0, #0
 800f158:	4770      	bx	lr
	...

0800f15c <__gethex>:
 800f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	b085      	sub	sp, #20
 800f162:	468a      	mov	sl, r1
 800f164:	9302      	str	r3, [sp, #8]
 800f166:	680b      	ldr	r3, [r1, #0]
 800f168:	9001      	str	r0, [sp, #4]
 800f16a:	4690      	mov	r8, r2
 800f16c:	1c9c      	adds	r4, r3, #2
 800f16e:	46a1      	mov	r9, r4
 800f170:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f174:	2830      	cmp	r0, #48	@ 0x30
 800f176:	d0fa      	beq.n	800f16e <__gethex+0x12>
 800f178:	eba9 0303 	sub.w	r3, r9, r3
 800f17c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f180:	f7ff ffd6 	bl	800f130 <__hexdig_fun>
 800f184:	4605      	mov	r5, r0
 800f186:	2800      	cmp	r0, #0
 800f188:	d168      	bne.n	800f25c <__gethex+0x100>
 800f18a:	49a0      	ldr	r1, [pc, #640]	@ (800f40c <__gethex+0x2b0>)
 800f18c:	2201      	movs	r2, #1
 800f18e:	4648      	mov	r0, r9
 800f190:	f7ff f83b 	bl	800e20a <strncmp>
 800f194:	4607      	mov	r7, r0
 800f196:	2800      	cmp	r0, #0
 800f198:	d167      	bne.n	800f26a <__gethex+0x10e>
 800f19a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f19e:	4626      	mov	r6, r4
 800f1a0:	f7ff ffc6 	bl	800f130 <__hexdig_fun>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d062      	beq.n	800f26e <__gethex+0x112>
 800f1a8:	4623      	mov	r3, r4
 800f1aa:	7818      	ldrb	r0, [r3, #0]
 800f1ac:	2830      	cmp	r0, #48	@ 0x30
 800f1ae:	4699      	mov	r9, r3
 800f1b0:	f103 0301 	add.w	r3, r3, #1
 800f1b4:	d0f9      	beq.n	800f1aa <__gethex+0x4e>
 800f1b6:	f7ff ffbb 	bl	800f130 <__hexdig_fun>
 800f1ba:	fab0 f580 	clz	r5, r0
 800f1be:	096d      	lsrs	r5, r5, #5
 800f1c0:	f04f 0b01 	mov.w	fp, #1
 800f1c4:	464a      	mov	r2, r9
 800f1c6:	4616      	mov	r6, r2
 800f1c8:	3201      	adds	r2, #1
 800f1ca:	7830      	ldrb	r0, [r6, #0]
 800f1cc:	f7ff ffb0 	bl	800f130 <__hexdig_fun>
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	d1f8      	bne.n	800f1c6 <__gethex+0x6a>
 800f1d4:	498d      	ldr	r1, [pc, #564]	@ (800f40c <__gethex+0x2b0>)
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f7ff f816 	bl	800e20a <strncmp>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d13f      	bne.n	800f262 <__gethex+0x106>
 800f1e2:	b944      	cbnz	r4, 800f1f6 <__gethex+0x9a>
 800f1e4:	1c74      	adds	r4, r6, #1
 800f1e6:	4622      	mov	r2, r4
 800f1e8:	4616      	mov	r6, r2
 800f1ea:	3201      	adds	r2, #1
 800f1ec:	7830      	ldrb	r0, [r6, #0]
 800f1ee:	f7ff ff9f 	bl	800f130 <__hexdig_fun>
 800f1f2:	2800      	cmp	r0, #0
 800f1f4:	d1f8      	bne.n	800f1e8 <__gethex+0x8c>
 800f1f6:	1ba4      	subs	r4, r4, r6
 800f1f8:	00a7      	lsls	r7, r4, #2
 800f1fa:	7833      	ldrb	r3, [r6, #0]
 800f1fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f200:	2b50      	cmp	r3, #80	@ 0x50
 800f202:	d13e      	bne.n	800f282 <__gethex+0x126>
 800f204:	7873      	ldrb	r3, [r6, #1]
 800f206:	2b2b      	cmp	r3, #43	@ 0x2b
 800f208:	d033      	beq.n	800f272 <__gethex+0x116>
 800f20a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f20c:	d034      	beq.n	800f278 <__gethex+0x11c>
 800f20e:	1c71      	adds	r1, r6, #1
 800f210:	2400      	movs	r4, #0
 800f212:	7808      	ldrb	r0, [r1, #0]
 800f214:	f7ff ff8c 	bl	800f130 <__hexdig_fun>
 800f218:	1e43      	subs	r3, r0, #1
 800f21a:	b2db      	uxtb	r3, r3
 800f21c:	2b18      	cmp	r3, #24
 800f21e:	d830      	bhi.n	800f282 <__gethex+0x126>
 800f220:	f1a0 0210 	sub.w	r2, r0, #16
 800f224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f228:	f7ff ff82 	bl	800f130 <__hexdig_fun>
 800f22c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f230:	fa5f fc8c 	uxtb.w	ip, ip
 800f234:	f1bc 0f18 	cmp.w	ip, #24
 800f238:	f04f 030a 	mov.w	r3, #10
 800f23c:	d91e      	bls.n	800f27c <__gethex+0x120>
 800f23e:	b104      	cbz	r4, 800f242 <__gethex+0xe6>
 800f240:	4252      	negs	r2, r2
 800f242:	4417      	add	r7, r2
 800f244:	f8ca 1000 	str.w	r1, [sl]
 800f248:	b1ed      	cbz	r5, 800f286 <__gethex+0x12a>
 800f24a:	f1bb 0f00 	cmp.w	fp, #0
 800f24e:	bf0c      	ite	eq
 800f250:	2506      	moveq	r5, #6
 800f252:	2500      	movne	r5, #0
 800f254:	4628      	mov	r0, r5
 800f256:	b005      	add	sp, #20
 800f258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25c:	2500      	movs	r5, #0
 800f25e:	462c      	mov	r4, r5
 800f260:	e7b0      	b.n	800f1c4 <__gethex+0x68>
 800f262:	2c00      	cmp	r4, #0
 800f264:	d1c7      	bne.n	800f1f6 <__gethex+0x9a>
 800f266:	4627      	mov	r7, r4
 800f268:	e7c7      	b.n	800f1fa <__gethex+0x9e>
 800f26a:	464e      	mov	r6, r9
 800f26c:	462f      	mov	r7, r5
 800f26e:	2501      	movs	r5, #1
 800f270:	e7c3      	b.n	800f1fa <__gethex+0x9e>
 800f272:	2400      	movs	r4, #0
 800f274:	1cb1      	adds	r1, r6, #2
 800f276:	e7cc      	b.n	800f212 <__gethex+0xb6>
 800f278:	2401      	movs	r4, #1
 800f27a:	e7fb      	b.n	800f274 <__gethex+0x118>
 800f27c:	fb03 0002 	mla	r0, r3, r2, r0
 800f280:	e7ce      	b.n	800f220 <__gethex+0xc4>
 800f282:	4631      	mov	r1, r6
 800f284:	e7de      	b.n	800f244 <__gethex+0xe8>
 800f286:	eba6 0309 	sub.w	r3, r6, r9
 800f28a:	3b01      	subs	r3, #1
 800f28c:	4629      	mov	r1, r5
 800f28e:	2b07      	cmp	r3, #7
 800f290:	dc0a      	bgt.n	800f2a8 <__gethex+0x14c>
 800f292:	9801      	ldr	r0, [sp, #4]
 800f294:	f000 fafc 	bl	800f890 <_Balloc>
 800f298:	4604      	mov	r4, r0
 800f29a:	b940      	cbnz	r0, 800f2ae <__gethex+0x152>
 800f29c:	4b5c      	ldr	r3, [pc, #368]	@ (800f410 <__gethex+0x2b4>)
 800f29e:	4602      	mov	r2, r0
 800f2a0:	21e4      	movs	r1, #228	@ 0xe4
 800f2a2:	485c      	ldr	r0, [pc, #368]	@ (800f414 <__gethex+0x2b8>)
 800f2a4:	f001 fc32 	bl	8010b0c <__assert_func>
 800f2a8:	3101      	adds	r1, #1
 800f2aa:	105b      	asrs	r3, r3, #1
 800f2ac:	e7ef      	b.n	800f28e <__gethex+0x132>
 800f2ae:	f100 0a14 	add.w	sl, r0, #20
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	4655      	mov	r5, sl
 800f2b6:	469b      	mov	fp, r3
 800f2b8:	45b1      	cmp	r9, r6
 800f2ba:	d337      	bcc.n	800f32c <__gethex+0x1d0>
 800f2bc:	f845 bb04 	str.w	fp, [r5], #4
 800f2c0:	eba5 050a 	sub.w	r5, r5, sl
 800f2c4:	10ad      	asrs	r5, r5, #2
 800f2c6:	6125      	str	r5, [r4, #16]
 800f2c8:	4658      	mov	r0, fp
 800f2ca:	f000 fbd3 	bl	800fa74 <__hi0bits>
 800f2ce:	016d      	lsls	r5, r5, #5
 800f2d0:	f8d8 6000 	ldr.w	r6, [r8]
 800f2d4:	1a2d      	subs	r5, r5, r0
 800f2d6:	42b5      	cmp	r5, r6
 800f2d8:	dd54      	ble.n	800f384 <__gethex+0x228>
 800f2da:	1bad      	subs	r5, r5, r6
 800f2dc:	4629      	mov	r1, r5
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f000 ff67 	bl	80101b2 <__any_on>
 800f2e4:	4681      	mov	r9, r0
 800f2e6:	b178      	cbz	r0, 800f308 <__gethex+0x1ac>
 800f2e8:	1e6b      	subs	r3, r5, #1
 800f2ea:	1159      	asrs	r1, r3, #5
 800f2ec:	f003 021f 	and.w	r2, r3, #31
 800f2f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f2f4:	f04f 0901 	mov.w	r9, #1
 800f2f8:	fa09 f202 	lsl.w	r2, r9, r2
 800f2fc:	420a      	tst	r2, r1
 800f2fe:	d003      	beq.n	800f308 <__gethex+0x1ac>
 800f300:	454b      	cmp	r3, r9
 800f302:	dc36      	bgt.n	800f372 <__gethex+0x216>
 800f304:	f04f 0902 	mov.w	r9, #2
 800f308:	4629      	mov	r1, r5
 800f30a:	4620      	mov	r0, r4
 800f30c:	f7ff febe 	bl	800f08c <rshift>
 800f310:	442f      	add	r7, r5
 800f312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f316:	42bb      	cmp	r3, r7
 800f318:	da42      	bge.n	800f3a0 <__gethex+0x244>
 800f31a:	9801      	ldr	r0, [sp, #4]
 800f31c:	4621      	mov	r1, r4
 800f31e:	f000 faf7 	bl	800f910 <_Bfree>
 800f322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f324:	2300      	movs	r3, #0
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	25a3      	movs	r5, #163	@ 0xa3
 800f32a:	e793      	b.n	800f254 <__gethex+0xf8>
 800f32c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f330:	2a2e      	cmp	r2, #46	@ 0x2e
 800f332:	d012      	beq.n	800f35a <__gethex+0x1fe>
 800f334:	2b20      	cmp	r3, #32
 800f336:	d104      	bne.n	800f342 <__gethex+0x1e6>
 800f338:	f845 bb04 	str.w	fp, [r5], #4
 800f33c:	f04f 0b00 	mov.w	fp, #0
 800f340:	465b      	mov	r3, fp
 800f342:	7830      	ldrb	r0, [r6, #0]
 800f344:	9303      	str	r3, [sp, #12]
 800f346:	f7ff fef3 	bl	800f130 <__hexdig_fun>
 800f34a:	9b03      	ldr	r3, [sp, #12]
 800f34c:	f000 000f 	and.w	r0, r0, #15
 800f350:	4098      	lsls	r0, r3
 800f352:	ea4b 0b00 	orr.w	fp, fp, r0
 800f356:	3304      	adds	r3, #4
 800f358:	e7ae      	b.n	800f2b8 <__gethex+0x15c>
 800f35a:	45b1      	cmp	r9, r6
 800f35c:	d8ea      	bhi.n	800f334 <__gethex+0x1d8>
 800f35e:	492b      	ldr	r1, [pc, #172]	@ (800f40c <__gethex+0x2b0>)
 800f360:	9303      	str	r3, [sp, #12]
 800f362:	2201      	movs	r2, #1
 800f364:	4630      	mov	r0, r6
 800f366:	f7fe ff50 	bl	800e20a <strncmp>
 800f36a:	9b03      	ldr	r3, [sp, #12]
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d1e1      	bne.n	800f334 <__gethex+0x1d8>
 800f370:	e7a2      	b.n	800f2b8 <__gethex+0x15c>
 800f372:	1ea9      	subs	r1, r5, #2
 800f374:	4620      	mov	r0, r4
 800f376:	f000 ff1c 	bl	80101b2 <__any_on>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d0c2      	beq.n	800f304 <__gethex+0x1a8>
 800f37e:	f04f 0903 	mov.w	r9, #3
 800f382:	e7c1      	b.n	800f308 <__gethex+0x1ac>
 800f384:	da09      	bge.n	800f39a <__gethex+0x23e>
 800f386:	1b75      	subs	r5, r6, r5
 800f388:	4621      	mov	r1, r4
 800f38a:	9801      	ldr	r0, [sp, #4]
 800f38c:	462a      	mov	r2, r5
 800f38e:	f000 fcd7 	bl	800fd40 <__lshift>
 800f392:	1b7f      	subs	r7, r7, r5
 800f394:	4604      	mov	r4, r0
 800f396:	f100 0a14 	add.w	sl, r0, #20
 800f39a:	f04f 0900 	mov.w	r9, #0
 800f39e:	e7b8      	b.n	800f312 <__gethex+0x1b6>
 800f3a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3a4:	42bd      	cmp	r5, r7
 800f3a6:	dd6f      	ble.n	800f488 <__gethex+0x32c>
 800f3a8:	1bed      	subs	r5, r5, r7
 800f3aa:	42ae      	cmp	r6, r5
 800f3ac:	dc34      	bgt.n	800f418 <__gethex+0x2bc>
 800f3ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d022      	beq.n	800f3fc <__gethex+0x2a0>
 800f3b6:	2b03      	cmp	r3, #3
 800f3b8:	d024      	beq.n	800f404 <__gethex+0x2a8>
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d115      	bne.n	800f3ea <__gethex+0x28e>
 800f3be:	42ae      	cmp	r6, r5
 800f3c0:	d113      	bne.n	800f3ea <__gethex+0x28e>
 800f3c2:	2e01      	cmp	r6, #1
 800f3c4:	d10b      	bne.n	800f3de <__gethex+0x282>
 800f3c6:	9a02      	ldr	r2, [sp, #8]
 800f3c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f3cc:	6013      	str	r3, [r2, #0]
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	6123      	str	r3, [r4, #16]
 800f3d2:	f8ca 3000 	str.w	r3, [sl]
 800f3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3d8:	2562      	movs	r5, #98	@ 0x62
 800f3da:	601c      	str	r4, [r3, #0]
 800f3dc:	e73a      	b.n	800f254 <__gethex+0xf8>
 800f3de:	1e71      	subs	r1, r6, #1
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f000 fee6 	bl	80101b2 <__any_on>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d1ed      	bne.n	800f3c6 <__gethex+0x26a>
 800f3ea:	9801      	ldr	r0, [sp, #4]
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	f000 fa8f 	bl	800f910 <_Bfree>
 800f3f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	6013      	str	r3, [r2, #0]
 800f3f8:	2550      	movs	r5, #80	@ 0x50
 800f3fa:	e72b      	b.n	800f254 <__gethex+0xf8>
 800f3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1f3      	bne.n	800f3ea <__gethex+0x28e>
 800f402:	e7e0      	b.n	800f3c6 <__gethex+0x26a>
 800f404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1dd      	bne.n	800f3c6 <__gethex+0x26a>
 800f40a:	e7ee      	b.n	800f3ea <__gethex+0x28e>
 800f40c:	080114a5 	.word	0x080114a5
 800f410:	080115b5 	.word	0x080115b5
 800f414:	080115c6 	.word	0x080115c6
 800f418:	1e6f      	subs	r7, r5, #1
 800f41a:	f1b9 0f00 	cmp.w	r9, #0
 800f41e:	d130      	bne.n	800f482 <__gethex+0x326>
 800f420:	b127      	cbz	r7, 800f42c <__gethex+0x2d0>
 800f422:	4639      	mov	r1, r7
 800f424:	4620      	mov	r0, r4
 800f426:	f000 fec4 	bl	80101b2 <__any_on>
 800f42a:	4681      	mov	r9, r0
 800f42c:	117a      	asrs	r2, r7, #5
 800f42e:	2301      	movs	r3, #1
 800f430:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f434:	f007 071f 	and.w	r7, r7, #31
 800f438:	40bb      	lsls	r3, r7
 800f43a:	4213      	tst	r3, r2
 800f43c:	4629      	mov	r1, r5
 800f43e:	4620      	mov	r0, r4
 800f440:	bf18      	it	ne
 800f442:	f049 0902 	orrne.w	r9, r9, #2
 800f446:	f7ff fe21 	bl	800f08c <rshift>
 800f44a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f44e:	1b76      	subs	r6, r6, r5
 800f450:	2502      	movs	r5, #2
 800f452:	f1b9 0f00 	cmp.w	r9, #0
 800f456:	d047      	beq.n	800f4e8 <__gethex+0x38c>
 800f458:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	d015      	beq.n	800f48c <__gethex+0x330>
 800f460:	2b03      	cmp	r3, #3
 800f462:	d017      	beq.n	800f494 <__gethex+0x338>
 800f464:	2b01      	cmp	r3, #1
 800f466:	d109      	bne.n	800f47c <__gethex+0x320>
 800f468:	f019 0f02 	tst.w	r9, #2
 800f46c:	d006      	beq.n	800f47c <__gethex+0x320>
 800f46e:	f8da 3000 	ldr.w	r3, [sl]
 800f472:	ea49 0903 	orr.w	r9, r9, r3
 800f476:	f019 0f01 	tst.w	r9, #1
 800f47a:	d10e      	bne.n	800f49a <__gethex+0x33e>
 800f47c:	f045 0510 	orr.w	r5, r5, #16
 800f480:	e032      	b.n	800f4e8 <__gethex+0x38c>
 800f482:	f04f 0901 	mov.w	r9, #1
 800f486:	e7d1      	b.n	800f42c <__gethex+0x2d0>
 800f488:	2501      	movs	r5, #1
 800f48a:	e7e2      	b.n	800f452 <__gethex+0x2f6>
 800f48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f48e:	f1c3 0301 	rsb	r3, r3, #1
 800f492:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f496:	2b00      	cmp	r3, #0
 800f498:	d0f0      	beq.n	800f47c <__gethex+0x320>
 800f49a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f49e:	f104 0314 	add.w	r3, r4, #20
 800f4a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f4a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f4aa:	f04f 0c00 	mov.w	ip, #0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f4b8:	d01b      	beq.n	800f4f2 <__gethex+0x396>
 800f4ba:	3201      	adds	r2, #1
 800f4bc:	6002      	str	r2, [r0, #0]
 800f4be:	2d02      	cmp	r5, #2
 800f4c0:	f104 0314 	add.w	r3, r4, #20
 800f4c4:	d13c      	bne.n	800f540 <__gethex+0x3e4>
 800f4c6:	f8d8 2000 	ldr.w	r2, [r8]
 800f4ca:	3a01      	subs	r2, #1
 800f4cc:	42b2      	cmp	r2, r6
 800f4ce:	d109      	bne.n	800f4e4 <__gethex+0x388>
 800f4d0:	1171      	asrs	r1, r6, #5
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4d8:	f006 061f 	and.w	r6, r6, #31
 800f4dc:	fa02 f606 	lsl.w	r6, r2, r6
 800f4e0:	421e      	tst	r6, r3
 800f4e2:	d13a      	bne.n	800f55a <__gethex+0x3fe>
 800f4e4:	f045 0520 	orr.w	r5, r5, #32
 800f4e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4ea:	601c      	str	r4, [r3, #0]
 800f4ec:	9b02      	ldr	r3, [sp, #8]
 800f4ee:	601f      	str	r7, [r3, #0]
 800f4f0:	e6b0      	b.n	800f254 <__gethex+0xf8>
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f4f8:	d8d9      	bhi.n	800f4ae <__gethex+0x352>
 800f4fa:	68a3      	ldr	r3, [r4, #8]
 800f4fc:	459b      	cmp	fp, r3
 800f4fe:	db17      	blt.n	800f530 <__gethex+0x3d4>
 800f500:	6861      	ldr	r1, [r4, #4]
 800f502:	9801      	ldr	r0, [sp, #4]
 800f504:	3101      	adds	r1, #1
 800f506:	f000 f9c3 	bl	800f890 <_Balloc>
 800f50a:	4681      	mov	r9, r0
 800f50c:	b918      	cbnz	r0, 800f516 <__gethex+0x3ba>
 800f50e:	4b1a      	ldr	r3, [pc, #104]	@ (800f578 <__gethex+0x41c>)
 800f510:	4602      	mov	r2, r0
 800f512:	2184      	movs	r1, #132	@ 0x84
 800f514:	e6c5      	b.n	800f2a2 <__gethex+0x146>
 800f516:	6922      	ldr	r2, [r4, #16]
 800f518:	3202      	adds	r2, #2
 800f51a:	f104 010c 	add.w	r1, r4, #12
 800f51e:	0092      	lsls	r2, r2, #2
 800f520:	300c      	adds	r0, #12
 800f522:	f7fe fefc 	bl	800e31e <memcpy>
 800f526:	4621      	mov	r1, r4
 800f528:	9801      	ldr	r0, [sp, #4]
 800f52a:	f000 f9f1 	bl	800f910 <_Bfree>
 800f52e:	464c      	mov	r4, r9
 800f530:	6923      	ldr	r3, [r4, #16]
 800f532:	1c5a      	adds	r2, r3, #1
 800f534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f538:	6122      	str	r2, [r4, #16]
 800f53a:	2201      	movs	r2, #1
 800f53c:	615a      	str	r2, [r3, #20]
 800f53e:	e7be      	b.n	800f4be <__gethex+0x362>
 800f540:	6922      	ldr	r2, [r4, #16]
 800f542:	455a      	cmp	r2, fp
 800f544:	dd0b      	ble.n	800f55e <__gethex+0x402>
 800f546:	2101      	movs	r1, #1
 800f548:	4620      	mov	r0, r4
 800f54a:	f7ff fd9f 	bl	800f08c <rshift>
 800f54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f552:	3701      	adds	r7, #1
 800f554:	42bb      	cmp	r3, r7
 800f556:	f6ff aee0 	blt.w	800f31a <__gethex+0x1be>
 800f55a:	2501      	movs	r5, #1
 800f55c:	e7c2      	b.n	800f4e4 <__gethex+0x388>
 800f55e:	f016 061f 	ands.w	r6, r6, #31
 800f562:	d0fa      	beq.n	800f55a <__gethex+0x3fe>
 800f564:	4453      	add	r3, sl
 800f566:	f1c6 0620 	rsb	r6, r6, #32
 800f56a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f56e:	f000 fa81 	bl	800fa74 <__hi0bits>
 800f572:	42b0      	cmp	r0, r6
 800f574:	dbe7      	blt.n	800f546 <__gethex+0x3ea>
 800f576:	e7f0      	b.n	800f55a <__gethex+0x3fe>
 800f578:	080115b5 	.word	0x080115b5

0800f57c <L_shift>:
 800f57c:	f1c2 0208 	rsb	r2, r2, #8
 800f580:	0092      	lsls	r2, r2, #2
 800f582:	b570      	push	{r4, r5, r6, lr}
 800f584:	f1c2 0620 	rsb	r6, r2, #32
 800f588:	6843      	ldr	r3, [r0, #4]
 800f58a:	6804      	ldr	r4, [r0, #0]
 800f58c:	fa03 f506 	lsl.w	r5, r3, r6
 800f590:	432c      	orrs	r4, r5
 800f592:	40d3      	lsrs	r3, r2
 800f594:	6004      	str	r4, [r0, #0]
 800f596:	f840 3f04 	str.w	r3, [r0, #4]!
 800f59a:	4288      	cmp	r0, r1
 800f59c:	d3f4      	bcc.n	800f588 <L_shift+0xc>
 800f59e:	bd70      	pop	{r4, r5, r6, pc}

0800f5a0 <__match>:
 800f5a0:	b530      	push	{r4, r5, lr}
 800f5a2:	6803      	ldr	r3, [r0, #0]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5aa:	b914      	cbnz	r4, 800f5b2 <__match+0x12>
 800f5ac:	6003      	str	r3, [r0, #0]
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	bd30      	pop	{r4, r5, pc}
 800f5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f5ba:	2d19      	cmp	r5, #25
 800f5bc:	bf98      	it	ls
 800f5be:	3220      	addls	r2, #32
 800f5c0:	42a2      	cmp	r2, r4
 800f5c2:	d0f0      	beq.n	800f5a6 <__match+0x6>
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e7f3      	b.n	800f5b0 <__match+0x10>

0800f5c8 <__hexnan>:
 800f5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5cc:	680b      	ldr	r3, [r1, #0]
 800f5ce:	6801      	ldr	r1, [r0, #0]
 800f5d0:	115e      	asrs	r6, r3, #5
 800f5d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f5d6:	f013 031f 	ands.w	r3, r3, #31
 800f5da:	b087      	sub	sp, #28
 800f5dc:	bf18      	it	ne
 800f5de:	3604      	addne	r6, #4
 800f5e0:	2500      	movs	r5, #0
 800f5e2:	1f37      	subs	r7, r6, #4
 800f5e4:	4682      	mov	sl, r0
 800f5e6:	4690      	mov	r8, r2
 800f5e8:	9301      	str	r3, [sp, #4]
 800f5ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800f5ee:	46b9      	mov	r9, r7
 800f5f0:	463c      	mov	r4, r7
 800f5f2:	9502      	str	r5, [sp, #8]
 800f5f4:	46ab      	mov	fp, r5
 800f5f6:	784a      	ldrb	r2, [r1, #1]
 800f5f8:	1c4b      	adds	r3, r1, #1
 800f5fa:	9303      	str	r3, [sp, #12]
 800f5fc:	b342      	cbz	r2, 800f650 <__hexnan+0x88>
 800f5fe:	4610      	mov	r0, r2
 800f600:	9105      	str	r1, [sp, #20]
 800f602:	9204      	str	r2, [sp, #16]
 800f604:	f7ff fd94 	bl	800f130 <__hexdig_fun>
 800f608:	2800      	cmp	r0, #0
 800f60a:	d151      	bne.n	800f6b0 <__hexnan+0xe8>
 800f60c:	9a04      	ldr	r2, [sp, #16]
 800f60e:	9905      	ldr	r1, [sp, #20]
 800f610:	2a20      	cmp	r2, #32
 800f612:	d818      	bhi.n	800f646 <__hexnan+0x7e>
 800f614:	9b02      	ldr	r3, [sp, #8]
 800f616:	459b      	cmp	fp, r3
 800f618:	dd13      	ble.n	800f642 <__hexnan+0x7a>
 800f61a:	454c      	cmp	r4, r9
 800f61c:	d206      	bcs.n	800f62c <__hexnan+0x64>
 800f61e:	2d07      	cmp	r5, #7
 800f620:	dc04      	bgt.n	800f62c <__hexnan+0x64>
 800f622:	462a      	mov	r2, r5
 800f624:	4649      	mov	r1, r9
 800f626:	4620      	mov	r0, r4
 800f628:	f7ff ffa8 	bl	800f57c <L_shift>
 800f62c:	4544      	cmp	r4, r8
 800f62e:	d952      	bls.n	800f6d6 <__hexnan+0x10e>
 800f630:	2300      	movs	r3, #0
 800f632:	f1a4 0904 	sub.w	r9, r4, #4
 800f636:	f844 3c04 	str.w	r3, [r4, #-4]
 800f63a:	f8cd b008 	str.w	fp, [sp, #8]
 800f63e:	464c      	mov	r4, r9
 800f640:	461d      	mov	r5, r3
 800f642:	9903      	ldr	r1, [sp, #12]
 800f644:	e7d7      	b.n	800f5f6 <__hexnan+0x2e>
 800f646:	2a29      	cmp	r2, #41	@ 0x29
 800f648:	d157      	bne.n	800f6fa <__hexnan+0x132>
 800f64a:	3102      	adds	r1, #2
 800f64c:	f8ca 1000 	str.w	r1, [sl]
 800f650:	f1bb 0f00 	cmp.w	fp, #0
 800f654:	d051      	beq.n	800f6fa <__hexnan+0x132>
 800f656:	454c      	cmp	r4, r9
 800f658:	d206      	bcs.n	800f668 <__hexnan+0xa0>
 800f65a:	2d07      	cmp	r5, #7
 800f65c:	dc04      	bgt.n	800f668 <__hexnan+0xa0>
 800f65e:	462a      	mov	r2, r5
 800f660:	4649      	mov	r1, r9
 800f662:	4620      	mov	r0, r4
 800f664:	f7ff ff8a 	bl	800f57c <L_shift>
 800f668:	4544      	cmp	r4, r8
 800f66a:	d936      	bls.n	800f6da <__hexnan+0x112>
 800f66c:	f1a8 0204 	sub.w	r2, r8, #4
 800f670:	4623      	mov	r3, r4
 800f672:	f853 1b04 	ldr.w	r1, [r3], #4
 800f676:	f842 1f04 	str.w	r1, [r2, #4]!
 800f67a:	429f      	cmp	r7, r3
 800f67c:	d2f9      	bcs.n	800f672 <__hexnan+0xaa>
 800f67e:	1b3b      	subs	r3, r7, r4
 800f680:	f023 0303 	bic.w	r3, r3, #3
 800f684:	3304      	adds	r3, #4
 800f686:	3401      	adds	r4, #1
 800f688:	3e03      	subs	r6, #3
 800f68a:	42b4      	cmp	r4, r6
 800f68c:	bf88      	it	hi
 800f68e:	2304      	movhi	r3, #4
 800f690:	4443      	add	r3, r8
 800f692:	2200      	movs	r2, #0
 800f694:	f843 2b04 	str.w	r2, [r3], #4
 800f698:	429f      	cmp	r7, r3
 800f69a:	d2fb      	bcs.n	800f694 <__hexnan+0xcc>
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	b91b      	cbnz	r3, 800f6a8 <__hexnan+0xe0>
 800f6a0:	4547      	cmp	r7, r8
 800f6a2:	d128      	bne.n	800f6f6 <__hexnan+0x12e>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	603b      	str	r3, [r7, #0]
 800f6a8:	2005      	movs	r0, #5
 800f6aa:	b007      	add	sp, #28
 800f6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b0:	3501      	adds	r5, #1
 800f6b2:	2d08      	cmp	r5, #8
 800f6b4:	f10b 0b01 	add.w	fp, fp, #1
 800f6b8:	dd06      	ble.n	800f6c8 <__hexnan+0x100>
 800f6ba:	4544      	cmp	r4, r8
 800f6bc:	d9c1      	bls.n	800f642 <__hexnan+0x7a>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f6c4:	2501      	movs	r5, #1
 800f6c6:	3c04      	subs	r4, #4
 800f6c8:	6822      	ldr	r2, [r4, #0]
 800f6ca:	f000 000f 	and.w	r0, r0, #15
 800f6ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f6d2:	6020      	str	r0, [r4, #0]
 800f6d4:	e7b5      	b.n	800f642 <__hexnan+0x7a>
 800f6d6:	2508      	movs	r5, #8
 800f6d8:	e7b3      	b.n	800f642 <__hexnan+0x7a>
 800f6da:	9b01      	ldr	r3, [sp, #4]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d0dd      	beq.n	800f69c <__hexnan+0xd4>
 800f6e0:	f1c3 0320 	rsb	r3, r3, #32
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e8:	40da      	lsrs	r2, r3
 800f6ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f6ee:	4013      	ands	r3, r2
 800f6f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f6f4:	e7d2      	b.n	800f69c <__hexnan+0xd4>
 800f6f6:	3f04      	subs	r7, #4
 800f6f8:	e7d0      	b.n	800f69c <__hexnan+0xd4>
 800f6fa:	2004      	movs	r0, #4
 800f6fc:	e7d5      	b.n	800f6aa <__hexnan+0xe2>
	...

0800f700 <malloc>:
 800f700:	4b02      	ldr	r3, [pc, #8]	@ (800f70c <malloc+0xc>)
 800f702:	4601      	mov	r1, r0
 800f704:	6818      	ldr	r0, [r3, #0]
 800f706:	f000 b825 	b.w	800f754 <_malloc_r>
 800f70a:	bf00      	nop
 800f70c:	20000230 	.word	0x20000230

0800f710 <sbrk_aligned>:
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	4e0f      	ldr	r6, [pc, #60]	@ (800f750 <sbrk_aligned+0x40>)
 800f714:	460c      	mov	r4, r1
 800f716:	6831      	ldr	r1, [r6, #0]
 800f718:	4605      	mov	r5, r0
 800f71a:	b911      	cbnz	r1, 800f722 <sbrk_aligned+0x12>
 800f71c:	f001 f9e6 	bl	8010aec <_sbrk_r>
 800f720:	6030      	str	r0, [r6, #0]
 800f722:	4621      	mov	r1, r4
 800f724:	4628      	mov	r0, r5
 800f726:	f001 f9e1 	bl	8010aec <_sbrk_r>
 800f72a:	1c43      	adds	r3, r0, #1
 800f72c:	d103      	bne.n	800f736 <sbrk_aligned+0x26>
 800f72e:	f04f 34ff 	mov.w	r4, #4294967295
 800f732:	4620      	mov	r0, r4
 800f734:	bd70      	pop	{r4, r5, r6, pc}
 800f736:	1cc4      	adds	r4, r0, #3
 800f738:	f024 0403 	bic.w	r4, r4, #3
 800f73c:	42a0      	cmp	r0, r4
 800f73e:	d0f8      	beq.n	800f732 <sbrk_aligned+0x22>
 800f740:	1a21      	subs	r1, r4, r0
 800f742:	4628      	mov	r0, r5
 800f744:	f001 f9d2 	bl	8010aec <_sbrk_r>
 800f748:	3001      	adds	r0, #1
 800f74a:	d1f2      	bne.n	800f732 <sbrk_aligned+0x22>
 800f74c:	e7ef      	b.n	800f72e <sbrk_aligned+0x1e>
 800f74e:	bf00      	nop
 800f750:	200029e0 	.word	0x200029e0

0800f754 <_malloc_r>:
 800f754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f758:	1ccd      	adds	r5, r1, #3
 800f75a:	f025 0503 	bic.w	r5, r5, #3
 800f75e:	3508      	adds	r5, #8
 800f760:	2d0c      	cmp	r5, #12
 800f762:	bf38      	it	cc
 800f764:	250c      	movcc	r5, #12
 800f766:	2d00      	cmp	r5, #0
 800f768:	4606      	mov	r6, r0
 800f76a:	db01      	blt.n	800f770 <_malloc_r+0x1c>
 800f76c:	42a9      	cmp	r1, r5
 800f76e:	d904      	bls.n	800f77a <_malloc_r+0x26>
 800f770:	230c      	movs	r3, #12
 800f772:	6033      	str	r3, [r6, #0]
 800f774:	2000      	movs	r0, #0
 800f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f77a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f850 <_malloc_r+0xfc>
 800f77e:	f000 f87b 	bl	800f878 <__malloc_lock>
 800f782:	f8d8 3000 	ldr.w	r3, [r8]
 800f786:	461c      	mov	r4, r3
 800f788:	bb44      	cbnz	r4, 800f7dc <_malloc_r+0x88>
 800f78a:	4629      	mov	r1, r5
 800f78c:	4630      	mov	r0, r6
 800f78e:	f7ff ffbf 	bl	800f710 <sbrk_aligned>
 800f792:	1c43      	adds	r3, r0, #1
 800f794:	4604      	mov	r4, r0
 800f796:	d158      	bne.n	800f84a <_malloc_r+0xf6>
 800f798:	f8d8 4000 	ldr.w	r4, [r8]
 800f79c:	4627      	mov	r7, r4
 800f79e:	2f00      	cmp	r7, #0
 800f7a0:	d143      	bne.n	800f82a <_malloc_r+0xd6>
 800f7a2:	2c00      	cmp	r4, #0
 800f7a4:	d04b      	beq.n	800f83e <_malloc_r+0xea>
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	4639      	mov	r1, r7
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	eb04 0903 	add.w	r9, r4, r3
 800f7b0:	f001 f99c 	bl	8010aec <_sbrk_r>
 800f7b4:	4581      	cmp	r9, r0
 800f7b6:	d142      	bne.n	800f83e <_malloc_r+0xea>
 800f7b8:	6821      	ldr	r1, [r4, #0]
 800f7ba:	1a6d      	subs	r5, r5, r1
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4630      	mov	r0, r6
 800f7c0:	f7ff ffa6 	bl	800f710 <sbrk_aligned>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d03a      	beq.n	800f83e <_malloc_r+0xea>
 800f7c8:	6823      	ldr	r3, [r4, #0]
 800f7ca:	442b      	add	r3, r5
 800f7cc:	6023      	str	r3, [r4, #0]
 800f7ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f7d2:	685a      	ldr	r2, [r3, #4]
 800f7d4:	bb62      	cbnz	r2, 800f830 <_malloc_r+0xdc>
 800f7d6:	f8c8 7000 	str.w	r7, [r8]
 800f7da:	e00f      	b.n	800f7fc <_malloc_r+0xa8>
 800f7dc:	6822      	ldr	r2, [r4, #0]
 800f7de:	1b52      	subs	r2, r2, r5
 800f7e0:	d420      	bmi.n	800f824 <_malloc_r+0xd0>
 800f7e2:	2a0b      	cmp	r2, #11
 800f7e4:	d917      	bls.n	800f816 <_malloc_r+0xc2>
 800f7e6:	1961      	adds	r1, r4, r5
 800f7e8:	42a3      	cmp	r3, r4
 800f7ea:	6025      	str	r5, [r4, #0]
 800f7ec:	bf18      	it	ne
 800f7ee:	6059      	strne	r1, [r3, #4]
 800f7f0:	6863      	ldr	r3, [r4, #4]
 800f7f2:	bf08      	it	eq
 800f7f4:	f8c8 1000 	streq.w	r1, [r8]
 800f7f8:	5162      	str	r2, [r4, r5]
 800f7fa:	604b      	str	r3, [r1, #4]
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f000 f841 	bl	800f884 <__malloc_unlock>
 800f802:	f104 000b 	add.w	r0, r4, #11
 800f806:	1d23      	adds	r3, r4, #4
 800f808:	f020 0007 	bic.w	r0, r0, #7
 800f80c:	1ac2      	subs	r2, r0, r3
 800f80e:	bf1c      	itt	ne
 800f810:	1a1b      	subne	r3, r3, r0
 800f812:	50a3      	strne	r3, [r4, r2]
 800f814:	e7af      	b.n	800f776 <_malloc_r+0x22>
 800f816:	6862      	ldr	r2, [r4, #4]
 800f818:	42a3      	cmp	r3, r4
 800f81a:	bf0c      	ite	eq
 800f81c:	f8c8 2000 	streq.w	r2, [r8]
 800f820:	605a      	strne	r2, [r3, #4]
 800f822:	e7eb      	b.n	800f7fc <_malloc_r+0xa8>
 800f824:	4623      	mov	r3, r4
 800f826:	6864      	ldr	r4, [r4, #4]
 800f828:	e7ae      	b.n	800f788 <_malloc_r+0x34>
 800f82a:	463c      	mov	r4, r7
 800f82c:	687f      	ldr	r7, [r7, #4]
 800f82e:	e7b6      	b.n	800f79e <_malloc_r+0x4a>
 800f830:	461a      	mov	r2, r3
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	42a3      	cmp	r3, r4
 800f836:	d1fb      	bne.n	800f830 <_malloc_r+0xdc>
 800f838:	2300      	movs	r3, #0
 800f83a:	6053      	str	r3, [r2, #4]
 800f83c:	e7de      	b.n	800f7fc <_malloc_r+0xa8>
 800f83e:	230c      	movs	r3, #12
 800f840:	6033      	str	r3, [r6, #0]
 800f842:	4630      	mov	r0, r6
 800f844:	f000 f81e 	bl	800f884 <__malloc_unlock>
 800f848:	e794      	b.n	800f774 <_malloc_r+0x20>
 800f84a:	6005      	str	r5, [r0, #0]
 800f84c:	e7d6      	b.n	800f7fc <_malloc_r+0xa8>
 800f84e:	bf00      	nop
 800f850:	200029e4 	.word	0x200029e4

0800f854 <__ascii_mbtowc>:
 800f854:	b082      	sub	sp, #8
 800f856:	b901      	cbnz	r1, 800f85a <__ascii_mbtowc+0x6>
 800f858:	a901      	add	r1, sp, #4
 800f85a:	b142      	cbz	r2, 800f86e <__ascii_mbtowc+0x1a>
 800f85c:	b14b      	cbz	r3, 800f872 <__ascii_mbtowc+0x1e>
 800f85e:	7813      	ldrb	r3, [r2, #0]
 800f860:	600b      	str	r3, [r1, #0]
 800f862:	7812      	ldrb	r2, [r2, #0]
 800f864:	1e10      	subs	r0, r2, #0
 800f866:	bf18      	it	ne
 800f868:	2001      	movne	r0, #1
 800f86a:	b002      	add	sp, #8
 800f86c:	4770      	bx	lr
 800f86e:	4610      	mov	r0, r2
 800f870:	e7fb      	b.n	800f86a <__ascii_mbtowc+0x16>
 800f872:	f06f 0001 	mvn.w	r0, #1
 800f876:	e7f8      	b.n	800f86a <__ascii_mbtowc+0x16>

0800f878 <__malloc_lock>:
 800f878:	4801      	ldr	r0, [pc, #4]	@ (800f880 <__malloc_lock+0x8>)
 800f87a:	f7fe bd4e 	b.w	800e31a <__retarget_lock_acquire_recursive>
 800f87e:	bf00      	nop
 800f880:	200029dc 	.word	0x200029dc

0800f884 <__malloc_unlock>:
 800f884:	4801      	ldr	r0, [pc, #4]	@ (800f88c <__malloc_unlock+0x8>)
 800f886:	f7fe bd49 	b.w	800e31c <__retarget_lock_release_recursive>
 800f88a:	bf00      	nop
 800f88c:	200029dc 	.word	0x200029dc

0800f890 <_Balloc>:
 800f890:	b570      	push	{r4, r5, r6, lr}
 800f892:	69c6      	ldr	r6, [r0, #28]
 800f894:	4604      	mov	r4, r0
 800f896:	460d      	mov	r5, r1
 800f898:	b976      	cbnz	r6, 800f8b8 <_Balloc+0x28>
 800f89a:	2010      	movs	r0, #16
 800f89c:	f7ff ff30 	bl	800f700 <malloc>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	61e0      	str	r0, [r4, #28]
 800f8a4:	b920      	cbnz	r0, 800f8b0 <_Balloc+0x20>
 800f8a6:	4b18      	ldr	r3, [pc, #96]	@ (800f908 <_Balloc+0x78>)
 800f8a8:	4818      	ldr	r0, [pc, #96]	@ (800f90c <_Balloc+0x7c>)
 800f8aa:	216b      	movs	r1, #107	@ 0x6b
 800f8ac:	f001 f92e 	bl	8010b0c <__assert_func>
 800f8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8b4:	6006      	str	r6, [r0, #0]
 800f8b6:	60c6      	str	r6, [r0, #12]
 800f8b8:	69e6      	ldr	r6, [r4, #28]
 800f8ba:	68f3      	ldr	r3, [r6, #12]
 800f8bc:	b183      	cbz	r3, 800f8e0 <_Balloc+0x50>
 800f8be:	69e3      	ldr	r3, [r4, #28]
 800f8c0:	68db      	ldr	r3, [r3, #12]
 800f8c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8c6:	b9b8      	cbnz	r0, 800f8f8 <_Balloc+0x68>
 800f8c8:	2101      	movs	r1, #1
 800f8ca:	fa01 f605 	lsl.w	r6, r1, r5
 800f8ce:	1d72      	adds	r2, r6, #5
 800f8d0:	0092      	lsls	r2, r2, #2
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f001 f938 	bl	8010b48 <_calloc_r>
 800f8d8:	b160      	cbz	r0, 800f8f4 <_Balloc+0x64>
 800f8da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8de:	e00e      	b.n	800f8fe <_Balloc+0x6e>
 800f8e0:	2221      	movs	r2, #33	@ 0x21
 800f8e2:	2104      	movs	r1, #4
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f001 f92f 	bl	8010b48 <_calloc_r>
 800f8ea:	69e3      	ldr	r3, [r4, #28]
 800f8ec:	60f0      	str	r0, [r6, #12]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1e4      	bne.n	800f8be <_Balloc+0x2e>
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	bd70      	pop	{r4, r5, r6, pc}
 800f8f8:	6802      	ldr	r2, [r0, #0]
 800f8fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8fe:	2300      	movs	r3, #0
 800f900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f904:	e7f7      	b.n	800f8f6 <_Balloc+0x66>
 800f906:	bf00      	nop
 800f908:	08011546 	.word	0x08011546
 800f90c:	08011626 	.word	0x08011626

0800f910 <_Bfree>:
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	69c6      	ldr	r6, [r0, #28]
 800f914:	4605      	mov	r5, r0
 800f916:	460c      	mov	r4, r1
 800f918:	b976      	cbnz	r6, 800f938 <_Bfree+0x28>
 800f91a:	2010      	movs	r0, #16
 800f91c:	f7ff fef0 	bl	800f700 <malloc>
 800f920:	4602      	mov	r2, r0
 800f922:	61e8      	str	r0, [r5, #28]
 800f924:	b920      	cbnz	r0, 800f930 <_Bfree+0x20>
 800f926:	4b09      	ldr	r3, [pc, #36]	@ (800f94c <_Bfree+0x3c>)
 800f928:	4809      	ldr	r0, [pc, #36]	@ (800f950 <_Bfree+0x40>)
 800f92a:	218f      	movs	r1, #143	@ 0x8f
 800f92c:	f001 f8ee 	bl	8010b0c <__assert_func>
 800f930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f934:	6006      	str	r6, [r0, #0]
 800f936:	60c6      	str	r6, [r0, #12]
 800f938:	b13c      	cbz	r4, 800f94a <_Bfree+0x3a>
 800f93a:	69eb      	ldr	r3, [r5, #28]
 800f93c:	6862      	ldr	r2, [r4, #4]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f944:	6021      	str	r1, [r4, #0]
 800f946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f94a:	bd70      	pop	{r4, r5, r6, pc}
 800f94c:	08011546 	.word	0x08011546
 800f950:	08011626 	.word	0x08011626

0800f954 <__multadd>:
 800f954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f958:	690d      	ldr	r5, [r1, #16]
 800f95a:	4607      	mov	r7, r0
 800f95c:	460c      	mov	r4, r1
 800f95e:	461e      	mov	r6, r3
 800f960:	f101 0c14 	add.w	ip, r1, #20
 800f964:	2000      	movs	r0, #0
 800f966:	f8dc 3000 	ldr.w	r3, [ip]
 800f96a:	b299      	uxth	r1, r3
 800f96c:	fb02 6101 	mla	r1, r2, r1, r6
 800f970:	0c1e      	lsrs	r6, r3, #16
 800f972:	0c0b      	lsrs	r3, r1, #16
 800f974:	fb02 3306 	mla	r3, r2, r6, r3
 800f978:	b289      	uxth	r1, r1
 800f97a:	3001      	adds	r0, #1
 800f97c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f980:	4285      	cmp	r5, r0
 800f982:	f84c 1b04 	str.w	r1, [ip], #4
 800f986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f98a:	dcec      	bgt.n	800f966 <__multadd+0x12>
 800f98c:	b30e      	cbz	r6, 800f9d2 <__multadd+0x7e>
 800f98e:	68a3      	ldr	r3, [r4, #8]
 800f990:	42ab      	cmp	r3, r5
 800f992:	dc19      	bgt.n	800f9c8 <__multadd+0x74>
 800f994:	6861      	ldr	r1, [r4, #4]
 800f996:	4638      	mov	r0, r7
 800f998:	3101      	adds	r1, #1
 800f99a:	f7ff ff79 	bl	800f890 <_Balloc>
 800f99e:	4680      	mov	r8, r0
 800f9a0:	b928      	cbnz	r0, 800f9ae <__multadd+0x5a>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d8 <__multadd+0x84>)
 800f9a6:	480d      	ldr	r0, [pc, #52]	@ (800f9dc <__multadd+0x88>)
 800f9a8:	21ba      	movs	r1, #186	@ 0xba
 800f9aa:	f001 f8af 	bl	8010b0c <__assert_func>
 800f9ae:	6922      	ldr	r2, [r4, #16]
 800f9b0:	3202      	adds	r2, #2
 800f9b2:	f104 010c 	add.w	r1, r4, #12
 800f9b6:	0092      	lsls	r2, r2, #2
 800f9b8:	300c      	adds	r0, #12
 800f9ba:	f7fe fcb0 	bl	800e31e <memcpy>
 800f9be:	4621      	mov	r1, r4
 800f9c0:	4638      	mov	r0, r7
 800f9c2:	f7ff ffa5 	bl	800f910 <_Bfree>
 800f9c6:	4644      	mov	r4, r8
 800f9c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9cc:	3501      	adds	r5, #1
 800f9ce:	615e      	str	r6, [r3, #20]
 800f9d0:	6125      	str	r5, [r4, #16]
 800f9d2:	4620      	mov	r0, r4
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	080115b5 	.word	0x080115b5
 800f9dc:	08011626 	.word	0x08011626

0800f9e0 <__s2b>:
 800f9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9e4:	460c      	mov	r4, r1
 800f9e6:	4615      	mov	r5, r2
 800f9e8:	461f      	mov	r7, r3
 800f9ea:	2209      	movs	r2, #9
 800f9ec:	3308      	adds	r3, #8
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	db09      	blt.n	800fa10 <__s2b+0x30>
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	f7ff ff47 	bl	800f890 <_Balloc>
 800fa02:	b940      	cbnz	r0, 800fa16 <__s2b+0x36>
 800fa04:	4602      	mov	r2, r0
 800fa06:	4b19      	ldr	r3, [pc, #100]	@ (800fa6c <__s2b+0x8c>)
 800fa08:	4819      	ldr	r0, [pc, #100]	@ (800fa70 <__s2b+0x90>)
 800fa0a:	21d3      	movs	r1, #211	@ 0xd3
 800fa0c:	f001 f87e 	bl	8010b0c <__assert_func>
 800fa10:	0052      	lsls	r2, r2, #1
 800fa12:	3101      	adds	r1, #1
 800fa14:	e7f0      	b.n	800f9f8 <__s2b+0x18>
 800fa16:	9b08      	ldr	r3, [sp, #32]
 800fa18:	6143      	str	r3, [r0, #20]
 800fa1a:	2d09      	cmp	r5, #9
 800fa1c:	f04f 0301 	mov.w	r3, #1
 800fa20:	6103      	str	r3, [r0, #16]
 800fa22:	dd16      	ble.n	800fa52 <__s2b+0x72>
 800fa24:	f104 0909 	add.w	r9, r4, #9
 800fa28:	46c8      	mov	r8, r9
 800fa2a:	442c      	add	r4, r5
 800fa2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa30:	4601      	mov	r1, r0
 800fa32:	3b30      	subs	r3, #48	@ 0x30
 800fa34:	220a      	movs	r2, #10
 800fa36:	4630      	mov	r0, r6
 800fa38:	f7ff ff8c 	bl	800f954 <__multadd>
 800fa3c:	45a0      	cmp	r8, r4
 800fa3e:	d1f5      	bne.n	800fa2c <__s2b+0x4c>
 800fa40:	f1a5 0408 	sub.w	r4, r5, #8
 800fa44:	444c      	add	r4, r9
 800fa46:	1b2d      	subs	r5, r5, r4
 800fa48:	1963      	adds	r3, r4, r5
 800fa4a:	42bb      	cmp	r3, r7
 800fa4c:	db04      	blt.n	800fa58 <__s2b+0x78>
 800fa4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa52:	340a      	adds	r4, #10
 800fa54:	2509      	movs	r5, #9
 800fa56:	e7f6      	b.n	800fa46 <__s2b+0x66>
 800fa58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa5c:	4601      	mov	r1, r0
 800fa5e:	3b30      	subs	r3, #48	@ 0x30
 800fa60:	220a      	movs	r2, #10
 800fa62:	4630      	mov	r0, r6
 800fa64:	f7ff ff76 	bl	800f954 <__multadd>
 800fa68:	e7ee      	b.n	800fa48 <__s2b+0x68>
 800fa6a:	bf00      	nop
 800fa6c:	080115b5 	.word	0x080115b5
 800fa70:	08011626 	.word	0x08011626

0800fa74 <__hi0bits>:
 800fa74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fa78:	4603      	mov	r3, r0
 800fa7a:	bf36      	itet	cc
 800fa7c:	0403      	lslcc	r3, r0, #16
 800fa7e:	2000      	movcs	r0, #0
 800fa80:	2010      	movcc	r0, #16
 800fa82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa86:	bf3c      	itt	cc
 800fa88:	021b      	lslcc	r3, r3, #8
 800fa8a:	3008      	addcc	r0, #8
 800fa8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa90:	bf3c      	itt	cc
 800fa92:	011b      	lslcc	r3, r3, #4
 800fa94:	3004      	addcc	r0, #4
 800fa96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa9a:	bf3c      	itt	cc
 800fa9c:	009b      	lslcc	r3, r3, #2
 800fa9e:	3002      	addcc	r0, #2
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	db05      	blt.n	800fab0 <__hi0bits+0x3c>
 800faa4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800faa8:	f100 0001 	add.w	r0, r0, #1
 800faac:	bf08      	it	eq
 800faae:	2020      	moveq	r0, #32
 800fab0:	4770      	bx	lr

0800fab2 <__lo0bits>:
 800fab2:	6803      	ldr	r3, [r0, #0]
 800fab4:	4602      	mov	r2, r0
 800fab6:	f013 0007 	ands.w	r0, r3, #7
 800faba:	d00b      	beq.n	800fad4 <__lo0bits+0x22>
 800fabc:	07d9      	lsls	r1, r3, #31
 800fabe:	d421      	bmi.n	800fb04 <__lo0bits+0x52>
 800fac0:	0798      	lsls	r0, r3, #30
 800fac2:	bf49      	itett	mi
 800fac4:	085b      	lsrmi	r3, r3, #1
 800fac6:	089b      	lsrpl	r3, r3, #2
 800fac8:	2001      	movmi	r0, #1
 800faca:	6013      	strmi	r3, [r2, #0]
 800facc:	bf5c      	itt	pl
 800face:	6013      	strpl	r3, [r2, #0]
 800fad0:	2002      	movpl	r0, #2
 800fad2:	4770      	bx	lr
 800fad4:	b299      	uxth	r1, r3
 800fad6:	b909      	cbnz	r1, 800fadc <__lo0bits+0x2a>
 800fad8:	0c1b      	lsrs	r3, r3, #16
 800fada:	2010      	movs	r0, #16
 800fadc:	b2d9      	uxtb	r1, r3
 800fade:	b909      	cbnz	r1, 800fae4 <__lo0bits+0x32>
 800fae0:	3008      	adds	r0, #8
 800fae2:	0a1b      	lsrs	r3, r3, #8
 800fae4:	0719      	lsls	r1, r3, #28
 800fae6:	bf04      	itt	eq
 800fae8:	091b      	lsreq	r3, r3, #4
 800faea:	3004      	addeq	r0, #4
 800faec:	0799      	lsls	r1, r3, #30
 800faee:	bf04      	itt	eq
 800faf0:	089b      	lsreq	r3, r3, #2
 800faf2:	3002      	addeq	r0, #2
 800faf4:	07d9      	lsls	r1, r3, #31
 800faf6:	d403      	bmi.n	800fb00 <__lo0bits+0x4e>
 800faf8:	085b      	lsrs	r3, r3, #1
 800fafa:	f100 0001 	add.w	r0, r0, #1
 800fafe:	d003      	beq.n	800fb08 <__lo0bits+0x56>
 800fb00:	6013      	str	r3, [r2, #0]
 800fb02:	4770      	bx	lr
 800fb04:	2000      	movs	r0, #0
 800fb06:	4770      	bx	lr
 800fb08:	2020      	movs	r0, #32
 800fb0a:	4770      	bx	lr

0800fb0c <__i2b>:
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	460c      	mov	r4, r1
 800fb10:	2101      	movs	r1, #1
 800fb12:	f7ff febd 	bl	800f890 <_Balloc>
 800fb16:	4602      	mov	r2, r0
 800fb18:	b928      	cbnz	r0, 800fb26 <__i2b+0x1a>
 800fb1a:	4b05      	ldr	r3, [pc, #20]	@ (800fb30 <__i2b+0x24>)
 800fb1c:	4805      	ldr	r0, [pc, #20]	@ (800fb34 <__i2b+0x28>)
 800fb1e:	f240 1145 	movw	r1, #325	@ 0x145
 800fb22:	f000 fff3 	bl	8010b0c <__assert_func>
 800fb26:	2301      	movs	r3, #1
 800fb28:	6144      	str	r4, [r0, #20]
 800fb2a:	6103      	str	r3, [r0, #16]
 800fb2c:	bd10      	pop	{r4, pc}
 800fb2e:	bf00      	nop
 800fb30:	080115b5 	.word	0x080115b5
 800fb34:	08011626 	.word	0x08011626

0800fb38 <__multiply>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	4614      	mov	r4, r2
 800fb3e:	690a      	ldr	r2, [r1, #16]
 800fb40:	6923      	ldr	r3, [r4, #16]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	bfa8      	it	ge
 800fb46:	4623      	movge	r3, r4
 800fb48:	460f      	mov	r7, r1
 800fb4a:	bfa4      	itt	ge
 800fb4c:	460c      	movge	r4, r1
 800fb4e:	461f      	movge	r7, r3
 800fb50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fb54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fb58:	68a3      	ldr	r3, [r4, #8]
 800fb5a:	6861      	ldr	r1, [r4, #4]
 800fb5c:	eb0a 0609 	add.w	r6, sl, r9
 800fb60:	42b3      	cmp	r3, r6
 800fb62:	b085      	sub	sp, #20
 800fb64:	bfb8      	it	lt
 800fb66:	3101      	addlt	r1, #1
 800fb68:	f7ff fe92 	bl	800f890 <_Balloc>
 800fb6c:	b930      	cbnz	r0, 800fb7c <__multiply+0x44>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	4b44      	ldr	r3, [pc, #272]	@ (800fc84 <__multiply+0x14c>)
 800fb72:	4845      	ldr	r0, [pc, #276]	@ (800fc88 <__multiply+0x150>)
 800fb74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fb78:	f000 ffc8 	bl	8010b0c <__assert_func>
 800fb7c:	f100 0514 	add.w	r5, r0, #20
 800fb80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb84:	462b      	mov	r3, r5
 800fb86:	2200      	movs	r2, #0
 800fb88:	4543      	cmp	r3, r8
 800fb8a:	d321      	bcc.n	800fbd0 <__multiply+0x98>
 800fb8c:	f107 0114 	add.w	r1, r7, #20
 800fb90:	f104 0214 	add.w	r2, r4, #20
 800fb94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fb98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fb9c:	9302      	str	r3, [sp, #8]
 800fb9e:	1b13      	subs	r3, r2, r4
 800fba0:	3b15      	subs	r3, #21
 800fba2:	f023 0303 	bic.w	r3, r3, #3
 800fba6:	3304      	adds	r3, #4
 800fba8:	f104 0715 	add.w	r7, r4, #21
 800fbac:	42ba      	cmp	r2, r7
 800fbae:	bf38      	it	cc
 800fbb0:	2304      	movcc	r3, #4
 800fbb2:	9301      	str	r3, [sp, #4]
 800fbb4:	9b02      	ldr	r3, [sp, #8]
 800fbb6:	9103      	str	r1, [sp, #12]
 800fbb8:	428b      	cmp	r3, r1
 800fbba:	d80c      	bhi.n	800fbd6 <__multiply+0x9e>
 800fbbc:	2e00      	cmp	r6, #0
 800fbbe:	dd03      	ble.n	800fbc8 <__multiply+0x90>
 800fbc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d05b      	beq.n	800fc80 <__multiply+0x148>
 800fbc8:	6106      	str	r6, [r0, #16]
 800fbca:	b005      	add	sp, #20
 800fbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd0:	f843 2b04 	str.w	r2, [r3], #4
 800fbd4:	e7d8      	b.n	800fb88 <__multiply+0x50>
 800fbd6:	f8b1 a000 	ldrh.w	sl, [r1]
 800fbda:	f1ba 0f00 	cmp.w	sl, #0
 800fbde:	d024      	beq.n	800fc2a <__multiply+0xf2>
 800fbe0:	f104 0e14 	add.w	lr, r4, #20
 800fbe4:	46a9      	mov	r9, r5
 800fbe6:	f04f 0c00 	mov.w	ip, #0
 800fbea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbee:	f8d9 3000 	ldr.w	r3, [r9]
 800fbf2:	fa1f fb87 	uxth.w	fp, r7
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800fbfc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fc00:	f8d9 7000 	ldr.w	r7, [r9]
 800fc04:	4463      	add	r3, ip
 800fc06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc0a:	fb0a c70b 	mla	r7, sl, fp, ip
 800fc0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc18:	4572      	cmp	r2, lr
 800fc1a:	f849 3b04 	str.w	r3, [r9], #4
 800fc1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc22:	d8e2      	bhi.n	800fbea <__multiply+0xb2>
 800fc24:	9b01      	ldr	r3, [sp, #4]
 800fc26:	f845 c003 	str.w	ip, [r5, r3]
 800fc2a:	9b03      	ldr	r3, [sp, #12]
 800fc2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fc30:	3104      	adds	r1, #4
 800fc32:	f1b9 0f00 	cmp.w	r9, #0
 800fc36:	d021      	beq.n	800fc7c <__multiply+0x144>
 800fc38:	682b      	ldr	r3, [r5, #0]
 800fc3a:	f104 0c14 	add.w	ip, r4, #20
 800fc3e:	46ae      	mov	lr, r5
 800fc40:	f04f 0a00 	mov.w	sl, #0
 800fc44:	f8bc b000 	ldrh.w	fp, [ip]
 800fc48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fc4c:	fb09 770b 	mla	r7, r9, fp, r7
 800fc50:	4457      	add	r7, sl
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc58:	f84e 3b04 	str.w	r3, [lr], #4
 800fc5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc64:	f8be 3000 	ldrh.w	r3, [lr]
 800fc68:	fb09 330a 	mla	r3, r9, sl, r3
 800fc6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fc70:	4562      	cmp	r2, ip
 800fc72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc76:	d8e5      	bhi.n	800fc44 <__multiply+0x10c>
 800fc78:	9f01      	ldr	r7, [sp, #4]
 800fc7a:	51eb      	str	r3, [r5, r7]
 800fc7c:	3504      	adds	r5, #4
 800fc7e:	e799      	b.n	800fbb4 <__multiply+0x7c>
 800fc80:	3e01      	subs	r6, #1
 800fc82:	e79b      	b.n	800fbbc <__multiply+0x84>
 800fc84:	080115b5 	.word	0x080115b5
 800fc88:	08011626 	.word	0x08011626

0800fc8c <__pow5mult>:
 800fc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc90:	4615      	mov	r5, r2
 800fc92:	f012 0203 	ands.w	r2, r2, #3
 800fc96:	4607      	mov	r7, r0
 800fc98:	460e      	mov	r6, r1
 800fc9a:	d007      	beq.n	800fcac <__pow5mult+0x20>
 800fc9c:	4c25      	ldr	r4, [pc, #148]	@ (800fd34 <__pow5mult+0xa8>)
 800fc9e:	3a01      	subs	r2, #1
 800fca0:	2300      	movs	r3, #0
 800fca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fca6:	f7ff fe55 	bl	800f954 <__multadd>
 800fcaa:	4606      	mov	r6, r0
 800fcac:	10ad      	asrs	r5, r5, #2
 800fcae:	d03d      	beq.n	800fd2c <__pow5mult+0xa0>
 800fcb0:	69fc      	ldr	r4, [r7, #28]
 800fcb2:	b97c      	cbnz	r4, 800fcd4 <__pow5mult+0x48>
 800fcb4:	2010      	movs	r0, #16
 800fcb6:	f7ff fd23 	bl	800f700 <malloc>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	61f8      	str	r0, [r7, #28]
 800fcbe:	b928      	cbnz	r0, 800fccc <__pow5mult+0x40>
 800fcc0:	4b1d      	ldr	r3, [pc, #116]	@ (800fd38 <__pow5mult+0xac>)
 800fcc2:	481e      	ldr	r0, [pc, #120]	@ (800fd3c <__pow5mult+0xb0>)
 800fcc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fcc8:	f000 ff20 	bl	8010b0c <__assert_func>
 800fccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcd0:	6004      	str	r4, [r0, #0]
 800fcd2:	60c4      	str	r4, [r0, #12]
 800fcd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fcd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fcdc:	b94c      	cbnz	r4, 800fcf2 <__pow5mult+0x66>
 800fcde:	f240 2171 	movw	r1, #625	@ 0x271
 800fce2:	4638      	mov	r0, r7
 800fce4:	f7ff ff12 	bl	800fb0c <__i2b>
 800fce8:	2300      	movs	r3, #0
 800fcea:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcee:	4604      	mov	r4, r0
 800fcf0:	6003      	str	r3, [r0, #0]
 800fcf2:	f04f 0900 	mov.w	r9, #0
 800fcf6:	07eb      	lsls	r3, r5, #31
 800fcf8:	d50a      	bpl.n	800fd10 <__pow5mult+0x84>
 800fcfa:	4631      	mov	r1, r6
 800fcfc:	4622      	mov	r2, r4
 800fcfe:	4638      	mov	r0, r7
 800fd00:	f7ff ff1a 	bl	800fb38 <__multiply>
 800fd04:	4631      	mov	r1, r6
 800fd06:	4680      	mov	r8, r0
 800fd08:	4638      	mov	r0, r7
 800fd0a:	f7ff fe01 	bl	800f910 <_Bfree>
 800fd0e:	4646      	mov	r6, r8
 800fd10:	106d      	asrs	r5, r5, #1
 800fd12:	d00b      	beq.n	800fd2c <__pow5mult+0xa0>
 800fd14:	6820      	ldr	r0, [r4, #0]
 800fd16:	b938      	cbnz	r0, 800fd28 <__pow5mult+0x9c>
 800fd18:	4622      	mov	r2, r4
 800fd1a:	4621      	mov	r1, r4
 800fd1c:	4638      	mov	r0, r7
 800fd1e:	f7ff ff0b 	bl	800fb38 <__multiply>
 800fd22:	6020      	str	r0, [r4, #0]
 800fd24:	f8c0 9000 	str.w	r9, [r0]
 800fd28:	4604      	mov	r4, r0
 800fd2a:	e7e4      	b.n	800fcf6 <__pow5mult+0x6a>
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd32:	bf00      	nop
 800fd34:	08011680 	.word	0x08011680
 800fd38:	08011546 	.word	0x08011546
 800fd3c:	08011626 	.word	0x08011626

0800fd40 <__lshift>:
 800fd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd44:	460c      	mov	r4, r1
 800fd46:	6849      	ldr	r1, [r1, #4]
 800fd48:	6923      	ldr	r3, [r4, #16]
 800fd4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd4e:	68a3      	ldr	r3, [r4, #8]
 800fd50:	4607      	mov	r7, r0
 800fd52:	4691      	mov	r9, r2
 800fd54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd58:	f108 0601 	add.w	r6, r8, #1
 800fd5c:	42b3      	cmp	r3, r6
 800fd5e:	db0b      	blt.n	800fd78 <__lshift+0x38>
 800fd60:	4638      	mov	r0, r7
 800fd62:	f7ff fd95 	bl	800f890 <_Balloc>
 800fd66:	4605      	mov	r5, r0
 800fd68:	b948      	cbnz	r0, 800fd7e <__lshift+0x3e>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	4b28      	ldr	r3, [pc, #160]	@ (800fe10 <__lshift+0xd0>)
 800fd6e:	4829      	ldr	r0, [pc, #164]	@ (800fe14 <__lshift+0xd4>)
 800fd70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fd74:	f000 feca 	bl	8010b0c <__assert_func>
 800fd78:	3101      	adds	r1, #1
 800fd7a:	005b      	lsls	r3, r3, #1
 800fd7c:	e7ee      	b.n	800fd5c <__lshift+0x1c>
 800fd7e:	2300      	movs	r3, #0
 800fd80:	f100 0114 	add.w	r1, r0, #20
 800fd84:	f100 0210 	add.w	r2, r0, #16
 800fd88:	4618      	mov	r0, r3
 800fd8a:	4553      	cmp	r3, sl
 800fd8c:	db33      	blt.n	800fdf6 <__lshift+0xb6>
 800fd8e:	6920      	ldr	r0, [r4, #16]
 800fd90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd94:	f104 0314 	add.w	r3, r4, #20
 800fd98:	f019 091f 	ands.w	r9, r9, #31
 800fd9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fda0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fda4:	d02b      	beq.n	800fdfe <__lshift+0xbe>
 800fda6:	f1c9 0e20 	rsb	lr, r9, #32
 800fdaa:	468a      	mov	sl, r1
 800fdac:	2200      	movs	r2, #0
 800fdae:	6818      	ldr	r0, [r3, #0]
 800fdb0:	fa00 f009 	lsl.w	r0, r0, r9
 800fdb4:	4310      	orrs	r0, r2
 800fdb6:	f84a 0b04 	str.w	r0, [sl], #4
 800fdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdbe:	459c      	cmp	ip, r3
 800fdc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdc4:	d8f3      	bhi.n	800fdae <__lshift+0x6e>
 800fdc6:	ebac 0304 	sub.w	r3, ip, r4
 800fdca:	3b15      	subs	r3, #21
 800fdcc:	f023 0303 	bic.w	r3, r3, #3
 800fdd0:	3304      	adds	r3, #4
 800fdd2:	f104 0015 	add.w	r0, r4, #21
 800fdd6:	4584      	cmp	ip, r0
 800fdd8:	bf38      	it	cc
 800fdda:	2304      	movcc	r3, #4
 800fddc:	50ca      	str	r2, [r1, r3]
 800fdde:	b10a      	cbz	r2, 800fde4 <__lshift+0xa4>
 800fde0:	f108 0602 	add.w	r6, r8, #2
 800fde4:	3e01      	subs	r6, #1
 800fde6:	4638      	mov	r0, r7
 800fde8:	612e      	str	r6, [r5, #16]
 800fdea:	4621      	mov	r1, r4
 800fdec:	f7ff fd90 	bl	800f910 <_Bfree>
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	e7c5      	b.n	800fd8a <__lshift+0x4a>
 800fdfe:	3904      	subs	r1, #4
 800fe00:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe04:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe08:	459c      	cmp	ip, r3
 800fe0a:	d8f9      	bhi.n	800fe00 <__lshift+0xc0>
 800fe0c:	e7ea      	b.n	800fde4 <__lshift+0xa4>
 800fe0e:	bf00      	nop
 800fe10:	080115b5 	.word	0x080115b5
 800fe14:	08011626 	.word	0x08011626

0800fe18 <__mcmp>:
 800fe18:	690a      	ldr	r2, [r1, #16]
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	6900      	ldr	r0, [r0, #16]
 800fe1e:	1a80      	subs	r0, r0, r2
 800fe20:	b530      	push	{r4, r5, lr}
 800fe22:	d10e      	bne.n	800fe42 <__mcmp+0x2a>
 800fe24:	3314      	adds	r3, #20
 800fe26:	3114      	adds	r1, #20
 800fe28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe38:	4295      	cmp	r5, r2
 800fe3a:	d003      	beq.n	800fe44 <__mcmp+0x2c>
 800fe3c:	d205      	bcs.n	800fe4a <__mcmp+0x32>
 800fe3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe42:	bd30      	pop	{r4, r5, pc}
 800fe44:	42a3      	cmp	r3, r4
 800fe46:	d3f3      	bcc.n	800fe30 <__mcmp+0x18>
 800fe48:	e7fb      	b.n	800fe42 <__mcmp+0x2a>
 800fe4a:	2001      	movs	r0, #1
 800fe4c:	e7f9      	b.n	800fe42 <__mcmp+0x2a>
	...

0800fe50 <__mdiff>:
 800fe50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	4689      	mov	r9, r1
 800fe56:	4606      	mov	r6, r0
 800fe58:	4611      	mov	r1, r2
 800fe5a:	4648      	mov	r0, r9
 800fe5c:	4614      	mov	r4, r2
 800fe5e:	f7ff ffdb 	bl	800fe18 <__mcmp>
 800fe62:	1e05      	subs	r5, r0, #0
 800fe64:	d112      	bne.n	800fe8c <__mdiff+0x3c>
 800fe66:	4629      	mov	r1, r5
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7ff fd11 	bl	800f890 <_Balloc>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	b928      	cbnz	r0, 800fe7e <__mdiff+0x2e>
 800fe72:	4b3f      	ldr	r3, [pc, #252]	@ (800ff70 <__mdiff+0x120>)
 800fe74:	f240 2137 	movw	r1, #567	@ 0x237
 800fe78:	483e      	ldr	r0, [pc, #248]	@ (800ff74 <__mdiff+0x124>)
 800fe7a:	f000 fe47 	bl	8010b0c <__assert_func>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe84:	4610      	mov	r0, r2
 800fe86:	b003      	add	sp, #12
 800fe88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe8c:	bfbc      	itt	lt
 800fe8e:	464b      	movlt	r3, r9
 800fe90:	46a1      	movlt	r9, r4
 800fe92:	4630      	mov	r0, r6
 800fe94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe98:	bfba      	itte	lt
 800fe9a:	461c      	movlt	r4, r3
 800fe9c:	2501      	movlt	r5, #1
 800fe9e:	2500      	movge	r5, #0
 800fea0:	f7ff fcf6 	bl	800f890 <_Balloc>
 800fea4:	4602      	mov	r2, r0
 800fea6:	b918      	cbnz	r0, 800feb0 <__mdiff+0x60>
 800fea8:	4b31      	ldr	r3, [pc, #196]	@ (800ff70 <__mdiff+0x120>)
 800feaa:	f240 2145 	movw	r1, #581	@ 0x245
 800feae:	e7e3      	b.n	800fe78 <__mdiff+0x28>
 800feb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800feb4:	6926      	ldr	r6, [r4, #16]
 800feb6:	60c5      	str	r5, [r0, #12]
 800feb8:	f109 0310 	add.w	r3, r9, #16
 800febc:	f109 0514 	add.w	r5, r9, #20
 800fec0:	f104 0e14 	add.w	lr, r4, #20
 800fec4:	f100 0b14 	add.w	fp, r0, #20
 800fec8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fecc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fed0:	9301      	str	r3, [sp, #4]
 800fed2:	46d9      	mov	r9, fp
 800fed4:	f04f 0c00 	mov.w	ip, #0
 800fed8:	9b01      	ldr	r3, [sp, #4]
 800feda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fede:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fee2:	9301      	str	r3, [sp, #4]
 800fee4:	fa1f f38a 	uxth.w	r3, sl
 800fee8:	4619      	mov	r1, r3
 800feea:	b283      	uxth	r3, r0
 800feec:	1acb      	subs	r3, r1, r3
 800feee:	0c00      	lsrs	r0, r0, #16
 800fef0:	4463      	add	r3, ip
 800fef2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fef6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ff00:	4576      	cmp	r6, lr
 800ff02:	f849 3b04 	str.w	r3, [r9], #4
 800ff06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff0a:	d8e5      	bhi.n	800fed8 <__mdiff+0x88>
 800ff0c:	1b33      	subs	r3, r6, r4
 800ff0e:	3b15      	subs	r3, #21
 800ff10:	f023 0303 	bic.w	r3, r3, #3
 800ff14:	3415      	adds	r4, #21
 800ff16:	3304      	adds	r3, #4
 800ff18:	42a6      	cmp	r6, r4
 800ff1a:	bf38      	it	cc
 800ff1c:	2304      	movcc	r3, #4
 800ff1e:	441d      	add	r5, r3
 800ff20:	445b      	add	r3, fp
 800ff22:	461e      	mov	r6, r3
 800ff24:	462c      	mov	r4, r5
 800ff26:	4544      	cmp	r4, r8
 800ff28:	d30e      	bcc.n	800ff48 <__mdiff+0xf8>
 800ff2a:	f108 0103 	add.w	r1, r8, #3
 800ff2e:	1b49      	subs	r1, r1, r5
 800ff30:	f021 0103 	bic.w	r1, r1, #3
 800ff34:	3d03      	subs	r5, #3
 800ff36:	45a8      	cmp	r8, r5
 800ff38:	bf38      	it	cc
 800ff3a:	2100      	movcc	r1, #0
 800ff3c:	440b      	add	r3, r1
 800ff3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff42:	b191      	cbz	r1, 800ff6a <__mdiff+0x11a>
 800ff44:	6117      	str	r7, [r2, #16]
 800ff46:	e79d      	b.n	800fe84 <__mdiff+0x34>
 800ff48:	f854 1b04 	ldr.w	r1, [r4], #4
 800ff4c:	46e6      	mov	lr, ip
 800ff4e:	0c08      	lsrs	r0, r1, #16
 800ff50:	fa1c fc81 	uxtah	ip, ip, r1
 800ff54:	4471      	add	r1, lr
 800ff56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ff5a:	b289      	uxth	r1, r1
 800ff5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff60:	f846 1b04 	str.w	r1, [r6], #4
 800ff64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff68:	e7dd      	b.n	800ff26 <__mdiff+0xd6>
 800ff6a:	3f01      	subs	r7, #1
 800ff6c:	e7e7      	b.n	800ff3e <__mdiff+0xee>
 800ff6e:	bf00      	nop
 800ff70:	080115b5 	.word	0x080115b5
 800ff74:	08011626 	.word	0x08011626

0800ff78 <__ulp>:
 800ff78:	b082      	sub	sp, #8
 800ff7a:	ed8d 0b00 	vstr	d0, [sp]
 800ff7e:	9a01      	ldr	r2, [sp, #4]
 800ff80:	4b0f      	ldr	r3, [pc, #60]	@ (800ffc0 <__ulp+0x48>)
 800ff82:	4013      	ands	r3, r2
 800ff84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	dc08      	bgt.n	800ff9e <__ulp+0x26>
 800ff8c:	425b      	negs	r3, r3
 800ff8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ff92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff96:	da04      	bge.n	800ffa2 <__ulp+0x2a>
 800ff98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ff9c:	4113      	asrs	r3, r2
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	e008      	b.n	800ffb4 <__ulp+0x3c>
 800ffa2:	f1a2 0314 	sub.w	r3, r2, #20
 800ffa6:	2b1e      	cmp	r3, #30
 800ffa8:	bfda      	itte	le
 800ffaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ffae:	40da      	lsrle	r2, r3
 800ffb0:	2201      	movgt	r2, #1
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	ec41 0b10 	vmov	d0, r0, r1
 800ffbc:	b002      	add	sp, #8
 800ffbe:	4770      	bx	lr
 800ffc0:	7ff00000 	.word	0x7ff00000

0800ffc4 <__b2d>:
 800ffc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc8:	6906      	ldr	r6, [r0, #16]
 800ffca:	f100 0814 	add.w	r8, r0, #20
 800ffce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ffd2:	1f37      	subs	r7, r6, #4
 800ffd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ffd8:	4610      	mov	r0, r2
 800ffda:	f7ff fd4b 	bl	800fa74 <__hi0bits>
 800ffde:	f1c0 0320 	rsb	r3, r0, #32
 800ffe2:	280a      	cmp	r0, #10
 800ffe4:	600b      	str	r3, [r1, #0]
 800ffe6:	491b      	ldr	r1, [pc, #108]	@ (8010054 <__b2d+0x90>)
 800ffe8:	dc15      	bgt.n	8010016 <__b2d+0x52>
 800ffea:	f1c0 0c0b 	rsb	ip, r0, #11
 800ffee:	fa22 f30c 	lsr.w	r3, r2, ip
 800fff2:	45b8      	cmp	r8, r7
 800fff4:	ea43 0501 	orr.w	r5, r3, r1
 800fff8:	bf34      	ite	cc
 800fffa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fffe:	2300      	movcs	r3, #0
 8010000:	3015      	adds	r0, #21
 8010002:	fa02 f000 	lsl.w	r0, r2, r0
 8010006:	fa23 f30c 	lsr.w	r3, r3, ip
 801000a:	4303      	orrs	r3, r0
 801000c:	461c      	mov	r4, r3
 801000e:	ec45 4b10 	vmov	d0, r4, r5
 8010012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010016:	45b8      	cmp	r8, r7
 8010018:	bf3a      	itte	cc
 801001a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801001e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010022:	2300      	movcs	r3, #0
 8010024:	380b      	subs	r0, #11
 8010026:	d012      	beq.n	801004e <__b2d+0x8a>
 8010028:	f1c0 0120 	rsb	r1, r0, #32
 801002c:	fa23 f401 	lsr.w	r4, r3, r1
 8010030:	4082      	lsls	r2, r0
 8010032:	4322      	orrs	r2, r4
 8010034:	4547      	cmp	r7, r8
 8010036:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801003a:	bf8c      	ite	hi
 801003c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010040:	2200      	movls	r2, #0
 8010042:	4083      	lsls	r3, r0
 8010044:	40ca      	lsrs	r2, r1
 8010046:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801004a:	4313      	orrs	r3, r2
 801004c:	e7de      	b.n	801000c <__b2d+0x48>
 801004e:	ea42 0501 	orr.w	r5, r2, r1
 8010052:	e7db      	b.n	801000c <__b2d+0x48>
 8010054:	3ff00000 	.word	0x3ff00000

08010058 <__d2b>:
 8010058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801005c:	460f      	mov	r7, r1
 801005e:	2101      	movs	r1, #1
 8010060:	ec59 8b10 	vmov	r8, r9, d0
 8010064:	4616      	mov	r6, r2
 8010066:	f7ff fc13 	bl	800f890 <_Balloc>
 801006a:	4604      	mov	r4, r0
 801006c:	b930      	cbnz	r0, 801007c <__d2b+0x24>
 801006e:	4602      	mov	r2, r0
 8010070:	4b23      	ldr	r3, [pc, #140]	@ (8010100 <__d2b+0xa8>)
 8010072:	4824      	ldr	r0, [pc, #144]	@ (8010104 <__d2b+0xac>)
 8010074:	f240 310f 	movw	r1, #783	@ 0x30f
 8010078:	f000 fd48 	bl	8010b0c <__assert_func>
 801007c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010084:	b10d      	cbz	r5, 801008a <__d2b+0x32>
 8010086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801008a:	9301      	str	r3, [sp, #4]
 801008c:	f1b8 0300 	subs.w	r3, r8, #0
 8010090:	d023      	beq.n	80100da <__d2b+0x82>
 8010092:	4668      	mov	r0, sp
 8010094:	9300      	str	r3, [sp, #0]
 8010096:	f7ff fd0c 	bl	800fab2 <__lo0bits>
 801009a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801009e:	b1d0      	cbz	r0, 80100d6 <__d2b+0x7e>
 80100a0:	f1c0 0320 	rsb	r3, r0, #32
 80100a4:	fa02 f303 	lsl.w	r3, r2, r3
 80100a8:	430b      	orrs	r3, r1
 80100aa:	40c2      	lsrs	r2, r0
 80100ac:	6163      	str	r3, [r4, #20]
 80100ae:	9201      	str	r2, [sp, #4]
 80100b0:	9b01      	ldr	r3, [sp, #4]
 80100b2:	61a3      	str	r3, [r4, #24]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	bf0c      	ite	eq
 80100b8:	2201      	moveq	r2, #1
 80100ba:	2202      	movne	r2, #2
 80100bc:	6122      	str	r2, [r4, #16]
 80100be:	b1a5      	cbz	r5, 80100ea <__d2b+0x92>
 80100c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80100c4:	4405      	add	r5, r0
 80100c6:	603d      	str	r5, [r7, #0]
 80100c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80100cc:	6030      	str	r0, [r6, #0]
 80100ce:	4620      	mov	r0, r4
 80100d0:	b003      	add	sp, #12
 80100d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d6:	6161      	str	r1, [r4, #20]
 80100d8:	e7ea      	b.n	80100b0 <__d2b+0x58>
 80100da:	a801      	add	r0, sp, #4
 80100dc:	f7ff fce9 	bl	800fab2 <__lo0bits>
 80100e0:	9b01      	ldr	r3, [sp, #4]
 80100e2:	6163      	str	r3, [r4, #20]
 80100e4:	3020      	adds	r0, #32
 80100e6:	2201      	movs	r2, #1
 80100e8:	e7e8      	b.n	80100bc <__d2b+0x64>
 80100ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80100f2:	6038      	str	r0, [r7, #0]
 80100f4:	6918      	ldr	r0, [r3, #16]
 80100f6:	f7ff fcbd 	bl	800fa74 <__hi0bits>
 80100fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100fe:	e7e5      	b.n	80100cc <__d2b+0x74>
 8010100:	080115b5 	.word	0x080115b5
 8010104:	08011626 	.word	0x08011626

08010108 <__ratio>:
 8010108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010c:	b085      	sub	sp, #20
 801010e:	e9cd 1000 	strd	r1, r0, [sp]
 8010112:	a902      	add	r1, sp, #8
 8010114:	f7ff ff56 	bl	800ffc4 <__b2d>
 8010118:	9800      	ldr	r0, [sp, #0]
 801011a:	a903      	add	r1, sp, #12
 801011c:	ec55 4b10 	vmov	r4, r5, d0
 8010120:	f7ff ff50 	bl	800ffc4 <__b2d>
 8010124:	9b01      	ldr	r3, [sp, #4]
 8010126:	6919      	ldr	r1, [r3, #16]
 8010128:	9b00      	ldr	r3, [sp, #0]
 801012a:	691b      	ldr	r3, [r3, #16]
 801012c:	1ac9      	subs	r1, r1, r3
 801012e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010132:	1a9b      	subs	r3, r3, r2
 8010134:	ec5b ab10 	vmov	sl, fp, d0
 8010138:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801013c:	2b00      	cmp	r3, #0
 801013e:	bfce      	itee	gt
 8010140:	462a      	movgt	r2, r5
 8010142:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010146:	465a      	movle	r2, fp
 8010148:	462f      	mov	r7, r5
 801014a:	46d9      	mov	r9, fp
 801014c:	bfcc      	ite	gt
 801014e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010152:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010156:	464b      	mov	r3, r9
 8010158:	4652      	mov	r2, sl
 801015a:	4620      	mov	r0, r4
 801015c:	4639      	mov	r1, r7
 801015e:	f7f0 fb95 	bl	800088c <__aeabi_ddiv>
 8010162:	ec41 0b10 	vmov	d0, r0, r1
 8010166:	b005      	add	sp, #20
 8010168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801016c <__copybits>:
 801016c:	3901      	subs	r1, #1
 801016e:	b570      	push	{r4, r5, r6, lr}
 8010170:	1149      	asrs	r1, r1, #5
 8010172:	6914      	ldr	r4, [r2, #16]
 8010174:	3101      	adds	r1, #1
 8010176:	f102 0314 	add.w	r3, r2, #20
 801017a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801017e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010182:	1f05      	subs	r5, r0, #4
 8010184:	42a3      	cmp	r3, r4
 8010186:	d30c      	bcc.n	80101a2 <__copybits+0x36>
 8010188:	1aa3      	subs	r3, r4, r2
 801018a:	3b11      	subs	r3, #17
 801018c:	f023 0303 	bic.w	r3, r3, #3
 8010190:	3211      	adds	r2, #17
 8010192:	42a2      	cmp	r2, r4
 8010194:	bf88      	it	hi
 8010196:	2300      	movhi	r3, #0
 8010198:	4418      	add	r0, r3
 801019a:	2300      	movs	r3, #0
 801019c:	4288      	cmp	r0, r1
 801019e:	d305      	bcc.n	80101ac <__copybits+0x40>
 80101a0:	bd70      	pop	{r4, r5, r6, pc}
 80101a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80101a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80101aa:	e7eb      	b.n	8010184 <__copybits+0x18>
 80101ac:	f840 3b04 	str.w	r3, [r0], #4
 80101b0:	e7f4      	b.n	801019c <__copybits+0x30>

080101b2 <__any_on>:
 80101b2:	f100 0214 	add.w	r2, r0, #20
 80101b6:	6900      	ldr	r0, [r0, #16]
 80101b8:	114b      	asrs	r3, r1, #5
 80101ba:	4298      	cmp	r0, r3
 80101bc:	b510      	push	{r4, lr}
 80101be:	db11      	blt.n	80101e4 <__any_on+0x32>
 80101c0:	dd0a      	ble.n	80101d8 <__any_on+0x26>
 80101c2:	f011 011f 	ands.w	r1, r1, #31
 80101c6:	d007      	beq.n	80101d8 <__any_on+0x26>
 80101c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80101cc:	fa24 f001 	lsr.w	r0, r4, r1
 80101d0:	fa00 f101 	lsl.w	r1, r0, r1
 80101d4:	428c      	cmp	r4, r1
 80101d6:	d10b      	bne.n	80101f0 <__any_on+0x3e>
 80101d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101dc:	4293      	cmp	r3, r2
 80101de:	d803      	bhi.n	80101e8 <__any_on+0x36>
 80101e0:	2000      	movs	r0, #0
 80101e2:	bd10      	pop	{r4, pc}
 80101e4:	4603      	mov	r3, r0
 80101e6:	e7f7      	b.n	80101d8 <__any_on+0x26>
 80101e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101ec:	2900      	cmp	r1, #0
 80101ee:	d0f5      	beq.n	80101dc <__any_on+0x2a>
 80101f0:	2001      	movs	r0, #1
 80101f2:	e7f6      	b.n	80101e2 <__any_on+0x30>

080101f4 <_strtol_l.constprop.0>:
 80101f4:	2b24      	cmp	r3, #36	@ 0x24
 80101f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fa:	4686      	mov	lr, r0
 80101fc:	4690      	mov	r8, r2
 80101fe:	d801      	bhi.n	8010204 <_strtol_l.constprop.0+0x10>
 8010200:	2b01      	cmp	r3, #1
 8010202:	d106      	bne.n	8010212 <_strtol_l.constprop.0+0x1e>
 8010204:	f7fe f85e 	bl	800e2c4 <__errno>
 8010208:	2316      	movs	r3, #22
 801020a:	6003      	str	r3, [r0, #0]
 801020c:	2000      	movs	r0, #0
 801020e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010212:	4834      	ldr	r0, [pc, #208]	@ (80102e4 <_strtol_l.constprop.0+0xf0>)
 8010214:	460d      	mov	r5, r1
 8010216:	462a      	mov	r2, r5
 8010218:	f815 4b01 	ldrb.w	r4, [r5], #1
 801021c:	5d06      	ldrb	r6, [r0, r4]
 801021e:	f016 0608 	ands.w	r6, r6, #8
 8010222:	d1f8      	bne.n	8010216 <_strtol_l.constprop.0+0x22>
 8010224:	2c2d      	cmp	r4, #45	@ 0x2d
 8010226:	d12d      	bne.n	8010284 <_strtol_l.constprop.0+0x90>
 8010228:	782c      	ldrb	r4, [r5, #0]
 801022a:	2601      	movs	r6, #1
 801022c:	1c95      	adds	r5, r2, #2
 801022e:	f033 0210 	bics.w	r2, r3, #16
 8010232:	d109      	bne.n	8010248 <_strtol_l.constprop.0+0x54>
 8010234:	2c30      	cmp	r4, #48	@ 0x30
 8010236:	d12a      	bne.n	801028e <_strtol_l.constprop.0+0x9a>
 8010238:	782a      	ldrb	r2, [r5, #0]
 801023a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801023e:	2a58      	cmp	r2, #88	@ 0x58
 8010240:	d125      	bne.n	801028e <_strtol_l.constprop.0+0x9a>
 8010242:	786c      	ldrb	r4, [r5, #1]
 8010244:	2310      	movs	r3, #16
 8010246:	3502      	adds	r5, #2
 8010248:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801024c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010250:	2200      	movs	r2, #0
 8010252:	fbbc f9f3 	udiv	r9, ip, r3
 8010256:	4610      	mov	r0, r2
 8010258:	fb03 ca19 	mls	sl, r3, r9, ip
 801025c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010260:	2f09      	cmp	r7, #9
 8010262:	d81b      	bhi.n	801029c <_strtol_l.constprop.0+0xa8>
 8010264:	463c      	mov	r4, r7
 8010266:	42a3      	cmp	r3, r4
 8010268:	dd27      	ble.n	80102ba <_strtol_l.constprop.0+0xc6>
 801026a:	1c57      	adds	r7, r2, #1
 801026c:	d007      	beq.n	801027e <_strtol_l.constprop.0+0x8a>
 801026e:	4581      	cmp	r9, r0
 8010270:	d320      	bcc.n	80102b4 <_strtol_l.constprop.0+0xc0>
 8010272:	d101      	bne.n	8010278 <_strtol_l.constprop.0+0x84>
 8010274:	45a2      	cmp	sl, r4
 8010276:	db1d      	blt.n	80102b4 <_strtol_l.constprop.0+0xc0>
 8010278:	fb00 4003 	mla	r0, r0, r3, r4
 801027c:	2201      	movs	r2, #1
 801027e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010282:	e7eb      	b.n	801025c <_strtol_l.constprop.0+0x68>
 8010284:	2c2b      	cmp	r4, #43	@ 0x2b
 8010286:	bf04      	itt	eq
 8010288:	782c      	ldrbeq	r4, [r5, #0]
 801028a:	1c95      	addeq	r5, r2, #2
 801028c:	e7cf      	b.n	801022e <_strtol_l.constprop.0+0x3a>
 801028e:	2b00      	cmp	r3, #0
 8010290:	d1da      	bne.n	8010248 <_strtol_l.constprop.0+0x54>
 8010292:	2c30      	cmp	r4, #48	@ 0x30
 8010294:	bf0c      	ite	eq
 8010296:	2308      	moveq	r3, #8
 8010298:	230a      	movne	r3, #10
 801029a:	e7d5      	b.n	8010248 <_strtol_l.constprop.0+0x54>
 801029c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80102a0:	2f19      	cmp	r7, #25
 80102a2:	d801      	bhi.n	80102a8 <_strtol_l.constprop.0+0xb4>
 80102a4:	3c37      	subs	r4, #55	@ 0x37
 80102a6:	e7de      	b.n	8010266 <_strtol_l.constprop.0+0x72>
 80102a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80102ac:	2f19      	cmp	r7, #25
 80102ae:	d804      	bhi.n	80102ba <_strtol_l.constprop.0+0xc6>
 80102b0:	3c57      	subs	r4, #87	@ 0x57
 80102b2:	e7d8      	b.n	8010266 <_strtol_l.constprop.0+0x72>
 80102b4:	f04f 32ff 	mov.w	r2, #4294967295
 80102b8:	e7e1      	b.n	801027e <_strtol_l.constprop.0+0x8a>
 80102ba:	1c53      	adds	r3, r2, #1
 80102bc:	d108      	bne.n	80102d0 <_strtol_l.constprop.0+0xdc>
 80102be:	2322      	movs	r3, #34	@ 0x22
 80102c0:	f8ce 3000 	str.w	r3, [lr]
 80102c4:	4660      	mov	r0, ip
 80102c6:	f1b8 0f00 	cmp.w	r8, #0
 80102ca:	d0a0      	beq.n	801020e <_strtol_l.constprop.0+0x1a>
 80102cc:	1e69      	subs	r1, r5, #1
 80102ce:	e006      	b.n	80102de <_strtol_l.constprop.0+0xea>
 80102d0:	b106      	cbz	r6, 80102d4 <_strtol_l.constprop.0+0xe0>
 80102d2:	4240      	negs	r0, r0
 80102d4:	f1b8 0f00 	cmp.w	r8, #0
 80102d8:	d099      	beq.n	801020e <_strtol_l.constprop.0+0x1a>
 80102da:	2a00      	cmp	r2, #0
 80102dc:	d1f6      	bne.n	80102cc <_strtol_l.constprop.0+0xd8>
 80102de:	f8c8 1000 	str.w	r1, [r8]
 80102e2:	e794      	b.n	801020e <_strtol_l.constprop.0+0x1a>
 80102e4:	08011781 	.word	0x08011781

080102e8 <_strtol_r>:
 80102e8:	f7ff bf84 	b.w	80101f4 <_strtol_l.constprop.0>

080102ec <__ascii_wctomb>:
 80102ec:	4603      	mov	r3, r0
 80102ee:	4608      	mov	r0, r1
 80102f0:	b141      	cbz	r1, 8010304 <__ascii_wctomb+0x18>
 80102f2:	2aff      	cmp	r2, #255	@ 0xff
 80102f4:	d904      	bls.n	8010300 <__ascii_wctomb+0x14>
 80102f6:	228a      	movs	r2, #138	@ 0x8a
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	f04f 30ff 	mov.w	r0, #4294967295
 80102fe:	4770      	bx	lr
 8010300:	700a      	strb	r2, [r1, #0]
 8010302:	2001      	movs	r0, #1
 8010304:	4770      	bx	lr

08010306 <__ssputs_r>:
 8010306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801030a:	688e      	ldr	r6, [r1, #8]
 801030c:	461f      	mov	r7, r3
 801030e:	42be      	cmp	r6, r7
 8010310:	680b      	ldr	r3, [r1, #0]
 8010312:	4682      	mov	sl, r0
 8010314:	460c      	mov	r4, r1
 8010316:	4690      	mov	r8, r2
 8010318:	d82d      	bhi.n	8010376 <__ssputs_r+0x70>
 801031a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801031e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010322:	d026      	beq.n	8010372 <__ssputs_r+0x6c>
 8010324:	6965      	ldr	r5, [r4, #20]
 8010326:	6909      	ldr	r1, [r1, #16]
 8010328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801032c:	eba3 0901 	sub.w	r9, r3, r1
 8010330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010334:	1c7b      	adds	r3, r7, #1
 8010336:	444b      	add	r3, r9
 8010338:	106d      	asrs	r5, r5, #1
 801033a:	429d      	cmp	r5, r3
 801033c:	bf38      	it	cc
 801033e:	461d      	movcc	r5, r3
 8010340:	0553      	lsls	r3, r2, #21
 8010342:	d527      	bpl.n	8010394 <__ssputs_r+0x8e>
 8010344:	4629      	mov	r1, r5
 8010346:	f7ff fa05 	bl	800f754 <_malloc_r>
 801034a:	4606      	mov	r6, r0
 801034c:	b360      	cbz	r0, 80103a8 <__ssputs_r+0xa2>
 801034e:	6921      	ldr	r1, [r4, #16]
 8010350:	464a      	mov	r2, r9
 8010352:	f7fd ffe4 	bl	800e31e <memcpy>
 8010356:	89a3      	ldrh	r3, [r4, #12]
 8010358:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801035c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010360:	81a3      	strh	r3, [r4, #12]
 8010362:	6126      	str	r6, [r4, #16]
 8010364:	6165      	str	r5, [r4, #20]
 8010366:	444e      	add	r6, r9
 8010368:	eba5 0509 	sub.w	r5, r5, r9
 801036c:	6026      	str	r6, [r4, #0]
 801036e:	60a5      	str	r5, [r4, #8]
 8010370:	463e      	mov	r6, r7
 8010372:	42be      	cmp	r6, r7
 8010374:	d900      	bls.n	8010378 <__ssputs_r+0x72>
 8010376:	463e      	mov	r6, r7
 8010378:	6820      	ldr	r0, [r4, #0]
 801037a:	4632      	mov	r2, r6
 801037c:	4641      	mov	r1, r8
 801037e:	f000 fb9b 	bl	8010ab8 <memmove>
 8010382:	68a3      	ldr	r3, [r4, #8]
 8010384:	1b9b      	subs	r3, r3, r6
 8010386:	60a3      	str	r3, [r4, #8]
 8010388:	6823      	ldr	r3, [r4, #0]
 801038a:	4433      	add	r3, r6
 801038c:	6023      	str	r3, [r4, #0]
 801038e:	2000      	movs	r0, #0
 8010390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010394:	462a      	mov	r2, r5
 8010396:	f000 fbeb 	bl	8010b70 <_realloc_r>
 801039a:	4606      	mov	r6, r0
 801039c:	2800      	cmp	r0, #0
 801039e:	d1e0      	bne.n	8010362 <__ssputs_r+0x5c>
 80103a0:	6921      	ldr	r1, [r4, #16]
 80103a2:	4650      	mov	r0, sl
 80103a4:	f7fe fe28 	bl	800eff8 <_free_r>
 80103a8:	230c      	movs	r3, #12
 80103aa:	f8ca 3000 	str.w	r3, [sl]
 80103ae:	89a3      	ldrh	r3, [r4, #12]
 80103b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103b4:	81a3      	strh	r3, [r4, #12]
 80103b6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ba:	e7e9      	b.n	8010390 <__ssputs_r+0x8a>

080103bc <_svfiprintf_r>:
 80103bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c0:	4698      	mov	r8, r3
 80103c2:	898b      	ldrh	r3, [r1, #12]
 80103c4:	061b      	lsls	r3, r3, #24
 80103c6:	b09d      	sub	sp, #116	@ 0x74
 80103c8:	4607      	mov	r7, r0
 80103ca:	460d      	mov	r5, r1
 80103cc:	4614      	mov	r4, r2
 80103ce:	d510      	bpl.n	80103f2 <_svfiprintf_r+0x36>
 80103d0:	690b      	ldr	r3, [r1, #16]
 80103d2:	b973      	cbnz	r3, 80103f2 <_svfiprintf_r+0x36>
 80103d4:	2140      	movs	r1, #64	@ 0x40
 80103d6:	f7ff f9bd 	bl	800f754 <_malloc_r>
 80103da:	6028      	str	r0, [r5, #0]
 80103dc:	6128      	str	r0, [r5, #16]
 80103de:	b930      	cbnz	r0, 80103ee <_svfiprintf_r+0x32>
 80103e0:	230c      	movs	r3, #12
 80103e2:	603b      	str	r3, [r7, #0]
 80103e4:	f04f 30ff 	mov.w	r0, #4294967295
 80103e8:	b01d      	add	sp, #116	@ 0x74
 80103ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103ee:	2340      	movs	r3, #64	@ 0x40
 80103f0:	616b      	str	r3, [r5, #20]
 80103f2:	2300      	movs	r3, #0
 80103f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103f6:	2320      	movs	r3, #32
 80103f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010400:	2330      	movs	r3, #48	@ 0x30
 8010402:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80105a0 <_svfiprintf_r+0x1e4>
 8010406:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801040a:	f04f 0901 	mov.w	r9, #1
 801040e:	4623      	mov	r3, r4
 8010410:	469a      	mov	sl, r3
 8010412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010416:	b10a      	cbz	r2, 801041c <_svfiprintf_r+0x60>
 8010418:	2a25      	cmp	r2, #37	@ 0x25
 801041a:	d1f9      	bne.n	8010410 <_svfiprintf_r+0x54>
 801041c:	ebba 0b04 	subs.w	fp, sl, r4
 8010420:	d00b      	beq.n	801043a <_svfiprintf_r+0x7e>
 8010422:	465b      	mov	r3, fp
 8010424:	4622      	mov	r2, r4
 8010426:	4629      	mov	r1, r5
 8010428:	4638      	mov	r0, r7
 801042a:	f7ff ff6c 	bl	8010306 <__ssputs_r>
 801042e:	3001      	adds	r0, #1
 8010430:	f000 80a7 	beq.w	8010582 <_svfiprintf_r+0x1c6>
 8010434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010436:	445a      	add	r2, fp
 8010438:	9209      	str	r2, [sp, #36]	@ 0x24
 801043a:	f89a 3000 	ldrb.w	r3, [sl]
 801043e:	2b00      	cmp	r3, #0
 8010440:	f000 809f 	beq.w	8010582 <_svfiprintf_r+0x1c6>
 8010444:	2300      	movs	r3, #0
 8010446:	f04f 32ff 	mov.w	r2, #4294967295
 801044a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801044e:	f10a 0a01 	add.w	sl, sl, #1
 8010452:	9304      	str	r3, [sp, #16]
 8010454:	9307      	str	r3, [sp, #28]
 8010456:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801045a:	931a      	str	r3, [sp, #104]	@ 0x68
 801045c:	4654      	mov	r4, sl
 801045e:	2205      	movs	r2, #5
 8010460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010464:	484e      	ldr	r0, [pc, #312]	@ (80105a0 <_svfiprintf_r+0x1e4>)
 8010466:	f7ef fed3 	bl	8000210 <memchr>
 801046a:	9a04      	ldr	r2, [sp, #16]
 801046c:	b9d8      	cbnz	r0, 80104a6 <_svfiprintf_r+0xea>
 801046e:	06d0      	lsls	r0, r2, #27
 8010470:	bf44      	itt	mi
 8010472:	2320      	movmi	r3, #32
 8010474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010478:	0711      	lsls	r1, r2, #28
 801047a:	bf44      	itt	mi
 801047c:	232b      	movmi	r3, #43	@ 0x2b
 801047e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010482:	f89a 3000 	ldrb.w	r3, [sl]
 8010486:	2b2a      	cmp	r3, #42	@ 0x2a
 8010488:	d015      	beq.n	80104b6 <_svfiprintf_r+0xfa>
 801048a:	9a07      	ldr	r2, [sp, #28]
 801048c:	4654      	mov	r4, sl
 801048e:	2000      	movs	r0, #0
 8010490:	f04f 0c0a 	mov.w	ip, #10
 8010494:	4621      	mov	r1, r4
 8010496:	f811 3b01 	ldrb.w	r3, [r1], #1
 801049a:	3b30      	subs	r3, #48	@ 0x30
 801049c:	2b09      	cmp	r3, #9
 801049e:	d94b      	bls.n	8010538 <_svfiprintf_r+0x17c>
 80104a0:	b1b0      	cbz	r0, 80104d0 <_svfiprintf_r+0x114>
 80104a2:	9207      	str	r2, [sp, #28]
 80104a4:	e014      	b.n	80104d0 <_svfiprintf_r+0x114>
 80104a6:	eba0 0308 	sub.w	r3, r0, r8
 80104aa:	fa09 f303 	lsl.w	r3, r9, r3
 80104ae:	4313      	orrs	r3, r2
 80104b0:	9304      	str	r3, [sp, #16]
 80104b2:	46a2      	mov	sl, r4
 80104b4:	e7d2      	b.n	801045c <_svfiprintf_r+0xa0>
 80104b6:	9b03      	ldr	r3, [sp, #12]
 80104b8:	1d19      	adds	r1, r3, #4
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	9103      	str	r1, [sp, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	bfbb      	ittet	lt
 80104c2:	425b      	neglt	r3, r3
 80104c4:	f042 0202 	orrlt.w	r2, r2, #2
 80104c8:	9307      	strge	r3, [sp, #28]
 80104ca:	9307      	strlt	r3, [sp, #28]
 80104cc:	bfb8      	it	lt
 80104ce:	9204      	strlt	r2, [sp, #16]
 80104d0:	7823      	ldrb	r3, [r4, #0]
 80104d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80104d4:	d10a      	bne.n	80104ec <_svfiprintf_r+0x130>
 80104d6:	7863      	ldrb	r3, [r4, #1]
 80104d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80104da:	d132      	bne.n	8010542 <_svfiprintf_r+0x186>
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	1d1a      	adds	r2, r3, #4
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	9203      	str	r2, [sp, #12]
 80104e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80104e8:	3402      	adds	r4, #2
 80104ea:	9305      	str	r3, [sp, #20]
 80104ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80105b0 <_svfiprintf_r+0x1f4>
 80104f0:	7821      	ldrb	r1, [r4, #0]
 80104f2:	2203      	movs	r2, #3
 80104f4:	4650      	mov	r0, sl
 80104f6:	f7ef fe8b 	bl	8000210 <memchr>
 80104fa:	b138      	cbz	r0, 801050c <_svfiprintf_r+0x150>
 80104fc:	9b04      	ldr	r3, [sp, #16]
 80104fe:	eba0 000a 	sub.w	r0, r0, sl
 8010502:	2240      	movs	r2, #64	@ 0x40
 8010504:	4082      	lsls	r2, r0
 8010506:	4313      	orrs	r3, r2
 8010508:	3401      	adds	r4, #1
 801050a:	9304      	str	r3, [sp, #16]
 801050c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010510:	4824      	ldr	r0, [pc, #144]	@ (80105a4 <_svfiprintf_r+0x1e8>)
 8010512:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010516:	2206      	movs	r2, #6
 8010518:	f7ef fe7a 	bl	8000210 <memchr>
 801051c:	2800      	cmp	r0, #0
 801051e:	d036      	beq.n	801058e <_svfiprintf_r+0x1d2>
 8010520:	4b21      	ldr	r3, [pc, #132]	@ (80105a8 <_svfiprintf_r+0x1ec>)
 8010522:	bb1b      	cbnz	r3, 801056c <_svfiprintf_r+0x1b0>
 8010524:	9b03      	ldr	r3, [sp, #12]
 8010526:	3307      	adds	r3, #7
 8010528:	f023 0307 	bic.w	r3, r3, #7
 801052c:	3308      	adds	r3, #8
 801052e:	9303      	str	r3, [sp, #12]
 8010530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010532:	4433      	add	r3, r6
 8010534:	9309      	str	r3, [sp, #36]	@ 0x24
 8010536:	e76a      	b.n	801040e <_svfiprintf_r+0x52>
 8010538:	fb0c 3202 	mla	r2, ip, r2, r3
 801053c:	460c      	mov	r4, r1
 801053e:	2001      	movs	r0, #1
 8010540:	e7a8      	b.n	8010494 <_svfiprintf_r+0xd8>
 8010542:	2300      	movs	r3, #0
 8010544:	3401      	adds	r4, #1
 8010546:	9305      	str	r3, [sp, #20]
 8010548:	4619      	mov	r1, r3
 801054a:	f04f 0c0a 	mov.w	ip, #10
 801054e:	4620      	mov	r0, r4
 8010550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010554:	3a30      	subs	r2, #48	@ 0x30
 8010556:	2a09      	cmp	r2, #9
 8010558:	d903      	bls.n	8010562 <_svfiprintf_r+0x1a6>
 801055a:	2b00      	cmp	r3, #0
 801055c:	d0c6      	beq.n	80104ec <_svfiprintf_r+0x130>
 801055e:	9105      	str	r1, [sp, #20]
 8010560:	e7c4      	b.n	80104ec <_svfiprintf_r+0x130>
 8010562:	fb0c 2101 	mla	r1, ip, r1, r2
 8010566:	4604      	mov	r4, r0
 8010568:	2301      	movs	r3, #1
 801056a:	e7f0      	b.n	801054e <_svfiprintf_r+0x192>
 801056c:	ab03      	add	r3, sp, #12
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	462a      	mov	r2, r5
 8010572:	4b0e      	ldr	r3, [pc, #56]	@ (80105ac <_svfiprintf_r+0x1f0>)
 8010574:	a904      	add	r1, sp, #16
 8010576:	4638      	mov	r0, r7
 8010578:	f7fc ff08 	bl	800d38c <_printf_float>
 801057c:	1c42      	adds	r2, r0, #1
 801057e:	4606      	mov	r6, r0
 8010580:	d1d6      	bne.n	8010530 <_svfiprintf_r+0x174>
 8010582:	89ab      	ldrh	r3, [r5, #12]
 8010584:	065b      	lsls	r3, r3, #25
 8010586:	f53f af2d 	bmi.w	80103e4 <_svfiprintf_r+0x28>
 801058a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801058c:	e72c      	b.n	80103e8 <_svfiprintf_r+0x2c>
 801058e:	ab03      	add	r3, sp, #12
 8010590:	9300      	str	r3, [sp, #0]
 8010592:	462a      	mov	r2, r5
 8010594:	4b05      	ldr	r3, [pc, #20]	@ (80105ac <_svfiprintf_r+0x1f0>)
 8010596:	a904      	add	r1, sp, #16
 8010598:	4638      	mov	r0, r7
 801059a:	f7fd f98f 	bl	800d8bc <_printf_i>
 801059e:	e7ed      	b.n	801057c <_svfiprintf_r+0x1c0>
 80105a0:	08011881 	.word	0x08011881
 80105a4:	0801188b 	.word	0x0801188b
 80105a8:	0800d38d 	.word	0x0800d38d
 80105ac:	08010307 	.word	0x08010307
 80105b0:	08011887 	.word	0x08011887

080105b4 <__sfputc_r>:
 80105b4:	6893      	ldr	r3, [r2, #8]
 80105b6:	3b01      	subs	r3, #1
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	b410      	push	{r4}
 80105bc:	6093      	str	r3, [r2, #8]
 80105be:	da08      	bge.n	80105d2 <__sfputc_r+0x1e>
 80105c0:	6994      	ldr	r4, [r2, #24]
 80105c2:	42a3      	cmp	r3, r4
 80105c4:	db01      	blt.n	80105ca <__sfputc_r+0x16>
 80105c6:	290a      	cmp	r1, #10
 80105c8:	d103      	bne.n	80105d2 <__sfputc_r+0x1e>
 80105ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105ce:	f000 b9df 	b.w	8010990 <__swbuf_r>
 80105d2:	6813      	ldr	r3, [r2, #0]
 80105d4:	1c58      	adds	r0, r3, #1
 80105d6:	6010      	str	r0, [r2, #0]
 80105d8:	7019      	strb	r1, [r3, #0]
 80105da:	4608      	mov	r0, r1
 80105dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105e0:	4770      	bx	lr

080105e2 <__sfputs_r>:
 80105e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e4:	4606      	mov	r6, r0
 80105e6:	460f      	mov	r7, r1
 80105e8:	4614      	mov	r4, r2
 80105ea:	18d5      	adds	r5, r2, r3
 80105ec:	42ac      	cmp	r4, r5
 80105ee:	d101      	bne.n	80105f4 <__sfputs_r+0x12>
 80105f0:	2000      	movs	r0, #0
 80105f2:	e007      	b.n	8010604 <__sfputs_r+0x22>
 80105f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105f8:	463a      	mov	r2, r7
 80105fa:	4630      	mov	r0, r6
 80105fc:	f7ff ffda 	bl	80105b4 <__sfputc_r>
 8010600:	1c43      	adds	r3, r0, #1
 8010602:	d1f3      	bne.n	80105ec <__sfputs_r+0xa>
 8010604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010608 <_vfiprintf_r>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	460d      	mov	r5, r1
 801060e:	b09d      	sub	sp, #116	@ 0x74
 8010610:	4614      	mov	r4, r2
 8010612:	4698      	mov	r8, r3
 8010614:	4606      	mov	r6, r0
 8010616:	b118      	cbz	r0, 8010620 <_vfiprintf_r+0x18>
 8010618:	6a03      	ldr	r3, [r0, #32]
 801061a:	b90b      	cbnz	r3, 8010620 <_vfiprintf_r+0x18>
 801061c:	f7fd fd0e 	bl	800e03c <__sinit>
 8010620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010622:	07d9      	lsls	r1, r3, #31
 8010624:	d405      	bmi.n	8010632 <_vfiprintf_r+0x2a>
 8010626:	89ab      	ldrh	r3, [r5, #12]
 8010628:	059a      	lsls	r2, r3, #22
 801062a:	d402      	bmi.n	8010632 <_vfiprintf_r+0x2a>
 801062c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801062e:	f7fd fe74 	bl	800e31a <__retarget_lock_acquire_recursive>
 8010632:	89ab      	ldrh	r3, [r5, #12]
 8010634:	071b      	lsls	r3, r3, #28
 8010636:	d501      	bpl.n	801063c <_vfiprintf_r+0x34>
 8010638:	692b      	ldr	r3, [r5, #16]
 801063a:	b99b      	cbnz	r3, 8010664 <_vfiprintf_r+0x5c>
 801063c:	4629      	mov	r1, r5
 801063e:	4630      	mov	r0, r6
 8010640:	f000 f9e4 	bl	8010a0c <__swsetup_r>
 8010644:	b170      	cbz	r0, 8010664 <_vfiprintf_r+0x5c>
 8010646:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010648:	07dc      	lsls	r4, r3, #31
 801064a:	d504      	bpl.n	8010656 <_vfiprintf_r+0x4e>
 801064c:	f04f 30ff 	mov.w	r0, #4294967295
 8010650:	b01d      	add	sp, #116	@ 0x74
 8010652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010656:	89ab      	ldrh	r3, [r5, #12]
 8010658:	0598      	lsls	r0, r3, #22
 801065a:	d4f7      	bmi.n	801064c <_vfiprintf_r+0x44>
 801065c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801065e:	f7fd fe5d 	bl	800e31c <__retarget_lock_release_recursive>
 8010662:	e7f3      	b.n	801064c <_vfiprintf_r+0x44>
 8010664:	2300      	movs	r3, #0
 8010666:	9309      	str	r3, [sp, #36]	@ 0x24
 8010668:	2320      	movs	r3, #32
 801066a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801066e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010672:	2330      	movs	r3, #48	@ 0x30
 8010674:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010824 <_vfiprintf_r+0x21c>
 8010678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801067c:	f04f 0901 	mov.w	r9, #1
 8010680:	4623      	mov	r3, r4
 8010682:	469a      	mov	sl, r3
 8010684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010688:	b10a      	cbz	r2, 801068e <_vfiprintf_r+0x86>
 801068a:	2a25      	cmp	r2, #37	@ 0x25
 801068c:	d1f9      	bne.n	8010682 <_vfiprintf_r+0x7a>
 801068e:	ebba 0b04 	subs.w	fp, sl, r4
 8010692:	d00b      	beq.n	80106ac <_vfiprintf_r+0xa4>
 8010694:	465b      	mov	r3, fp
 8010696:	4622      	mov	r2, r4
 8010698:	4629      	mov	r1, r5
 801069a:	4630      	mov	r0, r6
 801069c:	f7ff ffa1 	bl	80105e2 <__sfputs_r>
 80106a0:	3001      	adds	r0, #1
 80106a2:	f000 80a7 	beq.w	80107f4 <_vfiprintf_r+0x1ec>
 80106a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106a8:	445a      	add	r2, fp
 80106aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80106ac:	f89a 3000 	ldrb.w	r3, [sl]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	f000 809f 	beq.w	80107f4 <_vfiprintf_r+0x1ec>
 80106b6:	2300      	movs	r3, #0
 80106b8:	f04f 32ff 	mov.w	r2, #4294967295
 80106bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106c0:	f10a 0a01 	add.w	sl, sl, #1
 80106c4:	9304      	str	r3, [sp, #16]
 80106c6:	9307      	str	r3, [sp, #28]
 80106c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80106ce:	4654      	mov	r4, sl
 80106d0:	2205      	movs	r2, #5
 80106d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106d6:	4853      	ldr	r0, [pc, #332]	@ (8010824 <_vfiprintf_r+0x21c>)
 80106d8:	f7ef fd9a 	bl	8000210 <memchr>
 80106dc:	9a04      	ldr	r2, [sp, #16]
 80106de:	b9d8      	cbnz	r0, 8010718 <_vfiprintf_r+0x110>
 80106e0:	06d1      	lsls	r1, r2, #27
 80106e2:	bf44      	itt	mi
 80106e4:	2320      	movmi	r3, #32
 80106e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106ea:	0713      	lsls	r3, r2, #28
 80106ec:	bf44      	itt	mi
 80106ee:	232b      	movmi	r3, #43	@ 0x2b
 80106f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80106f4:	f89a 3000 	ldrb.w	r3, [sl]
 80106f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80106fa:	d015      	beq.n	8010728 <_vfiprintf_r+0x120>
 80106fc:	9a07      	ldr	r2, [sp, #28]
 80106fe:	4654      	mov	r4, sl
 8010700:	2000      	movs	r0, #0
 8010702:	f04f 0c0a 	mov.w	ip, #10
 8010706:	4621      	mov	r1, r4
 8010708:	f811 3b01 	ldrb.w	r3, [r1], #1
 801070c:	3b30      	subs	r3, #48	@ 0x30
 801070e:	2b09      	cmp	r3, #9
 8010710:	d94b      	bls.n	80107aa <_vfiprintf_r+0x1a2>
 8010712:	b1b0      	cbz	r0, 8010742 <_vfiprintf_r+0x13a>
 8010714:	9207      	str	r2, [sp, #28]
 8010716:	e014      	b.n	8010742 <_vfiprintf_r+0x13a>
 8010718:	eba0 0308 	sub.w	r3, r0, r8
 801071c:	fa09 f303 	lsl.w	r3, r9, r3
 8010720:	4313      	orrs	r3, r2
 8010722:	9304      	str	r3, [sp, #16]
 8010724:	46a2      	mov	sl, r4
 8010726:	e7d2      	b.n	80106ce <_vfiprintf_r+0xc6>
 8010728:	9b03      	ldr	r3, [sp, #12]
 801072a:	1d19      	adds	r1, r3, #4
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	9103      	str	r1, [sp, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	bfbb      	ittet	lt
 8010734:	425b      	neglt	r3, r3
 8010736:	f042 0202 	orrlt.w	r2, r2, #2
 801073a:	9307      	strge	r3, [sp, #28]
 801073c:	9307      	strlt	r3, [sp, #28]
 801073e:	bfb8      	it	lt
 8010740:	9204      	strlt	r2, [sp, #16]
 8010742:	7823      	ldrb	r3, [r4, #0]
 8010744:	2b2e      	cmp	r3, #46	@ 0x2e
 8010746:	d10a      	bne.n	801075e <_vfiprintf_r+0x156>
 8010748:	7863      	ldrb	r3, [r4, #1]
 801074a:	2b2a      	cmp	r3, #42	@ 0x2a
 801074c:	d132      	bne.n	80107b4 <_vfiprintf_r+0x1ac>
 801074e:	9b03      	ldr	r3, [sp, #12]
 8010750:	1d1a      	adds	r2, r3, #4
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	9203      	str	r2, [sp, #12]
 8010756:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801075a:	3402      	adds	r4, #2
 801075c:	9305      	str	r3, [sp, #20]
 801075e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010834 <_vfiprintf_r+0x22c>
 8010762:	7821      	ldrb	r1, [r4, #0]
 8010764:	2203      	movs	r2, #3
 8010766:	4650      	mov	r0, sl
 8010768:	f7ef fd52 	bl	8000210 <memchr>
 801076c:	b138      	cbz	r0, 801077e <_vfiprintf_r+0x176>
 801076e:	9b04      	ldr	r3, [sp, #16]
 8010770:	eba0 000a 	sub.w	r0, r0, sl
 8010774:	2240      	movs	r2, #64	@ 0x40
 8010776:	4082      	lsls	r2, r0
 8010778:	4313      	orrs	r3, r2
 801077a:	3401      	adds	r4, #1
 801077c:	9304      	str	r3, [sp, #16]
 801077e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010782:	4829      	ldr	r0, [pc, #164]	@ (8010828 <_vfiprintf_r+0x220>)
 8010784:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010788:	2206      	movs	r2, #6
 801078a:	f7ef fd41 	bl	8000210 <memchr>
 801078e:	2800      	cmp	r0, #0
 8010790:	d03f      	beq.n	8010812 <_vfiprintf_r+0x20a>
 8010792:	4b26      	ldr	r3, [pc, #152]	@ (801082c <_vfiprintf_r+0x224>)
 8010794:	bb1b      	cbnz	r3, 80107de <_vfiprintf_r+0x1d6>
 8010796:	9b03      	ldr	r3, [sp, #12]
 8010798:	3307      	adds	r3, #7
 801079a:	f023 0307 	bic.w	r3, r3, #7
 801079e:	3308      	adds	r3, #8
 80107a0:	9303      	str	r3, [sp, #12]
 80107a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107a4:	443b      	add	r3, r7
 80107a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80107a8:	e76a      	b.n	8010680 <_vfiprintf_r+0x78>
 80107aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80107ae:	460c      	mov	r4, r1
 80107b0:	2001      	movs	r0, #1
 80107b2:	e7a8      	b.n	8010706 <_vfiprintf_r+0xfe>
 80107b4:	2300      	movs	r3, #0
 80107b6:	3401      	adds	r4, #1
 80107b8:	9305      	str	r3, [sp, #20]
 80107ba:	4619      	mov	r1, r3
 80107bc:	f04f 0c0a 	mov.w	ip, #10
 80107c0:	4620      	mov	r0, r4
 80107c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107c6:	3a30      	subs	r2, #48	@ 0x30
 80107c8:	2a09      	cmp	r2, #9
 80107ca:	d903      	bls.n	80107d4 <_vfiprintf_r+0x1cc>
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d0c6      	beq.n	801075e <_vfiprintf_r+0x156>
 80107d0:	9105      	str	r1, [sp, #20]
 80107d2:	e7c4      	b.n	801075e <_vfiprintf_r+0x156>
 80107d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80107d8:	4604      	mov	r4, r0
 80107da:	2301      	movs	r3, #1
 80107dc:	e7f0      	b.n	80107c0 <_vfiprintf_r+0x1b8>
 80107de:	ab03      	add	r3, sp, #12
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	462a      	mov	r2, r5
 80107e4:	4b12      	ldr	r3, [pc, #72]	@ (8010830 <_vfiprintf_r+0x228>)
 80107e6:	a904      	add	r1, sp, #16
 80107e8:	4630      	mov	r0, r6
 80107ea:	f7fc fdcf 	bl	800d38c <_printf_float>
 80107ee:	4607      	mov	r7, r0
 80107f0:	1c78      	adds	r0, r7, #1
 80107f2:	d1d6      	bne.n	80107a2 <_vfiprintf_r+0x19a>
 80107f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107f6:	07d9      	lsls	r1, r3, #31
 80107f8:	d405      	bmi.n	8010806 <_vfiprintf_r+0x1fe>
 80107fa:	89ab      	ldrh	r3, [r5, #12]
 80107fc:	059a      	lsls	r2, r3, #22
 80107fe:	d402      	bmi.n	8010806 <_vfiprintf_r+0x1fe>
 8010800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010802:	f7fd fd8b 	bl	800e31c <__retarget_lock_release_recursive>
 8010806:	89ab      	ldrh	r3, [r5, #12]
 8010808:	065b      	lsls	r3, r3, #25
 801080a:	f53f af1f 	bmi.w	801064c <_vfiprintf_r+0x44>
 801080e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010810:	e71e      	b.n	8010650 <_vfiprintf_r+0x48>
 8010812:	ab03      	add	r3, sp, #12
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	462a      	mov	r2, r5
 8010818:	4b05      	ldr	r3, [pc, #20]	@ (8010830 <_vfiprintf_r+0x228>)
 801081a:	a904      	add	r1, sp, #16
 801081c:	4630      	mov	r0, r6
 801081e:	f7fd f84d 	bl	800d8bc <_printf_i>
 8010822:	e7e4      	b.n	80107ee <_vfiprintf_r+0x1e6>
 8010824:	08011881 	.word	0x08011881
 8010828:	0801188b 	.word	0x0801188b
 801082c:	0800d38d 	.word	0x0800d38d
 8010830:	080105e3 	.word	0x080105e3
 8010834:	08011887 	.word	0x08011887

08010838 <__sflush_r>:
 8010838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801083c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010840:	0716      	lsls	r6, r2, #28
 8010842:	4605      	mov	r5, r0
 8010844:	460c      	mov	r4, r1
 8010846:	d454      	bmi.n	80108f2 <__sflush_r+0xba>
 8010848:	684b      	ldr	r3, [r1, #4]
 801084a:	2b00      	cmp	r3, #0
 801084c:	dc02      	bgt.n	8010854 <__sflush_r+0x1c>
 801084e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010850:	2b00      	cmp	r3, #0
 8010852:	dd48      	ble.n	80108e6 <__sflush_r+0xae>
 8010854:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010856:	2e00      	cmp	r6, #0
 8010858:	d045      	beq.n	80108e6 <__sflush_r+0xae>
 801085a:	2300      	movs	r3, #0
 801085c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010860:	682f      	ldr	r7, [r5, #0]
 8010862:	6a21      	ldr	r1, [r4, #32]
 8010864:	602b      	str	r3, [r5, #0]
 8010866:	d030      	beq.n	80108ca <__sflush_r+0x92>
 8010868:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801086a:	89a3      	ldrh	r3, [r4, #12]
 801086c:	0759      	lsls	r1, r3, #29
 801086e:	d505      	bpl.n	801087c <__sflush_r+0x44>
 8010870:	6863      	ldr	r3, [r4, #4]
 8010872:	1ad2      	subs	r2, r2, r3
 8010874:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010876:	b10b      	cbz	r3, 801087c <__sflush_r+0x44>
 8010878:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801087a:	1ad2      	subs	r2, r2, r3
 801087c:	2300      	movs	r3, #0
 801087e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010880:	6a21      	ldr	r1, [r4, #32]
 8010882:	4628      	mov	r0, r5
 8010884:	47b0      	blx	r6
 8010886:	1c43      	adds	r3, r0, #1
 8010888:	89a3      	ldrh	r3, [r4, #12]
 801088a:	d106      	bne.n	801089a <__sflush_r+0x62>
 801088c:	6829      	ldr	r1, [r5, #0]
 801088e:	291d      	cmp	r1, #29
 8010890:	d82b      	bhi.n	80108ea <__sflush_r+0xb2>
 8010892:	4a2a      	ldr	r2, [pc, #168]	@ (801093c <__sflush_r+0x104>)
 8010894:	410a      	asrs	r2, r1
 8010896:	07d6      	lsls	r6, r2, #31
 8010898:	d427      	bmi.n	80108ea <__sflush_r+0xb2>
 801089a:	2200      	movs	r2, #0
 801089c:	6062      	str	r2, [r4, #4]
 801089e:	04d9      	lsls	r1, r3, #19
 80108a0:	6922      	ldr	r2, [r4, #16]
 80108a2:	6022      	str	r2, [r4, #0]
 80108a4:	d504      	bpl.n	80108b0 <__sflush_r+0x78>
 80108a6:	1c42      	adds	r2, r0, #1
 80108a8:	d101      	bne.n	80108ae <__sflush_r+0x76>
 80108aa:	682b      	ldr	r3, [r5, #0]
 80108ac:	b903      	cbnz	r3, 80108b0 <__sflush_r+0x78>
 80108ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80108b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80108b2:	602f      	str	r7, [r5, #0]
 80108b4:	b1b9      	cbz	r1, 80108e6 <__sflush_r+0xae>
 80108b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80108ba:	4299      	cmp	r1, r3
 80108bc:	d002      	beq.n	80108c4 <__sflush_r+0x8c>
 80108be:	4628      	mov	r0, r5
 80108c0:	f7fe fb9a 	bl	800eff8 <_free_r>
 80108c4:	2300      	movs	r3, #0
 80108c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80108c8:	e00d      	b.n	80108e6 <__sflush_r+0xae>
 80108ca:	2301      	movs	r3, #1
 80108cc:	4628      	mov	r0, r5
 80108ce:	47b0      	blx	r6
 80108d0:	4602      	mov	r2, r0
 80108d2:	1c50      	adds	r0, r2, #1
 80108d4:	d1c9      	bne.n	801086a <__sflush_r+0x32>
 80108d6:	682b      	ldr	r3, [r5, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d0c6      	beq.n	801086a <__sflush_r+0x32>
 80108dc:	2b1d      	cmp	r3, #29
 80108de:	d001      	beq.n	80108e4 <__sflush_r+0xac>
 80108e0:	2b16      	cmp	r3, #22
 80108e2:	d11e      	bne.n	8010922 <__sflush_r+0xea>
 80108e4:	602f      	str	r7, [r5, #0]
 80108e6:	2000      	movs	r0, #0
 80108e8:	e022      	b.n	8010930 <__sflush_r+0xf8>
 80108ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108ee:	b21b      	sxth	r3, r3
 80108f0:	e01b      	b.n	801092a <__sflush_r+0xf2>
 80108f2:	690f      	ldr	r7, [r1, #16]
 80108f4:	2f00      	cmp	r7, #0
 80108f6:	d0f6      	beq.n	80108e6 <__sflush_r+0xae>
 80108f8:	0793      	lsls	r3, r2, #30
 80108fa:	680e      	ldr	r6, [r1, #0]
 80108fc:	bf08      	it	eq
 80108fe:	694b      	ldreq	r3, [r1, #20]
 8010900:	600f      	str	r7, [r1, #0]
 8010902:	bf18      	it	ne
 8010904:	2300      	movne	r3, #0
 8010906:	eba6 0807 	sub.w	r8, r6, r7
 801090a:	608b      	str	r3, [r1, #8]
 801090c:	f1b8 0f00 	cmp.w	r8, #0
 8010910:	dde9      	ble.n	80108e6 <__sflush_r+0xae>
 8010912:	6a21      	ldr	r1, [r4, #32]
 8010914:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010916:	4643      	mov	r3, r8
 8010918:	463a      	mov	r2, r7
 801091a:	4628      	mov	r0, r5
 801091c:	47b0      	blx	r6
 801091e:	2800      	cmp	r0, #0
 8010920:	dc08      	bgt.n	8010934 <__sflush_r+0xfc>
 8010922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801092a:	81a3      	strh	r3, [r4, #12]
 801092c:	f04f 30ff 	mov.w	r0, #4294967295
 8010930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010934:	4407      	add	r7, r0
 8010936:	eba8 0800 	sub.w	r8, r8, r0
 801093a:	e7e7      	b.n	801090c <__sflush_r+0xd4>
 801093c:	dfbffffe 	.word	0xdfbffffe

08010940 <_fflush_r>:
 8010940:	b538      	push	{r3, r4, r5, lr}
 8010942:	690b      	ldr	r3, [r1, #16]
 8010944:	4605      	mov	r5, r0
 8010946:	460c      	mov	r4, r1
 8010948:	b913      	cbnz	r3, 8010950 <_fflush_r+0x10>
 801094a:	2500      	movs	r5, #0
 801094c:	4628      	mov	r0, r5
 801094e:	bd38      	pop	{r3, r4, r5, pc}
 8010950:	b118      	cbz	r0, 801095a <_fflush_r+0x1a>
 8010952:	6a03      	ldr	r3, [r0, #32]
 8010954:	b90b      	cbnz	r3, 801095a <_fflush_r+0x1a>
 8010956:	f7fd fb71 	bl	800e03c <__sinit>
 801095a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d0f3      	beq.n	801094a <_fflush_r+0xa>
 8010962:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010964:	07d0      	lsls	r0, r2, #31
 8010966:	d404      	bmi.n	8010972 <_fflush_r+0x32>
 8010968:	0599      	lsls	r1, r3, #22
 801096a:	d402      	bmi.n	8010972 <_fflush_r+0x32>
 801096c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801096e:	f7fd fcd4 	bl	800e31a <__retarget_lock_acquire_recursive>
 8010972:	4628      	mov	r0, r5
 8010974:	4621      	mov	r1, r4
 8010976:	f7ff ff5f 	bl	8010838 <__sflush_r>
 801097a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801097c:	07da      	lsls	r2, r3, #31
 801097e:	4605      	mov	r5, r0
 8010980:	d4e4      	bmi.n	801094c <_fflush_r+0xc>
 8010982:	89a3      	ldrh	r3, [r4, #12]
 8010984:	059b      	lsls	r3, r3, #22
 8010986:	d4e1      	bmi.n	801094c <_fflush_r+0xc>
 8010988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801098a:	f7fd fcc7 	bl	800e31c <__retarget_lock_release_recursive>
 801098e:	e7dd      	b.n	801094c <_fflush_r+0xc>

08010990 <__swbuf_r>:
 8010990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010992:	460e      	mov	r6, r1
 8010994:	4614      	mov	r4, r2
 8010996:	4605      	mov	r5, r0
 8010998:	b118      	cbz	r0, 80109a2 <__swbuf_r+0x12>
 801099a:	6a03      	ldr	r3, [r0, #32]
 801099c:	b90b      	cbnz	r3, 80109a2 <__swbuf_r+0x12>
 801099e:	f7fd fb4d 	bl	800e03c <__sinit>
 80109a2:	69a3      	ldr	r3, [r4, #24]
 80109a4:	60a3      	str	r3, [r4, #8]
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	071a      	lsls	r2, r3, #28
 80109aa:	d501      	bpl.n	80109b0 <__swbuf_r+0x20>
 80109ac:	6923      	ldr	r3, [r4, #16]
 80109ae:	b943      	cbnz	r3, 80109c2 <__swbuf_r+0x32>
 80109b0:	4621      	mov	r1, r4
 80109b2:	4628      	mov	r0, r5
 80109b4:	f000 f82a 	bl	8010a0c <__swsetup_r>
 80109b8:	b118      	cbz	r0, 80109c2 <__swbuf_r+0x32>
 80109ba:	f04f 37ff 	mov.w	r7, #4294967295
 80109be:	4638      	mov	r0, r7
 80109c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109c2:	6823      	ldr	r3, [r4, #0]
 80109c4:	6922      	ldr	r2, [r4, #16]
 80109c6:	1a98      	subs	r0, r3, r2
 80109c8:	6963      	ldr	r3, [r4, #20]
 80109ca:	b2f6      	uxtb	r6, r6
 80109cc:	4283      	cmp	r3, r0
 80109ce:	4637      	mov	r7, r6
 80109d0:	dc05      	bgt.n	80109de <__swbuf_r+0x4e>
 80109d2:	4621      	mov	r1, r4
 80109d4:	4628      	mov	r0, r5
 80109d6:	f7ff ffb3 	bl	8010940 <_fflush_r>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d1ed      	bne.n	80109ba <__swbuf_r+0x2a>
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	3b01      	subs	r3, #1
 80109e2:	60a3      	str	r3, [r4, #8]
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	6022      	str	r2, [r4, #0]
 80109ea:	701e      	strb	r6, [r3, #0]
 80109ec:	6962      	ldr	r2, [r4, #20]
 80109ee:	1c43      	adds	r3, r0, #1
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d004      	beq.n	80109fe <__swbuf_r+0x6e>
 80109f4:	89a3      	ldrh	r3, [r4, #12]
 80109f6:	07db      	lsls	r3, r3, #31
 80109f8:	d5e1      	bpl.n	80109be <__swbuf_r+0x2e>
 80109fa:	2e0a      	cmp	r6, #10
 80109fc:	d1df      	bne.n	80109be <__swbuf_r+0x2e>
 80109fe:	4621      	mov	r1, r4
 8010a00:	4628      	mov	r0, r5
 8010a02:	f7ff ff9d 	bl	8010940 <_fflush_r>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d0d9      	beq.n	80109be <__swbuf_r+0x2e>
 8010a0a:	e7d6      	b.n	80109ba <__swbuf_r+0x2a>

08010a0c <__swsetup_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4b29      	ldr	r3, [pc, #164]	@ (8010ab4 <__swsetup_r+0xa8>)
 8010a10:	4605      	mov	r5, r0
 8010a12:	6818      	ldr	r0, [r3, #0]
 8010a14:	460c      	mov	r4, r1
 8010a16:	b118      	cbz	r0, 8010a20 <__swsetup_r+0x14>
 8010a18:	6a03      	ldr	r3, [r0, #32]
 8010a1a:	b90b      	cbnz	r3, 8010a20 <__swsetup_r+0x14>
 8010a1c:	f7fd fb0e 	bl	800e03c <__sinit>
 8010a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a24:	0719      	lsls	r1, r3, #28
 8010a26:	d422      	bmi.n	8010a6e <__swsetup_r+0x62>
 8010a28:	06da      	lsls	r2, r3, #27
 8010a2a:	d407      	bmi.n	8010a3c <__swsetup_r+0x30>
 8010a2c:	2209      	movs	r2, #9
 8010a2e:	602a      	str	r2, [r5, #0]
 8010a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a34:	81a3      	strh	r3, [r4, #12]
 8010a36:	f04f 30ff 	mov.w	r0, #4294967295
 8010a3a:	e033      	b.n	8010aa4 <__swsetup_r+0x98>
 8010a3c:	0758      	lsls	r0, r3, #29
 8010a3e:	d512      	bpl.n	8010a66 <__swsetup_r+0x5a>
 8010a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a42:	b141      	cbz	r1, 8010a56 <__swsetup_r+0x4a>
 8010a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a48:	4299      	cmp	r1, r3
 8010a4a:	d002      	beq.n	8010a52 <__swsetup_r+0x46>
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f7fe fad3 	bl	800eff8 <_free_r>
 8010a52:	2300      	movs	r3, #0
 8010a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a56:	89a3      	ldrh	r3, [r4, #12]
 8010a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010a5c:	81a3      	strh	r3, [r4, #12]
 8010a5e:	2300      	movs	r3, #0
 8010a60:	6063      	str	r3, [r4, #4]
 8010a62:	6923      	ldr	r3, [r4, #16]
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	89a3      	ldrh	r3, [r4, #12]
 8010a68:	f043 0308 	orr.w	r3, r3, #8
 8010a6c:	81a3      	strh	r3, [r4, #12]
 8010a6e:	6923      	ldr	r3, [r4, #16]
 8010a70:	b94b      	cbnz	r3, 8010a86 <__swsetup_r+0x7a>
 8010a72:	89a3      	ldrh	r3, [r4, #12]
 8010a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a7c:	d003      	beq.n	8010a86 <__swsetup_r+0x7a>
 8010a7e:	4621      	mov	r1, r4
 8010a80:	4628      	mov	r0, r5
 8010a82:	f000 f8db 	bl	8010c3c <__smakebuf_r>
 8010a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a8a:	f013 0201 	ands.w	r2, r3, #1
 8010a8e:	d00a      	beq.n	8010aa6 <__swsetup_r+0x9a>
 8010a90:	2200      	movs	r2, #0
 8010a92:	60a2      	str	r2, [r4, #8]
 8010a94:	6962      	ldr	r2, [r4, #20]
 8010a96:	4252      	negs	r2, r2
 8010a98:	61a2      	str	r2, [r4, #24]
 8010a9a:	6922      	ldr	r2, [r4, #16]
 8010a9c:	b942      	cbnz	r2, 8010ab0 <__swsetup_r+0xa4>
 8010a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010aa2:	d1c5      	bne.n	8010a30 <__swsetup_r+0x24>
 8010aa4:	bd38      	pop	{r3, r4, r5, pc}
 8010aa6:	0799      	lsls	r1, r3, #30
 8010aa8:	bf58      	it	pl
 8010aaa:	6962      	ldrpl	r2, [r4, #20]
 8010aac:	60a2      	str	r2, [r4, #8]
 8010aae:	e7f4      	b.n	8010a9a <__swsetup_r+0x8e>
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	e7f7      	b.n	8010aa4 <__swsetup_r+0x98>
 8010ab4:	20000230 	.word	0x20000230

08010ab8 <memmove>:
 8010ab8:	4288      	cmp	r0, r1
 8010aba:	b510      	push	{r4, lr}
 8010abc:	eb01 0402 	add.w	r4, r1, r2
 8010ac0:	d902      	bls.n	8010ac8 <memmove+0x10>
 8010ac2:	4284      	cmp	r4, r0
 8010ac4:	4623      	mov	r3, r4
 8010ac6:	d807      	bhi.n	8010ad8 <memmove+0x20>
 8010ac8:	1e43      	subs	r3, r0, #1
 8010aca:	42a1      	cmp	r1, r4
 8010acc:	d008      	beq.n	8010ae0 <memmove+0x28>
 8010ace:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ad6:	e7f8      	b.n	8010aca <memmove+0x12>
 8010ad8:	4402      	add	r2, r0
 8010ada:	4601      	mov	r1, r0
 8010adc:	428a      	cmp	r2, r1
 8010ade:	d100      	bne.n	8010ae2 <memmove+0x2a>
 8010ae0:	bd10      	pop	{r4, pc}
 8010ae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010aea:	e7f7      	b.n	8010adc <memmove+0x24>

08010aec <_sbrk_r>:
 8010aec:	b538      	push	{r3, r4, r5, lr}
 8010aee:	4d06      	ldr	r5, [pc, #24]	@ (8010b08 <_sbrk_r+0x1c>)
 8010af0:	2300      	movs	r3, #0
 8010af2:	4604      	mov	r4, r0
 8010af4:	4608      	mov	r0, r1
 8010af6:	602b      	str	r3, [r5, #0]
 8010af8:	f7f3 fa9c 	bl	8004034 <_sbrk>
 8010afc:	1c43      	adds	r3, r0, #1
 8010afe:	d102      	bne.n	8010b06 <_sbrk_r+0x1a>
 8010b00:	682b      	ldr	r3, [r5, #0]
 8010b02:	b103      	cbz	r3, 8010b06 <_sbrk_r+0x1a>
 8010b04:	6023      	str	r3, [r4, #0]
 8010b06:	bd38      	pop	{r3, r4, r5, pc}
 8010b08:	200029d8 	.word	0x200029d8

08010b0c <__assert_func>:
 8010b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b0e:	4614      	mov	r4, r2
 8010b10:	461a      	mov	r2, r3
 8010b12:	4b09      	ldr	r3, [pc, #36]	@ (8010b38 <__assert_func+0x2c>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4605      	mov	r5, r0
 8010b18:	68d8      	ldr	r0, [r3, #12]
 8010b1a:	b954      	cbnz	r4, 8010b32 <__assert_func+0x26>
 8010b1c:	4b07      	ldr	r3, [pc, #28]	@ (8010b3c <__assert_func+0x30>)
 8010b1e:	461c      	mov	r4, r3
 8010b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b24:	9100      	str	r1, [sp, #0]
 8010b26:	462b      	mov	r3, r5
 8010b28:	4905      	ldr	r1, [pc, #20]	@ (8010b40 <__assert_func+0x34>)
 8010b2a:	f000 f84f 	bl	8010bcc <fiprintf>
 8010b2e:	f000 f8e3 	bl	8010cf8 <abort>
 8010b32:	4b04      	ldr	r3, [pc, #16]	@ (8010b44 <__assert_func+0x38>)
 8010b34:	e7f4      	b.n	8010b20 <__assert_func+0x14>
 8010b36:	bf00      	nop
 8010b38:	20000230 	.word	0x20000230
 8010b3c:	080118cd 	.word	0x080118cd
 8010b40:	0801189f 	.word	0x0801189f
 8010b44:	08011892 	.word	0x08011892

08010b48 <_calloc_r>:
 8010b48:	b570      	push	{r4, r5, r6, lr}
 8010b4a:	fba1 5402 	umull	r5, r4, r1, r2
 8010b4e:	b93c      	cbnz	r4, 8010b60 <_calloc_r+0x18>
 8010b50:	4629      	mov	r1, r5
 8010b52:	f7fe fdff 	bl	800f754 <_malloc_r>
 8010b56:	4606      	mov	r6, r0
 8010b58:	b928      	cbnz	r0, 8010b66 <_calloc_r+0x1e>
 8010b5a:	2600      	movs	r6, #0
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	bd70      	pop	{r4, r5, r6, pc}
 8010b60:	220c      	movs	r2, #12
 8010b62:	6002      	str	r2, [r0, #0]
 8010b64:	e7f9      	b.n	8010b5a <_calloc_r+0x12>
 8010b66:	462a      	mov	r2, r5
 8010b68:	4621      	mov	r1, r4
 8010b6a:	f7fd fb46 	bl	800e1fa <memset>
 8010b6e:	e7f5      	b.n	8010b5c <_calloc_r+0x14>

08010b70 <_realloc_r>:
 8010b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b74:	4680      	mov	r8, r0
 8010b76:	4615      	mov	r5, r2
 8010b78:	460c      	mov	r4, r1
 8010b7a:	b921      	cbnz	r1, 8010b86 <_realloc_r+0x16>
 8010b7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b80:	4611      	mov	r1, r2
 8010b82:	f7fe bde7 	b.w	800f754 <_malloc_r>
 8010b86:	b92a      	cbnz	r2, 8010b94 <_realloc_r+0x24>
 8010b88:	f7fe fa36 	bl	800eff8 <_free_r>
 8010b8c:	2400      	movs	r4, #0
 8010b8e:	4620      	mov	r0, r4
 8010b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b94:	f000 f8b7 	bl	8010d06 <_malloc_usable_size_r>
 8010b98:	4285      	cmp	r5, r0
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	d802      	bhi.n	8010ba4 <_realloc_r+0x34>
 8010b9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010ba2:	d8f4      	bhi.n	8010b8e <_realloc_r+0x1e>
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	4640      	mov	r0, r8
 8010ba8:	f7fe fdd4 	bl	800f754 <_malloc_r>
 8010bac:	4607      	mov	r7, r0
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d0ec      	beq.n	8010b8c <_realloc_r+0x1c>
 8010bb2:	42b5      	cmp	r5, r6
 8010bb4:	462a      	mov	r2, r5
 8010bb6:	4621      	mov	r1, r4
 8010bb8:	bf28      	it	cs
 8010bba:	4632      	movcs	r2, r6
 8010bbc:	f7fd fbaf 	bl	800e31e <memcpy>
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	4640      	mov	r0, r8
 8010bc4:	f7fe fa18 	bl	800eff8 <_free_r>
 8010bc8:	463c      	mov	r4, r7
 8010bca:	e7e0      	b.n	8010b8e <_realloc_r+0x1e>

08010bcc <fiprintf>:
 8010bcc:	b40e      	push	{r1, r2, r3}
 8010bce:	b503      	push	{r0, r1, lr}
 8010bd0:	4601      	mov	r1, r0
 8010bd2:	ab03      	add	r3, sp, #12
 8010bd4:	4805      	ldr	r0, [pc, #20]	@ (8010bec <fiprintf+0x20>)
 8010bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bda:	6800      	ldr	r0, [r0, #0]
 8010bdc:	9301      	str	r3, [sp, #4]
 8010bde:	f7ff fd13 	bl	8010608 <_vfiprintf_r>
 8010be2:	b002      	add	sp, #8
 8010be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010be8:	b003      	add	sp, #12
 8010bea:	4770      	bx	lr
 8010bec:	20000230 	.word	0x20000230

08010bf0 <__swhatbuf_r>:
 8010bf0:	b570      	push	{r4, r5, r6, lr}
 8010bf2:	460c      	mov	r4, r1
 8010bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bf8:	2900      	cmp	r1, #0
 8010bfa:	b096      	sub	sp, #88	@ 0x58
 8010bfc:	4615      	mov	r5, r2
 8010bfe:	461e      	mov	r6, r3
 8010c00:	da0d      	bge.n	8010c1e <__swhatbuf_r+0x2e>
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010c08:	f04f 0100 	mov.w	r1, #0
 8010c0c:	bf14      	ite	ne
 8010c0e:	2340      	movne	r3, #64	@ 0x40
 8010c10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010c14:	2000      	movs	r0, #0
 8010c16:	6031      	str	r1, [r6, #0]
 8010c18:	602b      	str	r3, [r5, #0]
 8010c1a:	b016      	add	sp, #88	@ 0x58
 8010c1c:	bd70      	pop	{r4, r5, r6, pc}
 8010c1e:	466a      	mov	r2, sp
 8010c20:	f000 f848 	bl	8010cb4 <_fstat_r>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	dbec      	blt.n	8010c02 <__swhatbuf_r+0x12>
 8010c28:	9901      	ldr	r1, [sp, #4]
 8010c2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010c2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010c32:	4259      	negs	r1, r3
 8010c34:	4159      	adcs	r1, r3
 8010c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010c3a:	e7eb      	b.n	8010c14 <__swhatbuf_r+0x24>

08010c3c <__smakebuf_r>:
 8010c3c:	898b      	ldrh	r3, [r1, #12]
 8010c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c40:	079d      	lsls	r5, r3, #30
 8010c42:	4606      	mov	r6, r0
 8010c44:	460c      	mov	r4, r1
 8010c46:	d507      	bpl.n	8010c58 <__smakebuf_r+0x1c>
 8010c48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c4c:	6023      	str	r3, [r4, #0]
 8010c4e:	6123      	str	r3, [r4, #16]
 8010c50:	2301      	movs	r3, #1
 8010c52:	6163      	str	r3, [r4, #20]
 8010c54:	b003      	add	sp, #12
 8010c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c58:	ab01      	add	r3, sp, #4
 8010c5a:	466a      	mov	r2, sp
 8010c5c:	f7ff ffc8 	bl	8010bf0 <__swhatbuf_r>
 8010c60:	9f00      	ldr	r7, [sp, #0]
 8010c62:	4605      	mov	r5, r0
 8010c64:	4639      	mov	r1, r7
 8010c66:	4630      	mov	r0, r6
 8010c68:	f7fe fd74 	bl	800f754 <_malloc_r>
 8010c6c:	b948      	cbnz	r0, 8010c82 <__smakebuf_r+0x46>
 8010c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c72:	059a      	lsls	r2, r3, #22
 8010c74:	d4ee      	bmi.n	8010c54 <__smakebuf_r+0x18>
 8010c76:	f023 0303 	bic.w	r3, r3, #3
 8010c7a:	f043 0302 	orr.w	r3, r3, #2
 8010c7e:	81a3      	strh	r3, [r4, #12]
 8010c80:	e7e2      	b.n	8010c48 <__smakebuf_r+0xc>
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	6020      	str	r0, [r4, #0]
 8010c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c8a:	81a3      	strh	r3, [r4, #12]
 8010c8c:	9b01      	ldr	r3, [sp, #4]
 8010c8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c92:	b15b      	cbz	r3, 8010cac <__smakebuf_r+0x70>
 8010c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f000 f81d 	bl	8010cd8 <_isatty_r>
 8010c9e:	b128      	cbz	r0, 8010cac <__smakebuf_r+0x70>
 8010ca0:	89a3      	ldrh	r3, [r4, #12]
 8010ca2:	f023 0303 	bic.w	r3, r3, #3
 8010ca6:	f043 0301 	orr.w	r3, r3, #1
 8010caa:	81a3      	strh	r3, [r4, #12]
 8010cac:	89a3      	ldrh	r3, [r4, #12]
 8010cae:	431d      	orrs	r5, r3
 8010cb0:	81a5      	strh	r5, [r4, #12]
 8010cb2:	e7cf      	b.n	8010c54 <__smakebuf_r+0x18>

08010cb4 <_fstat_r>:
 8010cb4:	b538      	push	{r3, r4, r5, lr}
 8010cb6:	4d07      	ldr	r5, [pc, #28]	@ (8010cd4 <_fstat_r+0x20>)
 8010cb8:	2300      	movs	r3, #0
 8010cba:	4604      	mov	r4, r0
 8010cbc:	4608      	mov	r0, r1
 8010cbe:	4611      	mov	r1, r2
 8010cc0:	602b      	str	r3, [r5, #0]
 8010cc2:	f7f3 f98f 	bl	8003fe4 <_fstat>
 8010cc6:	1c43      	adds	r3, r0, #1
 8010cc8:	d102      	bne.n	8010cd0 <_fstat_r+0x1c>
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	b103      	cbz	r3, 8010cd0 <_fstat_r+0x1c>
 8010cce:	6023      	str	r3, [r4, #0]
 8010cd0:	bd38      	pop	{r3, r4, r5, pc}
 8010cd2:	bf00      	nop
 8010cd4:	200029d8 	.word	0x200029d8

08010cd8 <_isatty_r>:
 8010cd8:	b538      	push	{r3, r4, r5, lr}
 8010cda:	4d06      	ldr	r5, [pc, #24]	@ (8010cf4 <_isatty_r+0x1c>)
 8010cdc:	2300      	movs	r3, #0
 8010cde:	4604      	mov	r4, r0
 8010ce0:	4608      	mov	r0, r1
 8010ce2:	602b      	str	r3, [r5, #0]
 8010ce4:	f7f3 f98e 	bl	8004004 <_isatty>
 8010ce8:	1c43      	adds	r3, r0, #1
 8010cea:	d102      	bne.n	8010cf2 <_isatty_r+0x1a>
 8010cec:	682b      	ldr	r3, [r5, #0]
 8010cee:	b103      	cbz	r3, 8010cf2 <_isatty_r+0x1a>
 8010cf0:	6023      	str	r3, [r4, #0]
 8010cf2:	bd38      	pop	{r3, r4, r5, pc}
 8010cf4:	200029d8 	.word	0x200029d8

08010cf8 <abort>:
 8010cf8:	b508      	push	{r3, lr}
 8010cfa:	2006      	movs	r0, #6
 8010cfc:	f000 f834 	bl	8010d68 <raise>
 8010d00:	2001      	movs	r0, #1
 8010d02:	f7f3 f93b 	bl	8003f7c <_exit>

08010d06 <_malloc_usable_size_r>:
 8010d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d0a:	1f18      	subs	r0, r3, #4
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	bfbc      	itt	lt
 8010d10:	580b      	ldrlt	r3, [r1, r0]
 8010d12:	18c0      	addlt	r0, r0, r3
 8010d14:	4770      	bx	lr

08010d16 <_raise_r>:
 8010d16:	291f      	cmp	r1, #31
 8010d18:	b538      	push	{r3, r4, r5, lr}
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	460c      	mov	r4, r1
 8010d1e:	d904      	bls.n	8010d2a <_raise_r+0x14>
 8010d20:	2316      	movs	r3, #22
 8010d22:	6003      	str	r3, [r0, #0]
 8010d24:	f04f 30ff 	mov.w	r0, #4294967295
 8010d28:	bd38      	pop	{r3, r4, r5, pc}
 8010d2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010d2c:	b112      	cbz	r2, 8010d34 <_raise_r+0x1e>
 8010d2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d32:	b94b      	cbnz	r3, 8010d48 <_raise_r+0x32>
 8010d34:	4628      	mov	r0, r5
 8010d36:	f000 f831 	bl	8010d9c <_getpid_r>
 8010d3a:	4622      	mov	r2, r4
 8010d3c:	4601      	mov	r1, r0
 8010d3e:	4628      	mov	r0, r5
 8010d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d44:	f000 b818 	b.w	8010d78 <_kill_r>
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d00a      	beq.n	8010d62 <_raise_r+0x4c>
 8010d4c:	1c59      	adds	r1, r3, #1
 8010d4e:	d103      	bne.n	8010d58 <_raise_r+0x42>
 8010d50:	2316      	movs	r3, #22
 8010d52:	6003      	str	r3, [r0, #0]
 8010d54:	2001      	movs	r0, #1
 8010d56:	e7e7      	b.n	8010d28 <_raise_r+0x12>
 8010d58:	2100      	movs	r1, #0
 8010d5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010d5e:	4620      	mov	r0, r4
 8010d60:	4798      	blx	r3
 8010d62:	2000      	movs	r0, #0
 8010d64:	e7e0      	b.n	8010d28 <_raise_r+0x12>
	...

08010d68 <raise>:
 8010d68:	4b02      	ldr	r3, [pc, #8]	@ (8010d74 <raise+0xc>)
 8010d6a:	4601      	mov	r1, r0
 8010d6c:	6818      	ldr	r0, [r3, #0]
 8010d6e:	f7ff bfd2 	b.w	8010d16 <_raise_r>
 8010d72:	bf00      	nop
 8010d74:	20000230 	.word	0x20000230

08010d78 <_kill_r>:
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	4d07      	ldr	r5, [pc, #28]	@ (8010d98 <_kill_r+0x20>)
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4604      	mov	r4, r0
 8010d80:	4608      	mov	r0, r1
 8010d82:	4611      	mov	r1, r2
 8010d84:	602b      	str	r3, [r5, #0]
 8010d86:	f7f3 f8e9 	bl	8003f5c <_kill>
 8010d8a:	1c43      	adds	r3, r0, #1
 8010d8c:	d102      	bne.n	8010d94 <_kill_r+0x1c>
 8010d8e:	682b      	ldr	r3, [r5, #0]
 8010d90:	b103      	cbz	r3, 8010d94 <_kill_r+0x1c>
 8010d92:	6023      	str	r3, [r4, #0]
 8010d94:	bd38      	pop	{r3, r4, r5, pc}
 8010d96:	bf00      	nop
 8010d98:	200029d8 	.word	0x200029d8

08010d9c <_getpid_r>:
 8010d9c:	f7f3 b8d6 	b.w	8003f4c <_getpid>

08010da0 <fmaxf>:
 8010da0:	b508      	push	{r3, lr}
 8010da2:	ed2d 8b02 	vpush	{d8}
 8010da6:	eeb0 8a40 	vmov.f32	s16, s0
 8010daa:	eef0 8a60 	vmov.f32	s17, s1
 8010dae:	f000 f831 	bl	8010e14 <__fpclassifyf>
 8010db2:	b930      	cbnz	r0, 8010dc2 <fmaxf+0x22>
 8010db4:	eeb0 8a68 	vmov.f32	s16, s17
 8010db8:	eeb0 0a48 	vmov.f32	s0, s16
 8010dbc:	ecbd 8b02 	vpop	{d8}
 8010dc0:	bd08      	pop	{r3, pc}
 8010dc2:	eeb0 0a68 	vmov.f32	s0, s17
 8010dc6:	f000 f825 	bl	8010e14 <__fpclassifyf>
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d0f4      	beq.n	8010db8 <fmaxf+0x18>
 8010dce:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd6:	dded      	ble.n	8010db4 <fmaxf+0x14>
 8010dd8:	e7ee      	b.n	8010db8 <fmaxf+0x18>

08010dda <fminf>:
 8010dda:	b508      	push	{r3, lr}
 8010ddc:	ed2d 8b02 	vpush	{d8}
 8010de0:	eeb0 8a40 	vmov.f32	s16, s0
 8010de4:	eef0 8a60 	vmov.f32	s17, s1
 8010de8:	f000 f814 	bl	8010e14 <__fpclassifyf>
 8010dec:	b930      	cbnz	r0, 8010dfc <fminf+0x22>
 8010dee:	eeb0 8a68 	vmov.f32	s16, s17
 8010df2:	eeb0 0a48 	vmov.f32	s0, s16
 8010df6:	ecbd 8b02 	vpop	{d8}
 8010dfa:	bd08      	pop	{r3, pc}
 8010dfc:	eeb0 0a68 	vmov.f32	s0, s17
 8010e00:	f000 f808 	bl	8010e14 <__fpclassifyf>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d0f4      	beq.n	8010df2 <fminf+0x18>
 8010e08:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e10:	d5ed      	bpl.n	8010dee <fminf+0x14>
 8010e12:	e7ee      	b.n	8010df2 <fminf+0x18>

08010e14 <__fpclassifyf>:
 8010e14:	ee10 3a10 	vmov	r3, s0
 8010e18:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010e1c:	d00d      	beq.n	8010e3a <__fpclassifyf+0x26>
 8010e1e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010e22:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010e26:	d30a      	bcc.n	8010e3e <__fpclassifyf+0x2a>
 8010e28:	4b07      	ldr	r3, [pc, #28]	@ (8010e48 <__fpclassifyf+0x34>)
 8010e2a:	1e42      	subs	r2, r0, #1
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d908      	bls.n	8010e42 <__fpclassifyf+0x2e>
 8010e30:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010e34:	4258      	negs	r0, r3
 8010e36:	4158      	adcs	r0, r3
 8010e38:	4770      	bx	lr
 8010e3a:	2002      	movs	r0, #2
 8010e3c:	4770      	bx	lr
 8010e3e:	2004      	movs	r0, #4
 8010e40:	4770      	bx	lr
 8010e42:	2003      	movs	r0, #3
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop
 8010e48:	007ffffe 	.word	0x007ffffe

08010e4c <_init>:
 8010e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e4e:	bf00      	nop
 8010e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e52:	bc08      	pop	{r3}
 8010e54:	469e      	mov	lr, r3
 8010e56:	4770      	bx	lr

08010e58 <_fini>:
 8010e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e5a:	bf00      	nop
 8010e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e5e:	bc08      	pop	{r3}
 8010e60:	469e      	mov	lr, r3
 8010e62:	4770      	bx	lr
