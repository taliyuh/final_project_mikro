
L06_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d474  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800d648  0800d648  0000e648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbdc  0800dbdc  0000f24c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbdc  0800dbdc  0000ebdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbe4  0800dbe4  0000f24c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbe4  0800dbe4  0000ebe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbe8  0800dbe8  0000ebe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0800dbec  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  2000024c  0800de38  0000f24c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800de38  0000f608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f24c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b1a  00000000  00000000  0000f27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003982  00000000  00000000  00026d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002a718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb5  00000000  00000000  0002ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297cf  00000000  00000000  0002c90d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aae7  00000000  00000000  000560dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7a3d  00000000  00000000  00070bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168600  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b0  00000000  00000000  00168644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0016ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000024c 	.word	0x2000024c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d62c 	.word	0x0800d62c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000250 	.word	0x20000250
 800020c:	0800d62c 	.word	0x0800d62c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <bmp2_init>:
/*!
 * @brief This API is the entry point.
 * It reads the chip-id and calibration data from the sensor.
 */
int8_t bmp2_init(struct bmp2_dev *dev)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 fa47 	bl	80014c0 <null_ptr_check>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP2_OK)
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d117      	bne.n	800106e <bmp2_init+0x4a>
    {
        rslt = bmp2_get_regs(BMP2_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	20d0      	movs	r0, #208	@ 0xd0
 8001046:	f000 f818 	bl	800107a <bmp2_get_regs>
 800104a:	4603      	mov	r3, r0
 800104c:	73fb      	strb	r3, [r7, #15]

        /* Check for chip id validity */
        if (rslt == BMP2_OK)
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10b      	bne.n	800106e <bmp2_init+0x4a>
        {
            if (dev->chip_id == BMP2_CHIP_ID)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b58      	cmp	r3, #88	@ 0x58
 800105c:	d105      	bne.n	800106a <bmp2_init+0x46>
            {
                rslt = get_calib_param(dev);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 fa79 	bl	8001556 <get_calib_param>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e001      	b.n	800106e <bmp2_init+0x4a>
            }
            else
            {
                rslt = BMP2_E_DEV_NOT_FOUND;
 800106a:	23fc      	movs	r3, #252	@ 0xfc
 800106c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <bmp2_get_regs>:
/*!
 * @brief This API reads the data from the given register address of the
 * sensor.
 */
int8_t bmp2_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 800107a:	b590      	push	{r4, r7, lr}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f000 fa18 	bl	80014c0 <null_ptr_check>
 8001090:	4603      	mov	r3, r0
 8001092:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (reg_data != NULL))
 8001094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11e      	bne.n	80010da <bmp2_get_regs+0x60>
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d01b      	beq.n	80010da <bmp2_get_regs+0x60>
    {
        /* Mask the register address' MSB if interface selected is SPI */
        if (dev->intf == BMP2_SPI_INTF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d103      	bne.n	80010b2 <bmp2_get_regs+0x38>
        {
            reg_addr = reg_addr | BMP2_SPI_RD_MASK;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010b0:	73fb      	strb	r3, [r7, #15]
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68dc      	ldr	r4, [r3, #12]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	7bf8      	ldrb	r0, [r7, #15]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	47a0      	blx	r4
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	721a      	strb	r2, [r3, #8]

        /* Check for communication error and mask with an internal error code */
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <bmp2_get_regs+0x64>
        {
            rslt = BMP2_E_COM_FAIL;
 80010d4:	23fe      	movs	r3, #254	@ 0xfe
 80010d6:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 80010d8:	e001      	b.n	80010de <bmp2_get_regs+0x64>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80010da:	23ff      	movs	r3, #255	@ 0xff
 80010dc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	371c      	adds	r7, #28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <bmp2_set_regs>:
/*!
 * @brief This API writes the given data to the register addresses
 * of the sensor.
 */
int8_t bmp2_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp2_dev *dev)
{
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b08b      	sub	sp, #44	@ 0x2c
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	603b      	str	r3, [r7, #0]
    int8_t rslt;
    uint8_t temp_buff[8]; /* Typically not to write more than 4 registers */
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    if (len > BMP2_MAX_LEN)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d901      	bls.n	8001102 <bmp2_set_regs+0x18>
    {
        len = BMP2_MAX_LEN;
 80010fe:	2304      	movs	r3, #4
 8001100:	607b      	str	r3, [r7, #4]
    }

    rslt = null_ptr_check(dev);
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f000 f9dc 	bl	80014c0 <null_ptr_check>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if ((rslt == BMP2_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800110e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001112:	2b00      	cmp	r3, #0
 8001114:	d150      	bne.n	80011b8 <bmp2_set_regs+0xce>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d04d      	beq.n	80011b8 <bmp2_set_regs+0xce>
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d04a      	beq.n	80011b8 <bmp2_set_regs+0xce>
    {
        if (len > 0)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d043      	beq.n	80011b0 <bmp2_set_regs+0xc6>
        {
            temp_buff[0] = reg_data[0];
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	753b      	strb	r3, [r7, #20]

            /* Mask the register address' MSB if interface selected is SPI */
            if (dev->intf == BMP2_SPI_INTF)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d114      	bne.n	8001160 <bmp2_set_regs+0x76>
            {
                /* Converting all the reg address into proper SPI write address
                 * i.e making MSB(R/`W) bit 0
                 */
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001136:	2300      	movs	r3, #0
 8001138:	77fb      	strb	r3, [r7, #31]
 800113a:	e00d      	b.n	8001158 <bmp2_set_regs+0x6e>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & BMP2_SPI_WR_MASK;
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4413      	add	r3, r2
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	7ffb      	ldrb	r3, [r7, #31]
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	440b      	add	r3, r1
 800114a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	3301      	adds	r3, #1
 8001156:	77fb      	strb	r3, [r7, #31]
 8001158:	7ffb      	ldrb	r3, [r7, #31]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	429a      	cmp	r2, r3
 800115e:	d8ed      	bhi.n	800113c <bmp2_set_regs+0x52>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d90b      	bls.n	800117e <bmp2_set_regs+0x94>
            {
                /* Interleave register address w.r.t data for burst write */
                interleave_data(reg_addr, temp_buff, reg_data, len);
 8001166:	f107 0114 	add.w	r1, r7, #20
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f9c6 	bl	8001500 <interleave_data>
                temp_len = ((len * 2) - 1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	3b01      	subs	r3, #1
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	e001      	b.n	8001182 <bmp2_set_regs+0x98>
            }
            else
            {
                temp_len = len;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691c      	ldr	r4, [r3, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	7818      	ldrb	r0, [r3, #0]
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f107 0114 	add.w	r1, r7, #20
 8001192:	6a3a      	ldr	r2, [r7, #32]
 8001194:	47a0      	blx	r4
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	721a      	strb	r2, [r3, #8]

            /* Check for communication error and mask with an internal error code */
            if (dev->intf_rslt != BMP2_INTF_RET_SUCCESS)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00b      	beq.n	80011c0 <bmp2_set_regs+0xd6>
            {
                rslt = BMP2_E_COM_FAIL;
 80011a8:	23fe      	movs	r3, #254	@ 0xfe
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80011ae:	e007      	b.n	80011c0 <bmp2_set_regs+0xd6>
            }
        }
        else
        {
            rslt = BMP2_E_INVALID_LEN;
 80011b0:	23fd      	movs	r3, #253	@ 0xfd
 80011b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len > 0)
 80011b6:	e003      	b.n	80011c0 <bmp2_set_regs+0xd6>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80011b8:	23ff      	movs	r3, #255	@ 0xff
 80011ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80011be:	e000      	b.n	80011c2 <bmp2_set_regs+0xd8>
        if (len > 0)
 80011c0:	bf00      	nop
    }

    return rslt;
 80011c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	372c      	adds	r7, #44	@ 0x2c
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}

080011ce <bmp2_soft_reset>:

/*!
 * @brief This API triggers the soft-reset of the sensor.
 */
int8_t bmp2_soft_reset(struct bmp2_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP2_REG_SOFT_RESET;
 80011d6:	23e0      	movs	r3, #224	@ 0xe0
 80011d8:	73bb      	strb	r3, [r7, #14]
    uint8_t soft_rst_cmd = BMP2_SOFT_RESET_CMD;
 80011da:	23b6      	movs	r3, #182	@ 0xb6
 80011dc:	737b      	strb	r3, [r7, #13]

    rslt = bmp2_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011de:	f107 010d 	add.w	r1, r7, #13
 80011e2:	f107 000e 	add.w	r0, r7, #14
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f7ff ff7e 	bl	80010ea <bmp2_set_regs>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]

    return rslt;
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <bmp2_get_config>:
 * register. It gives the currently set temperature and pressure over-sampling
 * configuration, power mode configuration, sleep duration and
 * IIR filter coefficient.
 */
int8_t bmp2_get_config(struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 8001208:	2300      	movs	r3, #0
 800120a:	81bb      	strh	r3, [r7, #12]

    if (conf != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d02d      	beq.n	800126e <bmp2_get_config+0x70>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 8001212:	f107 010c 	add.w	r1, r7, #12
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2202      	movs	r2, #2
 800121a:	20f4      	movs	r0, #244	@ 0xf4
 800121c:	f7ff ff2d 	bl	800107a <bmp2_get_regs>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d122      	bne.n	8001272 <bmp2_get_config+0x74>
        {
            conf->os_temp = BMP2_GET_BITS(temp[0], BMP2_OS_TEMP);
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	701a      	strb	r2, [r3, #0]
            conf->os_pres = BMP2_GET_BITS(temp[0], BMP2_OS_PRES);
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	109b      	asrs	r3, r3, #2
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	b2da      	uxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	705a      	strb	r2, [r3, #1]
            conf->odr = BMP2_GET_BITS(temp[1], BMP2_STANDBY_DURN);
 8001246:	7b7b      	ldrb	r3, [r7, #13]
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	709a      	strb	r2, [r3, #2]
            conf->filter = BMP2_GET_BITS(temp[1], BMP2_FILTER);
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	109b      	asrs	r3, r3, #2
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	b2da      	uxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	711a      	strb	r2, [r3, #4]
            conf->spi3w_en = BMP2_GET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE);
 8001260:	7b7b      	ldrb	r3, [r7, #13]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2da      	uxtb	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	715a      	strb	r2, [r3, #5]
 800126c:	e001      	b.n	8001272 <bmp2_get_config+0x74>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800126e:	23ff      	movs	r3, #255	@ 0xff
 8001270:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <bmp2_set_config>:
 * @brief This API writes the data to the ctrl_meas register and config register.
 * It sets the over-sampling mode, power mode configuration,
 * sleep duration and IIR filter coefficient.
 */
int8_t bmp2_set_config(const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
    return conf_sensor(BMP2_POWERMODE_SLEEP, conf, dev);
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f9fd 	bl	800168c <conf_sensor>
 8001292:	4603      	mov	r3, r0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <bmp2_get_status>:

/*!
 * @brief This API reads the status register
 */
int8_t bmp2_get_status(struct bmp2_status *status, struct bmp2_dev *dev)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp;

    if (status != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d01b      	beq.n	80012e4 <bmp2_get_status+0x48>
    {
        rslt = bmp2_get_regs(BMP2_REG_STATUS, &temp, 1, dev);
 80012ac:	f107 010e 	add.w	r1, r7, #14
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2201      	movs	r2, #1
 80012b4:	20f3      	movs	r0, #243	@ 0xf3
 80012b6:	f7ff fee0 	bl	800107a <bmp2_get_regs>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMP2_OK)
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d110      	bne.n	80012e8 <bmp2_get_status+0x4c>
        {
            status->measuring = BMP2_GET_BITS(temp, BMP2_STATUS_MEAS);
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	10db      	asrs	r3, r3, #3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	701a      	strb	r2, [r3, #0]
            status->im_update = BMP2_GET_BITS_POS_0(temp, BMP2_STATUS_IM_UPDATE);
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	705a      	strb	r2, [r3, #1]
 80012e2:	e001      	b.n	80012e8 <bmp2_get_status+0x4c>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80012e4:	23ff      	movs	r3, #255	@ 0xff
 80012e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80012e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <bmp2_set_power_mode>:

/*!
 * @brief This API writes the power mode.
 */
int8_t bmp2_set_power_mode(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    rslt = conf_sensor(mode, conf, dev);
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68b9      	ldr	r1, [r7, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f9bf 	bl	800168c <conf_sensor>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]

    return rslt;
 8001312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <bmp2_get_sensor_data>:
 * @brief This API reads the pressure and temperature data from the
 * sensor, compensates the data and store it in the bmp2_data structure
 * instance passed by the user.
 */
int8_t bmp2_get_sensor_data(struct bmp2_data *comp_data, struct bmp2_dev *dev)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp[BMP2_P_T_LEN] = { 0 };
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	2300      	movs	r3, #0
 800132e:	82bb      	strh	r3, [r7, #20]
    struct bmp2_uncomp_data uncomp_data = { 0 };
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]

    if (comp_data != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d024      	beq.n	800138a <bmp2_get_sensor_data+0x6c>
    {
        rslt = bmp2_get_regs(BMP2_REG_PRES_MSB, temp, BMP2_P_T_LEN, dev);
 8001340:	f107 0110 	add.w	r1, r7, #16
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2206      	movs	r2, #6
 8001348:	20f7      	movs	r0, #247	@ 0xf7
 800134a:	f7ff fe96 	bl	800107a <bmp2_get_regs>
 800134e:	4603      	mov	r3, r0
 8001350:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 8001352:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <bmp2_get_sensor_data+0x70>
        {
            /* Parse the read data from the sensor */
            rslt = parse_sensor_data(temp, &uncomp_data);
 800135a:	f107 0208 	add.w	r2, r7, #8
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fab9 	bl	80018dc <parse_sensor_data>
 800136a:	4603      	mov	r3, r0
 800136c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 800136e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10b      	bne.n	800138e <bmp2_get_sensor_data+0x70>
            {
                /* Compensate the pressure and/or temperature
                 * data from the sensor
                 */
                rslt = bmp2_compensate_data(&uncomp_data, comp_data, dev);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f80b 	bl	800139a <bmp2_compensate_data>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	e001      	b.n	800138e <bmp2_get_sensor_data+0x70>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800138a:	23ff      	movs	r3, #255	@ 0xff
 800138c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800138e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <bmp2_compensate_data>:
 * temperature data.
 */
int8_t bmp2_compensate_data(const struct bmp2_uncomp_data *uncomp_data,
                            struct bmp2_data *comp_data,
                            struct bmp2_dev *dev)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f88a 	bl	80014c0 <null_ptr_check>
 80013ac:	4603      	mov	r3, r0
 80013ae:	75fb      	strb	r3, [r7, #23]

    if ((rslt == BMP2_OK) && (uncomp_data != NULL) && (comp_data != NULL))
 80013b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d129      	bne.n	800140c <bmp2_compensate_data+0x72>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d026      	beq.n	800140c <bmp2_compensate_data+0x72>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d023      	beq.n	800140c <bmp2_compensate_data+0x72>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013d2:	68b9      	ldr	r1, [r7, #8]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c1 2300 	strd	r2, r3, [r1]

        rslt = compensate_temperature(&comp_data->temperature, uncomp_data, dev);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3308      	adds	r3, #8
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fabb 	bl	8001964 <compensate_temperature>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80013f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10a      	bne.n	8001410 <bmp2_compensate_data+0x76>
        {
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, dev);
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	68f9      	ldr	r1, [r7, #12]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fba5 	bl	8001b50 <compensate_pressure>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMP2_OK)
 800140a:	e001      	b.n	8001410 <bmp2_compensate_data+0x76>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 800140c:	23ff      	movs	r3, #255	@ 0xff
 800140e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <bmp2_compute_meas_time>:
/*!
 * @brief This API computes the measurement time in microseconds for the
 * active configuration based on standbytime(conf->odr) and over-sampling mode(conf->os_mode)
 */
int8_t bmp2_compute_meas_time(uint32_t *sampling_time, const struct bmp2_config *conf, const struct bmp2_dev *dev)
{
 800141c:	b5b0      	push	{r4, r5, r7, lr}
 800141e:	b092      	sub	sp, #72	@ 0x48
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Array contains measurement time in microseconds */
    uint32_t measurement_time[] = { 5500, 7500, 11500, 19500, 37500 };
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <bmp2_compute_meas_time+0x9c>)
 800142a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800142e:	461d      	mov	r5, r3
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	6023      	str	r3, [r4, #0]
    uint32_t standby_time[] = { 500, 62500, 125000, 250000, 500000, 1000000, 2000000, 4000000 };
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <bmp2_compute_meas_time+0xa0>)
 800143a:	f107 0410 	add.w	r4, r7, #16
 800143e:	461d      	mov	r5, r3
 8001440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001444:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    rslt = null_ptr_check(dev);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f837 	bl	80014c0 <null_ptr_check>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if ((rslt == BMP2_OK) && (conf != NULL))
 8001458:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800145c:	2b00      	cmp	r3, #0
 800145e:	d122      	bne.n	80014a6 <bmp2_compute_meas_time+0x8a>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d01f      	beq.n	80014a6 <bmp2_compute_meas_time+0x8a>
    {
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7e1b      	ldrb	r3, [r3, #24]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d111      	bne.n	8001492 <bmp2_compute_meas_time+0x76>
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode] + standby_time[conf->odr];
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	78db      	ldrb	r3, [r3, #3]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	3348      	adds	r3, #72	@ 0x48
 8001476:	443b      	add	r3, r7
 8001478:	f853 2c18 	ldr.w	r2, [r3, #-24]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3348      	adds	r3, #72	@ 0x48
 8001484:	443b      	add	r3, r7
 8001486:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800148a:	441a      	add	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 8001490:	e00c      	b.n	80014ac <bmp2_compute_meas_time+0x90>
        }
        else
        {
            /* Time in microseconds */
            (*sampling_time) = measurement_time[conf->os_mode];
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	78db      	ldrb	r3, [r3, #3]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	3348      	adds	r3, #72	@ 0x48
 800149a:	443b      	add	r3, r7
 800149c:	f853 2c18 	ldr.w	r2, [r3, #-24]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	601a      	str	r2, [r3, #0]
        if (dev->power_mode == BMP2_POWERMODE_NORMAL)
 80014a4:	e002      	b.n	80014ac <bmp2_compute_meas_time+0x90>
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 80014a6:	23ff      	movs	r3, #255	@ 0xff
 80014a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 80014ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3748      	adds	r7, #72	@ 0x48
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdb0      	pop	{r4, r5, r7, pc}
 80014b8:	0800d648 	.word	0x0800d648
 80014bc:	0800d65c 	.word	0x0800d65c

080014c0 <null_ptr_check>:
/*!
 * @brief This internal API is used to check for null-pointers in the device
 * structure.
 */
static int8_t null_ptr_check(const struct bmp2_dev *dev)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <null_ptr_check+0x26>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d007      	beq.n	80014e6 <null_ptr_check+0x26>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <null_ptr_check+0x26>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <null_ptr_check+0x2c>
    {
        /* Null-pointer found */
        rslt = BMP2_E_NULL_PTR;
 80014e6:	23ff      	movs	r3, #255	@ 0xff
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e001      	b.n	80014f0 <null_ptr_check+0x30>
    }
    else
    {
        rslt = BMP2_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <interleave_data>:
/*!
 * @brief This internal API interleaves the register addresses and respective
 * register data for a burst write
 */
static void interleave_data(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001500:	b480      	push	{r7}
 8001502:	b087      	sub	sp, #28
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e015      	b.n	8001540 <interleave_data+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	441a      	add	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	440b      	add	r3, r1
 8001524:	7812      	ldrb	r2, [r2, #0]
 8001526:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	441a      	add	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	440b      	add	r3, r1
 8001536:	7812      	ldrb	r2, [r2, #0]
 8001538:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d3e5      	bcc.n	8001514 <interleave_data+0x14>
    }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <get_calib_param>:
/*!
 * @brief This API is used to read the calibration parameters used
 * for calculating the compensated data.
 */
static int8_t get_calib_param(struct bmp2_dev *dev)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b08a      	sub	sp, #40	@ 0x28
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t temp[BMP2_CALIB_DATA_SIZE] = { 0 };
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	751a      	strb	r2, [r3, #20]

    rslt = bmp2_get_regs(BMP2_REG_DIG_T1_LSB, temp, BMP2_CALIB_DATA_SIZE, dev);
 8001574:	f107 010c 	add.w	r1, r7, #12
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2219      	movs	r2, #25
 800157c:	2088      	movs	r0, #136	@ 0x88
 800157e:	f7ff fd7c 	bl	800107a <bmp2_get_regs>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (rslt == BMP2_OK)
 8001588:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800158c:	2b00      	cmp	r3, #0
 800158e:	d177      	bne.n	8001680 <get_calib_param+0x12a>
    {
        dev->calib_param.dig_t1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T1_MSB_POS], temp[BMP2_DIG_T1_LSB_POS]));
 8001590:	7b7b      	ldrb	r3, [r7, #13]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	839a      	strh	r2, [r3, #28]
        dev->calib_param.dig_t2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T2_MSB_POS], temp[BMP2_DIG_T2_LSB_POS]));
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21a      	sxth	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	83da      	strh	r2, [r3, #30]
        dev->calib_param.dig_t3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_T3_MSB_POS], temp[BMP2_DIG_T3_LSB_POS]));
 80015b6:	7c7b      	ldrb	r3, [r7, #17]
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7c3b      	ldrb	r3, [r7, #16]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21a      	sxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	841a      	strh	r2, [r3, #32]
        dev->calib_param.dig_p1 = (uint16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P1_MSB_POS], temp[BMP2_DIG_P1_LSB_POS]));
 80015c8:	7cfb      	ldrb	r3, [r7, #19]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	7cbb      	ldrb	r3, [r7, #18]
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	845a      	strh	r2, [r3, #34]	@ 0x22
        dev->calib_param.dig_p2 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P2_MSB_POS], temp[BMP2_DIG_P2_LSB_POS]));
 80015dc:	7d7b      	ldrb	r3, [r7, #21]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	7d3b      	ldrb	r3, [r7, #20]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib_param.dig_p3 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P3_MSB_POS], temp[BMP2_DIG_P3_LSB_POS]));
 80015ee:	7dfb      	ldrb	r3, [r7, #23]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	7dbb      	ldrb	r3, [r7, #22]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib_param.dig_p4 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P4_MSB_POS], temp[BMP2_DIG_P4_LSB_POS]));
 8001600:	7e7b      	ldrb	r3, [r7, #25]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	7e3b      	ldrb	r3, [r7, #24]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21a      	sxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	851a      	strh	r2, [r3, #40]	@ 0x28
        dev->calib_param.dig_p5 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P5_MSB_POS], temp[BMP2_DIG_P5_LSB_POS]));
 8001612:	7efb      	ldrb	r3, [r7, #27]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7ebb      	ldrb	r3, [r7, #26]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib_param.dig_p6 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P6_MSB_POS], temp[BMP2_DIG_P6_LSB_POS]));
 8001624:	7f7b      	ldrb	r3, [r7, #29]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	7f3b      	ldrb	r3, [r7, #28]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21a      	sxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib_param.dig_p7 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P7_MSB_POS], temp[BMP2_DIG_P7_LSB_POS]));
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	7fbb      	ldrb	r3, [r7, #30]
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	85da      	strh	r2, [r3, #46]	@ 0x2e
        dev->calib_param.dig_p8 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P8_MSB_POS], temp[BMP2_DIG_P8_LSB_POS]));
 8001648:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21a      	sxth	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib_param.dig_p9 = (int16_t) (BMP2_MSBLSB_TO_U16(temp[BMP2_DIG_P9_MSB_POS], temp[BMP2_DIG_P9_LSB_POS]));
 800165e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21a      	sxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib_param.dig_p10 = (int8_t) ((uint8_t)(temp[BMP2_DIG_P10_POS]));
 8001674:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001678:	b25a      	sxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    return rslt;
 8001680:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001684:	4618      	mov	r0, r3
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <conf_sensor>:

/*!
 * @brief This internal API to reset the sensor, restore/set conf, restore/set mode
 */
static int8_t conf_sensor(uint8_t mode, const struct bmp2_config *conf, struct bmp2_dev *dev)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t temp[2] = { 0, 0 };
 800169a:	2300      	movs	r3, #0
 800169c:	82bb      	strh	r3, [r7, #20]
    uint8_t reg_addr[2] = { BMP2_REG_CTRL_MEAS, BMP2_REG_CONFIG };
 800169e:	f24f 53f4 	movw	r3, #62964	@ 0xf5f4
 80016a2:	823b      	strh	r3, [r7, #16]

    if (conf != NULL)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d074      	beq.n	8001794 <conf_sensor+0x108>
    {
        rslt = bmp2_get_regs(BMP2_REG_CTRL_MEAS, temp, 2, dev);
 80016aa:	f107 0114 	add.w	r1, r7, #20
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	20f4      	movs	r0, #244	@ 0xf4
 80016b4:	f7ff fce1 	bl	800107a <bmp2_get_regs>
 80016b8:	4603      	mov	r3, r0
 80016ba:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMP2_OK)
 80016bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d169      	bne.n	8001798 <conf_sensor+0x10c>
        {
            /* Here the intention is to put the device to sleep
             * within the shortest period of time
             */
            rslt = bmp2_soft_reset(dev);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fd82 	bl	80011ce <bmp2_soft_reset>
 80016ca:	4603      	mov	r3, r0
 80016cc:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP2_OK)
 80016ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d160      	bne.n	8001798 <conf_sensor+0x10c>
            {
                set_os_mode(temp, conf);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	68b9      	ldr	r1, [r7, #8]
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f861 	bl	80017a4 <set_os_mode>
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_STANDBY_DURN, conf->odr);
 80016e2:	7d7b      	ldrb	r3, [r7, #21]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b25b      	sxtb	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS(temp[1], BMP2_FILTER, conf->filter);
 80016fc:	7d7b      	ldrb	r3, [r7, #21]
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	f023 031c 	bic.w	r3, r3, #28
 8001704:	b25a      	sxtb	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	791b      	ldrb	r3, [r3, #4]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	b25b      	sxtb	r3, r3
 800170e:	f003 031c 	and.w	r3, r3, #28
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	757b      	strb	r3, [r7, #21]
                temp[1] = BMP2_SET_BITS_POS_0(temp[1], BMP2_SPI3_ENABLE, conf->spi3w_en);
 800171c:	7d7b      	ldrb	r3, [r7, #21]
 800171e:	b25b      	sxtb	r3, r3
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	b25a      	sxtb	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	795b      	ldrb	r3, [r3, #5]
 800172a:	b25b      	sxtb	r3, r3
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b25b      	sxtb	r3, r3
 8001732:	4313      	orrs	r3, r2
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	757b      	strb	r3, [r7, #21]

                rslt = bmp2_set_regs(reg_addr, temp, 2, dev);
 800173a:	f107 0114 	add.w	r1, r7, #20
 800173e:	f107 0010 	add.w	r0, r7, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	f7ff fcd0 	bl	80010ea <bmp2_set_regs>
 800174a:	4603      	mov	r3, r0
 800174c:	75fb      	strb	r3, [r7, #23]

                if ((rslt == BMP2_OK) && (mode != BMP2_POWERMODE_SLEEP))
 800174e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d120      	bne.n	8001798 <conf_sensor+0x10c>
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01d      	beq.n	8001798 <conf_sensor+0x10c>
                {
                    dev->power_mode = mode;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	761a      	strb	r2, [r3, #24]

                    /* Write only the power mode register in a separate write */
                    temp[0] = BMP2_SET_BITS_POS_0(temp[0], BMP2_POWERMODE, mode);
 8001762:	7d3b      	ldrb	r3, [r7, #20]
 8001764:	b25b      	sxtb	r3, r3
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	b25a      	sxtb	r2, r3
 800176c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	b25b      	sxtb	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	b25b      	sxtb	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	753b      	strb	r3, [r7, #20]
                    rslt = bmp2_set_regs(reg_addr, temp, 1, dev);
 800177e:	f107 0114 	add.w	r1, r7, #20
 8001782:	f107 0010 	add.w	r0, r7, #16
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f7ff fcae 	bl	80010ea <bmp2_set_regs>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
 8001792:	e001      	b.n	8001798 <conf_sensor+0x10c>
            }
        }
    }
    else
    {
        rslt = BMP2_E_NULL_PTR;
 8001794:	23ff      	movs	r3, #255	@ 0xff
 8001796:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001798:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <set_os_mode>:
/*!
 *  @brief This internal API is used to set the over-sampling rate of temperature and pressure
 *  based on the over-sampling mode.
 */
static void set_os_mode(uint8_t *reg_data, const struct bmp2_config *conf)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
    switch (conf->os_mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	78db      	ldrb	r3, [r3, #3]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	f200 808b 	bhi.w	80018ce <set_os_mode+0x12a>
 80017b8:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <set_os_mode+0x1c>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017d5 	.word	0x080017d5
 80017c4:	08001807 	.word	0x08001807
 80017c8:	08001839 	.word	0x08001839
 80017cc:	0800186b 	.word	0x0800186b
 80017d0:	0800189d 	.word	0x0800189d
    {
        case BMP2_OS_MODE_ULTRA_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	f043 0320 	orr.w	r3, r3, #32
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_1X);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	f023 031c 	bic.w	r3, r3, #28
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	701a      	strb	r2, [r3, #0]
            break;
 8001804:	e064      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_LOW_POWER:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	b25b      	sxtb	r3, r3
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	b25b      	sxtb	r3, r3
 8001818:	b2da      	uxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_2X);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b25b      	sxtb	r3, r3
 8001824:	f023 031c 	bic.w	r3, r3, #28
 8001828:	b25b      	sxtb	r3, r3
 800182a:	f043 0308 	orr.w	r3, r3, #8
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	701a      	strb	r2, [r3, #0]
            break;
 8001836:	e04b      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_STANDARD_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f003 031f 	and.w	r3, r3, #31
 8001842:	b25b      	sxtb	r3, r3
 8001844:	f043 0320 	orr.w	r3, r3, #32
 8001848:	b25b      	sxtb	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_4X);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	f023 031c 	bic.w	r3, r3, #28
 800185a:	b25b      	sxtb	r3, r3
 800185c:	f043 030c 	orr.w	r3, r3, #12
 8001860:	b25b      	sxtb	r3, r3
 8001862:	b2da      	uxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	701a      	strb	r2, [r3, #0]
            break;
 8001868:	e032      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_1X);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	b25b      	sxtb	r3, r3
 8001876:	f043 0320 	orr.w	r3, r3, #32
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2da      	uxtb	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_8X);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	f023 031c 	bic.w	r3, r3, #28
 800188c:	b25b      	sxtb	r3, r3
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	b25b      	sxtb	r3, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	701a      	strb	r2, [r3, #0]
            break;
 800189a:	e019      	b.n	80018d0 <set_os_mode+0x12c>
        case BMP2_OS_MODE_ULTRA_HIGH_RESOLUTION:
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_TEMP, BMP2_OS_2X);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	701a      	strb	r2, [r3, #0]
            reg_data[0] = BMP2_SET_BITS(reg_data[0], BMP2_OS_PRES, BMP2_OS_16X);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	f023 031c 	bic.w	r3, r3, #28
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f043 0314 	orr.w	r3, r3, #20
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	701a      	strb	r2, [r3, #0]
            break;
 80018cc:	e000      	b.n	80018d0 <set_os_mode+0x12c>
        default:
            break;
 80018ce:	bf00      	nop
    }
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure and temperature
 *  data and store it in the bmp2_uncomp_data structure instance.
 */
static int8_t parse_sensor_data(const uint8_t *reg_data, struct bmp2_uncomp_data *uncomp_data)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	031b      	lsls	r3, r3, #12
 80018ec:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3302      	adds	r3, #2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	b2db      	uxtb	r3, r3
 8001902:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	431a      	orrs	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_msb = (int32_t)reg_data[3] << 12;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3303      	adds	r3, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	031b      	lsls	r3, r3, #12
 800191a:	617b      	str	r3, [r7, #20]
    data_lsb = (int32_t)reg_data[4] << 4;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	613b      	str	r3, [r7, #16]
    data_xlsb = (int32_t)reg_data[5] >> 4;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3305      	adds	r3, #5
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	b2db      	uxtb	r3, r3
 8001930:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = (int32_t)(data_msb | data_lsb | data_xlsb);
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	431a      	orrs	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	601a      	str	r2, [r3, #0]

    rslt = st_check_boundaries((int32_t)uncomp_data->temperature, (int32_t)uncomp_data->pressure);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f000 fae3 	bl	8001f18 <st_check_boundaries>
 8001952:	4603      	mov	r3, r0
 8001954:	72fb      	strb	r3, [r7, #11]

    return rslt;
 8001956:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <compensate_temperature>:
 * uncompensated temperature. This API uses double floating precision.
 */
static int8_t compensate_temperature(double *comp_temperature,
                                     const struct bmp2_uncomp_data *uncomp_data,
                                     struct bmp2_dev *dev)
{
 8001964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001968:	b08c      	sub	sp, #48	@ 0x30
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double temperature;

    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdf1 	bl	8000564 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b6c      	ldr	r3, [pc, #432]	@ (8001b38 <compensate_temperature+0x1d4>)
 8001988:	f7fe ff80 	bl	800088c <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8b9b      	ldrh	r3, [r3, #28]
 8001998:	4618      	mov	r0, r3
 800199a:	f7fe fdd3 	bl	8000544 <__aeabi_ui2d>
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <compensate_temperature+0x1d8>)
 80019a4:	f7fe ff72 	bl	800088c <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4620      	mov	r0, r4
 80019ae:	4629      	mov	r1, r5
 80019b0:	f7fe fc8a 	bl	80002c8 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
           ((double) dev->calib_param.dig_t2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdce 	bl	8000564 <__aeabi_i2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
    var1 = (((double) uncomp_data->temperature) / 16384.0 - ((double) dev->calib_param.dig_t1) / 1024.0) *
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fe32 	bl	8000638 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 =
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdbf 	bl	8000564 <__aeabi_i2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80019ee:	f7fe ff4d 	bl	800088c <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	8b9b      	ldrh	r3, [r3, #28]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda0 	bl	8000544 <__aeabi_ui2d>
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b4d      	ldr	r3, [pc, #308]	@ (8001b40 <compensate_temperature+0x1dc>)
 8001a0a:	f7fe ff3f 	bl	800088c <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4629      	mov	r1, r5
 8001a16:	f7fe fc57 	bl	80002c8 <__aeabi_dsub>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
         (((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0)) *
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd9c 	bl	8000564 <__aeabi_i2d>
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8001a34:	f7fe ff2a 	bl	800088c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4690      	mov	r8, r2
 8001a3e:	4699      	mov	r9, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8b9b      	ldrh	r3, [r3, #28]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd7d 	bl	8000544 <__aeabi_ui2d>
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b40 <compensate_temperature+0x1dc>)
 8001a50:	f7fe ff1c 	bl	800088c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4640      	mov	r0, r8
 8001a5a:	4649      	mov	r1, r9
 8001a5c:	f7fe fc34 	bl	80002c8 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
        ((((double) uncomp_data->temperature) / 131072.0 - ((double) dev->calib_param.dig_t1) / 8192.0) *
 8001a64:	4620      	mov	r0, r4
 8001a66:	4629      	mov	r1, r5
 8001a68:	f7fe fde6 	bl	8000638 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4614      	mov	r4, r2
 8001a72:	461d      	mov	r5, r3
        ((double) dev->calib_param.dig_t3);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd72 	bl	8000564 <__aeabi_i2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
    var2 =
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fdd6 	bl	8000638 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9c7 2304 	strd	r2, r3, [r7, #16]

    dev->calib_param.t_fine = (int32_t) (var1 + var2);
 8001a94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a9c:	f7fe fc16 	bl	80002cc <__adddf3>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f876 	bl	8000b98 <__aeabi_d2iz>
 8001aac:	4602      	mov	r2, r0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    temperature = (var1 + var2) / 5120.0;
 8001ab2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aba:	f7fe fc07 	bl	80002cc <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b1e      	ldr	r3, [pc, #120]	@ (8001b44 <compensate_temperature+0x1e0>)
 8001acc:	f7fe fede 	bl	800088c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if (temperature < BMP2_MIN_TEMP_DOUBLE)
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <compensate_temperature+0x1e4>)
 8001ade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ae2:	f7ff f81b 	bl	8000b1c <__aeabi_dcmplt>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <compensate_temperature+0x198>
    {
        temperature = BMP2_MIN_TEMP_DOUBLE;
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <compensate_temperature+0x1e4>)
 8001af2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MIN_TEMP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (temperature > BMP2_MAX_TEMP_DOUBLE)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <compensate_temperature+0x1e8>)
 8001b02:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b06:	f7ff f827 	bl	8000b58 <__aeabi_dcmpgt>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <compensate_temperature+0x1bc>
    {
        temperature = BMP2_MAX_TEMP_DOUBLE;
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <compensate_temperature+0x1e8>)
 8001b16:	e9c7 2308 	strd	r2, r3, [r7, #32]
        rslt = BMP2_W_MAX_TEMP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*comp_temperature) = temperature;
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b26:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8001b2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3730      	adds	r7, #48	@ 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b38:	40d00000 	.word	0x40d00000
 8001b3c:	40900000 	.word	0x40900000
 8001b40:	40c00000 	.word	0x40c00000
 8001b44:	40b40000 	.word	0x40b40000
 8001b48:	c0440000 	.word	0xc0440000
 8001b4c:	40554000 	.word	0x40554000

08001b50 <compensate_pressure>:
 * uncompensated pressure. This API uses double floating precision.
 */
static int8_t compensate_pressure(double *comp_pressure,
                                  const struct bmp2_uncomp_data *uncomp_data,
                                  const struct bmp2_dev *dev)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b08c      	sub	sp, #48	@ 0x30
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP2_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double var1, var2;
    double pressure = 0.0;
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double) dev->calib_param.t_fine / 2.0) - 64000.0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcf6 	bl	8000564 <__aeabi_i2d>
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b80:	f7fe fe84 	bl	800088c <__aeabi_ddiv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4bcb      	ldr	r3, [pc, #812]	@ (8001ec0 <compensate_pressure+0x370>)
 8001b92:	f7fe fb99 	bl	80002c8 <__aeabi_dsub>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double) dev->calib_param.dig_p6) / 32768.0;
 8001b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ba6:	f7fe fd47 	bl	8000638 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4614      	mov	r4, r2
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcd3 	bl	8000564 <__aeabi_i2d>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7fe fd37 	bl	8000638 <__aeabi_dmul>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4bbb      	ldr	r3, [pc, #748]	@ (8001ec4 <compensate_pressure+0x374>)
 8001bd8:	f7fe fe58 	bl	800088c <__aeabi_ddiv>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double) dev->calib_param.dig_p5) * 2.0;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fcba 	bl	8000564 <__aeabi_i2d>
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe fd20 	bl	8000638 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	f7fe fb62 	bl	80002cc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c10:	f7fe fb5c 	bl	80002cc <__adddf3>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double) dev->calib_param.dig_p4) * 65536.0);
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4ba9      	ldr	r3, [pc, #676]	@ (8001ec8 <compensate_pressure+0x378>)
 8001c22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c26:	f7fe fe31 	bl	800088c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4614      	mov	r4, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc93 	bl	8000564 <__aeabi_i2d>
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4ba2      	ldr	r3, [pc, #648]	@ (8001ecc <compensate_pressure+0x37c>)
 8001c44:	f7fe fcf8 	bl	8000638 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fb3c 	bl	80002cc <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = (((double)dev->calib_param.dig_p3) * var1 * var1 / 524288.0 + ((double)dev->calib_param.dig_p2) * var1) /
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc7e 	bl	8000564 <__aeabi_i2d>
 8001c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c6c:	f7fe fce4 	bl	8000638 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7c:	f7fe fcdc 	bl	8000638 <__aeabi_dmul>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	4b90      	ldr	r3, [pc, #576]	@ (8001ed0 <compensate_pressure+0x380>)
 8001c8e:	f7fe fdfd 	bl	800088c <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc5f 	bl	8000564 <__aeabi_i2d>
 8001ca6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001caa:	f7fe fcc5 	bl	8000638 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fb09 	bl	80002cc <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	4b82      	ldr	r3, [pc, #520]	@ (8001ed0 <compensate_pressure+0x380>)
 8001cc8:	f7fe fde0 	bl	800088c <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
           524288.0;
    var1 = (1.0 + var1 / 32768.0) * ((double) dev->calib_param.dig_p1);
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec4 <compensate_pressure+0x374>)
 8001cda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cde:	f7fe fdd5 	bl	800088c <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	4b79      	ldr	r3, [pc, #484]	@ (8001ed4 <compensate_pressure+0x384>)
 8001cf0:	f7fe faec 	bl	80002cc <__adddf3>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc1f 	bl	8000544 <__aeabi_ui2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fc93 	bl	8000638 <__aeabi_dmul>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	e9c7 2306 	strd	r2, r3, [r7, #24]

    if (var1 < 0 || var1 > 0)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d26:	f7fe fef9 	bl	8000b1c <__aeabi_dcmplt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <compensate_pressure+0x1f8>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d3c:	f7fe ff0c 	bl	8000b58 <__aeabi_dcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80de 	beq.w	8001f04 <compensate_pressure+0x3b4>
    {
        pressure = 1048576.0 - (double)uncomp_data->pressure;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbf9 	bl	8000544 <__aeabi_ui2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	495f      	ldr	r1, [pc, #380]	@ (8001ed8 <compensate_pressure+0x388>)
 8001d5c:	f7fe fab4 	bl	80002c8 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 2308 	strd	r2, r3, [r7, #32]
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <compensate_pressure+0x38c>)
 8001d6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d72:	f7fe fd8b 	bl	800088c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d7e:	f7fe faa3 	bl	80002c8 <__aeabi_dsub>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	a347      	add	r3, pc, #284	@ (adr r3, 8001ea8 <compensate_pressure+0x358>)
 8001d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d90:	f7fe fc52 	bl	8000638 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da0:	f7fe fd74 	bl	800088c <__aeabi_ddiv>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 2308 	strd	r2, r3, [r7, #32]
        var1 = ((double)dev->calib_param.dig_p9) * pressure * pressure / 2147483648.0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fbd6 	bl	8000564 <__aeabi_i2d>
 8001db8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dbc:	f7fe fc3c 	bl	8000638 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dcc:	f7fe fc34 	bl	8000638 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <compensate_pressure+0x390>)
 8001dde:	f7fe fd55 	bl	800088c <__aeabi_ddiv>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)dev->calib_param.dig_p8) / 32768.0;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fbb7 	bl	8000564 <__aeabi_i2d>
 8001df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dfa:	f7fe fc1d 	bl	8000638 <__aeabi_dmul>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <compensate_pressure+0x374>)
 8001e0c:	f7fe fd3e 	bl	800088c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	e9c7 2304 	strd	r2, r3, [r7, #16]

        pressure = pressure + (var1 + var2 + ((double)dev->calib_param.dig_p7)) / 16.0;
 8001e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e20:	f7fe fa54 	bl	80002cc <__adddf3>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fb96 	bl	8000564 <__aeabi_i2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4629      	mov	r1, r5
 8001e40:	f7fe fa44 	bl	80002cc <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <compensate_pressure+0x394>)
 8001e52:	f7fe fd1b 	bl	800088c <__aeabi_ddiv>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e5e:	f7fe fa35 	bl	80002cc <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (pressure < BMP2_MIN_PRES_DOUBLE)
 8001e6a:	a311      	add	r3, pc, #68	@ (adr r3, 8001eb0 <compensate_pressure+0x360>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e74:	f7fe fe52 	bl	8000b1c <__aeabi_dcmplt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <compensate_pressure+0x33e>
        {
            pressure = BMP2_MIN_PRES_DOUBLE;
 8001e7e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001eb0 <compensate_pressure+0x360>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MIN_PRES;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (pressure > BMP2_MAX_PRES_DOUBLE)
 8001e8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001eb8 <compensate_pressure+0x368>)
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e98:	f7fe fe5e 	bl	8000b58 <__aeabi_dcmpgt>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	e022      	b.n	8001ee8 <compensate_pressure+0x398>
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40b86a00 	.word	0x40b86a00
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40dd4c00 	.word	0x40dd4c00
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40fadb00 	.word	0x40fadb00
 8001ec0:	40ef4000 	.word	0x40ef4000
 8001ec4:	40e00000 	.word	0x40e00000
 8001ec8:	40100000 	.word	0x40100000
 8001ecc:	40f00000 	.word	0x40f00000
 8001ed0:	41200000 	.word	0x41200000
 8001ed4:	3ff00000 	.word	0x3ff00000
 8001ed8:	41300000 	.word	0x41300000
 8001edc:	40b00000 	.word	0x40b00000
 8001ee0:	41e00000 	.word	0x41e00000
 8001ee4:	40300000 	.word	0x40300000
 8001ee8:	d007      	beq.n	8001efa <compensate_pressure+0x3aa>
        {
            pressure = BMP2_MAX_PRES_DOUBLE;
 8001eea:	a309      	add	r3, pc, #36	@ (adr r3, 8001f10 <compensate_pressure+0x3c0>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	e9c7 2308 	strd	r2, r3, [r7, #32]
            rslt = BMP2_W_MAX_PRES;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        (*comp_pressure) = pressure;
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f00:	e9c1 2300 	strd	r2, r3, [r1]
    }

    return rslt;
 8001f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3730      	adds	r7, #48	@ 0x30
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f10:	00000000 	.word	0x00000000
 8001f14:	40fadb00 	.word	0x40fadb00

08001f18 <st_check_boundaries>:
/*!
 * @This internal API checks whether the uncompensated temperature and
 * uncompensated pressure are within the range
 */
static int8_t st_check_boundaries(int32_t utemperature, int32_t upressure)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	73fb      	strb	r3, [r7, #15]

    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in valid range */
    if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db03      	blt.n	8001f34 <st_check_boundaries+0x1c>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	dd09      	ble.n	8001f48 <st_check_boundaries+0x30>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db06      	blt.n	8001f48 <st_check_boundaries+0x30>
        (utemperature >= BMP2_ST_ADC_T_MIN && utemperature <= BMP2_ST_ADC_T_MAX))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	dc02      	bgt.n	8001f48 <st_check_boundaries+0x30>
    {
        rslt = BMP2_E_UNCOMP_PRESS_RANGE;
 8001f42:	23fa      	movs	r3, #250	@ 0xfa
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e023      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated temperature in not valid range AND uncompensated pressure in valid range */
    else if ((utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX) &&
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	db03      	blt.n	8001f56 <st_check_boundaries+0x3e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	dd09      	ble.n	8001f6a <st_check_boundaries+0x52>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db06      	blt.n	8001f6a <st_check_boundaries+0x52>
             (upressure >= BMP2_ST_ADC_P_MIN && upressure <= BMP2_ST_ADC_P_MAX))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	4a10      	ldr	r2, [pc, #64]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	dc02      	bgt.n	8001f6a <st_check_boundaries+0x52>
    {
        rslt = BMP2_E_UNCOMP_TEMP_RANGE;
 8001f64:	23fb      	movs	r3, #251	@ 0xfb
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e012      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    /* Check Uncompensated pressure in not valid range AND uncompensated temperature in not valid range */
    else if ((upressure < BMP2_ST_ADC_P_MIN || upressure > BMP2_ST_ADC_P_MAX) &&
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db03      	blt.n	8001f78 <st_check_boundaries+0x60>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	dd09      	ble.n	8001f8c <st_check_boundaries+0x74>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db03      	blt.n	8001f86 <st_check_boundaries+0x6e>
             (utemperature < BMP2_ST_ADC_T_MIN || utemperature > BMP2_ST_ADC_T_MAX))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <st_check_boundaries+0x88>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	dd02      	ble.n	8001f8c <st_check_boundaries+0x74>
    {
        rslt = BMP2_E_UNCOMP_TEMP_AND_PRESS_RANGE;
 8001f86:	23f9      	movs	r3, #249	@ 0xf9
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	e001      	b.n	8001f90 <st_check_boundaries+0x78>
    }
    else
    {
        rslt = BMP2_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	000ffff0 	.word	0x000ffff0

08001fa4 <BMP2_Init>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
int8_t BMP2_Init(struct bmp2_dev* dev)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint32_t meas_time;
  struct bmp2_config conf;

  rslt = bmp2_init(dev);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff f839 	bl	8001024 <bmp2_init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  /* Always read the current settings before writing, especially when all the configuration is not modified */
  rslt = bmp2_get_config(&conf, dev);
 8001fb6:	f107 0308 	add.w	r3, r7, #8
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f91e 	bl	80011fe <bmp2_get_config>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

  /* Configuring the over-sampling mode, filter coefficient and output data rate */
  /* Overwrite the desired settings */
  conf.filter = BMP2_FILTER_COEFF_8;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	733b      	strb	r3, [r7, #12]
  /* Over-sampling mode is set as ultra low resolution i.e., os_pres = 1x and os_temp = 1x */
  conf.os_mode = BMP2_OS_MODE_ULTRA_LOW_POWER;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	72fb      	strb	r3, [r7, #11]
  /* Setting the output data rate */
  conf.odr = BMP2_ODR_250_MS;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	72bb      	strb	r3, [r7, #10]

  rslt = bmp2_set_config(&conf, dev);
 8001fd2:	f107 0308 	add.w	r3, r7, #8
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f950 	bl	800127e <bmp2_set_config>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	75fb      	strb	r3, [r7, #23]

  /* Set normal power mode */
  rslt = bmp2_set_power_mode(BMP2_POWERMODE_NORMAL, &conf, dev);
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	2003      	movs	r0, #3
 8001fec:	f7ff f982 	bl	80012f4 <bmp2_set_power_mode>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	75fb      	strb	r3, [r7, #23]

  /* Calculate measurement time in microseconds */
  rslt = bmp2_compute_meas_time(&meas_time, &conf, dev);
 8001ff4:	f107 0108 	add.w	r1, r7, #8
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa0c 	bl	800141c <bmp2_compute_meas_time>
 8002004:	4603      	mov	r3, r0
 8002006:	75fb      	strb	r3, [r7, #23]

  return rslt;
 8002008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <bmp2_spi_read>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI read routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6858      	ldr	r0, [r3, #4]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	891b      	ldrh	r3, [r3, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	f001 feae 	bl	8003d9c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI , &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	f107 010f 	add.w	r1, r7, #15
 8002048:	2305      	movs	r3, #5
 800204a:	2201      	movs	r2, #1
 800204c:	f003 f885 	bl	800515a <HAL_SPI_Transmit>
 8002050:	4603      	mov	r3, r0
 8002052:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Receive( hbmp2->SPI,  reg_data, length,            BMP2_TIMEOUT);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2305      	movs	r3, #5
 800205e:	68b9      	ldr	r1, [r7, #8]
 8002060:	f003 f9f0 	bl	8005444 <HAL_SPI_Receive>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	7dbb      	ldrb	r3, [r7, #22]
 800206a:	4413      	add	r3, r2
 800206c:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6858      	ldr	r0, [r3, #4]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	891b      	ldrh	r3, [r3, #8]
 8002076:	2201      	movs	r2, #1
 8002078:	4619      	mov	r1, r3
 800207a:	f001 fe8f 	bl	8003d9c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 800207e:	7dbb      	ldrb	r3, [r7, #22]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <bmp2_spi_read+0x74>
    iError = -1;
 8002084:	23ff      	movs	r3, #255	@ 0xff
 8002086:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <bmp2_spi_write>:
 *  @retval BMP2_INTF_RET_SUCCESS -> Success.
 *  @retval != BMP2_INTF_RET_SUCCESS -> Failure.
 *
 */
BMP2_INTF_RET_TYPE bmp2_spi_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t length, void *intf_ptr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]
  /* Implement the SPI write routine according to the target machine. */
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75bb      	strb	r3, [r7, #22]
  int8_t iError = BMP2_INTF_RET_SUCCESS;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]
  BMP2_HandleTypeDef* hbmp2 = (BMP2_HandleTypeDef*)intf_ptr;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	613b      	str	r3, [r7, #16]

  /* Software slave selection procedure */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_RESET);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6858      	ldr	r0, [r3, #4]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	891b      	ldrh	r3, [r3, #8]
 80020b8:	2200      	movs	r2, #0
 80020ba:	4619      	mov	r1, r3
 80020bc:	f001 fe6e 	bl	8003d9c <HAL_GPIO_WritePin>

  /* Data exchange */
  status  = HAL_SPI_Transmit(hbmp2->SPI, &reg_addr, BMP2_REG_ADDR_LEN, BMP2_TIMEOUT);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	f107 010f 	add.w	r1, r7, #15
 80020c8:	2305      	movs	r3, #5
 80020ca:	2201      	movs	r2, #1
 80020cc:	f003 f845 	bl	800515a <HAL_SPI_Transmit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75bb      	strb	r3, [r7, #22]
  status += HAL_SPI_Transmit(hbmp2->SPI, (uint8_t*)reg_data, length,   BMP2_TIMEOUT);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2305      	movs	r3, #5
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	f003 f83b 	bl	800515a <HAL_SPI_Transmit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	7dbb      	ldrb	r3, [r7, #22]
 80020ea:	4413      	add	r3, r2
 80020ec:	75bb      	strb	r3, [r7, #22]

  /* Disable selected slaves */
  HAL_GPIO_WritePin(hbmp2->CS_Port, hbmp2->CS_Pin, GPIO_PIN_SET);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6858      	ldr	r0, [r3, #4]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	891b      	ldrh	r3, [r3, #8]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4619      	mov	r1, r3
 80020fa:	f001 fe4f 	bl	8003d9c <HAL_GPIO_WritePin>

  // The BMP2xx API calls for 0 return value as a success, and -1 returned as failure
  if (status != HAL_OK)
 80020fe:	7dbb      	ldrb	r3, [r7, #22]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <bmp2_spi_write+0x74>
    iError = -1;
 8002104:	23ff      	movs	r3, #255	@ 0xff
 8002106:	75fb      	strb	r3, [r7, #23]

  return iError;
 8002108:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <bmp2_delay_us>:
 *  @param[in] intf_ptr   : Interface pointer
 *
 *  @return void.
 */
void bmp2_delay_us(uint32_t period_us, void *intf_ptr)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  UNUSED(intf_ptr);
  HAL_Delay(period_us / 1000uL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <bmp2_delay_us+0x24>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	4618      	mov	r0, r3
 800212a:	f001 fac3 	bl	80036b4 <HAL_Delay>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <BMP2_ReadData>:
 *  @retval 0 -> Success.
 *  @retval <0 -> Failure.
 *
 */
int8_t BMP2_ReadData(struct bmp2_dev *dev, double* press, double* temp)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08b      	sub	sp, #44	@ 0x2c
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  int8_t rslt = BMP2_E_NULL_PTR;
 8002148:	23ff      	movs	r3, #255	@ 0xff
 800214a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  struct bmp2_status status;
  struct bmp2_data comp_data;
  int8_t try = BMP2_GET_MAX_RETRY(dev);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	899b      	ldrh	r3, [r3, #12]
 8002154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  do {
    /* Read sensor status */
    rslt = bmp2_get_status(&status, dev);
 8002158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f89c 	bl	800129c <bmp2_get_status>
 8002164:	4603      	mov	r3, r0
 8002166:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    /* Read compensated data */
    rslt = bmp2_get_sensor_data(&comp_data, dev);
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f8d4 	bl	800131e <bmp2_get_sensor_data>
 8002176:	4603      	mov	r3, r0
 8002178:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    *temp = comp_data.temperature;
 800217c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	e9c1 2300 	strd	r2, r3, [r1]
    *press = comp_data.pressure / 100.0;
 8002186:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <BMP2_ReadData+0xc4>)
 8002190:	f7fe fb7c 	bl	800088c <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
    try--;
 800219e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (status.measuring != BMP2_MEAS_DONE && try > 0);
 80021ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <BMP2_ReadData+0x80>
 80021b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dccd      	bgt.n	8002158 <BMP2_ReadData+0x1c>

  /* Save reading result in sensor handler */
  BMP2_GET_PRESS(dev) = *press;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	684c      	ldr	r4, [r1, #4]
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fd2d 	bl	8000c28 <__aeabi_d2f>
 80021ce:	4603      	mov	r3, r0
 80021d0:	6163      	str	r3, [r4, #20]
  BMP2_GET_TEMP(dev) = *temp;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	68f9      	ldr	r1, [r7, #12]
 80021da:	684c      	ldr	r4, [r1, #4]
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fd22 	bl	8000c28 <__aeabi_d2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	6123      	str	r3, [r4, #16]
  BMP2_GET_STATUS(dev) = rslt;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80021f0:	729a      	strb	r2, [r3, #10]

  return rslt;
 80021f2:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	372c      	adds	r7, #44	@ 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	40590000 	.word	0x40590000

08002204 <FAN_PWM_Init>:
  * @brief Initialize PWM fan control
  * @param[in] hfan   : Fan PWM handler
  * @retval None
  */
void FAN_PWM_Init(FAN_PWM_Handle_TypeDef* hfan)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  hfan->Output.Duty = (hfan->ActiveState == FAN_ON_HIGH) ? (hfan->Output.Duty) : (100.0f - hfan->Output.Duty);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7b1b      	ldrb	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d103      	bne.n	800221c <FAN_PWM_Init+0x18>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edd3 7a02 	vldr	s15, [r3, #8]
 800221a:	e006      	b.n	800222a <FAN_PWM_Init+0x26>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002222:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002240 <FAN_PWM_Init+0x3c>
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hfan->Output));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8a8 	bl	8002388 <PWM_Init>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	42c80000 	.word	0x42c80000

08002244 <FAN_PWM_WriteDuty>:
  * @param[in/out] hfan   : Fan PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void FAN_PWM_WriteDuty(FAN_PWM_Handle_TypeDef* hfan, float duty)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	ed87 0a00 	vstr	s0, [r7]
  const float minDuty = 60.0f; // Minimum duty cycle for the fan to start
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <FAN_PWM_WriteDuty+0xac>)
 8002252:	60fb      	str	r3, [r7, #12]

  // Clamp the duty cycle to the valid range [0.0, 100.0]
  if (duty < 0.0f) {
 8002254:	edd7 7a00 	vldr	s15, [r7]
 8002258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d503      	bpl.n	800226a <FAN_PWM_WriteDuty+0x26>
    duty = 0.0f;
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	e00a      	b.n	8002280 <FAN_PWM_WriteDuty+0x3c>
  } else if (duty > 100.0f) {
 800226a:	edd7 7a00 	vldr	s15, [r7]
 800226e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 8002272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	dd01      	ble.n	8002280 <FAN_PWM_WriteDuty+0x3c>
    duty = 100.0f;
 800227c:	4b1e      	ldr	r3, [pc, #120]	@ (80022f8 <FAN_PWM_WriteDuty+0xb4>)
 800227e:	603b      	str	r3, [r7, #0]
  }

  // Map the duty cycle to the new range [minDuty, 100.0]
  if (duty > 0.0f) {
 8002280:	edd7 7a00 	vldr	s15, [r7]
 8002284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	dd13      	ble.n	80022b6 <FAN_PWM_WriteDuty+0x72>
      duty = minDuty + (duty * (100.0f - minDuty) / 100.0f);
 800228e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 8002292:	edd7 7a03 	vldr	s15, [r7, #12]
 8002296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800229a:	edd7 7a00 	vldr	s15, [r7]
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 80022a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	edc7 7a00 	vstr	s15, [r7]
  }

  hfan->Output.Duty = (hfan->ActiveState == FAN_ON_HIGH) ? (duty) : (100.0f - duty);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7b1b      	ldrb	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d006      	beq.n	80022cc <FAN_PWM_WriteDuty+0x88>
 80022be:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80022f4 <FAN_PWM_WriteDuty+0xb0>
 80022c2:	edd7 7a00 	vldr	s15, [r7]
 80022c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ca:	e001      	b.n	80022d0 <FAN_PWM_WriteDuty+0x8c>
 80022cc:	edd7 7a00 	vldr	s15, [r7]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hfan->Output), hfan->Output.Duty);
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	edd3 7a02 	vldr	s15, [r3, #8]
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	4610      	mov	r0, r2
 80022e4:	f000 f868 	bl	80023b8 <PWM_WriteDuty>
}
 80022e8:	bf00      	nop
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	42700000 	.word	0x42700000
 80022f4:	42c80000 	.word	0x42c80000
 80022f8:	42c80000 	.word	0x42c80000

080022fc <HEATER_PWM_Init>:
  * @brief Initialize PWM heater control
  * @param[in] hhtr   : Heater PWM handler
  * @retval None
  */
void HEATER_PWM_Init(HEATER_PWM_Handle_TypeDef* hhtr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (hhtr->Output.Duty) : (100.0f - hhtr->Output.Duty);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7b1b      	ldrb	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d103      	bne.n	8002314 <HEATER_PWM_Init+0x18>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002312:	e006      	b.n	8002322 <HEATER_PWM_Init+0x26>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	edd3 7a02 	vldr	s15, [r3, #8]
 800231a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002338 <HEATER_PWM_Init+0x3c>
 800231e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hhtr->Output));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f82c 	bl	8002388 <PWM_Init>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	42c80000 	.word	0x42c80000

0800233c <HEATER_PWM_WriteDuty>:
  * @param[in/out] hhtr   : Heater PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void HEATER_PWM_WriteDuty(HEATER_PWM_Handle_TypeDef* hhtr, float duty)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	ed87 0a00 	vstr	s0, [r7]
  hhtr->Output.Duty = (hhtr->ActiveState == HEATER_ON_HIGH) ? (duty) : (100.0f - duty);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7b1b      	ldrb	r3, [r3, #12]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d006      	beq.n	800235e <HEATER_PWM_WriteDuty+0x22>
 8002350:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002384 <HEATER_PWM_WriteDuty+0x48>
 8002354:	edd7 7a00 	vldr	s15, [r7]
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235c:	e001      	b.n	8002362 <HEATER_PWM_WriteDuty+0x26>
 800235e:	edd7 7a00 	vldr	s15, [r7]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hhtr->Output), hhtr->Output.Duty);
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002370:	eeb0 0a67 	vmov.f32	s0, s15
 8002374:	4610      	mov	r0, r2
 8002376:	f000 f81f 	bl	80023b8 <PWM_WriteDuty>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	42c80000 	.word	0x42c80000

08002388 <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	edd3 7a02 	vldr	s15, [r3, #8]
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f80c 	bl	80023b8 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	4610      	mov	r0, r2
 80023ac:	f003 fec8 	bl	8006140 <HAL_TIM_PWM_Start>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80023c4:	edd7 7a00 	vldr	s15, [r7]
 80023c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d503      	bpl.n	80023da <PWM_WriteDuty+0x22>
    duty = 0.0;
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	e00a      	b.n	80023f0 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800249c <PWM_WriteDuty+0xe4>
 80023e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	dd01      	ble.n	80023f0 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 80023ec:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <PWM_WriteDuty+0xe8>)
 80023ee:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fe:	3301      	adds	r3, #1
 8002400:	ee07 3a90 	vmov	s15, r3
 8002404:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002408:	edd7 7a00 	vldr	s15, [r7]
 800240c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002410:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800249c <PWM_WriteDuty+0xe4>
 8002414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241c:	ee17 3a90 	vmov	r3, s15
 8002420:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <PWM_WriteDuty+0x7e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002434:	e02c      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d105      	bne.n	800244a <PWM_WriteDuty+0x92>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002448:	e022      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b08      	cmp	r3, #8
 8002450:	d105      	bne.n	800245e <PWM_WriteDuty+0xa6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800245c:	e018      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d105      	bne.n	8002472 <PWM_WriteDuty+0xba>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002470:	e00e      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b10      	cmp	r3, #16
 8002478:	d105      	bne.n	8002486 <PWM_WriteDuty+0xce>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8002484:	e004      	b.n	8002490 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	42c80000 	.word	0x42c80000
 80024a0:	42c80000 	.word	0x42c80000

080024a4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80024ba:	4b86      	ldr	r3, [pc, #536]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	4a85      	ldr	r2, [pc, #532]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024c0:	f043 0310 	orr.w	r3, r3, #16
 80024c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c6:	4b83      	ldr	r3, [pc, #524]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	4b80      	ldr	r3, [pc, #512]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a7f      	ldr	r2, [pc, #508]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b7d      	ldr	r3, [pc, #500]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ea:	4b7a      	ldr	r3, [pc, #488]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a79      	ldr	r2, [pc, #484]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b77      	ldr	r3, [pc, #476]	@ (80026d4 <MX_GPIO_Init+0x230>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	4b74      	ldr	r3, [pc, #464]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a73      	ldr	r2, [pc, #460]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b71      	ldr	r3, [pc, #452]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	4b6e      	ldr	r3, [pc, #440]	@ (80026d4 <MX_GPIO_Init+0x230>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a6d      	ldr	r2, [pc, #436]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b6b      	ldr	r3, [pc, #428]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	4b68      	ldr	r3, [pc, #416]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	4a67      	ldr	r2, [pc, #412]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6313      	str	r3, [r2, #48]	@ 0x30
 800253e:	4b65      	ldr	r3, [pc, #404]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800254a:	4b62      	ldr	r3, [pc, #392]	@ (80026d4 <MX_GPIO_Init+0x230>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a61      	ldr	r2, [pc, #388]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b5f      	ldr	r3, [pc, #380]	@ (80026d4 <MX_GPIO_Init+0x230>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BMP280_SPI_CS1_GPIO_Port, BMP280_SPI_CS1_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	2110      	movs	r1, #16
 8002566:	485c      	ldr	r0, [pc, #368]	@ (80026d8 <MX_GPIO_Init+0x234>)
 8002568:	f001 fc18 	bl	8003d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|Fan_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800256c:	2200      	movs	r2, #0
 800256e:	f244 4181 	movw	r1, #17537	@ 0x4481
 8002572:	485a      	ldr	r0, [pc, #360]	@ (80026dc <MX_GPIO_Init+0x238>)
 8002574:	f001 fc12 	bl	8003d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	2140      	movs	r1, #64	@ 0x40
 800257c:	4858      	ldr	r0, [pc, #352]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 800257e:	f001 fc0d 	bl	8003d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMP280_SPI_CS1_Pin;
 8002582:	2310      	movs	r3, #16
 8002584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002586:	2301      	movs	r3, #1
 8002588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BMP280_SPI_CS1_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	484f      	ldr	r0, [pc, #316]	@ (80026d8 <MX_GPIO_Init+0x234>)
 800259a:	f001 fa53 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800259e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	484b      	ldr	r0, [pc, #300]	@ (80026e4 <MX_GPIO_Init+0x240>)
 80025b6:	f001 fa45 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025ba:	2332      	movs	r3, #50	@ 0x32
 80025bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ca:	230b      	movs	r3, #11
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	f107 031c 	add.w	r3, r7, #28
 80025d2:	4619      	mov	r1, r3
 80025d4:	4843      	ldr	r0, [pc, #268]	@ (80026e4 <MX_GPIO_Init+0x240>)
 80025d6:	f001 fa35 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025da:	2386      	movs	r3, #134	@ 0x86
 80025dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e6:	2303      	movs	r3, #3
 80025e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ea:	230b      	movs	r3, #11
 80025ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4619      	mov	r1, r3
 80025f4:	483c      	ldr	r0, [pc, #240]	@ (80026e8 <MX_GPIO_Init+0x244>)
 80025f6:	f001 fa25 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|Fan_Pin|LD3_Pin|LD2_Pin;
 80025fa:	f244 4381 	movw	r3, #17537	@ 0x4481
 80025fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002600:	2301      	movs	r3, #1
 8002602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	4832      	ldr	r0, [pc, #200]	@ (80026dc <MX_GPIO_Init+0x238>)
 8002614:	f001 fa16 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002618:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800261c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800262a:	230b      	movs	r3, #11
 800262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	4829      	ldr	r0, [pc, #164]	@ (80026dc <MX_GPIO_Init+0x238>)
 8002636:	f001 fa05 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800263a:	2340      	movs	r3, #64	@ 0x40
 800263c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4823      	ldr	r0, [pc, #140]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 8002652:	f001 f9f7 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	481d      	ldr	r0, [pc, #116]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 800266a:	f001 f9eb 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800266e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002680:	230a      	movs	r3, #10
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4619      	mov	r1, r3
 800268a:	4817      	ldr	r0, [pc, #92]	@ (80026e8 <MX_GPIO_Init+0x244>)
 800268c:	f001 f9da 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	4619      	mov	r1, r3
 80026a4:	4810      	ldr	r0, [pc, #64]	@ (80026e8 <MX_GPIO_Init+0x244>)
 80026a6:	f001 f9cd 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80026aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80026ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026bc:	230b      	movs	r3, #11
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4806      	ldr	r0, [pc, #24]	@ (80026e0 <MX_GPIO_Init+0x23c>)
 80026c8:	f001 f9bc 	bl	8003a44 <HAL_GPIO_Init>

}
 80026cc:	bf00      	nop
 80026ce:	3730      	adds	r7, #48	@ 0x30
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40020400 	.word	0x40020400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020000 	.word	0x40020000

080026ec <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  return (HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY) == HAL_OK) ? len : -1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	4807      	ldr	r0, [pc, #28]	@ (8002720 <_write+0x34>)
 8002704:	f004 fc9a 	bl	800703c <HAL_UART_Transmit>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <_write+0x26>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	e001      	b.n	8002716 <_write+0x2a>
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000430 	.word	0x20000430

08002724 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callback.
 * @param  huart UART handle.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
    if (huart == &huart3)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_UART_RxCpltCallback+0x28>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d106      	bne.n	8002742 <HAL_UART_RxCpltCallback+0x1e>
    {
        // Process the received character immediately
        process_user_input();
 8002734:	f000 f80e 	bl	8002754 <process_user_input>

        // Restart UART reception for a single character
        HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 8002738:	2201      	movs	r2, #1
 800273a:	4905      	ldr	r1, [pc, #20]	@ (8002750 <HAL_UART_RxCpltCallback+0x2c>)
 800273c:	4803      	ldr	r0, [pc, #12]	@ (800274c <HAL_UART_RxCpltCallback+0x28>)
 800273e:	f004 fd06 	bl	800714e <HAL_UART_Receive_IT>
    }
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000430 	.word	0x20000430
 8002750:	20000268 	.word	0x20000268

08002754 <process_user_input>:


void process_user_input() {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af02      	add	r7, sp, #8
    static uint8_t input_buffer[20];
    static uint8_t input_index = 0;

    // Add the received character to the input buffer
    if (input_index < sizeof(input_buffer) - 1) {
 800275a:	4b30      	ldr	r3, [pc, #192]	@ (800281c <process_user_input+0xc8>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b12      	cmp	r3, #18
 8002760:	d80a      	bhi.n	8002778 <process_user_input+0x24>
        input_buffer[input_index++] = rx_buffer[0];
 8002762:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <process_user_input+0xc8>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	b2d1      	uxtb	r1, r2
 800276a:	4a2c      	ldr	r2, [pc, #176]	@ (800281c <process_user_input+0xc8>)
 800276c:	7011      	strb	r1, [r2, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b2b      	ldr	r3, [pc, #172]	@ (8002820 <process_user_input+0xcc>)
 8002772:	7819      	ldrb	r1, [r3, #0]
 8002774:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <process_user_input+0xd0>)
 8002776:	5499      	strb	r1, [r3, r2]
    }

    // Check if the received character is a newline, indicating the end of a command
    if (rx_buffer[0] == '\n' || rx_buffer[0] == '\r') {
 8002778:	4b29      	ldr	r3, [pc, #164]	@ (8002820 <process_user_input+0xcc>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b0a      	cmp	r3, #10
 800277e:	d003      	beq.n	8002788 <process_user_input+0x34>
 8002780:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <process_user_input+0xcc>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b0d      	cmp	r3, #13
 8002786:	d145      	bne.n	8002814 <process_user_input+0xc0>
        input_buffer[input_index] = '\0'; // Null-terminate the string
 8002788:	4b24      	ldr	r3, [pc, #144]	@ (800281c <process_user_input+0xc8>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <process_user_input+0xd0>)
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

        float new_target_temp;
        if (sscanf((char*)input_buffer, "settemp:%f", &new_target_temp) == 1) {
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	461a      	mov	r2, r3
 8002798:	4923      	ldr	r1, [pc, #140]	@ (8002828 <process_user_input+0xd4>)
 800279a:	4822      	ldr	r0, [pc, #136]	@ (8002824 <process_user_input+0xd0>)
 800279c:	f006 fea8 	bl	80094f0 <siscanf>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d12b      	bne.n	80027fe <process_user_input+0xaa>
            if (new_target_temp >= MIN_TEMP && new_target_temp <= MAX_TEMP) {
 80027a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80027aa:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80027ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b6:	db16      	blt.n	80027e6 <process_user_input+0x92>
 80027b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800282c <process_user_input+0xd8>
 80027c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d80d      	bhi.n	80027e6 <process_user_input+0x92>
                target_temperature = new_target_temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <process_user_input+0xdc>)
 80027ce:	6013      	str	r3, [r2, #0]
                printf("Target temperature updated to: %.2f °C\r\n", target_temperature);
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <process_user_input+0xdc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fd fed7 	bl	8000588 <__aeabi_f2d>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4815      	ldr	r0, [pc, #84]	@ (8002834 <process_user_input+0xe0>)
 80027e0:	f006 fdf6 	bl	80093d0 <iprintf>
 80027e4:	e00e      	b.n	8002804 <process_user_input+0xb0>
            } else {
                printf("Invalid temperature. Please enter a value between %.1f and %.1f °C.\r\n", MIN_TEMP, MAX_TEMP);
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <process_user_input+0xe4>)
 80027ec:	e9cd 2300 	strd	r2, r3, [sp]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	4b11      	ldr	r3, [pc, #68]	@ (800283c <process_user_input+0xe8>)
 80027f6:	4812      	ldr	r0, [pc, #72]	@ (8002840 <process_user_input+0xec>)
 80027f8:	f006 fdea 	bl	80093d0 <iprintf>
 80027fc:	e002      	b.n	8002804 <process_user_input+0xb0>
            }
        } else {
            printf("Invalid command format. Use 'settemp:XX.X'.\r\n");
 80027fe:	4811      	ldr	r0, [pc, #68]	@ (8002844 <process_user_input+0xf0>)
 8002800:	f006 fe4e 	bl	80094a0 <puts>
        }

        // Reset the input buffer and index for the next command
        input_index = 0;
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <process_user_input+0xc8>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
        memset(input_buffer, 0, sizeof(input_buffer));
 800280a:	2214      	movs	r2, #20
 800280c:	2100      	movs	r1, #0
 800280e:	4805      	ldr	r0, [pc, #20]	@ (8002824 <process_user_input+0xd0>)
 8002810:	f006 ff72 	bl	80096f8 <memset>
    }
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200002cc 	.word	0x200002cc
 8002820:	20000268 	.word	0x20000268
 8002824:	200002d0 	.word	0x200002d0
 8002828:	0800d67c 	.word	0x0800d67c
 800282c:	41f40000 	.word	0x41f40000
 8002830:	20000074 	.word	0x20000074
 8002834:	0800d688 	.word	0x0800d688
 8002838:	403e8000 	.word	0x403e8000
 800283c:	40390000 	.word	0x40390000
 8002840:	0800d6b4 	.word	0x0800d6b4
 8002844:	0800d6fc 	.word	0x0800d6fc

08002848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800284c:	b08c      	sub	sp, #48	@ 0x30
 800284e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002850:	f000 fed3 	bl	80035fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002854:	f000 fa4c 	bl	8002cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002858:	f7ff fe24 	bl	80024a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800285c:	f000 fe0c 	bl	8003478 <MX_USART3_UART_Init>
  MX_SPI4_Init();
 8002860:	f000 faba 	bl	8002dd8 <MX_SPI4_Init>
  MX_TIM2_Init();
 8002864:	f000 fc54 	bl	8003110 <MX_TIM2_Init>
  MX_TIM7_Init();
 8002868:	f000 fd22 	bl	80032b0 <MX_TIM7_Init>
  MX_TIM3_Init();
 800286c:	f000 fcc6 	bl	80031fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP2_Init(&bmp2dev);
 8002870:	4881      	ldr	r0, [pc, #516]	@ (8002a78 <main+0x230>)
 8002872:	f7ff fb97 	bl	8001fa4 <BMP2_Init>
  HEATER_PWM_Init(&hheater);
 8002876:	4881      	ldr	r0, [pc, #516]	@ (8002a7c <main+0x234>)
 8002878:	f7ff fd40 	bl	80022fc <HEATER_PWM_Init>
  FAN_PWM_Init(&hfan);
 800287c:	4880      	ldr	r0, [pc, #512]	@ (8002a80 <main+0x238>)
 800287e:	f7ff fcc1 	bl	8002204 <FAN_PWM_Init>
  HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer)); // Start receiving user input
 8002882:	2214      	movs	r2, #20
 8002884:	497f      	ldr	r1, [pc, #508]	@ (8002a84 <main+0x23c>)
 8002886:	4880      	ldr	r0, [pc, #512]	@ (8002a88 <main+0x240>)
 8002888:	f004 fc61 	bl	800714e <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim7);
 800288c:	487f      	ldr	r0, [pc, #508]	@ (8002a8c <main+0x244>)
 800288e:	f003 fb8f 	bl	8005fb0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE))
 8002892:	4b7e      	ldr	r3, [pc, #504]	@ (8002a8c <main+0x244>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	f040 81fd 	bne.w	8002c9c <main+0x454>
    {
        __HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80028a2:	4b7a      	ldr	r3, [pc, #488]	@ (8002a8c <main+0x244>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f06f 0201 	mvn.w	r2, #1
 80028aa:	611a      	str	r2, [r3, #16]

        double temp;
        BMP2_ReadData(&bmp2dev, NULL, &temp);
 80028ac:	463b      	mov	r3, r7
 80028ae:	461a      	mov	r2, r3
 80028b0:	2100      	movs	r1, #0
 80028b2:	4871      	ldr	r0, [pc, #452]	@ (8002a78 <main+0x230>)
 80028b4:	f7ff fc42 	bl	800213c <BMP2_ReadData>
        current_temperature = (float)temp;
 80028b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f9b2 	bl	8000c28 <__aeabi_d2f>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4a72      	ldr	r2, [pc, #456]	@ (8002a90 <main+0x248>)
 80028c8:	6013      	str	r3, [r2, #0]

        // PID Control
        // PID Control Logic Improvements
        // Anti-Windup Parameters
        float pid_output_saturated = 0.0f; // Store the saturated PID output
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	61fb      	str	r3, [r7, #28]
        const float back_calculation_gain = 0.1f; // Gain for anti-windup
 80028d0:	4b70      	ldr	r3, [pc, #448]	@ (8002a94 <main+0x24c>)
 80028d2:	61bb      	str	r3, [r7, #24]
        float feedforward = 0.5f * (target_temperature - MIN_TEMP); // Scale based on system characteristics
 80028d4:	4b70      	ldr	r3, [pc, #448]	@ (8002a98 <main+0x250>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80028de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ea:	edc7 7a05 	vstr	s15, [r7, #20]
        pid_output += feedforward;
 80028ee:	4b6b      	ldr	r3, [pc, #428]	@ (8002a9c <main+0x254>)
 80028f0:	ed93 7a00 	vldr	s14, [r3]
 80028f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fc:	4b67      	ldr	r3, [pc, #412]	@ (8002a9c <main+0x254>)
 80028fe:	edc3 7a00 	vstr	s15, [r3]

        // Derivative Filter Parameters
        const float derivative_filter_constant = 0.9f; // Adjust as needed
 8002902:	4b67      	ldr	r3, [pc, #412]	@ (8002aa0 <main+0x258>)
 8002904:	613b      	str	r3, [r7, #16]
        float previous_derivative = 0.0f;
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

        if (current_temperature < target_temperature) {
 800290c:	4b60      	ldr	r3, [pc, #384]	@ (8002a90 <main+0x248>)
 800290e:	ed93 7a00 	vldr	s14, [r3]
 8002912:	4b61      	ldr	r3, [pc, #388]	@ (8002a98 <main+0x250>)
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	f140 80d2 	bpl.w	8002ac8 <main+0x280>
            // Heating
            pid_error = target_temperature - current_temperature;
 8002924:	4b5c      	ldr	r3, [pc, #368]	@ (8002a98 <main+0x250>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <main+0x248>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002934:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa4 <main+0x25c>)
 8002936:	edc3 7a00 	vstr	s15, [r3]

            // Integral term with anti-windup
            pid_integral += pid_error;
 800293a:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa8 <main+0x260>)
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	4b58      	ldr	r3, [pc, #352]	@ (8002aa4 <main+0x25c>)
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294a:	4b57      	ldr	r3, [pc, #348]	@ (8002aa8 <main+0x260>)
 800294c:	edc3 7a00 	vstr	s15, [r3]
            if (pid_output_saturated != pid_output) { // Back-calculation
 8002950:	4b52      	ldr	r3, [pc, #328]	@ (8002a9c <main+0x254>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	ed97 7a07 	vldr	s14, [r7, #28]
 800295a:	eeb4 7a67 	vcmp.f32	s14, s15
 800295e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002962:	d012      	beq.n	800298a <main+0x142>
                pid_integral -= back_calculation_gain * (pid_output_saturated - pid_output);
 8002964:	4b50      	ldr	r3, [pc, #320]	@ (8002aa8 <main+0x260>)
 8002966:	ed93 7a00 	vldr	s14, [r3]
 800296a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a9c <main+0x254>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	edd7 6a07 	vldr	s13, [r7, #28]
 8002974:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002978:	edd7 7a06 	vldr	s15, [r7, #24]
 800297c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002984:	4b48      	ldr	r3, [pc, #288]	@ (8002aa8 <main+0x260>)
 8002986:	edc3 7a00 	vstr	s15, [r3]
            }
            pid_integral = fminf(fmaxf(pid_integral, INTEGRAL_MIN), INTEGRAL_MAX); // Clamp
 800298a:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <main+0x260>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8002aac <main+0x264>
 8002994:	eeb0 0a67 	vmov.f32	s0, s15
 8002998:	f00a fdf2 	bl	800d580 <fmaxf>
 800299c:	eef0 7a40 	vmov.f32	s15, s0
 80029a0:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8002ab0 <main+0x268>
 80029a4:	eeb0 0a67 	vmov.f32	s0, s15
 80029a8:	f00a fe07 	bl	800d5ba <fminf>
 80029ac:	eef0 7a40 	vmov.f32	s15, s0
 80029b0:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa8 <main+0x260>)
 80029b2:	edc3 7a00 	vstr	s15, [r3]

            // Derivative term with filtering
            pid_derivative = (pid_error - previous_error);
 80029b6:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <main+0x25c>)
 80029b8:	ed93 7a00 	vldr	s14, [r3]
 80029bc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab4 <main+0x26c>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab8 <main+0x270>)
 80029c8:	edc3 7a00 	vstr	s15, [r3]
            pid_derivative = derivative_filter_constant * previous_derivative + (1.0f - derivative_filter_constant) * pid_derivative;
 80029cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80029d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029e4:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <main+0x270>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <main+0x270>)
 80029f4:	edc3 7a00 	vstr	s15, [r3]

            // PID output
            pid_output = (PID_KP_HEAT * pid_error) + (PID_KI_HEAT * pid_integral) + (PID_KD_HEAT * pid_derivative);
 80029f8:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa4 <main+0x25c>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8002a02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a06:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <main+0x260>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8002a10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a18:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <main+0x270>)
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002abc <main+0x274>
 8002a22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <main+0x254>)
 8002a2c:	edc3 7a00 	vstr	s15, [r3]
            pid_output_saturated = fminf(fmaxf(pid_output, 0.0f), 100.0f);
 8002a30:	4b1a      	ldr	r3, [pc, #104]	@ (8002a9c <main+0x254>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8002ac0 <main+0x278>
 8002a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3e:	f00a fd9f 	bl	800d580 <fmaxf>
 8002a42:	eef0 7a40 	vmov.f32	s15, s0
 8002a46:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8002ac4 <main+0x27c>
 8002a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4e:	f00a fdb4 	bl	800d5ba <fminf>
 8002a52:	ed87 0a07 	vstr	s0, [r7, #28]

            HEATER_PWM_WriteDuty(&hheater, 5 * pid_output_saturated);
 8002a56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a5a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a62:	eeb0 0a67 	vmov.f32	s0, s15
 8002a66:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <main+0x234>)
 8002a68:	f7ff fc68 	bl	800233c <HEATER_PWM_WriteDuty>
            FAN_PWM_WriteDuty(&hfan, 0.0f);
 8002a6c:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002ac0 <main+0x278>
 8002a70:	4803      	ldr	r0, [pc, #12]	@ (8002a80 <main+0x238>)
 8002a72:	f7ff fbe7 	bl	8002244 <FAN_PWM_WriteDuty>
 8002a76:	e0d2      	b.n	8002c1e <main+0x3d6>
 8002a78:	20000018 	.word	0x20000018
 8002a7c:	20000064 	.word	0x20000064
 8002a80:	20000054 	.word	0x20000054
 8002a84:	20000268 	.word	0x20000268
 8002a88:	20000430 	.word	0x20000430
 8002a8c:	200003e4 	.word	0x200003e4
 8002a90:	200002b4 	.word	0x200002b4
 8002a94:	3dcccccd 	.word	0x3dcccccd
 8002a98:	20000074 	.word	0x20000074
 8002a9c:	200002c4 	.word	0x200002c4
 8002aa0:	3f666666 	.word	0x3f666666
 8002aa4:	200002b8 	.word	0x200002b8
 8002aa8:	200002bc 	.word	0x200002bc
 8002aac:	c47a0000 	.word	0xc47a0000
 8002ab0:	447a0000 	.word	0x447a0000
 8002ab4:	200002c8 	.word	0x200002c8
 8002ab8:	200002c0 	.word	0x200002c0
 8002abc:	437a0000 	.word	0x437a0000
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	42c80000 	.word	0x42c80000

        } else {
            // Cooling
            pid_error = target_temperature - current_temperature;
 8002ac8:	4b76      	ldr	r3, [pc, #472]	@ (8002ca4 <main+0x45c>)
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	4b76      	ldr	r3, [pc, #472]	@ (8002ca8 <main+0x460>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad8:	4b74      	ldr	r3, [pc, #464]	@ (8002cac <main+0x464>)
 8002ada:	edc3 7a00 	vstr	s15, [r3]

            // Integral term with anti-windup
            pid_integral += pid_error;
 8002ade:	4b74      	ldr	r3, [pc, #464]	@ (8002cb0 <main+0x468>)
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	4b71      	ldr	r3, [pc, #452]	@ (8002cac <main+0x464>)
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aee:	4b70      	ldr	r3, [pc, #448]	@ (8002cb0 <main+0x468>)
 8002af0:	edc3 7a00 	vstr	s15, [r3]
            if (pid_output_saturated != pid_output) { // Back-calculation
 8002af4:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <main+0x46c>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ed97 7a07 	vldr	s14, [r7, #28]
 8002afe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	d012      	beq.n	8002b2e <main+0x2e6>
                pid_integral -= back_calculation_gain * (pid_output_saturated - pid_output);
 8002b08:	4b69      	ldr	r3, [pc, #420]	@ (8002cb0 <main+0x468>)
 8002b0a:	ed93 7a00 	vldr	s14, [r3]
 8002b0e:	4b69      	ldr	r3, [pc, #420]	@ (8002cb4 <main+0x46c>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b28:	4b61      	ldr	r3, [pc, #388]	@ (8002cb0 <main+0x468>)
 8002b2a:	edc3 7a00 	vstr	s15, [r3]
            }
            pid_integral = fminf(fmaxf(pid_integral, INTEGRAL_MIN), INTEGRAL_MAX); // Clamp
 8002b2e:	4b60      	ldr	r3, [pc, #384]	@ (8002cb0 <main+0x468>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8002cb8 <main+0x470>
 8002b38:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3c:	f00a fd20 	bl	800d580 <fmaxf>
 8002b40:	eef0 7a40 	vmov.f32	s15, s0
 8002b44:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8002cbc <main+0x474>
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	f00a fd35 	bl	800d5ba <fminf>
 8002b50:	eef0 7a40 	vmov.f32	s15, s0
 8002b54:	4b56      	ldr	r3, [pc, #344]	@ (8002cb0 <main+0x468>)
 8002b56:	edc3 7a00 	vstr	s15, [r3]

            // Derivative term with filtering
            pid_derivative = (pid_error - previous_error);
 8002b5a:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <main+0x464>)
 8002b5c:	ed93 7a00 	vldr	s14, [r3]
 8002b60:	4b57      	ldr	r3, [pc, #348]	@ (8002cc0 <main+0x478>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b6a:	4b56      	ldr	r3, [pc, #344]	@ (8002cc4 <main+0x47c>)
 8002b6c:	edc3 7a00 	vstr	s15, [r3]
            pid_derivative = derivative_filter_constant * previous_derivative + (1.0f - derivative_filter_constant) * pid_derivative;
 8002b70:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b80:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b88:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc4 <main+0x47c>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b96:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc4 <main+0x47c>)
 8002b98:	edc3 7a00 	vstr	s15, [r3]

            // PID output
            pid_output = (PID_KP_COOL * pid_error) + (PID_KI_COOL * pid_integral) + (PID_KD_COOL * pid_derivative);
 8002b9c:	4b43      	ldr	r3, [pc, #268]	@ (8002cac <main+0x464>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002ba6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002baa:	4b41      	ldr	r3, [pc, #260]	@ (8002cb0 <main+0x468>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8002cc8 <main+0x480>
 8002bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bbc:	4b41      	ldr	r3, [pc, #260]	@ (8002cc4 <main+0x47c>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8002ccc <main+0x484>
 8002bc6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <main+0x46c>)
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
            pid_output_saturated = fminf(fmaxf(-pid_output, 0.0f), 100.0f);
 8002bd4:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <main+0x46c>)
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	eef1 7a67 	vneg.f32	s15, s15
 8002bde:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8002cd0 <main+0x488>
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	f00a fccb 	bl	800d580 <fmaxf>
 8002bea:	eef0 7a40 	vmov.f32	s15, s0
 8002bee:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002cd4 <main+0x48c>
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	f00a fce0 	bl	800d5ba <fminf>
 8002bfa:	ed87 0a07 	vstr	s0, [r7, #28]

            FAN_PWM_WriteDuty(&hfan, 3 * pid_output_saturated);
 8002bfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c02:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	4832      	ldr	r0, [pc, #200]	@ (8002cd8 <main+0x490>)
 8002c10:	f7ff fb18 	bl	8002244 <FAN_PWM_WriteDuty>
            HEATER_PWM_WriteDuty(&hheater, 0.0f);
 8002c14:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002cd0 <main+0x488>
 8002c18:	4830      	ldr	r0, [pc, #192]	@ (8002cdc <main+0x494>)
 8002c1a:	f7ff fb8f 	bl	800233c <HEATER_PWM_WriteDuty>
        }

        // Update previous values
        previous_error = pid_error;
 8002c1e:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <main+0x464>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <main+0x478>)
 8002c24:	6013      	str	r3, [r2, #0]
        previous_derivative = pid_derivative;
 8002c26:	4b27      	ldr	r3, [pc, #156]	@ (8002cc4 <main+0x47c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

        // Print temperature every 5 seconds
        if (HAL_GetTick() - last_temp_print_time >= 1000) {
 8002c2c:	f000 fd36 	bl	800369c <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <main+0x498>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c3c:	d32e      	bcc.n	8002c9c <main+0x454>
            sprintf((char*)temp_msg_buffer, "{\"id\":1, \"target_temp\":%5.2f, \"temp\":%5.2f, \"pid_output\":%5.2f}\r\n", target_temperature, current_temperature, pid_output);
 8002c3e:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <main+0x45c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fd fca0 	bl	8000588 <__aeabi_f2d>
 8002c48:	4680      	mov	r8, r0
 8002c4a:	4689      	mov	r9, r1
 8002c4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <main+0x460>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc99 	bl	8000588 <__aeabi_f2d>
 8002c56:	4604      	mov	r4, r0
 8002c58:	460d      	mov	r5, r1
 8002c5a:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <main+0x46c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fd fc92 	bl	8000588 <__aeabi_f2d>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c6c:	e9cd 4500 	strd	r4, r5, [sp]
 8002c70:	4642      	mov	r2, r8
 8002c72:	464b      	mov	r3, r9
 8002c74:	491b      	ldr	r1, [pc, #108]	@ (8002ce4 <main+0x49c>)
 8002c76:	481c      	ldr	r0, [pc, #112]	@ (8002ce8 <main+0x4a0>)
 8002c78:	f006 fc1a 	bl	80094b0 <siprintf>
            HAL_UART_Transmit(&huart3, temp_msg_buffer, strlen((char*)temp_msg_buffer), HAL_MAX_DELAY);
 8002c7c:	481a      	ldr	r0, [pc, #104]	@ (8002ce8 <main+0x4a0>)
 8002c7e:	f7fd fb17 	bl	80002b0 <strlen>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	4917      	ldr	r1, [pc, #92]	@ (8002ce8 <main+0x4a0>)
 8002c8c:	4817      	ldr	r0, [pc, #92]	@ (8002cec <main+0x4a4>)
 8002c8e:	f004 f9d5 	bl	800703c <HAL_UART_Transmit>
            last_temp_print_time = HAL_GetTick();
 8002c92:	f000 fd03 	bl	800369c <HAL_GetTick>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a11      	ldr	r2, [pc, #68]	@ (8002ce0 <main+0x498>)
 8002c9a:	6013      	str	r3, [r2, #0]
        }
    }

    HAL_Delay(100); // Adjust control loop frequency if needed
 8002c9c:	2064      	movs	r0, #100	@ 0x64
 8002c9e:	f000 fd09 	bl	80036b4 <HAL_Delay>
    if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE))
 8002ca2:	e5f6      	b.n	8002892 <main+0x4a>
 8002ca4:	20000074 	.word	0x20000074
 8002ca8:	200002b4 	.word	0x200002b4
 8002cac:	200002b8 	.word	0x200002b8
 8002cb0:	200002bc 	.word	0x200002bc
 8002cb4:	200002c4 	.word	0x200002c4
 8002cb8:	c47a0000 	.word	0xc47a0000
 8002cbc:	447a0000 	.word	0x447a0000
 8002cc0:	200002c8 	.word	0x200002c8
 8002cc4:	200002c0 	.word	0x200002c0
 8002cc8:	3ca3d70a 	.word	0x3ca3d70a
 8002ccc:	43e10000 	.word	0x43e10000
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	42c80000 	.word	0x42c80000
 8002cd8:	20000054 	.word	0x20000054
 8002cdc:	20000064 	.word	0x20000064
 8002ce0:	200002b0 	.word	0x200002b0
 8002ce4:	0800d72c 	.word	0x0800d72c
 8002ce8:	2000027c 	.word	0x2000027c
 8002cec:	20000430 	.word	0x20000430

08002cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b094      	sub	sp, #80	@ 0x50
 8002cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cf6:	f107 0320 	add.w	r3, r7, #32
 8002cfa:	2230      	movs	r2, #48	@ 0x30
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f006 fcfa 	bl	80096f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d04:	f107 030c 	add.w	r3, r7, #12
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d14:	f001 f85c 	bl	8003dd0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d18:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc4 <SystemClock_Config+0xd4>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	4a29      	ldr	r2, [pc, #164]	@ (8002dc4 <SystemClock_Config+0xd4>)
 8002d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d24:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <SystemClock_Config+0xd4>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <SystemClock_Config+0xd8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a24      	ldr	r2, [pc, #144]	@ (8002dc8 <SystemClock_Config+0xd8>)
 8002d36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <SystemClock_Config+0xd8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d4c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d52:	2302      	movs	r3, #2
 8002d54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d60:	23d8      	movs	r3, #216	@ 0xd8
 8002d62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d64:	2302      	movs	r3, #2
 8002d66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d6c:	f107 0320 	add.w	r3, r7, #32
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 f88d 	bl	8003e90 <HAL_RCC_OscConfig>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002d7c:	f000 f826 	bl	8002dcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d80:	f001 f836 	bl	8003df0 <HAL_PWREx_EnableOverDrive>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d8a:	f000 f81f 	bl	8002dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8e:	230f      	movs	r3, #15
 8002d90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d92:	2302      	movs	r3, #2
 8002d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d9a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002da0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	2107      	movs	r1, #7
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fb13 	bl	80043d8 <HAL_RCC_ClockConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002db8:	f000 f808 	bl	8002dcc <Error_Handler>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3750      	adds	r7, #80	@ 0x50
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000

08002dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd0:	b672      	cpsid	i
}
 8002dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <Error_Handler+0x8>

08002dd8 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002dde:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <MX_SPI4_Init+0x78>)
 8002de0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002de4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002de8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002df0:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002df2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002df6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002df8:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002e04:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e0a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e0e:	2210      	movs	r2, #16
 8002e10:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e26:	2207      	movs	r2, #7
 8002e28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e2a:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002e36:	4805      	ldr	r0, [pc, #20]	@ (8002e4c <MX_SPI4_Init+0x74>)
 8002e38:	f002 f8e4 	bl	8005004 <HAL_SPI_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002e42:	f7ff ffc3 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200002e4 	.word	0x200002e4
 8002e50:	40013400 	.word	0x40013400

08002e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	@ 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <HAL_SPI_MspInit+0x7c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d127      	bne.n	8002ec6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002e76:	4b17      	ldr	r3, [pc, #92]	@ (8002ed4 <HAL_SPI_MspInit+0x80>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	4a16      	ldr	r2, [pc, #88]	@ (8002ed4 <HAL_SPI_MspInit+0x80>)
 8002e7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e82:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <HAL_SPI_MspInit+0x80>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_SPI_MspInit+0x80>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <HAL_SPI_MspInit+0x80>)
 8002e94:	f043 0310 	orr.w	r3, r3, #16
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <HAL_SPI_MspInit+0x80>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = BMP280_SPI_SCK_Pin|BMP280_SPI_MISO_Pin|BMP280_SPI_MOSI_Pin;
 8002ea6:	2364      	movs	r3, #100	@ 0x64
 8002ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4805      	ldr	r0, [pc, #20]	@ (8002ed8 <HAL_SPI_MspInit+0x84>)
 8002ec2:	f000 fdbf 	bl	8003a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3728      	adds	r7, #40	@ 0x28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40013400 	.word	0x40013400
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f20 <HAL_MspInit+0x44>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8002f20 <HAL_MspInit+0x44>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eee:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <HAL_MspInit+0x44>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b09      	ldr	r3, [pc, #36]	@ (8002f20 <HAL_MspInit+0x44>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	4a08      	ldr	r2, [pc, #32]	@ (8002f20 <HAL_MspInit+0x44>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_MspInit+0x44>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <NMI_Handler+0x4>

08002f2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <HardFault_Handler+0x4>

08002f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <MemManage_Handler+0x4>

08002f3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <BusFault_Handler+0x4>

08002f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <UsageFault_Handler+0x4>

08002f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7a:	f000 fb7b 	bl	8003674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f88:	4802      	ldr	r0, [pc, #8]	@ (8002f94 <USART3_IRQHandler+0x10>)
 8002f8a:	f004 f925 	bl	80071d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000430 	.word	0x20000430

08002f98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return 1;
 8002f9c:	2301      	movs	r3, #1
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_kill>:

int _kill(int pid, int sig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fb2:	f006 fbf3 	bl	800979c <__errno>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2216      	movs	r2, #22
 8002fba:	601a      	str	r2, [r3, #0]
  return -1;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <_exit>:

void _exit (int status)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ffe7 	bl	8002fa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fda:	bf00      	nop
 8002fdc:	e7fd      	b.n	8002fda <_exit+0x12>

08002fde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	e00a      	b.n	8003006 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ff0:	f3af 8000 	nop.w
 8002ff4:	4601      	mov	r1, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	60ba      	str	r2, [r7, #8]
 8002ffc:	b2ca      	uxtb	r2, r1
 8002ffe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3301      	adds	r3, #1
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	dbf0      	blt.n	8002ff0 <_read+0x12>
  }

  return len;
 800300e:	687b      	ldr	r3, [r7, #4]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003040:	605a      	str	r2, [r3, #4]
  return 0;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_isatty>:

int _isatty(int file)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003058:	2301      	movs	r3, #1
}
 800305a:	4618      	mov	r0, r3
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003066:	b480      	push	{r7}
 8003068:	b085      	sub	sp, #20
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003088:	4a14      	ldr	r2, [pc, #80]	@ (80030dc <_sbrk+0x5c>)
 800308a:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <_sbrk+0x60>)
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003094:	4b13      	ldr	r3, [pc, #76]	@ (80030e4 <_sbrk+0x64>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <_sbrk+0x64>)
 800309e:	4a12      	ldr	r2, [pc, #72]	@ (80030e8 <_sbrk+0x68>)
 80030a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030a2:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d207      	bcs.n	80030c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030b0:	f006 fb74 	bl	800979c <__errno>
 80030b4:	4603      	mov	r3, r0
 80030b6:	220c      	movs	r2, #12
 80030b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295
 80030be:	e009      	b.n	80030d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030c0:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030c6:	4b07      	ldr	r3, [pc, #28]	@ (80030e4 <_sbrk+0x64>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	4a05      	ldr	r2, [pc, #20]	@ (80030e4 <_sbrk+0x64>)
 80030d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20050000 	.word	0x20050000
 80030e0:	00000400 	.word	0x00000400
 80030e4:	20000348 	.word	0x20000348
 80030e8:	20000608 	.word	0x20000608

080030ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f0:	4b06      	ldr	r3, [pc, #24]	@ (800310c <SystemInit+0x20>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f6:	4a05      	ldr	r2, [pc, #20]	@ (800310c <SystemInit+0x20>)
 80030f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08e      	sub	sp, #56	@ 0x38
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003130:	463b      	mov	r3, r7
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]
 800313e:	615a      	str	r2, [r3, #20]
 8003140:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003142:	4b2d      	ldr	r3, [pc, #180]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 8003144:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 800314a:	4b2b      	ldr	r3, [pc, #172]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 800314c:	226b      	movs	r2, #107	@ 0x6b
 800314e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003150:	4b29      	ldr	r3, [pc, #164]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003156:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 8003158:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800315c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800315e:	4b26      	ldr	r3, [pc, #152]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003164:	4b24      	ldr	r3, [pc, #144]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800316a:	4823      	ldr	r0, [pc, #140]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 800316c:	f002 fec8 	bl	8005f00 <HAL_TIM_Base_Init>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003176:	f7ff fe29 	bl	8002dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800317a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800317e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003184:	4619      	mov	r1, r3
 8003186:	481c      	ldr	r0, [pc, #112]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 8003188:	f003 f9e8 	bl	800655c <HAL_TIM_ConfigClockSource>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003192:	f7ff fe1b 	bl	8002dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003196:	4818      	ldr	r0, [pc, #96]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 8003198:	f002 ff7a 	bl	8006090 <HAL_TIM_PWM_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80031a2:	f7ff fe13 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	4619      	mov	r1, r3
 80031b4:	4810      	ldr	r0, [pc, #64]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 80031b6:	f003 fe65 	bl	8006e84 <HAL_TIMEx_MasterConfigSynchronization>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80031c0:	f7ff fe04 	bl	8002dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031c4:	2360      	movs	r3, #96	@ 0x60
 80031c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031d4:	463b      	mov	r3, r7
 80031d6:	220c      	movs	r2, #12
 80031d8:	4619      	mov	r1, r3
 80031da:	4807      	ldr	r0, [pc, #28]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 80031dc:	f003 f8aa 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80031e6:	f7ff fdf1 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031ea:	4803      	ldr	r0, [pc, #12]	@ (80031f8 <MX_TIM2_Init+0xe8>)
 80031ec:	f000 f8ea 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 80031f0:	bf00      	nop
 80031f2:	3738      	adds	r7, #56	@ 0x38
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	2000034c 	.word	0x2000034c

080031fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800320e:	463b      	mov	r3, r7
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
 800321c:	615a      	str	r2, [r3, #20]
 800321e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003220:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <MX_TIM3_Init+0xac>)
 8003222:	4a22      	ldr	r2, [pc, #136]	@ (80032ac <MX_TIM3_Init+0xb0>)
 8003224:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <MX_TIM3_Init+0xac>)
 8003228:	2200      	movs	r2, #0
 800322a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322c:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <MX_TIM3_Init+0xac>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003232:	4b1d      	ldr	r3, [pc, #116]	@ (80032a8 <MX_TIM3_Init+0xac>)
 8003234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003238:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <MX_TIM3_Init+0xac>)
 800323c:	2200      	movs	r2, #0
 800323e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <MX_TIM3_Init+0xac>)
 8003242:	2200      	movs	r2, #0
 8003244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003246:	4818      	ldr	r0, [pc, #96]	@ (80032a8 <MX_TIM3_Init+0xac>)
 8003248:	f002 ff22 	bl	8006090 <HAL_TIM_PWM_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003252:	f7ff fdbb 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	4619      	mov	r1, r3
 8003264:	4810      	ldr	r0, [pc, #64]	@ (80032a8 <MX_TIM3_Init+0xac>)
 8003266:	f003 fe0d 	bl	8006e84 <HAL_TIMEx_MasterConfigSynchronization>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003270:	f7ff fdac 	bl	8002dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003274:	2360      	movs	r3, #96	@ 0x60
 8003276:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003284:	463b      	mov	r3, r7
 8003286:	2200      	movs	r2, #0
 8003288:	4619      	mov	r1, r3
 800328a:	4807      	ldr	r0, [pc, #28]	@ (80032a8 <MX_TIM3_Init+0xac>)
 800328c:	f003 f852 	bl	8006334 <HAL_TIM_PWM_ConfigChannel>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8003296:	f7ff fd99 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800329a:	4803      	ldr	r0, [pc, #12]	@ (80032a8 <MX_TIM3_Init+0xac>)
 800329c:	f000 f892 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 80032a0:	bf00      	nop
 80032a2:	3728      	adds	r7, #40	@ 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000398 	.word	0x20000398
 80032ac:	40000400 	.word	0x40000400

080032b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80032c0:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <MX_TIM7_Init+0x68>)
 80032c2:	4a16      	ldr	r2, [pc, #88]	@ (800331c <MX_TIM7_Init+0x6c>)
 80032c4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10799;
 80032c6:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <MX_TIM7_Init+0x68>)
 80032c8:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 80032cc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ce:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <MX_TIM7_Init+0x68>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80032d4:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <MX_TIM7_Init+0x68>)
 80032d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80032da:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <MX_TIM7_Init+0x68>)
 80032de:	2200      	movs	r2, #0
 80032e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032e2:	480d      	ldr	r0, [pc, #52]	@ (8003318 <MX_TIM7_Init+0x68>)
 80032e4:	f002 fe0c 	bl	8005f00 <HAL_TIM_Base_Init>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80032ee:	f7ff fd6d 	bl	8002dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	4619      	mov	r1, r3
 80032fe:	4806      	ldr	r0, [pc, #24]	@ (8003318 <MX_TIM7_Init+0x68>)
 8003300:	f003 fdc0 	bl	8006e84 <HAL_TIMEx_MasterConfigSynchronization>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800330a:	f7ff fd5f 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200003e4 	.word	0x200003e4
 800331c:	40001400 	.word	0x40001400

08003320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003330:	d10c      	bne.n	800334c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003332:	4b12      	ldr	r3, [pc, #72]	@ (800337c <HAL_TIM_Base_MspInit+0x5c>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	4a11      	ldr	r2, [pc, #68]	@ (800337c <HAL_TIM_Base_MspInit+0x5c>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6413      	str	r3, [r2, #64]	@ 0x40
 800333e:	4b0f      	ldr	r3, [pc, #60]	@ (800337c <HAL_TIM_Base_MspInit+0x5c>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800334a:	e010      	b.n	800336e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0b      	ldr	r2, [pc, #44]	@ (8003380 <HAL_TIM_Base_MspInit+0x60>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10b      	bne.n	800336e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_TIM_Base_MspInit+0x5c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a08      	ldr	r2, [pc, #32]	@ (800337c <HAL_TIM_Base_MspInit+0x5c>)
 800335c:	f043 0320 	orr.w	r3, r3, #32
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_TIM_Base_MspInit+0x5c>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800
 8003380:	40001400 	.word	0x40001400

08003384 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <HAL_TIM_PWM_MspInit+0x38>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10b      	bne.n	80033ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a09      	ldr	r2, [pc, #36]	@ (80033c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e4:	d11c      	bne.n	8003420 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	4b21      	ldr	r3, [pc, #132]	@ (800346c <HAL_TIM_MspPostInit+0xa8>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a20      	ldr	r2, [pc, #128]	@ (800346c <HAL_TIM_MspPostInit+0xa8>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <HAL_TIM_MspPostInit+0xa8>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 80033fe:	2308      	movs	r3, #8
 8003400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800340e:	2301      	movs	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	4815      	ldr	r0, [pc, #84]	@ (8003470 <HAL_TIM_MspPostInit+0xac>)
 800341a:	f000 fb13 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800341e:	e020      	b.n	8003462 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM3)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a13      	ldr	r2, [pc, #76]	@ (8003474 <HAL_TIM_MspPostInit+0xb0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d11b      	bne.n	8003462 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_TIM_MspPostInit+0xa8>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	4a0f      	ldr	r2, [pc, #60]	@ (800346c <HAL_TIM_MspPostInit+0xa8>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6313      	str	r3, [r2, #48]	@ 0x30
 8003436:	4b0d      	ldr	r3, [pc, #52]	@ (800346c <HAL_TIM_MspPostInit+0xa8>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003442:	2340      	movs	r3, #64	@ 0x40
 8003444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003446:	2302      	movs	r3, #2
 8003448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003452:	2302      	movs	r3, #2
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003456:	f107 0314 	add.w	r3, r7, #20
 800345a:	4619      	mov	r1, r3
 800345c:	4804      	ldr	r0, [pc, #16]	@ (8003470 <HAL_TIM_MspPostInit+0xac>)
 800345e:	f000 faf1 	bl	8003a44 <HAL_GPIO_Init>
}
 8003462:	bf00      	nop
 8003464:	3728      	adds	r7, #40	@ 0x28
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40020000 	.word	0x40020000
 8003474:	40000400 	.word	0x40000400

08003478 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 800347e:	4a15      	ldr	r2, [pc, #84]	@ (80034d4 <MX_USART3_UART_Init+0x5c>)
 8003480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003482:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 8003484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800348a:	4b11      	ldr	r3, [pc, #68]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003490:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003496:	4b0e      	ldr	r3, [pc, #56]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 8003498:	2200      	movs	r2, #0
 800349a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800349c:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 800349e:	220c      	movs	r2, #12
 80034a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034a8:	4b09      	ldr	r3, [pc, #36]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ae:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034b4:	4b06      	ldr	r3, [pc, #24]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034ba:	4805      	ldr	r0, [pc, #20]	@ (80034d0 <MX_USART3_UART_Init+0x58>)
 80034bc:	f003 fd70 	bl	8006fa0 <HAL_UART_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80034c6:	f7ff fc81 	bl	8002dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000430 	.word	0x20000430
 80034d4:	40004800 	.word	0x40004800

080034d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0aa      	sub	sp, #168	@ 0xa8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f0:	f107 0310 	add.w	r3, r7, #16
 80034f4:	2284      	movs	r2, #132	@ 0x84
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f006 f8fd 	bl	80096f8 <memset>
  if(uartHandle->Instance==USART3)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a26      	ldr	r2, [pc, #152]	@ (800359c <HAL_UART_MspInit+0xc4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d144      	bne.n	8003592 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800350c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800350e:	2300      	movs	r3, #0
 8003510:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	4618      	mov	r0, r3
 8003518:	f001 f984 	bl	8004824 <HAL_RCCEx_PeriphCLKConfig>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003522:	f7ff fc53 	bl	8002dcc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003526:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_UART_MspInit+0xc8>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_UART_MspInit+0xc8>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003530:	6413      	str	r3, [r2, #64]	@ 0x40
 8003532:	4b1b      	ldr	r3, [pc, #108]	@ (80035a0 <HAL_UART_MspInit+0xc8>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800353e:	4b18      	ldr	r3, [pc, #96]	@ (80035a0 <HAL_UART_MspInit+0xc8>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	4a17      	ldr	r2, [pc, #92]	@ (80035a0 <HAL_UART_MspInit+0xc8>)
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	6313      	str	r3, [r2, #48]	@ 0x30
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <HAL_UART_MspInit+0xc8>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800355a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003564:	2301      	movs	r3, #1
 8003566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356a:	2303      	movs	r3, #3
 800356c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003570:	2307      	movs	r3, #7
 8003572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003576:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800357a:	4619      	mov	r1, r3
 800357c:	4809      	ldr	r0, [pc, #36]	@ (80035a4 <HAL_UART_MspInit+0xcc>)
 800357e:	f000 fa61 	bl	8003a44 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003582:	2200      	movs	r2, #0
 8003584:	2100      	movs	r1, #0
 8003586:	2027      	movs	r0, #39	@ 0x27
 8003588:	f000 f993 	bl	80038b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800358c:	2027      	movs	r0, #39	@ 0x27
 800358e:	f000 f9ac 	bl	80038ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003592:	bf00      	nop
 8003594:	37a8      	adds	r7, #168	@ 0xa8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40004800 	.word	0x40004800
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40020c00 	.word	0x40020c00

080035a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ac:	f7ff fd9e 	bl	80030ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035b0:	480c      	ldr	r0, [pc, #48]	@ (80035e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035b2:	490d      	ldr	r1, [pc, #52]	@ (80035e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035b4:	4a0d      	ldr	r2, [pc, #52]	@ (80035ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035b8:	e002      	b.n	80035c0 <LoopCopyDataInit>

080035ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035be:	3304      	adds	r3, #4

080035c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035c4:	d3f9      	bcc.n	80035ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035c6:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035c8:	4c0a      	ldr	r4, [pc, #40]	@ (80035f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035cc:	e001      	b.n	80035d2 <LoopFillZerobss>

080035ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035d0:	3204      	adds	r2, #4

080035d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035d4:	d3fb      	bcc.n	80035ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80035d6:	f006 f8e7 	bl	80097a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035da:	f7ff f935 	bl	8002848 <main>
  bx  lr    
 80035de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80035e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e8:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80035ec:	0800dbec 	.word	0x0800dbec
  ldr r2, =_sbss
 80035f0:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80035f4:	20000608 	.word	0x20000608

080035f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f8:	e7fe      	b.n	80035f8 <ADC_IRQHandler>

080035fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035fe:	2003      	movs	r0, #3
 8003600:	f000 f94c 	bl	800389c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003604:	2000      	movs	r0, #0
 8003606:	f000 f805 	bl	8003614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800360a:	f7ff fc67 	bl	8002edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800361c:	4b12      	ldr	r3, [pc, #72]	@ (8003668 <HAL_InitTick+0x54>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_InitTick+0x58>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	4619      	mov	r1, r3
 8003626:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800362a:	fbb3 f3f1 	udiv	r3, r3, r1
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f967 	bl	8003906 <HAL_SYSTICK_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e00e      	b.n	8003660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b0f      	cmp	r3, #15
 8003646:	d80a      	bhi.n	800365e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003648:	2200      	movs	r2, #0
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	f04f 30ff 	mov.w	r0, #4294967295
 8003650:	f000 f92f 	bl	80038b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003654:	4a06      	ldr	r2, [pc, #24]	@ (8003670 <HAL_InitTick+0x5c>)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	e000      	b.n	8003660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000078 	.word	0x20000078
 800366c:	20000080 	.word	0x20000080
 8003670:	2000007c 	.word	0x2000007c

08003674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <HAL_IncTick+0x20>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_IncTick+0x24>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4413      	add	r3, r2
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <HAL_IncTick+0x24>)
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000080 	.word	0x20000080
 8003698:	200004b8 	.word	0x200004b8

0800369c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return uwTick;
 80036a0:	4b03      	ldr	r3, [pc, #12]	@ (80036b0 <HAL_GetTick+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	200004b8 	.word	0x200004b8

080036b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036bc:	f7ff ffee 	bl	800369c <HAL_GetTick>
 80036c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036cc:	d005      	beq.n	80036da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036ce:	4b0a      	ldr	r3, [pc, #40]	@ (80036f8 <HAL_Delay+0x44>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036da:	bf00      	nop
 80036dc:	f7ff ffde 	bl	800369c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d8f7      	bhi.n	80036dc <HAL_Delay+0x28>
  {
  }
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000080 	.word	0x20000080

080036fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800370c:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <__NVIC_SetPriorityGrouping+0x40>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003718:	4013      	ands	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <__NVIC_SetPriorityGrouping+0x44>)
 8003726:	4313      	orrs	r3, r2
 8003728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800372a:	4a04      	ldr	r2, [pc, #16]	@ (800373c <__NVIC_SetPriorityGrouping+0x40>)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60d3      	str	r3, [r2, #12]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00
 8003740:	05fa0000 	.word	0x05fa0000

08003744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003748:	4b04      	ldr	r3, [pc, #16]	@ (800375c <__NVIC_GetPriorityGrouping+0x18>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	f003 0307 	and.w	r3, r3, #7
}
 8003752:	4618      	mov	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	2b00      	cmp	r3, #0
 8003770:	db0b      	blt.n	800378a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4907      	ldr	r1, [pc, #28]	@ (8003798 <__NVIC_EnableIRQ+0x38>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2001      	movs	r0, #1
 8003782:	fa00 f202 	lsl.w	r2, r0, r2
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	e000e100 	.word	0xe000e100

0800379c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	6039      	str	r1, [r7, #0]
 80037a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	db0a      	blt.n	80037c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	490c      	ldr	r1, [pc, #48]	@ (80037e8 <__NVIC_SetPriority+0x4c>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	0112      	lsls	r2, r2, #4
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	440b      	add	r3, r1
 80037c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037c4:	e00a      	b.n	80037dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	4908      	ldr	r1, [pc, #32]	@ (80037ec <__NVIC_SetPriority+0x50>)
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3b04      	subs	r3, #4
 80037d4:	0112      	lsls	r2, r2, #4
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	440b      	add	r3, r1
 80037da:	761a      	strb	r2, [r3, #24]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000e100 	.word	0xe000e100
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	@ 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f1c3 0307 	rsb	r3, r3, #7
 800380a:	2b04      	cmp	r3, #4
 800380c:	bf28      	it	cs
 800380e:	2304      	movcs	r3, #4
 8003810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3304      	adds	r3, #4
 8003816:	2b06      	cmp	r3, #6
 8003818:	d902      	bls.n	8003820 <NVIC_EncodePriority+0x30>
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	3b03      	subs	r3, #3
 800381e:	e000      	b.n	8003822 <NVIC_EncodePriority+0x32>
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	401a      	ands	r2, r3
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003838:	f04f 31ff 	mov.w	r1, #4294967295
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	fa01 f303 	lsl.w	r3, r1, r3
 8003842:	43d9      	mvns	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	4313      	orrs	r3, r2
         );
}
 800384a:	4618      	mov	r0, r3
 800384c:	3724      	adds	r7, #36	@ 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3b01      	subs	r3, #1
 8003864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003868:	d301      	bcc.n	800386e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800386a:	2301      	movs	r3, #1
 800386c:	e00f      	b.n	800388e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800386e:	4a0a      	ldr	r2, [pc, #40]	@ (8003898 <SysTick_Config+0x40>)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3b01      	subs	r3, #1
 8003874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003876:	210f      	movs	r1, #15
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	f7ff ff8e 	bl	800379c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003880:	4b05      	ldr	r3, [pc, #20]	@ (8003898 <SysTick_Config+0x40>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003886:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <SysTick_Config+0x40>)
 8003888:	2207      	movs	r2, #7
 800388a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	e000e010 	.word	0xe000e010

0800389c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff29 	bl	80036fc <__NVIC_SetPriorityGrouping>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b086      	sub	sp, #24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	4603      	mov	r3, r0
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
 80038be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038c4:	f7ff ff3e 	bl	8003744 <__NVIC_GetPriorityGrouping>
 80038c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	6978      	ldr	r0, [r7, #20]
 80038d0:	f7ff ff8e 	bl	80037f0 <NVIC_EncodePriority>
 80038d4:	4602      	mov	r2, r0
 80038d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff5d 	bl	800379c <__NVIC_SetPriority>
}
 80038e2:	bf00      	nop
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff31 	bl	8003760 <__NVIC_EnableIRQ>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ffa2 	bl	8003858 <SysTick_Config>
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800392c:	f7ff feb6 	bl	800369c <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d008      	beq.n	8003950 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2280      	movs	r2, #128	@ 0x80
 8003942:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e052      	b.n	80039f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0216 	bic.w	r2, r2, #22
 800395e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800396e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_DMA_Abort+0x62>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0208 	bic.w	r2, r2, #8
 800398e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a0:	e013      	b.n	80039ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039a2:	f7ff fe7b 	bl	800369c <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d90c      	bls.n	80039ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2203      	movs	r2, #3
 80039ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e015      	b.n	80039f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e4      	bne.n	80039a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039dc:	223f      	movs	r2, #63	@ 0x3f
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d004      	beq.n	8003a1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2280      	movs	r2, #128	@ 0x80
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e00c      	b.n	8003a36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2205      	movs	r2, #5
 8003a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	@ 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	e175      	b.n	8003d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a64:	2201      	movs	r2, #1
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	f040 8164 	bne.w	8003d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d005      	beq.n	8003a9a <HAL_GPIO_Init+0x56>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d130      	bne.n	8003afc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f003 0201 	and.w	r2, r3, #1
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d017      	beq.n	8003b38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d123      	bne.n	8003b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	08da      	lsrs	r2, r3, #3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3208      	adds	r2, #8
 8003b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	08da      	lsrs	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3208      	adds	r2, #8
 8003b86:	69b9      	ldr	r1, [r7, #24]
 8003b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	2203      	movs	r2, #3
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0203 	and.w	r2, r3, #3
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80be 	beq.w	8003d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bce:	4b66      	ldr	r3, [pc, #408]	@ (8003d68 <HAL_GPIO_Init+0x324>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	4a65      	ldr	r2, [pc, #404]	@ (8003d68 <HAL_GPIO_Init+0x324>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bda:	4b63      	ldr	r3, [pc, #396]	@ (8003d68 <HAL_GPIO_Init+0x324>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003be6:	4a61      	ldr	r2, [pc, #388]	@ (8003d6c <HAL_GPIO_Init+0x328>)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	@ (8003d70 <HAL_GPIO_Init+0x32c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d037      	beq.n	8003c82 <HAL_GPIO_Init+0x23e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a57      	ldr	r2, [pc, #348]	@ (8003d74 <HAL_GPIO_Init+0x330>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d031      	beq.n	8003c7e <HAL_GPIO_Init+0x23a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a56      	ldr	r2, [pc, #344]	@ (8003d78 <HAL_GPIO_Init+0x334>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d02b      	beq.n	8003c7a <HAL_GPIO_Init+0x236>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a55      	ldr	r2, [pc, #340]	@ (8003d7c <HAL_GPIO_Init+0x338>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d025      	beq.n	8003c76 <HAL_GPIO_Init+0x232>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a54      	ldr	r2, [pc, #336]	@ (8003d80 <HAL_GPIO_Init+0x33c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01f      	beq.n	8003c72 <HAL_GPIO_Init+0x22e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a53      	ldr	r2, [pc, #332]	@ (8003d84 <HAL_GPIO_Init+0x340>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d019      	beq.n	8003c6e <HAL_GPIO_Init+0x22a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a52      	ldr	r2, [pc, #328]	@ (8003d88 <HAL_GPIO_Init+0x344>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_GPIO_Init+0x226>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a51      	ldr	r2, [pc, #324]	@ (8003d8c <HAL_GPIO_Init+0x348>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00d      	beq.n	8003c66 <HAL_GPIO_Init+0x222>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a50      	ldr	r2, [pc, #320]	@ (8003d90 <HAL_GPIO_Init+0x34c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <HAL_GPIO_Init+0x21e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4f      	ldr	r2, [pc, #316]	@ (8003d94 <HAL_GPIO_Init+0x350>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_GPIO_Init+0x21a>
 8003c5a:	2309      	movs	r3, #9
 8003c5c:	e012      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c5e:	230a      	movs	r3, #10
 8003c60:	e010      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c62:	2308      	movs	r3, #8
 8003c64:	e00e      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c66:	2307      	movs	r3, #7
 8003c68:	e00c      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	e00a      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c6e:	2305      	movs	r3, #5
 8003c70:	e008      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c72:	2304      	movs	r3, #4
 8003c74:	e006      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c76:	2303      	movs	r3, #3
 8003c78:	e004      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e002      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_GPIO_Init+0x240>
 8003c82:	2300      	movs	r3, #0
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	f002 0203 	and.w	r2, r2, #3
 8003c8a:	0092      	lsls	r2, r2, #2
 8003c8c:	4093      	lsls	r3, r2
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c94:	4935      	ldr	r1, [pc, #212]	@ (8003d6c <HAL_GPIO_Init+0x328>)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cc6:	4a34      	ldr	r2, [pc, #208]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ccc:	4b32      	ldr	r3, [pc, #200]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cf0:	4a29      	ldr	r2, [pc, #164]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cf6:	4b28      	ldr	r3, [pc, #160]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d20:	4b1d      	ldr	r3, [pc, #116]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d44:	4a14      	ldr	r2, [pc, #80]	@ (8003d98 <HAL_GPIO_Init+0x354>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	f67f ae86 	bls.w	8003a64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3724      	adds	r7, #36	@ 0x24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40013800 	.word	0x40013800
 8003d70:	40020000 	.word	0x40020000
 8003d74:	40020400 	.word	0x40020400
 8003d78:	40020800 	.word	0x40020800
 8003d7c:	40020c00 	.word	0x40020c00
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40021400 	.word	0x40021400
 8003d88:	40021800 	.word	0x40021800
 8003d8c:	40021c00 	.word	0x40021c00
 8003d90:	40022000 	.word	0x40022000
 8003d94:	40022400 	.word	0x40022400
 8003d98:	40013c00 	.word	0x40013c00

08003d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
 8003da8:	4613      	mov	r3, r2
 8003daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dac:	787b      	ldrb	r3, [r7, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003db8:	e003      	b.n	8003dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003dba:	887b      	ldrh	r3, [r7, #2]
 8003dbc:	041a      	lsls	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	619a      	str	r2, [r3, #24]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a04      	ldr	r2, [pc, #16]	@ (8003dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dde:	6013      	str	r3, [r2, #0]
}
 8003de0:	bf00      	nop
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	40007000 	.word	0x40007000

08003df0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	4a22      	ldr	r2, [pc, #136]	@ (8003e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e12:	4b1e      	ldr	r3, [pc, #120]	@ (8003e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	@ (8003e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e1e:	f7ff fc3d 	bl	800369c <HAL_GetTick>
 8003e22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e24:	e009      	b.n	8003e3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e26:	f7ff fc39 	bl	800369c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e34:	d901      	bls.n	8003e3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e022      	b.n	8003e80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e3a:	4b14      	ldr	r3, [pc, #80]	@ (8003e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e46:	d1ee      	bne.n	8003e26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e48:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8003e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e54:	f7ff fc22 	bl	800369c <HAL_GetTick>
 8003e58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e5a:	e009      	b.n	8003e70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e5c:	f7ff fc1e 	bl	800369c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e6a:	d901      	bls.n	8003e70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e007      	b.n	8003e80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e70:	4b06      	ldr	r3, [pc, #24]	@ (8003e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e7c:	d1ee      	bne.n	8003e5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e291      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8087 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eb4:	4b96      	ldr	r3, [pc, #600]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d00c      	beq.n	8003eda <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ec0:	4b93      	ldr	r3, [pc, #588]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d112      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x62>
 8003ecc:	4b90      	ldr	r3, [pc, #576]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eda:	4b8d      	ldr	r3, [pc, #564]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d06c      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x130>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d168      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e26b      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x7a>
 8003efc:	4b84      	ldr	r3, [pc, #528]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a83      	ldr	r2, [pc, #524]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e02e      	b.n	8003f68 <HAL_RCC_OscConfig+0xd8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x9c>
 8003f12:	4b7f      	ldr	r3, [pc, #508]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7e      	ldr	r2, [pc, #504]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a7b      	ldr	r2, [pc, #492]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e01d      	b.n	8003f68 <HAL_RCC_OscConfig+0xd8>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0xc0>
 8003f36:	4b76      	ldr	r3, [pc, #472]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a75      	ldr	r2, [pc, #468]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b73      	ldr	r3, [pc, #460]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a72      	ldr	r2, [pc, #456]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0xd8>
 8003f50:	4b6f      	ldr	r3, [pc, #444]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a6e      	ldr	r2, [pc, #440]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b6c      	ldr	r3, [pc, #432]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6b      	ldr	r2, [pc, #428]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7ff fb94 	bl	800369c <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f78:	f7ff fb90 	bl	800369c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	@ 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e21f      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b61      	ldr	r3, [pc, #388]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0xe8>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7ff fb80 	bl	800369c <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7ff fb7c 	bl	800369c <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	@ 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e20b      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb2:	4b57      	ldr	r3, [pc, #348]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x110>
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d069      	beq.n	80040a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fce:	4b50      	ldr	r3, [pc, #320]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fda:	4b4d      	ldr	r3, [pc, #308]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d11c      	bne.n	8004020 <HAL_RCC_OscConfig+0x190>
 8003fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	4b47      	ldr	r3, [pc, #284]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_RCC_OscConfig+0x17a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e1df      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400a:	4b41      	ldr	r3, [pc, #260]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	493d      	ldr	r1, [pc, #244]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401e:	e040      	b.n	80040a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d023      	beq.n	8004070 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004028:	4b39      	ldr	r3, [pc, #228]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a38      	ldr	r2, [pc, #224]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7ff fb32 	bl	800369c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800403c:	f7ff fb2e 	bl	800369c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1bd      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404e:	4b30      	ldr	r3, [pc, #192]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0f0      	beq.n	800403c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b2d      	ldr	r3, [pc, #180]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	4929      	ldr	r1, [pc, #164]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
 800406e:	e018      	b.n	80040a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004070:	4b27      	ldr	r3, [pc, #156]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7ff fb0e 	bl	800369c <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004084:	f7ff fb0a 	bl	800369c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e199      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004096:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d038      	beq.n	8004120 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d019      	beq.n	80040ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040b6:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c2:	f7ff faeb 	bl	800369c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ca:	f7ff fae7 	bl	800369c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e176      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 80040de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x23a>
 80040e8:	e01a      	b.n	8004120 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040ea:	4b09      	ldr	r3, [pc, #36]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 80040ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ee:	4a08      	ldr	r2, [pc, #32]	@ (8004110 <HAL_RCC_OscConfig+0x280>)
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7ff fad1 	bl	800369c <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	e00a      	b.n	8004114 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fe:	f7ff facd 	bl	800369c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d903      	bls.n	8004114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e15c      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
 8004110:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004114:	4b91      	ldr	r3, [pc, #580]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ee      	bne.n	80040fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a4 	beq.w	8004276 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412e:	4b8b      	ldr	r3, [pc, #556]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10d      	bne.n	8004156 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	4b88      	ldr	r3, [pc, #544]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413e:	4a87      	ldr	r2, [pc, #540]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004144:	6413      	str	r3, [r2, #64]	@ 0x40
 8004146:	4b85      	ldr	r3, [pc, #532]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004152:	2301      	movs	r3, #1
 8004154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004156:	4b82      	ldr	r3, [pc, #520]	@ (8004360 <HAL_RCC_OscConfig+0x4d0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d118      	bne.n	8004194 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004162:	4b7f      	ldr	r3, [pc, #508]	@ (8004360 <HAL_RCC_OscConfig+0x4d0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a7e      	ldr	r2, [pc, #504]	@ (8004360 <HAL_RCC_OscConfig+0x4d0>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800416e:	f7ff fa95 	bl	800369c <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004176:	f7ff fa91 	bl	800369c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b64      	cmp	r3, #100	@ 0x64
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e120      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004188:	4b75      	ldr	r3, [pc, #468]	@ (8004360 <HAL_RCC_OscConfig+0x4d0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d106      	bne.n	80041aa <HAL_RCC_OscConfig+0x31a>
 800419c:	4b6f      	ldr	r3, [pc, #444]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a0:	4a6e      	ldr	r2, [pc, #440]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a8:	e02d      	b.n	8004206 <HAL_RCC_OscConfig+0x376>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10c      	bne.n	80041cc <HAL_RCC_OscConfig+0x33c>
 80041b2:	4b6a      	ldr	r3, [pc, #424]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b6:	4a69      	ldr	r2, [pc, #420]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80041be:	4b67      	ldr	r3, [pc, #412]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c2:	4a66      	ldr	r2, [pc, #408]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ca:	e01c      	b.n	8004206 <HAL_RCC_OscConfig+0x376>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b05      	cmp	r3, #5
 80041d2:	d10c      	bne.n	80041ee <HAL_RCC_OscConfig+0x35e>
 80041d4:	4b61      	ldr	r3, [pc, #388]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d8:	4a60      	ldr	r2, [pc, #384]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041da:	f043 0304 	orr.w	r3, r3, #4
 80041de:	6713      	str	r3, [r2, #112]	@ 0x70
 80041e0:	4b5e      	ldr	r3, [pc, #376]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e4:	4a5d      	ldr	r2, [pc, #372]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ec:	e00b      	b.n	8004206 <HAL_RCC_OscConfig+0x376>
 80041ee:	4b5b      	ldr	r3, [pc, #364]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a5a      	ldr	r2, [pc, #360]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041fa:	4b58      	ldr	r3, [pc, #352]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80041fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fe:	4a57      	ldr	r2, [pc, #348]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004200:	f023 0304 	bic.w	r3, r3, #4
 8004204:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d015      	beq.n	800423a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420e:	f7ff fa45 	bl	800369c <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004214:	e00a      	b.n	800422c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004216:	f7ff fa41 	bl	800369c <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004224:	4293      	cmp	r3, r2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0ce      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422c:	4b4b      	ldr	r3, [pc, #300]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ee      	beq.n	8004216 <HAL_RCC_OscConfig+0x386>
 8004238:	e014      	b.n	8004264 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7ff fa2f 	bl	800369c <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7ff fa2b 	bl	800369c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0b8      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004258:	4b40      	ldr	r3, [pc, #256]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1ee      	bne.n	8004242 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d105      	bne.n	8004276 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426a:	4b3c      	ldr	r3, [pc, #240]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	4a3b      	ldr	r2, [pc, #236]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004270:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004274:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80a4 	beq.w	80043c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004280:	4b36      	ldr	r3, [pc, #216]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b08      	cmp	r3, #8
 800428a:	d06b      	beq.n	8004364 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d149      	bne.n	8004328 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004294:	4b31      	ldr	r3, [pc, #196]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a30      	ldr	r2, [pc, #192]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800429a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7ff f9fc 	bl	800369c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7ff f9f8 	bl	800369c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e087      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	4b28      	ldr	r3, [pc, #160]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	019b      	lsls	r3, r3, #6
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	3b01      	subs	r3, #1
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e8:	061b      	lsls	r3, r3, #24
 80042ea:	4313      	orrs	r3, r2
 80042ec:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80042ee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80042f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042f4:	4b19      	ldr	r3, [pc, #100]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a18      	ldr	r2, [pc, #96]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 80042fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7ff f9cc 	bl	800369c <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7ff f9c8 	bl	800369c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e057      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	4b10      	ldr	r3, [pc, #64]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x478>
 8004326:	e04f      	b.n	80043c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0b      	ldr	r2, [pc, #44]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 800432e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7ff f9b2 	bl	800369c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7ff f9ae 	bl	800369c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e03d      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	4b03      	ldr	r3, [pc, #12]	@ (800435c <HAL_RCC_OscConfig+0x4cc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x4ac>
 800435a:	e035      	b.n	80043c8 <HAL_RCC_OscConfig+0x538>
 800435c:	40023800 	.word	0x40023800
 8004360:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004364:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <HAL_RCC_OscConfig+0x544>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d028      	beq.n	80043c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d121      	bne.n	80043c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438a:	429a      	cmp	r2, r3
 800438c:	d11a      	bne.n	80043c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004394:	4013      	ands	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800439a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800439c:	4293      	cmp	r3, r2
 800439e:	d111      	bne.n	80043c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	3b01      	subs	r3, #1
 80043ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023800 	.word	0x40023800

080043d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0d0      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b6a      	ldr	r3, [pc, #424]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d910      	bls.n	8004420 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b67      	ldr	r3, [pc, #412]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 020f 	bic.w	r2, r3, #15
 8004406:	4965      	ldr	r1, [pc, #404]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b63      	ldr	r3, [pc, #396]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0b8      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004438:	4b59      	ldr	r3, [pc, #356]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4a58      	ldr	r2, [pc, #352]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800443e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004442:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004450:	4b53      	ldr	r3, [pc, #332]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4a52      	ldr	r2, [pc, #328]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004456:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800445a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445c:	4b50      	ldr	r3, [pc, #320]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	494d      	ldr	r1, [pc, #308]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800446a:	4313      	orrs	r3, r2
 800446c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d040      	beq.n	80044fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b47      	ldr	r3, [pc, #284]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d115      	bne.n	80044ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e07f      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b41      	ldr	r3, [pc, #260]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e073      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b3d      	ldr	r3, [pc, #244]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06b      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ba:	4b39      	ldr	r3, [pc, #228]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4936      	ldr	r1, [pc, #216]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7ff f8e6 	bl	800369c <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7ff f8e2 	bl	800369c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e053      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b2d      	ldr	r3, [pc, #180]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 020c 	and.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1eb      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b27      	ldr	r3, [pc, #156]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d210      	bcs.n	800452c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b24      	ldr	r3, [pc, #144]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 020f 	bic.w	r2, r3, #15
 8004512:	4922      	ldr	r1, [pc, #136]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4313      	orrs	r3, r2
 8004518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b20      	ldr	r3, [pc, #128]	@ (800459c <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e032      	b.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004538:	4b19      	ldr	r3, [pc, #100]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4916      	ldr	r1, [pc, #88]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004556:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	490e      	ldr	r1, [pc, #56]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800456a:	f000 f821 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 800456e:	4602      	mov	r2, r0
 8004570:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	490a      	ldr	r1, [pc, #40]	@ (80045a4 <HAL_RCC_ClockConfig+0x1cc>)
 800457c:	5ccb      	ldrb	r3, [r1, r3]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a09      	ldr	r2, [pc, #36]	@ (80045a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004586:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <HAL_RCC_ClockConfig+0x1d4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff f842 	bl	8003614 <HAL_InitTick>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40023c00 	.word	0x40023c00
 80045a0:	40023800 	.word	0x40023800
 80045a4:	0800d77c 	.word	0x0800d77c
 80045a8:	20000078 	.word	0x20000078
 80045ac:	2000007c 	.word	0x2000007c

080045b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045b4:	b094      	sub	sp, #80	@ 0x50
 80045b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80045bc:	2300      	movs	r3, #0
 80045be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c0:	2300      	movs	r3, #0
 80045c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045c8:	4b79      	ldr	r3, [pc, #484]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d00d      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x40>
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	f200 80e1 	bhi.w	800479c <HAL_RCC_GetSysClockFreq+0x1ec>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x34>
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_GetSysClockFreq+0x3a>
 80045e2:	e0db      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045e4:	4b73      	ldr	r3, [pc, #460]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045e8:	e0db      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ea:	4b73      	ldr	r3, [pc, #460]	@ (80047b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80045ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ee:	e0d8      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f0:	4b6f      	ldr	r3, [pc, #444]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045fa:	4b6d      	ldr	r3, [pc, #436]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004606:	4b6a      	ldr	r3, [pc, #424]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	099b      	lsrs	r3, r3, #6
 800460c:	2200      	movs	r2, #0
 800460e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004610:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004618:	633b      	str	r3, [r7, #48]	@ 0x30
 800461a:	2300      	movs	r3, #0
 800461c:	637b      	str	r3, [r7, #52]	@ 0x34
 800461e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004622:	4622      	mov	r2, r4
 8004624:	462b      	mov	r3, r5
 8004626:	f04f 0000 	mov.w	r0, #0
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	0159      	lsls	r1, r3, #5
 8004630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004634:	0150      	lsls	r0, r2, #5
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4621      	mov	r1, r4
 800463c:	1a51      	subs	r1, r2, r1
 800463e:	6139      	str	r1, [r7, #16]
 8004640:	4629      	mov	r1, r5
 8004642:	eb63 0301 	sbc.w	r3, r3, r1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004654:	4659      	mov	r1, fp
 8004656:	018b      	lsls	r3, r1, #6
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800465e:	4651      	mov	r1, sl
 8004660:	018a      	lsls	r2, r1, #6
 8004662:	4651      	mov	r1, sl
 8004664:	ebb2 0801 	subs.w	r8, r2, r1
 8004668:	4659      	mov	r1, fp
 800466a:	eb63 0901 	sbc.w	r9, r3, r1
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800467a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800467e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004682:	4690      	mov	r8, r2
 8004684:	4699      	mov	r9, r3
 8004686:	4623      	mov	r3, r4
 8004688:	eb18 0303 	adds.w	r3, r8, r3
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	462b      	mov	r3, r5
 8004690:	eb49 0303 	adc.w	r3, r9, r3
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046a2:	4629      	mov	r1, r5
 80046a4:	024b      	lsls	r3, r1, #9
 80046a6:	4621      	mov	r1, r4
 80046a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046ac:	4621      	mov	r1, r4
 80046ae:	024a      	lsls	r2, r1, #9
 80046b0:	4610      	mov	r0, r2
 80046b2:	4619      	mov	r1, r3
 80046b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046b6:	2200      	movs	r2, #0
 80046b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046c0:	f7fc fb02 	bl	8000cc8 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046cc:	e058      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ce:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	2200      	movs	r2, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	4611      	mov	r1, r2
 80046da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	2300      	movs	r3, #0
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	f04f 0000 	mov.w	r0, #0
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	0159      	lsls	r1, r3, #5
 80046f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fa:	0150      	lsls	r0, r2, #5
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4641      	mov	r1, r8
 8004702:	ebb2 0a01 	subs.w	sl, r2, r1
 8004706:	4649      	mov	r1, r9
 8004708:	eb63 0b01 	sbc.w	fp, r3, r1
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004718:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800471c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004720:	ebb2 040a 	subs.w	r4, r2, sl
 8004724:	eb63 050b 	sbc.w	r5, r3, fp
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	00eb      	lsls	r3, r5, #3
 8004732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004736:	00e2      	lsls	r2, r4, #3
 8004738:	4614      	mov	r4, r2
 800473a:	461d      	mov	r5, r3
 800473c:	4643      	mov	r3, r8
 800473e:	18e3      	adds	r3, r4, r3
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	464b      	mov	r3, r9
 8004744:	eb45 0303 	adc.w	r3, r5, r3
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004756:	4629      	mov	r1, r5
 8004758:	028b      	lsls	r3, r1, #10
 800475a:	4621      	mov	r1, r4
 800475c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004760:	4621      	mov	r1, r4
 8004762:	028a      	lsls	r2, r1, #10
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476a:	2200      	movs	r2, #0
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	61fa      	str	r2, [r7, #28]
 8004770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004774:	f7fc faa8 	bl	8000cc8 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4613      	mov	r3, r2
 800477e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	0c1b      	lsrs	r3, r3, #16
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	3301      	adds	r3, #1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004790:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800479a:	e002      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800479e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3750      	adds	r7, #80	@ 0x50
 80047a8:	46bd      	mov	sp, r7
 80047aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	007a1200 	.word	0x007a1200

080047bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c0:	4b03      	ldr	r3, [pc, #12]	@ (80047d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c2:	681b      	ldr	r3, [r3, #0]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000078 	.word	0x20000078

080047d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047d8:	f7ff fff0 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 80047dc:	4602      	mov	r2, r0
 80047de:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	0a9b      	lsrs	r3, r3, #10
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	4903      	ldr	r1, [pc, #12]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ea:	5ccb      	ldrb	r3, [r1, r3]
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40023800 	.word	0x40023800
 80047f8:	0800d78c 	.word	0x0800d78c

080047fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004800:	f7ff ffdc 	bl	80047bc <HAL_RCC_GetHCLKFreq>
 8004804:	4602      	mov	r2, r0
 8004806:	4b05      	ldr	r3, [pc, #20]	@ (800481c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	0b5b      	lsrs	r3, r3, #13
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	4903      	ldr	r1, [pc, #12]	@ (8004820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004812:	5ccb      	ldrb	r3, [r1, r3]
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	0800d78c 	.word	0x0800d78c

08004824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d012      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800484c:	4b69      	ldr	r3, [pc, #420]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a68      	ldr	r2, [pc, #416]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004852:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004856:	6093      	str	r3, [r2, #8]
 8004858:	4b66      	ldr	r3, [pc, #408]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004860:	4964      	ldr	r1, [pc, #400]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800486e:	2301      	movs	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d017      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800487e:	4b5d      	ldr	r3, [pc, #372]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004880:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004884:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	4959      	ldr	r1, [pc, #356]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004898:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489c:	d101      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d017      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048ba:	4b4e      	ldr	r3, [pc, #312]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	494a      	ldr	r1, [pc, #296]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d8:	d101      	bne.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048da:	2301      	movs	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048e6:	2301      	movs	r3, #1
 80048e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048f6:	2301      	movs	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 808b 	beq.w	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004908:	4b3a      	ldr	r3, [pc, #232]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	4a39      	ldr	r2, [pc, #228]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004912:	6413      	str	r3, [r2, #64]	@ 0x40
 8004914:	4b37      	ldr	r3, [pc, #220]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004920:	4b35      	ldr	r3, [pc, #212]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a34      	ldr	r2, [pc, #208]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492c:	f7fe feb6 	bl	800369c <HAL_GetTick>
 8004930:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004934:	f7fe feb2 	bl	800369c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	@ 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e357      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004946:	4b2c      	ldr	r3, [pc, #176]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004952:	4b28      	ldr	r3, [pc, #160]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d035      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	429a      	cmp	r2, r3
 800496e:	d02e      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004970:	4b20      	ldr	r3, [pc, #128]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004978:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800497a:	4b1e      	ldr	r3, [pc, #120]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800497e:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004984:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004986:	4b1b      	ldr	r3, [pc, #108]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800498a:	4a1a      	ldr	r2, [pc, #104]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004990:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004992:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004998:	4b16      	ldr	r3, [pc, #88]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d114      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fe fe7a 	bl	800369c <HAL_GetTick>
 80049a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fe fe76 	bl	800369c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e319      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ee      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049da:	d111      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80049e8:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049ea:	400b      	ands	r3, r1
 80049ec:	4901      	ldr	r1, [pc, #4]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	608b      	str	r3, [r1, #8]
 80049f2:	e00b      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000
 80049fc:	0ffffcff 	.word	0x0ffffcff
 8004a00:	4baa      	ldr	r3, [pc, #680]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4aa9      	ldr	r2, [pc, #676]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a06:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004a0a:	6093      	str	r3, [r2, #8]
 8004a0c:	4ba7      	ldr	r3, [pc, #668]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	49a4      	ldr	r1, [pc, #656]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d010      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a2a:	4ba0      	ldr	r3, [pc, #640]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a30:	4a9e      	ldr	r2, [pc, #632]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a36:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a44:	4999      	ldr	r1, [pc, #612]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a58:	4b94      	ldr	r3, [pc, #592]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a66:	4991      	ldr	r1, [pc, #580]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a7a:	4b8c      	ldr	r3, [pc, #560]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a88:	4988      	ldr	r1, [pc, #544]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a9c:	4b83      	ldr	r3, [pc, #524]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aaa:	4980      	ldr	r1, [pc, #512]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004abe:	4b7b      	ldr	r3, [pc, #492]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004acc:	4977      	ldr	r1, [pc, #476]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ae0:	4b72      	ldr	r3, [pc, #456]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	496f      	ldr	r1, [pc, #444]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b08:	f023 020c 	bic.w	r2, r3, #12
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b10:	4966      	ldr	r1, [pc, #408]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b24:	4b61      	ldr	r3, [pc, #388]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b32:	495e      	ldr	r1, [pc, #376]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b46:	4b59      	ldr	r3, [pc, #356]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b54:	4955      	ldr	r1, [pc, #340]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b68:	4b50      	ldr	r3, [pc, #320]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b76:	494d      	ldr	r1, [pc, #308]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b8a:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	4944      	ldr	r1, [pc, #272]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004bac:	4b3f      	ldr	r3, [pc, #252]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	493c      	ldr	r1, [pc, #240]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bce:	4b37      	ldr	r3, [pc, #220]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bdc:	4933      	ldr	r1, [pc, #204]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bfe:	492b      	ldr	r1, [pc, #172]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d011      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c12:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c18:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c20:	4922      	ldr	r1, [pc, #136]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c30:	d101      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c42:	2301      	movs	r3, #1
 8004c44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c52:	4b16      	ldr	r3, [pc, #88]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c60:	4912      	ldr	r1, [pc, #72]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c74:	4b0d      	ldr	r3, [pc, #52]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c84:	4909      	ldr	r1, [pc, #36]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d006      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 80d9 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ca0:	4b02      	ldr	r3, [pc, #8]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a01      	ldr	r2, [pc, #4]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004caa:	e001      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb2:	f7fe fcf3 	bl	800369c <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cba:	f7fe fcef 	bl	800369c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b64      	cmp	r3, #100	@ 0x64
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e194      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1f0      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d021      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d11d      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cec:	4b64      	ldr	r3, [pc, #400]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cfa:	4b61      	ldr	r3, [pc, #388]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d00:	0e1b      	lsrs	r3, r3, #24
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	019a      	lsls	r2, r3, #6
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	041b      	lsls	r3, r3, #16
 8004d12:	431a      	orrs	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	061b      	lsls	r3, r3, #24
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	071b      	lsls	r3, r3, #28
 8004d20:	4957      	ldr	r1, [pc, #348]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d02e      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d52:	d129      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d54:	4b4a      	ldr	r3, [pc, #296]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d5a:	0c1b      	lsrs	r3, r3, #16
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d62:	4b47      	ldr	r3, [pc, #284]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d68:	0f1b      	lsrs	r3, r3, #28
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	019a      	lsls	r2, r3, #6
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	061b      	lsls	r3, r3, #24
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	071b      	lsls	r3, r3, #28
 8004d88:	493d      	ldr	r1, [pc, #244]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d90:	4b3b      	ldr	r3, [pc, #236]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d96:	f023 021f 	bic.w	r2, r3, #31
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	4937      	ldr	r1, [pc, #220]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01d      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004db4:	4b32      	ldr	r3, [pc, #200]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dba:	0e1b      	lsrs	r3, r3, #24
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc8:	0f1b      	lsrs	r3, r3, #28
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	019a      	lsls	r2, r3, #6
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	061b      	lsls	r3, r3, #24
 8004de2:	431a      	orrs	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	071b      	lsls	r3, r3, #28
 8004de8:	4925      	ldr	r1, [pc, #148]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d011      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	019a      	lsls	r2, r3, #6
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	041b      	lsls	r3, r3, #16
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	071b      	lsls	r3, r3, #28
 8004e18:	4919      	ldr	r1, [pc, #100]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e20:	4b17      	ldr	r3, [pc, #92]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a16      	ldr	r2, [pc, #88]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2c:	f7fe fc36 	bl	800369c <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e34:	f7fe fc32 	bl	800369c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	@ 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e0d7      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e46:	4b0e      	ldr	r3, [pc, #56]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 80cd 	bne.w	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e5a:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a08      	ldr	r2, [pc, #32]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e66:	f7fe fc19 	bl	800369c <HAL_GetTick>
 8004e6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e6e:	f7fe fc15 	bl	800369c <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b64      	cmp	r3, #100	@ 0x64
 8004e7a:	d903      	bls.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e0ba      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e84:	4b5e      	ldr	r3, [pc, #376]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e90:	d0ed      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d02e      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12a      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eba:	4b51      	ldr	r3, [pc, #324]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec0:	0c1b      	lsrs	r3, r3, #16
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ec8:	4b4d      	ldr	r3, [pc, #308]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ece:	0f1b      	lsrs	r3, r3, #28
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	019a      	lsls	r2, r3, #6
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	071b      	lsls	r3, r3, #28
 8004eee:	4944      	ldr	r1, [pc, #272]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ef6:	4b42      	ldr	r3, [pc, #264]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004efc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	493d      	ldr	r1, [pc, #244]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d022      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f24:	d11d      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f26:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2c:	0e1b      	lsrs	r3, r3, #24
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f34:	4b32      	ldr	r3, [pc, #200]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f3a:	0f1b      	lsrs	r3, r3, #28
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	019a      	lsls	r2, r3, #6
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	431a      	orrs	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	071b      	lsls	r3, r3, #28
 8004f5a:	4929      	ldr	r1, [pc, #164]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f6e:	4b24      	ldr	r3, [pc, #144]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	0e1b      	lsrs	r3, r3, #24
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f7c:	4b20      	ldr	r3, [pc, #128]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	019a      	lsls	r2, r3, #6
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	431a      	orrs	r2, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	4917      	ldr	r1, [pc, #92]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004faa:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	4911      	ldr	r1, [pc, #68]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fcc:	f7fe fb66 	bl	800369c <HAL_GetTick>
 8004fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fd4:	f7fe fb62 	bl	800369c <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	@ 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e007      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff2:	d1ef      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3720      	adds	r7, #32
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40023800 	.word	0x40023800

08005004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e09d      	b.n	8005152 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d108      	bne.n	8005030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005026:	d009      	beq.n	800503c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	61da      	str	r2, [r3, #28]
 800502e:	e005      	b.n	800503c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fd fefc 	bl	8002e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005072:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800507c:	d902      	bls.n	8005084 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e002      	b.n	800508a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005088:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005092:	d007      	beq.n	80050a4 <HAL_SPI_Init+0xa0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800509c:	d002      	beq.n	80050a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	ea42 0103 	orr.w	r1, r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	0c1b      	lsrs	r3, r3, #16
 8005100:	f003 0204 	and.w	r2, r3, #4
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005120:	ea42 0103 	orr.w	r1, r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005140:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b088      	sub	sp, #32
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_SPI_Transmit+0x22>
 8005178:	2302      	movs	r3, #2
 800517a:	e15f      	b.n	800543c <HAL_SPI_Transmit+0x2e2>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005184:	f7fe fa8a 	bl	800369c <HAL_GetTick>
 8005188:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800518a:	88fb      	ldrh	r3, [r7, #6]
 800518c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800519a:	2302      	movs	r3, #2
 800519c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800519e:	e148      	b.n	8005432 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SPI_Transmit+0x52>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051b0:	e13f      	b.n	8005432 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2203      	movs	r2, #3
 80051b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	88fa      	ldrh	r2, [r7, #6]
 80051ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051fc:	d10f      	bne.n	800521e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800520c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800521c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005228:	2b40      	cmp	r3, #64	@ 0x40
 800522a:	d007      	beq.n	800523c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005244:	d94f      	bls.n	80052e6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_SPI_Transmit+0xfa>
 800524e:	8afb      	ldrh	r3, [r7, #22]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d142      	bne.n	80052da <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	881a      	ldrh	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005278:	e02f      	b.n	80052da <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d112      	bne.n	80052ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	1c9a      	adds	r2, r3, #2
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052ac:	e015      	b.n	80052da <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ae:	f7fe f9f5 	bl	800369c <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d803      	bhi.n	80052c6 <HAL_SPI_Transmit+0x16c>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d102      	bne.n	80052cc <HAL_SPI_Transmit+0x172>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80052d8:	e0ab      	b.n	8005432 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1ca      	bne.n	800527a <HAL_SPI_Transmit+0x120>
 80052e4:	e080      	b.n	80053e8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_SPI_Transmit+0x19a>
 80052ee:	8afb      	ldrh	r3, [r7, #22]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d174      	bne.n	80053de <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d912      	bls.n	8005324 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	881a      	ldrh	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530e:	1c9a      	adds	r2, r3, #2
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b02      	subs	r3, #2
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005322:	e05c      	b.n	80053de <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	330c      	adds	r3, #12
 800532e:	7812      	ldrb	r2, [r2, #0]
 8005330:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005340:	b29b      	uxth	r3, r3
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800534a:	e048      	b.n	80053de <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b02      	cmp	r3, #2
 8005358:	d12b      	bne.n	80053b2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b01      	cmp	r3, #1
 8005362:	d912      	bls.n	800538a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	881a      	ldrh	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005374:	1c9a      	adds	r2, r3, #2
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b02      	subs	r3, #2
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005388:	e029      	b.n	80053de <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	7812      	ldrb	r2, [r2, #0]
 8005396:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053b0:	e015      	b.n	80053de <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b2:	f7fe f973 	bl	800369c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d803      	bhi.n	80053ca <HAL_SPI_Transmit+0x270>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d102      	bne.n	80053d0 <HAL_SPI_Transmit+0x276>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80053dc:	e029      	b.n	8005432 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1b1      	bne.n	800534c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fd1d 	bl	8005e2c <SPI_EndRxTxTransaction>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e003      	b.n	8005432 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800543a:	7ffb      	ldrb	r3, [r7, #31]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3720      	adds	r7, #32
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	4613      	mov	r3, r2
 8005452:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d002      	beq.n	800546a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005464:	2302      	movs	r3, #2
 8005466:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005468:	e11a      	b.n	80056a0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005472:	d112      	bne.n	800549a <HAL_SPI_Receive+0x56>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10e      	bne.n	800549a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2204      	movs	r2, #4
 8005480:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005484:	88fa      	ldrh	r2, [r7, #6]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f90e 	bl	80056b2 <HAL_SPI_TransmitReceive>
 8005496:	4603      	mov	r3, r0
 8005498:	e107      	b.n	80056aa <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_SPI_Receive+0x64>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e100      	b.n	80056aa <HAL_SPI_Receive+0x266>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054b0:	f7fe f8f4 	bl	800369c <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <HAL_SPI_Receive+0x7e>
 80054bc:	88fb      	ldrh	r3, [r7, #6]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054c6:	e0eb      	b.n	80056a0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2204      	movs	r2, #4
 80054cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	88fa      	ldrh	r2, [r7, #6]
 80054e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005512:	d908      	bls.n	8005526 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005522:	605a      	str	r2, [r3, #4]
 8005524:	e007      	b.n	8005536 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005534:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800553e:	d10f      	bne.n	8005560 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800554e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800555e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800556a:	2b40      	cmp	r3, #64	@ 0x40
 800556c:	d007      	beq.n	800557e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800557c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005586:	d86f      	bhi.n	8005668 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005588:	e034      	b.n	80055f4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d117      	bne.n	80055c8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f103 020c 	add.w	r2, r3, #12
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	7812      	ldrb	r2, [r2, #0]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80055c6:	e015      	b.n	80055f4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055c8:	f7fe f868 	bl	800369c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d803      	bhi.n	80055e0 <HAL_SPI_Receive+0x19c>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d102      	bne.n	80055e6 <HAL_SPI_Receive+0x1a2>
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80055f2:	e055      	b.n	80056a0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1c4      	bne.n	800558a <HAL_SPI_Receive+0x146>
 8005600:	e038      	b.n	8005674 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b01      	cmp	r3, #1
 800560e:	d115      	bne.n	800563c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	b292      	uxth	r2, r2
 800561c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	1c9a      	adds	r2, r3, #2
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800563a:	e015      	b.n	8005668 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800563c:	f7fe f82e 	bl	800369c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d803      	bhi.n	8005654 <HAL_SPI_Receive+0x210>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005652:	d102      	bne.n	800565a <HAL_SPI_Receive+0x216>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005666:	e01b      	b.n	80056a0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1c6      	bne.n	8005602 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 fb5b 	bl	8005d34 <SPI_EndRxTransaction>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2220      	movs	r2, #32
 8005688:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
 8005696:	e003      	b.n	80056a0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b08a      	sub	sp, #40	@ 0x28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056c0:	2301      	movs	r3, #1
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_SPI_TransmitReceive+0x26>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e20a      	b.n	8005aee <HAL_SPI_TransmitReceive+0x43c>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e0:	f7fd ffdc 	bl	800369c <HAL_GetTick>
 80056e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80056f8:	887b      	ldrh	r3, [r7, #2]
 80056fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056fc:	7efb      	ldrb	r3, [r7, #27]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d00e      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x6e>
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005708:	d106      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x66>
 8005712:	7efb      	ldrb	r3, [r7, #27]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d003      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005718:	2302      	movs	r3, #2
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800571e:	e1e0      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x80>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x80>
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d103      	bne.n	800573a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005738:	e1d3      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b04      	cmp	r3, #4
 8005744:	d003      	beq.n	800574e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2205      	movs	r2, #5
 800574a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	887a      	ldrh	r2, [r7, #2]
 8005766:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	887a      	ldrh	r2, [r7, #2]
 8005774:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	887a      	ldrh	r2, [r7, #2]
 800577a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005790:	d802      	bhi.n	8005798 <HAL_SPI_TransmitReceive+0xe6>
 8005792:	8a3b      	ldrh	r3, [r7, #16]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d908      	bls.n	80057aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057a6:	605a      	str	r2, [r3, #4]
 80057a8:	e007      	b.n	80057ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057c4:	2b40      	cmp	r3, #64	@ 0x40
 80057c6:	d007      	beq.n	80057d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057e0:	f240 8081 	bls.w	80058e6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x140>
 80057ec:	8a7b      	ldrh	r3, [r7, #18]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d16d      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f6:	881a      	ldrh	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005802:	1c9a      	adds	r2, r3, #2
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005816:	e05a      	b.n	80058ce <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b02      	cmp	r3, #2
 8005824:	d11b      	bne.n	800585e <HAL_SPI_TransmitReceive+0x1ac>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582a:	b29b      	uxth	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d016      	beq.n	800585e <HAL_SPI_TransmitReceive+0x1ac>
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	2b01      	cmp	r3, #1
 8005834:	d113      	bne.n	800585e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005846:	1c9a      	adds	r2, r3, #2
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b01      	cmp	r3, #1
 800586a:	d11c      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x1f4>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d016      	beq.n	80058a6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	b292      	uxth	r2, r2
 8005884:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588a:	1c9a      	adds	r2, r3, #2
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058a2:	2301      	movs	r3, #1
 80058a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058a6:	f7fd fef9 	bl	800369c <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d80b      	bhi.n	80058ce <HAL_SPI_TransmitReceive+0x21c>
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d007      	beq.n	80058ce <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80058cc:	e109      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d19f      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x166>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d199      	bne.n	8005818 <HAL_SPI_TransmitReceive+0x166>
 80058e4:	e0e3      	b.n	8005aae <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_SPI_TransmitReceive+0x244>
 80058ee:	8a7b      	ldrh	r3, [r7, #18]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	f040 80cf 	bne.w	8005a94 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d912      	bls.n	8005926 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005904:	881a      	ldrh	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	1c9a      	adds	r2, r3, #2
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b02      	subs	r3, #2
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005924:	e0b6      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800594c:	e0a2      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b02      	cmp	r3, #2
 800595a:	d134      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x314>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d02f      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x314>
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	2b01      	cmp	r3, #1
 800596a:	d12c      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d912      	bls.n	800599c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	881a      	ldrh	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b02      	subs	r3, #2
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800599a:	e012      	b.n	80059c2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d148      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x3b4>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d042      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d923      	bls.n	8005a34 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	b292      	uxth	r2, r2
 80059f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	1c9a      	adds	r2, r3, #2
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b02      	subs	r3, #2
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d81f      	bhi.n	8005a62 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	e016      	b.n	8005a62 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f103 020c 	add.w	r2, r3, #12
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a62:	2301      	movs	r3, #1
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a66:	f7fd fe19 	bl	800369c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d803      	bhi.n	8005a7e <HAL_SPI_TransmitReceive+0x3cc>
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7c:	d102      	bne.n	8005a84 <HAL_SPI_TransmitReceive+0x3d2>
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d107      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005a92:	e026      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f47f af57 	bne.w	800594e <HAL_SPI_TransmitReceive+0x29c>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f47f af50 	bne.w	800594e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f9ba 	bl	8005e2c <SPI_EndRxTxTransaction>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad8:	e003      	b.n	8005ae2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005aea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3728      	adds	r7, #40	@ 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b088      	sub	sp, #32
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	603b      	str	r3, [r7, #0]
 8005b04:	4613      	mov	r3, r2
 8005b06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b08:	f7fd fdc8 	bl	800369c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b18:	f7fd fdc0 	bl	800369c <HAL_GetTick>
 8005b1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b1e:	4b39      	ldr	r3, [pc, #228]	@ (8005c04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	015b      	lsls	r3, r3, #5
 8005b24:	0d1b      	lsrs	r3, r3, #20
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	fb02 f303 	mul.w	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b2e:	e054      	b.n	8005bda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b36:	d050      	beq.n	8005bda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b38:	f7fd fdb0 	bl	800369c <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d902      	bls.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d13d      	bne.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b66:	d111      	bne.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b70:	d004      	beq.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b7a:	d107      	bne.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b94:	d10f      	bne.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e017      	b.n	8005bfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d19b      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3720      	adds	r7, #32
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000078 	.word	0x20000078

08005c08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08a      	sub	sp, #40	@ 0x28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c1a:	f7fd fd3f 	bl	800369c <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	4413      	add	r3, r2
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c2a:	f7fd fd37 	bl	800369c <HAL_GetTick>
 8005c2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c38:	4b3d      	ldr	r3, [pc, #244]	@ (8005d30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	00da      	lsls	r2, r3, #3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	0d1b      	lsrs	r3, r3, #20
 8005c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c50:	e060      	b.n	8005d14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c58:	d107      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d050      	beq.n	8005d14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c72:	f7fd fd13 	bl	800369c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d902      	bls.n	8005c88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d13d      	bne.n	8005d04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ca0:	d111      	bne.n	8005cc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005caa:	d004      	beq.n	8005cb6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb4:	d107      	bne.n	8005cc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cce:	d10f      	bne.n	8005cf0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e010      	b.n	8005d26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d196      	bne.n	8005c52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3728      	adds	r7, #40	@ 0x28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	20000078 	.word	0x20000078

08005d34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d48:	d111      	bne.n	8005d6e <SPI_EndRxTransaction+0x3a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d52:	d004      	beq.n	8005d5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5c:	d107      	bne.n	8005d6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d76:	d112      	bne.n	8005d9e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2180      	movs	r1, #128	@ 0x80
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff feb8 	bl	8005af8 <SPI_WaitFlagStateUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d021      	beq.n	8005dd2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e03d      	b.n	8005e1a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d9e:	4b21      	ldr	r3, [pc, #132]	@ (8005e24 <SPI_EndRxTransaction+0xf0>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a21      	ldr	r2, [pc, #132]	@ (8005e28 <SPI_EndRxTransaction+0xf4>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	0d5b      	lsrs	r3, r3, #21
 8005daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dca:	2b80      	cmp	r3, #128	@ 0x80
 8005dcc:	d0f2      	beq.n	8005db4 <SPI_EndRxTransaction+0x80>
 8005dce:	e000      	b.n	8005dd2 <SPI_EndRxTransaction+0x9e>
        break;
 8005dd0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dda:	d11d      	bne.n	8005e18 <SPI_EndRxTransaction+0xe4>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005de4:	d004      	beq.n	8005df0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dee:	d113      	bne.n	8005e18 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff ff03 	bl	8005c08 <SPI_WaitFifoStateUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0c:	f043 0220 	orr.w	r2, r3, #32
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e000      	b.n	8005e1a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000078 	.word	0x20000078
 8005e28:	165e9f81 	.word	0x165e9f81

08005e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff fedf 	bl	8005c08 <SPI_WaitFifoStateUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d007      	beq.n	8005e60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e54:	f043 0220 	orr.w	r2, r3, #32
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e046      	b.n	8005eee <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e60:	4b25      	ldr	r3, [pc, #148]	@ (8005ef8 <SPI_EndRxTxTransaction+0xcc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a25      	ldr	r2, [pc, #148]	@ (8005efc <SPI_EndRxTxTransaction+0xd0>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0d5b      	lsrs	r3, r3, #21
 8005e6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e70:	fb02 f303 	mul.w	r3, r2, r3
 8005e74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e7e:	d112      	bne.n	8005ea6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2200      	movs	r2, #0
 8005e88:	2180      	movs	r1, #128	@ 0x80
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f7ff fe34 	bl	8005af8 <SPI_WaitFlagStateUntilTimeout>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e023      	b.n	8005eee <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebc:	2b80      	cmp	r3, #128	@ 0x80
 8005ebe:	d0f2      	beq.n	8005ea6 <SPI_EndRxTxTransaction+0x7a>
 8005ec0:	e000      	b.n	8005ec4 <SPI_EndRxTxTransaction+0x98>
        break;
 8005ec2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff fe99 	bl	8005c08 <SPI_WaitFifoStateUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e000      	b.n	8005eee <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000078 	.word	0x20000078
 8005efc:	165e9f81 	.word	0x165e9f81

08005f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e049      	b.n	8005fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fd f9fa 	bl	8003320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f000 fbd6 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e04c      	b.n	8006062 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a26      	ldr	r2, [pc, #152]	@ (8006070 <HAL_TIM_Base_Start+0xc0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d022      	beq.n	8006020 <HAL_TIM_Base_Start+0x70>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe2:	d01d      	beq.n	8006020 <HAL_TIM_Base_Start+0x70>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a22      	ldr	r2, [pc, #136]	@ (8006074 <HAL_TIM_Base_Start+0xc4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_TIM_Base_Start+0x70>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a21      	ldr	r2, [pc, #132]	@ (8006078 <HAL_TIM_Base_Start+0xc8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_TIM_Base_Start+0x70>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800607c <HAL_TIM_Base_Start+0xcc>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_TIM_Base_Start+0x70>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1e      	ldr	r2, [pc, #120]	@ (8006080 <HAL_TIM_Base_Start+0xd0>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_TIM_Base_Start+0x70>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a1c      	ldr	r2, [pc, #112]	@ (8006084 <HAL_TIM_Base_Start+0xd4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_TIM_Base_Start+0x70>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	@ (8006088 <HAL_TIM_Base_Start+0xd8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d115      	bne.n	800604c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	4b19      	ldr	r3, [pc, #100]	@ (800608c <HAL_TIM_Base_Start+0xdc>)
 8006028:	4013      	ands	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b06      	cmp	r3, #6
 8006030:	d015      	beq.n	800605e <HAL_TIM_Base_Start+0xae>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006038:	d011      	beq.n	800605e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604a:	e008      	b.n	800605e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e000      	b.n	8006060 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40010000 	.word	0x40010000
 8006074:	40000400 	.word	0x40000400
 8006078:	40000800 	.word	0x40000800
 800607c:	40000c00 	.word	0x40000c00
 8006080:	40010400 	.word	0x40010400
 8006084:	40014000 	.word	0x40014000
 8006088:	40001800 	.word	0x40001800
 800608c:	00010007 	.word	0x00010007

08006090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e049      	b.n	8006136 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fd f964 	bl	8003384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f000 fb0e 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x24>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e03c      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x3e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e02f      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x58>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e022      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d109      	bne.n	80061b2 <HAL_TIM_PWM_Start+0x72>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	bf14      	ite	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	2300      	moveq	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	e015      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d109      	bne.n	80061cc <HAL_TIM_PWM_Start+0x8c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e008      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e092      	b.n	800630c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_PWM_Start+0xb6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f4:	e023      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_PWM_Start+0xc6>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006204:	e01b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d104      	bne.n	8006216 <HAL_TIM_PWM_Start+0xd6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006214:	e013      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d104      	bne.n	8006226 <HAL_TIM_PWM_Start+0xe6>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006224:	e00b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b10      	cmp	r3, #16
 800622a:	d104      	bne.n	8006236 <HAL_TIM_PWM_Start+0xf6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006234:	e003      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fdf6 	bl	8006e38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a30      	ldr	r2, [pc, #192]	@ (8006314 <HAL_TIM_PWM_Start+0x1d4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_PWM_Start+0x120>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2f      	ldr	r2, [pc, #188]	@ (8006318 <HAL_TIM_PWM_Start+0x1d8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d101      	bne.n	8006264 <HAL_TIM_PWM_Start+0x124>
 8006260:	2301      	movs	r3, #1
 8006262:	e000      	b.n	8006266 <HAL_TIM_PWM_Start+0x126>
 8006264:	2300      	movs	r3, #0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a25      	ldr	r2, [pc, #148]	@ (8006314 <HAL_TIM_PWM_Start+0x1d4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d022      	beq.n	80062ca <HAL_TIM_PWM_Start+0x18a>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628c:	d01d      	beq.n	80062ca <HAL_TIM_PWM_Start+0x18a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a22      	ldr	r2, [pc, #136]	@ (800631c <HAL_TIM_PWM_Start+0x1dc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d018      	beq.n	80062ca <HAL_TIM_PWM_Start+0x18a>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a20      	ldr	r2, [pc, #128]	@ (8006320 <HAL_TIM_PWM_Start+0x1e0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <HAL_TIM_PWM_Start+0x18a>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006324 <HAL_TIM_PWM_Start+0x1e4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00e      	beq.n	80062ca <HAL_TIM_PWM_Start+0x18a>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a19      	ldr	r2, [pc, #100]	@ (8006318 <HAL_TIM_PWM_Start+0x1d8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_TIM_PWM_Start+0x18a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006328 <HAL_TIM_PWM_Start+0x1e8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d004      	beq.n	80062ca <HAL_TIM_PWM_Start+0x18a>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a19      	ldr	r2, [pc, #100]	@ (800632c <HAL_TIM_PWM_Start+0x1ec>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d115      	bne.n	80062f6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <HAL_TIM_PWM_Start+0x1f0>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b06      	cmp	r3, #6
 80062da:	d015      	beq.n	8006308 <HAL_TIM_PWM_Start+0x1c8>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e2:	d011      	beq.n	8006308 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0201 	orr.w	r2, r2, #1
 80062f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f4:	e008      	b.n	8006308 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e000      	b.n	800630a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40010000 	.word	0x40010000
 8006318:	40010400 	.word	0x40010400
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40014000 	.word	0x40014000
 800632c:	40001800 	.word	0x40001800
 8006330:	00010007 	.word	0x00010007

08006334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800634e:	2302      	movs	r3, #2
 8006350:	e0ff      	b.n	8006552 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b14      	cmp	r3, #20
 800635e:	f200 80f0 	bhi.w	8006542 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006362:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	080063bd 	.word	0x080063bd
 800636c:	08006543 	.word	0x08006543
 8006370:	08006543 	.word	0x08006543
 8006374:	08006543 	.word	0x08006543
 8006378:	080063fd 	.word	0x080063fd
 800637c:	08006543 	.word	0x08006543
 8006380:	08006543 	.word	0x08006543
 8006384:	08006543 	.word	0x08006543
 8006388:	0800643f 	.word	0x0800643f
 800638c:	08006543 	.word	0x08006543
 8006390:	08006543 	.word	0x08006543
 8006394:	08006543 	.word	0x08006543
 8006398:	0800647f 	.word	0x0800647f
 800639c:	08006543 	.word	0x08006543
 80063a0:	08006543 	.word	0x08006543
 80063a4:	08006543 	.word	0x08006543
 80063a8:	080064c1 	.word	0x080064c1
 80063ac:	08006543 	.word	0x08006543
 80063b0:	08006543 	.word	0x08006543
 80063b4:	08006543 	.word	0x08006543
 80063b8:	08006501 	.word	0x08006501
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fa40 	bl	8006848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0208 	orr.w	r2, r2, #8
 80063d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6999      	ldr	r1, [r3, #24]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	619a      	str	r2, [r3, #24]
      break;
 80063fa:	e0a5      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fa92 	bl	800692c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6999      	ldr	r1, [r3, #24]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	619a      	str	r2, [r3, #24]
      break;
 800643c:	e084      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68b9      	ldr	r1, [r7, #8]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fae9 	bl	8006a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0208 	orr.w	r2, r2, #8
 8006458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0204 	bic.w	r2, r2, #4
 8006468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69d9      	ldr	r1, [r3, #28]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	430a      	orrs	r2, r1
 800647a:	61da      	str	r2, [r3, #28]
      break;
 800647c:	e064      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fb3f 	bl	8006b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69d9      	ldr	r1, [r3, #28]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	021a      	lsls	r2, r3, #8
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	61da      	str	r2, [r3, #28]
      break;
 80064be:	e043      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fb76 	bl	8006bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0208 	orr.w	r2, r2, #8
 80064da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0204 	bic.w	r2, r2, #4
 80064ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691a      	ldr	r2, [r3, #16]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80064fe:	e023      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fba8 	bl	8006c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800651a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800652a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006540:	e002      	b.n	8006548 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
      break;
 8006546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006550:	7dfb      	ldrb	r3, [r7, #23]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop

0800655c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIM_ConfigClockSource+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e0b4      	b.n	80066e2 <HAL_TIM_ConfigClockSource+0x186>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	4b56      	ldr	r3, [pc, #344]	@ (80066ec <HAL_TIM_ConfigClockSource+0x190>)
 8006594:	4013      	ands	r3, r2
 8006596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800659e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b0:	d03e      	beq.n	8006630 <HAL_TIM_ConfigClockSource+0xd4>
 80065b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b6:	f200 8087 	bhi.w	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065be:	f000 8086 	beq.w	80066ce <HAL_TIM_ConfigClockSource+0x172>
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c6:	d87f      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b70      	cmp	r3, #112	@ 0x70
 80065ca:	d01a      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0xa6>
 80065cc:	2b70      	cmp	r3, #112	@ 0x70
 80065ce:	d87b      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b60      	cmp	r3, #96	@ 0x60
 80065d2:	d050      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x11a>
 80065d4:	2b60      	cmp	r3, #96	@ 0x60
 80065d6:	d877      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b50      	cmp	r3, #80	@ 0x50
 80065da:	d03c      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0xfa>
 80065dc:	2b50      	cmp	r3, #80	@ 0x50
 80065de:	d873      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e0:	2b40      	cmp	r3, #64	@ 0x40
 80065e2:	d058      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x13a>
 80065e4:	2b40      	cmp	r3, #64	@ 0x40
 80065e6:	d86f      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065e8:	2b30      	cmp	r3, #48	@ 0x30
 80065ea:	d064      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 80065ec:	2b30      	cmp	r3, #48	@ 0x30
 80065ee:	d86b      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d060      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d867      	bhi.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05c      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d05a      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006600:	e062      	b.n	80066c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006612:	f000 fbf1 	bl	8006df8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	609a      	str	r2, [r3, #8]
      break;
 800662e:	e04f      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006640:	f000 fbda 	bl	8006df8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006652:	609a      	str	r2, [r3, #8]
      break;
 8006654:	e03c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006662:	461a      	mov	r2, r3
 8006664:	f000 fb4e 	bl	8006d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2150      	movs	r1, #80	@ 0x50
 800666e:	4618      	mov	r0, r3
 8006670:	f000 fba7 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 8006674:	e02c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006682:	461a      	mov	r2, r3
 8006684:	f000 fb6d 	bl	8006d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2160      	movs	r1, #96	@ 0x60
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fb97 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 8006694:	e01c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a2:	461a      	mov	r2, r3
 80066a4:	f000 fb2e 	bl	8006d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2140      	movs	r1, #64	@ 0x40
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fb87 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 80066b4:	e00c      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f000 fb7e 	bl	8006dc2 <TIM_ITRx_SetConfig>
      break;
 80066c6:	e003      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
      break;
 80066cc:	e000      	b.n	80066d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	fffeff88 	.word	0xfffeff88

080066f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a46      	ldr	r2, [pc, #280]	@ (800681c <TIM_Base_SetConfig+0x12c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670e:	d00f      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a43      	ldr	r2, [pc, #268]	@ (8006820 <TIM_Base_SetConfig+0x130>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a42      	ldr	r2, [pc, #264]	@ (8006824 <TIM_Base_SetConfig+0x134>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a41      	ldr	r2, [pc, #260]	@ (8006828 <TIM_Base_SetConfig+0x138>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a40      	ldr	r2, [pc, #256]	@ (800682c <TIM_Base_SetConfig+0x13c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d108      	bne.n	8006742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a35      	ldr	r2, [pc, #212]	@ (800681c <TIM_Base_SetConfig+0x12c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d02b      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d027      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a32      	ldr	r2, [pc, #200]	@ (8006820 <TIM_Base_SetConfig+0x130>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d023      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a31      	ldr	r2, [pc, #196]	@ (8006824 <TIM_Base_SetConfig+0x134>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01f      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a30      	ldr	r2, [pc, #192]	@ (8006828 <TIM_Base_SetConfig+0x138>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01b      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2f      	ldr	r2, [pc, #188]	@ (800682c <TIM_Base_SetConfig+0x13c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d017      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2e      	ldr	r2, [pc, #184]	@ (8006830 <TIM_Base_SetConfig+0x140>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2d      	ldr	r2, [pc, #180]	@ (8006834 <TIM_Base_SetConfig+0x144>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2c      	ldr	r2, [pc, #176]	@ (8006838 <TIM_Base_SetConfig+0x148>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2b      	ldr	r2, [pc, #172]	@ (800683c <TIM_Base_SetConfig+0x14c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2a      	ldr	r2, [pc, #168]	@ (8006840 <TIM_Base_SetConfig+0x150>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a29      	ldr	r2, [pc, #164]	@ (8006844 <TIM_Base_SetConfig+0x154>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d108      	bne.n	80067b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a10      	ldr	r2, [pc, #64]	@ (800681c <TIM_Base_SetConfig+0x12c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	@ (800682c <TIM_Base_SetConfig+0x13c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d103      	bne.n	80067f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f023 0201 	bic.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	611a      	str	r2, [r3, #16]
  }
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800
 800683c:	40001800 	.word	0x40001800
 8006840:	40001c00 	.word	0x40001c00
 8006844:	40002000 	.word	0x40002000

08006848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f023 0201 	bic.w	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4b2b      	ldr	r3, [pc, #172]	@ (8006920 <TIM_OC1_SetConfig+0xd8>)
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 0302 	bic.w	r3, r3, #2
 8006890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a21      	ldr	r2, [pc, #132]	@ (8006924 <TIM_OC1_SetConfig+0xdc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC1_SetConfig+0x64>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a20      	ldr	r2, [pc, #128]	@ (8006928 <TIM_OC1_SetConfig+0xe0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10c      	bne.n	80068c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0308 	bic.w	r3, r3, #8
 80068b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a16      	ldr	r2, [pc, #88]	@ (8006924 <TIM_OC1_SetConfig+0xdc>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_OC1_SetConfig+0x8e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <TIM_OC1_SetConfig+0xe0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d111      	bne.n	80068fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	621a      	str	r2, [r3, #32]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	fffeff8f 	.word	0xfffeff8f
 8006924:	40010000 	.word	0x40010000
 8006928:	40010400 	.word	0x40010400

0800692c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f023 0210 	bic.w	r2, r3, #16
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4b2e      	ldr	r3, [pc, #184]	@ (8006a10 <TIM_OC2_SetConfig+0xe4>)
 8006958:	4013      	ands	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0320 	bic.w	r3, r3, #32
 8006976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a23      	ldr	r2, [pc, #140]	@ (8006a14 <TIM_OC2_SetConfig+0xe8>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d003      	beq.n	8006994 <TIM_OC2_SetConfig+0x68>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a22      	ldr	r2, [pc, #136]	@ (8006a18 <TIM_OC2_SetConfig+0xec>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10d      	bne.n	80069b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <TIM_OC2_SetConfig+0xe8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_OC2_SetConfig+0x94>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a17      	ldr	r2, [pc, #92]	@ (8006a18 <TIM_OC2_SetConfig+0xec>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d113      	bne.n	80069e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	4313      	orrs	r3, r2
 80069da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	621a      	str	r2, [r3, #32]
}
 8006a02:	bf00      	nop
 8006a04:	371c      	adds	r7, #28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	feff8fff 	.word	0xfeff8fff
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40010400 	.word	0x40010400

08006a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4b2d      	ldr	r3, [pc, #180]	@ (8006afc <TIM_OC3_SetConfig+0xe0>)
 8006a48:	4013      	ands	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0303 	bic.w	r3, r3, #3
 8006a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a22      	ldr	r2, [pc, #136]	@ (8006b00 <TIM_OC3_SetConfig+0xe4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d003      	beq.n	8006a82 <TIM_OC3_SetConfig+0x66>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a21      	ldr	r2, [pc, #132]	@ (8006b04 <TIM_OC3_SetConfig+0xe8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d10d      	bne.n	8006a9e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a17      	ldr	r2, [pc, #92]	@ (8006b00 <TIM_OC3_SetConfig+0xe4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d003      	beq.n	8006aae <TIM_OC3_SetConfig+0x92>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	@ (8006b04 <TIM_OC3_SetConfig+0xe8>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d113      	bne.n	8006ad6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	621a      	str	r2, [r3, #32]
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	fffeff8f 	.word	0xfffeff8f
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400

08006b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4b1e      	ldr	r3, [pc, #120]	@ (8006bac <TIM_OC4_SetConfig+0xa4>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	031b      	lsls	r3, r3, #12
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a13      	ldr	r2, [pc, #76]	@ (8006bb0 <TIM_OC4_SetConfig+0xa8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d003      	beq.n	8006b70 <TIM_OC4_SetConfig+0x68>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a12      	ldr	r2, [pc, #72]	@ (8006bb4 <TIM_OC4_SetConfig+0xac>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d109      	bne.n	8006b84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	019b      	lsls	r3, r3, #6
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	feff8fff 	.word	0xfeff8fff
 8006bb0:	40010000 	.word	0x40010000
 8006bb4:	40010400 	.word	0x40010400

08006bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c50 <TIM_OC5_SetConfig+0x98>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a12      	ldr	r2, [pc, #72]	@ (8006c54 <TIM_OC5_SetConfig+0x9c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_OC5_SetConfig+0x5e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a11      	ldr	r2, [pc, #68]	@ (8006c58 <TIM_OC5_SetConfig+0xa0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d109      	bne.n	8006c2a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	621a      	str	r2, [r3, #32]
}
 8006c44:	bf00      	nop
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	fffeff8f 	.word	0xfffeff8f
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40010400 	.word	0x40010400

08006c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4b1c      	ldr	r3, [pc, #112]	@ (8006cf8 <TIM_OC6_SetConfig+0x9c>)
 8006c88:	4013      	ands	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	051b      	lsls	r3, r3, #20
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a13      	ldr	r2, [pc, #76]	@ (8006cfc <TIM_OC6_SetConfig+0xa0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_OC6_SetConfig+0x60>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a12      	ldr	r2, [pc, #72]	@ (8006d00 <TIM_OC6_SetConfig+0xa4>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d109      	bne.n	8006cd0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	621a      	str	r2, [r3, #32]
}
 8006cea:	bf00      	nop
 8006cec:	371c      	adds	r7, #28
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	feff8fff 	.word	0xfeff8fff
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40010400 	.word	0x40010400

08006d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1b      	ldr	r3, [r3, #32]
 8006d1a:	f023 0201 	bic.w	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f023 030a 	bic.w	r3, r3, #10
 8006d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f023 0210 	bic.w	r2, r3, #16
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	031b      	lsls	r3, r3, #12
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	621a      	str	r2, [r3, #32]
}
 8006db6:	bf00      	nop
 8006db8:	371c      	adds	r7, #28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dda:	683a      	ldr	r2, [r7, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f043 0307 	orr.w	r3, r3, #7
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	609a      	str	r2, [r3, #8]
}
 8006dec:	bf00      	nop
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	021a      	lsls	r2, r3, #8
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	609a      	str	r2, [r3, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	371c      	adds	r7, #28
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1a      	ldr	r2, [r3, #32]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1a      	ldr	r2, [r3, #32]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 031f 	and.w	r3, r3, #31
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e70:	431a      	orrs	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
	...

08006e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e06d      	b.n	8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a30      	ldr	r2, [pc, #192]	@ (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d004      	beq.n	8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a2f      	ldr	r2, [pc, #188]	@ (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d108      	bne.n	8006ee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a20      	ldr	r2, [pc, #128]	@ (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d022      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0e:	d01d      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a1d      	ldr	r2, [pc, #116]	@ (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d018      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1c      	ldr	r2, [pc, #112]	@ (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d013      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1a      	ldr	r2, [pc, #104]	@ (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00e      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a15      	ldr	r2, [pc, #84]	@ (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d009      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a16      	ldr	r2, [pc, #88]	@ (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a15      	ldr	r2, [pc, #84]	@ (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d10c      	bne.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40010400 	.word	0x40010400
 8006f8c:	40000400 	.word	0x40000400
 8006f90:	40000800 	.word	0x40000800
 8006f94:	40000c00 	.word	0x40000c00
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40001800 	.word	0x40001800

08006fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e040      	b.n	8007034 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fc fa88 	bl	80034d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2224      	movs	r2, #36	@ 0x24
 8006fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0201 	bic.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fe4c 	bl	8007c84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fbe5 	bl	80077bc <UART_SetConfig>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e01b      	b.n	8007034 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800700a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800701a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fecb 	bl	8007dc8 <UART_CheckIdleState>
 8007032:	4603      	mov	r3, r0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	@ 0x28
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007050:	2b20      	cmp	r3, #32
 8007052:	d177      	bne.n	8007144 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_UART_Transmit+0x24>
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e070      	b.n	8007146 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2221      	movs	r2, #33	@ 0x21
 8007070:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007072:	f7fc fb13 	bl	800369c <HAL_GetTick>
 8007076:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	88fa      	ldrh	r2, [r7, #6]
 800707c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007090:	d108      	bne.n	80070a4 <HAL_UART_Transmit+0x68>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d104      	bne.n	80070a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e003      	b.n	80070ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80070ac:	e02f      	b.n	800710e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	2180      	movs	r1, #128	@ 0x80
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 fedc 	bl	8007e76 <UART_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e03b      	b.n	8007146 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10b      	bne.n	80070ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	3302      	adds	r3, #2
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e007      	b.n	80070fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	3301      	adds	r3, #1
 80070fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1c9      	bne.n	80070ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2200      	movs	r2, #0
 8007122:	2140      	movs	r1, #64	@ 0x40
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fea6 	bl	8007e76 <UART_WaitOnFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e005      	b.n	8007146 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2220      	movs	r2, #32
 800713e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b08a      	sub	sp, #40	@ 0x28
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	4613      	mov	r3, r2
 800715a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007162:	2b20      	cmp	r3, #32
 8007164:	d132      	bne.n	80071cc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_UART_Receive_IT+0x24>
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e02b      	b.n	80071ce <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d018      	beq.n	80071bc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	613b      	str	r3, [r7, #16]
   return(result);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800719e:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	623b      	str	r3, [r7, #32]
 80071aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	69f9      	ldr	r1, [r7, #28]
 80071ae:	6a3a      	ldr	r2, [r7, #32]
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e6      	bne.n	800718a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071bc:	88fb      	ldrh	r3, [r7, #6]
 80071be:	461a      	mov	r2, r3
 80071c0:	68b9      	ldr	r1, [r7, #8]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fec4 	bl	8007f50 <UART_Start_Receive_IT>
 80071c8:	4603      	mov	r3, r0
 80071ca:	e000      	b.n	80071ce <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80071cc:	2302      	movs	r3, #2
  }
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3728      	adds	r7, #40	@ 0x28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b0ba      	sub	sp, #232	@ 0xe8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80071fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007202:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007206:	4013      	ands	r3, r2
 8007208:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800720c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d115      	bne.n	8007240 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007218:	f003 0320 	and.w	r3, r3, #32
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d009      	beq.n	8007240 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 8297 	beq.w	8007764 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
      }
      return;
 800723e:	e291      	b.n	8007764 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8117 	beq.w	8007478 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800724a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007256:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800725a:	4b85      	ldr	r3, [pc, #532]	@ (8007470 <HAL_UART_IRQHandler+0x298>)
 800725c:	4013      	ands	r3, r2
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 810a 	beq.w	8007478 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	d011      	beq.n	8007294 <HAL_UART_IRQHandler+0xbc>
 8007270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00b      	beq.n	8007294 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2201      	movs	r2, #1
 8007282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800728a:	f043 0201 	orr.w	r2, r3, #1
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d011      	beq.n	80072c4 <HAL_UART_IRQHandler+0xec>
 80072a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00b      	beq.n	80072c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2202      	movs	r2, #2
 80072b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ba:	f043 0204 	orr.w	r2, r3, #4
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d011      	beq.n	80072f4 <HAL_UART_IRQHandler+0x11c>
 80072d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2204      	movs	r2, #4
 80072e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ea:	f043 0202 	orr.w	r2, r3, #2
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80072f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d017      	beq.n	8007330 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d105      	bne.n	8007318 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800730c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007310:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2208      	movs	r2, #8
 800731e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007326:	f043 0208 	orr.w	r2, r3, #8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007338:	2b00      	cmp	r3, #0
 800733a:	d012      	beq.n	8007362 <HAL_UART_IRQHandler+0x18a>
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007340:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00c      	beq.n	8007362 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007358:	f043 0220 	orr.w	r2, r3, #32
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 81fd 	beq.w	8007768 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800736e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00d      	beq.n	8007396 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800737a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800739c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073aa:	2b40      	cmp	r3, #64	@ 0x40
 80073ac:	d005      	beq.n	80073ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d04f      	beq.n	800745a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fe8e 	bl	80080dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ca:	2b40      	cmp	r3, #64	@ 0x40
 80073cc:	d141      	bne.n	8007452 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3308      	adds	r3, #8
 80073d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80073e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80073e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1d9      	bne.n	80073ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800741e:	2b00      	cmp	r3, #0
 8007420:	d013      	beq.n	800744a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007426:	4a13      	ldr	r2, [pc, #76]	@ (8007474 <HAL_UART_IRQHandler+0x29c>)
 8007428:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800742e:	4618      	mov	r0, r3
 8007430:	f7fc fae5 	bl	80039fe <HAL_DMA_Abort_IT>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d017      	beq.n	800746a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800743e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007444:	4610      	mov	r0, r2
 8007446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007448:	e00f      	b.n	800746a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9a0 	bl	8007790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007450:	e00b      	b.n	800746a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f99c 	bl	8007790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007458:	e007      	b.n	800746a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f998 	bl	8007790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007468:	e17e      	b.n	8007768 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746a:	bf00      	nop
    return;
 800746c:	e17c      	b.n	8007768 <HAL_UART_IRQHandler+0x590>
 800746e:	bf00      	nop
 8007470:	04000120 	.word	0x04000120
 8007474:	080081a5 	.word	0x080081a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800747c:	2b01      	cmp	r3, #1
 800747e:	f040 814c 	bne.w	800771a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007486:	f003 0310 	and.w	r3, r3, #16
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8145 	beq.w	800771a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007494:	f003 0310 	and.w	r3, r3, #16
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 813e 	beq.w	800771a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2210      	movs	r2, #16
 80074a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b0:	2b40      	cmp	r3, #64	@ 0x40
 80074b2:	f040 80b6 	bne.w	8007622 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8150 	beq.w	800776c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80074d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074d6:	429a      	cmp	r2, r3
 80074d8:	f080 8148 	bcs.w	800776c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074f0:	f000 8086 	beq.w	8007600 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800750c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800751e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007522:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800752a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1da      	bne.n	80074f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800754e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3308      	adds	r3, #8
 800755e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800756a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e1      	bne.n	800753e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800758a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800758c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3308      	adds	r3, #8
 800759a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800759e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e3      	bne.n	800757a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075d0:	f023 0310 	bic.w	r3, r3, #16
 80075d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e4      	bne.n	80075c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fc f98f 	bl	800391e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007612:	b29b      	uxth	r3, r3
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	b29b      	uxth	r3, r3
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8c2 	bl	80077a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007620:	e0a4      	b.n	800776c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800762e:	b29b      	uxth	r3, r3
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800763c:	b29b      	uxth	r3, r3
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8096 	beq.w	8007770 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 8091 	beq.w	8007770 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007656:	e853 3f00 	ldrex	r3, [r3]
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800765c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007662:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007670:	647b      	str	r3, [r7, #68]	@ 0x44
 8007672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800767e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e4      	bne.n	800764e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	623b      	str	r3, [r7, #32]
   return(result);
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	f023 0301 	bic.w	r3, r3, #1
 800769a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3308      	adds	r3, #8
 80076a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e3      	bne.n	8007684 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f023 0310 	bic.w	r3, r3, #16
 80076e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	69b9      	ldr	r1, [r7, #24]
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e4      	bne.n	80076d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2202      	movs	r2, #2
 800770a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800770c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f846 	bl	80077a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007718:	e02a      	b.n	8007770 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800771a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00e      	beq.n	8007744 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800772a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772e:	2b00      	cmp	r3, #0
 8007730:	d008      	beq.n	8007744 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d01c      	beq.n	8007774 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
    }
    return;
 8007742:	e017      	b.n	8007774 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <HAL_UART_IRQHandler+0x59e>
 8007750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00c      	beq.n	8007776 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fd37 	bl	80081d0 <UART_EndTransmit_IT>
    return;
 8007762:	e008      	b.n	8007776 <HAL_UART_IRQHandler+0x59e>
      return;
 8007764:	bf00      	nop
 8007766:	e006      	b.n	8007776 <HAL_UART_IRQHandler+0x59e>
    return;
 8007768:	bf00      	nop
 800776a:	e004      	b.n	8007776 <HAL_UART_IRQHandler+0x59e>
      return;
 800776c:	bf00      	nop
 800776e:	e002      	b.n	8007776 <HAL_UART_IRQHandler+0x59e>
      return;
 8007770:	bf00      	nop
 8007772:	e000      	b.n	8007776 <HAL_UART_IRQHandler+0x59e>
    return;
 8007774:	bf00      	nop
  }

}
 8007776:	37e8      	adds	r7, #232	@ 0xe8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4ba6      	ldr	r3, [pc, #664]	@ (8007a80 <UART_SetConfig+0x2c4>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	6979      	ldr	r1, [r7, #20]
 80077f0:	430b      	orrs	r3, r1
 80077f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	430a      	orrs	r2, r1
 800782c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a94      	ldr	r2, [pc, #592]	@ (8007a84 <UART_SetConfig+0x2c8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d120      	bne.n	800787a <UART_SetConfig+0xbe>
 8007838:	4b93      	ldr	r3, [pc, #588]	@ (8007a88 <UART_SetConfig+0x2cc>)
 800783a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d816      	bhi.n	8007874 <UART_SetConfig+0xb8>
 8007846:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <UART_SetConfig+0x90>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	0800785d 	.word	0x0800785d
 8007850:	08007869 	.word	0x08007869
 8007854:	08007863 	.word	0x08007863
 8007858:	0800786f 	.word	0x0800786f
 800785c:	2301      	movs	r3, #1
 800785e:	77fb      	strb	r3, [r7, #31]
 8007860:	e150      	b.n	8007b04 <UART_SetConfig+0x348>
 8007862:	2302      	movs	r3, #2
 8007864:	77fb      	strb	r3, [r7, #31]
 8007866:	e14d      	b.n	8007b04 <UART_SetConfig+0x348>
 8007868:	2304      	movs	r3, #4
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e14a      	b.n	8007b04 <UART_SetConfig+0x348>
 800786e:	2308      	movs	r3, #8
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e147      	b.n	8007b04 <UART_SetConfig+0x348>
 8007874:	2310      	movs	r3, #16
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e144      	b.n	8007b04 <UART_SetConfig+0x348>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a83      	ldr	r2, [pc, #524]	@ (8007a8c <UART_SetConfig+0x2d0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d132      	bne.n	80078ea <UART_SetConfig+0x12e>
 8007884:	4b80      	ldr	r3, [pc, #512]	@ (8007a88 <UART_SetConfig+0x2cc>)
 8007886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788a:	f003 030c 	and.w	r3, r3, #12
 800788e:	2b0c      	cmp	r3, #12
 8007890:	d828      	bhi.n	80078e4 <UART_SetConfig+0x128>
 8007892:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <UART_SetConfig+0xdc>)
 8007894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007898:	080078cd 	.word	0x080078cd
 800789c:	080078e5 	.word	0x080078e5
 80078a0:	080078e5 	.word	0x080078e5
 80078a4:	080078e5 	.word	0x080078e5
 80078a8:	080078d9 	.word	0x080078d9
 80078ac:	080078e5 	.word	0x080078e5
 80078b0:	080078e5 	.word	0x080078e5
 80078b4:	080078e5 	.word	0x080078e5
 80078b8:	080078d3 	.word	0x080078d3
 80078bc:	080078e5 	.word	0x080078e5
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078e5 	.word	0x080078e5
 80078c8:	080078df 	.word	0x080078df
 80078cc:	2300      	movs	r3, #0
 80078ce:	77fb      	strb	r3, [r7, #31]
 80078d0:	e118      	b.n	8007b04 <UART_SetConfig+0x348>
 80078d2:	2302      	movs	r3, #2
 80078d4:	77fb      	strb	r3, [r7, #31]
 80078d6:	e115      	b.n	8007b04 <UART_SetConfig+0x348>
 80078d8:	2304      	movs	r3, #4
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e112      	b.n	8007b04 <UART_SetConfig+0x348>
 80078de:	2308      	movs	r3, #8
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e10f      	b.n	8007b04 <UART_SetConfig+0x348>
 80078e4:	2310      	movs	r3, #16
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e10c      	b.n	8007b04 <UART_SetConfig+0x348>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a68      	ldr	r2, [pc, #416]	@ (8007a90 <UART_SetConfig+0x2d4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d120      	bne.n	8007936 <UART_SetConfig+0x17a>
 80078f4:	4b64      	ldr	r3, [pc, #400]	@ (8007a88 <UART_SetConfig+0x2cc>)
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078fe:	2b30      	cmp	r3, #48	@ 0x30
 8007900:	d013      	beq.n	800792a <UART_SetConfig+0x16e>
 8007902:	2b30      	cmp	r3, #48	@ 0x30
 8007904:	d814      	bhi.n	8007930 <UART_SetConfig+0x174>
 8007906:	2b20      	cmp	r3, #32
 8007908:	d009      	beq.n	800791e <UART_SetConfig+0x162>
 800790a:	2b20      	cmp	r3, #32
 800790c:	d810      	bhi.n	8007930 <UART_SetConfig+0x174>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <UART_SetConfig+0x15c>
 8007912:	2b10      	cmp	r3, #16
 8007914:	d006      	beq.n	8007924 <UART_SetConfig+0x168>
 8007916:	e00b      	b.n	8007930 <UART_SetConfig+0x174>
 8007918:	2300      	movs	r3, #0
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e0f2      	b.n	8007b04 <UART_SetConfig+0x348>
 800791e:	2302      	movs	r3, #2
 8007920:	77fb      	strb	r3, [r7, #31]
 8007922:	e0ef      	b.n	8007b04 <UART_SetConfig+0x348>
 8007924:	2304      	movs	r3, #4
 8007926:	77fb      	strb	r3, [r7, #31]
 8007928:	e0ec      	b.n	8007b04 <UART_SetConfig+0x348>
 800792a:	2308      	movs	r3, #8
 800792c:	77fb      	strb	r3, [r7, #31]
 800792e:	e0e9      	b.n	8007b04 <UART_SetConfig+0x348>
 8007930:	2310      	movs	r3, #16
 8007932:	77fb      	strb	r3, [r7, #31]
 8007934:	e0e6      	b.n	8007b04 <UART_SetConfig+0x348>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a56      	ldr	r2, [pc, #344]	@ (8007a94 <UART_SetConfig+0x2d8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d120      	bne.n	8007982 <UART_SetConfig+0x1c6>
 8007940:	4b51      	ldr	r3, [pc, #324]	@ (8007a88 <UART_SetConfig+0x2cc>)
 8007942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007946:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800794a:	2bc0      	cmp	r3, #192	@ 0xc0
 800794c:	d013      	beq.n	8007976 <UART_SetConfig+0x1ba>
 800794e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007950:	d814      	bhi.n	800797c <UART_SetConfig+0x1c0>
 8007952:	2b80      	cmp	r3, #128	@ 0x80
 8007954:	d009      	beq.n	800796a <UART_SetConfig+0x1ae>
 8007956:	2b80      	cmp	r3, #128	@ 0x80
 8007958:	d810      	bhi.n	800797c <UART_SetConfig+0x1c0>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <UART_SetConfig+0x1a8>
 800795e:	2b40      	cmp	r3, #64	@ 0x40
 8007960:	d006      	beq.n	8007970 <UART_SetConfig+0x1b4>
 8007962:	e00b      	b.n	800797c <UART_SetConfig+0x1c0>
 8007964:	2300      	movs	r3, #0
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	e0cc      	b.n	8007b04 <UART_SetConfig+0x348>
 800796a:	2302      	movs	r3, #2
 800796c:	77fb      	strb	r3, [r7, #31]
 800796e:	e0c9      	b.n	8007b04 <UART_SetConfig+0x348>
 8007970:	2304      	movs	r3, #4
 8007972:	77fb      	strb	r3, [r7, #31]
 8007974:	e0c6      	b.n	8007b04 <UART_SetConfig+0x348>
 8007976:	2308      	movs	r3, #8
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e0c3      	b.n	8007b04 <UART_SetConfig+0x348>
 800797c:	2310      	movs	r3, #16
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e0c0      	b.n	8007b04 <UART_SetConfig+0x348>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a44      	ldr	r2, [pc, #272]	@ (8007a98 <UART_SetConfig+0x2dc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d125      	bne.n	80079d8 <UART_SetConfig+0x21c>
 800798c:	4b3e      	ldr	r3, [pc, #248]	@ (8007a88 <UART_SetConfig+0x2cc>)
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007996:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800799a:	d017      	beq.n	80079cc <UART_SetConfig+0x210>
 800799c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079a0:	d817      	bhi.n	80079d2 <UART_SetConfig+0x216>
 80079a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079a6:	d00b      	beq.n	80079c0 <UART_SetConfig+0x204>
 80079a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ac:	d811      	bhi.n	80079d2 <UART_SetConfig+0x216>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <UART_SetConfig+0x1fe>
 80079b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b6:	d006      	beq.n	80079c6 <UART_SetConfig+0x20a>
 80079b8:	e00b      	b.n	80079d2 <UART_SetConfig+0x216>
 80079ba:	2300      	movs	r3, #0
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e0a1      	b.n	8007b04 <UART_SetConfig+0x348>
 80079c0:	2302      	movs	r3, #2
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	e09e      	b.n	8007b04 <UART_SetConfig+0x348>
 80079c6:	2304      	movs	r3, #4
 80079c8:	77fb      	strb	r3, [r7, #31]
 80079ca:	e09b      	b.n	8007b04 <UART_SetConfig+0x348>
 80079cc:	2308      	movs	r3, #8
 80079ce:	77fb      	strb	r3, [r7, #31]
 80079d0:	e098      	b.n	8007b04 <UART_SetConfig+0x348>
 80079d2:	2310      	movs	r3, #16
 80079d4:	77fb      	strb	r3, [r7, #31]
 80079d6:	e095      	b.n	8007b04 <UART_SetConfig+0x348>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2f      	ldr	r2, [pc, #188]	@ (8007a9c <UART_SetConfig+0x2e0>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d125      	bne.n	8007a2e <UART_SetConfig+0x272>
 80079e2:	4b29      	ldr	r3, [pc, #164]	@ (8007a88 <UART_SetConfig+0x2cc>)
 80079e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079f0:	d017      	beq.n	8007a22 <UART_SetConfig+0x266>
 80079f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079f6:	d817      	bhi.n	8007a28 <UART_SetConfig+0x26c>
 80079f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079fc:	d00b      	beq.n	8007a16 <UART_SetConfig+0x25a>
 80079fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a02:	d811      	bhi.n	8007a28 <UART_SetConfig+0x26c>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <UART_SetConfig+0x254>
 8007a08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a0c:	d006      	beq.n	8007a1c <UART_SetConfig+0x260>
 8007a0e:	e00b      	b.n	8007a28 <UART_SetConfig+0x26c>
 8007a10:	2301      	movs	r3, #1
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e076      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a16:	2302      	movs	r3, #2
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e073      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e070      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a22:	2308      	movs	r3, #8
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e06d      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e06a      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa0 <UART_SetConfig+0x2e4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d138      	bne.n	8007aaa <UART_SetConfig+0x2ee>
 8007a38:	4b13      	ldr	r3, [pc, #76]	@ (8007a88 <UART_SetConfig+0x2cc>)
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007a42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a46:	d017      	beq.n	8007a78 <UART_SetConfig+0x2bc>
 8007a48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007a4c:	d82a      	bhi.n	8007aa4 <UART_SetConfig+0x2e8>
 8007a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a52:	d00b      	beq.n	8007a6c <UART_SetConfig+0x2b0>
 8007a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a58:	d824      	bhi.n	8007aa4 <UART_SetConfig+0x2e8>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <UART_SetConfig+0x2aa>
 8007a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a62:	d006      	beq.n	8007a72 <UART_SetConfig+0x2b6>
 8007a64:	e01e      	b.n	8007aa4 <UART_SetConfig+0x2e8>
 8007a66:	2300      	movs	r3, #0
 8007a68:	77fb      	strb	r3, [r7, #31]
 8007a6a:	e04b      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	77fb      	strb	r3, [r7, #31]
 8007a70:	e048      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a72:	2304      	movs	r3, #4
 8007a74:	77fb      	strb	r3, [r7, #31]
 8007a76:	e045      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	77fb      	strb	r3, [r7, #31]
 8007a7c:	e042      	b.n	8007b04 <UART_SetConfig+0x348>
 8007a7e:	bf00      	nop
 8007a80:	efff69f3 	.word	0xefff69f3
 8007a84:	40011000 	.word	0x40011000
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	40004400 	.word	0x40004400
 8007a90:	40004800 	.word	0x40004800
 8007a94:	40004c00 	.word	0x40004c00
 8007a98:	40005000 	.word	0x40005000
 8007a9c:	40011400 	.word	0x40011400
 8007aa0:	40007800 	.word	0x40007800
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e02c      	b.n	8007b04 <UART_SetConfig+0x348>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a72      	ldr	r2, [pc, #456]	@ (8007c78 <UART_SetConfig+0x4bc>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d125      	bne.n	8007b00 <UART_SetConfig+0x344>
 8007ab4:	4b71      	ldr	r3, [pc, #452]	@ (8007c7c <UART_SetConfig+0x4c0>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007abe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ac2:	d017      	beq.n	8007af4 <UART_SetConfig+0x338>
 8007ac4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ac8:	d817      	bhi.n	8007afa <UART_SetConfig+0x33e>
 8007aca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ace:	d00b      	beq.n	8007ae8 <UART_SetConfig+0x32c>
 8007ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ad4:	d811      	bhi.n	8007afa <UART_SetConfig+0x33e>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <UART_SetConfig+0x326>
 8007ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ade:	d006      	beq.n	8007aee <UART_SetConfig+0x332>
 8007ae0:	e00b      	b.n	8007afa <UART_SetConfig+0x33e>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	77fb      	strb	r3, [r7, #31]
 8007ae6:	e00d      	b.n	8007b04 <UART_SetConfig+0x348>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e00a      	b.n	8007b04 <UART_SetConfig+0x348>
 8007aee:	2304      	movs	r3, #4
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e007      	b.n	8007b04 <UART_SetConfig+0x348>
 8007af4:	2308      	movs	r3, #8
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e004      	b.n	8007b04 <UART_SetConfig+0x348>
 8007afa:	2310      	movs	r3, #16
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e001      	b.n	8007b04 <UART_SetConfig+0x348>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b0c:	d15b      	bne.n	8007bc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007b0e:	7ffb      	ldrb	r3, [r7, #31]
 8007b10:	2b08      	cmp	r3, #8
 8007b12:	d828      	bhi.n	8007b66 <UART_SetConfig+0x3aa>
 8007b14:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <UART_SetConfig+0x360>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b49 	.word	0x08007b49
 8007b24:	08007b51 	.word	0x08007b51
 8007b28:	08007b67 	.word	0x08007b67
 8007b2c:	08007b57 	.word	0x08007b57
 8007b30:	08007b67 	.word	0x08007b67
 8007b34:	08007b67 	.word	0x08007b67
 8007b38:	08007b67 	.word	0x08007b67
 8007b3c:	08007b5f 	.word	0x08007b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b40:	f7fc fe48 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007b44:	61b8      	str	r0, [r7, #24]
        break;
 8007b46:	e013      	b.n	8007b70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b48:	f7fc fe58 	bl	80047fc <HAL_RCC_GetPCLK2Freq>
 8007b4c:	61b8      	str	r0, [r7, #24]
        break;
 8007b4e:	e00f      	b.n	8007b70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b50:	4b4b      	ldr	r3, [pc, #300]	@ (8007c80 <UART_SetConfig+0x4c4>)
 8007b52:	61bb      	str	r3, [r7, #24]
        break;
 8007b54:	e00c      	b.n	8007b70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b56:	f7fc fd2b 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8007b5a:	61b8      	str	r0, [r7, #24]
        break;
 8007b5c:	e008      	b.n	8007b70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b62:	61bb      	str	r3, [r7, #24]
        break;
 8007b64:	e004      	b.n	8007b70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	77bb      	strb	r3, [r7, #30]
        break;
 8007b6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d074      	beq.n	8007c60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	005a      	lsls	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	085b      	lsrs	r3, r3, #1
 8007b80:	441a      	add	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	d916      	bls.n	8007bc0 <UART_SetConfig+0x404>
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b98:	d212      	bcs.n	8007bc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f023 030f 	bic.w	r3, r3, #15
 8007ba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	89fb      	ldrh	r3, [r7, #14]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	89fa      	ldrh	r2, [r7, #14]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	e04f      	b.n	8007c60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	77bb      	strb	r3, [r7, #30]
 8007bc4:	e04c      	b.n	8007c60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bc6:	7ffb      	ldrb	r3, [r7, #31]
 8007bc8:	2b08      	cmp	r3, #8
 8007bca:	d828      	bhi.n	8007c1e <UART_SetConfig+0x462>
 8007bcc:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd4 <UART_SetConfig+0x418>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bf9 	.word	0x08007bf9
 8007bd8:	08007c01 	.word	0x08007c01
 8007bdc:	08007c09 	.word	0x08007c09
 8007be0:	08007c1f 	.word	0x08007c1f
 8007be4:	08007c0f 	.word	0x08007c0f
 8007be8:	08007c1f 	.word	0x08007c1f
 8007bec:	08007c1f 	.word	0x08007c1f
 8007bf0:	08007c1f 	.word	0x08007c1f
 8007bf4:	08007c17 	.word	0x08007c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf8:	f7fc fdec 	bl	80047d4 <HAL_RCC_GetPCLK1Freq>
 8007bfc:	61b8      	str	r0, [r7, #24]
        break;
 8007bfe:	e013      	b.n	8007c28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c00:	f7fc fdfc 	bl	80047fc <HAL_RCC_GetPCLK2Freq>
 8007c04:	61b8      	str	r0, [r7, #24]
        break;
 8007c06:	e00f      	b.n	8007c28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c08:	4b1d      	ldr	r3, [pc, #116]	@ (8007c80 <UART_SetConfig+0x4c4>)
 8007c0a:	61bb      	str	r3, [r7, #24]
        break;
 8007c0c:	e00c      	b.n	8007c28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c0e:	f7fc fccf 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
 8007c12:	61b8      	str	r0, [r7, #24]
        break;
 8007c14:	e008      	b.n	8007c28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c1a:	61bb      	str	r3, [r7, #24]
        break;
 8007c1c:	e004      	b.n	8007c28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	77bb      	strb	r3, [r7, #30]
        break;
 8007c26:	bf00      	nop
    }

    if (pclk != 0U)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d018      	beq.n	8007c60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	085a      	lsrs	r2, r3, #1
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	441a      	add	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b0f      	cmp	r3, #15
 8007c46:	d909      	bls.n	8007c5c <UART_SetConfig+0x4a0>
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c4e:	d205      	bcs.n	8007c5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	60da      	str	r2, [r3, #12]
 8007c5a:	e001      	b.n	8007c60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3720      	adds	r7, #32
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	40007c00 	.word	0x40007c00
 8007c7c:	40023800 	.word	0x40023800
 8007c80:	00f42400 	.word	0x00f42400

08007c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	f003 0308 	and.w	r3, r3, #8
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01a      	beq.n	8007d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d82:	d10a      	bne.n	8007d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08c      	sub	sp, #48	@ 0x30
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dd8:	f7fb fc60 	bl	800369c <HAL_GetTick>
 8007ddc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0308 	and.w	r3, r3, #8
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d12e      	bne.n	8007e4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	2200      	movs	r2, #0
 8007df6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f83b 	bl	8007e76 <UART_WaitOnFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d021      	beq.n	8007e4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e1a:	623b      	str	r3, [r7, #32]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	69b9      	ldr	r1, [r7, #24]
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	617b      	str	r3, [r7, #20]
   return(result);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e011      	b.n	8007e6e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3728      	adds	r7, #40	@ 0x28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e86:	e04f      	b.n	8007f28 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d04b      	beq.n	8007f28 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e90:	f7fb fc04 	bl	800369c <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d302      	bcc.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e04e      	b.n	8007f48 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d037      	beq.n	8007f28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b80      	cmp	r3, #128	@ 0x80
 8007ebc:	d034      	beq.n	8007f28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b40      	cmp	r3, #64	@ 0x40
 8007ec2:	d031      	beq.n	8007f28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d110      	bne.n	8007ef4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f000 f8fe 	bl	80080dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e029      	b.n	8007f48 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69db      	ldr	r3, [r3, #28]
 8007efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f02:	d111      	bne.n	8007f28 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f8e4 	bl	80080dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e00f      	b.n	8007f48 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	69da      	ldr	r2, [r3, #28]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4013      	ands	r3, r2
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d0a0      	beq.n	8007e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b097      	sub	sp, #92	@ 0x5c
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	88fa      	ldrh	r2, [r7, #6]
 8007f70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f82:	d10e      	bne.n	8007fa2 <UART_Start_Receive_IT+0x52>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <UART_Start_Receive_IT+0x48>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007f92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007f96:	e02d      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	22ff      	movs	r2, #255	@ 0xff
 8007f9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fa0:	e028      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10d      	bne.n	8007fc6 <UART_Start_Receive_IT+0x76>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <UART_Start_Receive_IT+0x6c>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	22ff      	movs	r2, #255	@ 0xff
 8007fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fba:	e01b      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	227f      	movs	r2, #127	@ 0x7f
 8007fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fc4:	e016      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fce:	d10d      	bne.n	8007fec <UART_Start_Receive_IT+0x9c>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d104      	bne.n	8007fe2 <UART_Start_Receive_IT+0x92>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	227f      	movs	r2, #127	@ 0x7f
 8007fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fe0:	e008      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	223f      	movs	r2, #63	@ 0x3f
 8007fe6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007fea:	e003      	b.n	8007ff4 <UART_Start_Receive_IT+0xa4>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2222      	movs	r2, #34	@ 0x22
 8008000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3308      	adds	r3, #8
 800800a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	f043 0301 	orr.w	r3, r3, #1
 800801a:	657b      	str	r3, [r7, #84]	@ 0x54
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008024:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008026:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800802a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e5      	bne.n	8008004 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008040:	d107      	bne.n	8008052 <UART_Start_Receive_IT+0x102>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d103      	bne.n	8008052 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4a21      	ldr	r2, [pc, #132]	@ (80080d4 <UART_Start_Receive_IT+0x184>)
 800804e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008050:	e002      	b.n	8008058 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4a20      	ldr	r2, [pc, #128]	@ (80080d8 <UART_Start_Receive_IT+0x188>)
 8008056:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d019      	beq.n	8008094 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008080:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008084:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800808c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e6      	bne.n	8008060 <UART_Start_Receive_IT+0x110>
 8008092:	e018      	b.n	80080c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	613b      	str	r3, [r7, #16]
   return(result);
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f043 0320 	orr.w	r3, r3, #32
 80080a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080b2:	623b      	str	r3, [r7, #32]
 80080b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	69f9      	ldr	r1, [r7, #28]
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	61bb      	str	r3, [r7, #24]
   return(result);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e6      	bne.n	8008094 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	375c      	adds	r7, #92	@ 0x5c
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	080083cd 	.word	0x080083cd
 80080d8:	08008225 	.word	0x08008225

080080dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b095      	sub	sp, #84	@ 0x54
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ec:	e853 3f00 	ldrex	r3, [r3]
 80080f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	461a      	mov	r2, r3
 8008100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008102:	643b      	str	r3, [r7, #64]	@ 0x40
 8008104:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e6      	bne.n	80080e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	61fb      	str	r3, [r7, #28]
   return(result);
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	f023 0301 	bic.w	r3, r3, #1
 800812c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3308      	adds	r3, #8
 8008134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800813c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e5      	bne.n	8008116 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800814e:	2b01      	cmp	r3, #1
 8008150:	d118      	bne.n	8008184 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f023 0310 	bic.w	r3, r3, #16
 8008166:	647b      	str	r3, [r7, #68]	@ 0x44
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6979      	ldr	r1, [r7, #20]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	613b      	str	r3, [r7, #16]
   return(result);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e6      	bne.n	8008152 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008198:	bf00      	nop
 800819a:	3754      	adds	r7, #84	@ 0x54
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7ff fae4 	bl	8007790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	61bb      	str	r3, [r7, #24]
 80081f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6979      	ldr	r1, [r7, #20]
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	613b      	str	r3, [r7, #16]
   return(result);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e6      	bne.n	80081d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fab0 	bl	800777c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800821c:	bf00      	nop
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b09c      	sub	sp, #112	@ 0x70
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008232:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800823c:	2b22      	cmp	r3, #34	@ 0x22
 800823e:	f040 80b9 	bne.w	80083b4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008248:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800824c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008250:	b2d9      	uxtb	r1, r3
 8008252:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008256:	b2da      	uxtb	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825c:	400a      	ands	r2, r1
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008284:	b29b      	uxth	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	f040 809c 	bne.w	80083c4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800829a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800829c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e6      	bne.n	800828c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80082de:	647a      	str	r2, [r7, #68]	@ 0x44
 80082e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e5      	bne.n	80082be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d018      	beq.n	8008346 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	623b      	str	r3, [r7, #32]
   return(result);
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008328:	663b      	str	r3, [r7, #96]	@ 0x60
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008332:	633b      	str	r3, [r7, #48]	@ 0x30
 8008334:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e6      	bne.n	8008314 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800834a:	2b01      	cmp	r3, #1
 800834c:	d12e      	bne.n	80083ac <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	60fb      	str	r3, [r7, #12]
   return(result);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f023 0310 	bic.w	r3, r3, #16
 8008368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	461a      	mov	r2, r3
 8008370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008372:	61fb      	str	r3, [r7, #28]
 8008374:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	69b9      	ldr	r1, [r7, #24]
 8008378:	69fa      	ldr	r2, [r7, #28]
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	617b      	str	r3, [r7, #20]
   return(result);
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e6      	bne.n	8008354 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b10      	cmp	r3, #16
 8008392:	d103      	bne.n	800839c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2210      	movs	r2, #16
 800839a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff f9fd 	bl	80077a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083aa:	e00b      	b.n	80083c4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7fa f9b9 	bl	8002724 <HAL_UART_RxCpltCallback>
}
 80083b2:	e007      	b.n	80083c4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	699a      	ldr	r2, [r3, #24]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0208 	orr.w	r2, r2, #8
 80083c2:	619a      	str	r2, [r3, #24]
}
 80083c4:	bf00      	nop
 80083c6:	3770      	adds	r7, #112	@ 0x70
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b09c      	sub	sp, #112	@ 0x70
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083e4:	2b22      	cmp	r3, #34	@ 0x22
 80083e6:	f040 80b9 	bne.w	800855c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80083fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80083fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008402:	4013      	ands	r3, r2
 8008404:	b29a      	uxth	r2, r3
 8008406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008408:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840e:	1c9a      	adds	r2, r3, #2
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800842c:	b29b      	uxth	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 809c 	bne.w	800856c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008448:	667b      	str	r3, [r7, #100]	@ 0x64
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008452:	657b      	str	r3, [r7, #84]	@ 0x54
 8008454:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e6      	bne.n	8008434 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3308      	adds	r3, #8
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	663b      	str	r3, [r7, #96]	@ 0x60
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008486:	643a      	str	r2, [r7, #64]	@ 0x40
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800848c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e5      	bne.n	8008466 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d018      	beq.n	80084ee <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80084d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e6      	bne.n	80084bc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d12e      	bne.n	8008554 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	60bb      	str	r3, [r7, #8]
   return(result);
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f023 0310 	bic.w	r3, r3, #16
 8008510:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	461a      	mov	r2, r3
 8008518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800851a:	61bb      	str	r3, [r7, #24]
 800851c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6979      	ldr	r1, [r7, #20]
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	613b      	str	r3, [r7, #16]
   return(result);
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e6      	bne.n	80084fc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69db      	ldr	r3, [r3, #28]
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b10      	cmp	r3, #16
 800853a:	d103      	bne.n	8008544 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2210      	movs	r2, #16
 8008542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff f929 	bl	80077a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008552:	e00b      	b.n	800856c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7fa f8e5 	bl	8002724 <HAL_UART_RxCpltCallback>
}
 800855a:	e007      	b.n	800856c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0208 	orr.w	r2, r2, #8
 800856a:	619a      	str	r2, [r3, #24]
}
 800856c:	bf00      	nop
 800856e:	3770      	adds	r7, #112	@ 0x70
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <__cvt>:
 8008574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	ec57 6b10 	vmov	r6, r7, d0
 800857c:	2f00      	cmp	r7, #0
 800857e:	460c      	mov	r4, r1
 8008580:	4619      	mov	r1, r3
 8008582:	463b      	mov	r3, r7
 8008584:	bfbb      	ittet	lt
 8008586:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800858a:	461f      	movlt	r7, r3
 800858c:	2300      	movge	r3, #0
 800858e:	232d      	movlt	r3, #45	@ 0x2d
 8008590:	700b      	strb	r3, [r1, #0]
 8008592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008594:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008598:	4691      	mov	r9, r2
 800859a:	f023 0820 	bic.w	r8, r3, #32
 800859e:	bfbc      	itt	lt
 80085a0:	4632      	movlt	r2, r6
 80085a2:	4616      	movlt	r6, r2
 80085a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085a8:	d005      	beq.n	80085b6 <__cvt+0x42>
 80085aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80085ae:	d100      	bne.n	80085b2 <__cvt+0x3e>
 80085b0:	3401      	adds	r4, #1
 80085b2:	2102      	movs	r1, #2
 80085b4:	e000      	b.n	80085b8 <__cvt+0x44>
 80085b6:	2103      	movs	r1, #3
 80085b8:	ab03      	add	r3, sp, #12
 80085ba:	9301      	str	r3, [sp, #4]
 80085bc:	ab02      	add	r3, sp, #8
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	ec47 6b10 	vmov	d0, r6, r7
 80085c4:	4653      	mov	r3, sl
 80085c6:	4622      	mov	r2, r4
 80085c8:	f001 f9a6 	bl	8009918 <_dtoa_r>
 80085cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80085d0:	4605      	mov	r5, r0
 80085d2:	d119      	bne.n	8008608 <__cvt+0x94>
 80085d4:	f019 0f01 	tst.w	r9, #1
 80085d8:	d00e      	beq.n	80085f8 <__cvt+0x84>
 80085da:	eb00 0904 	add.w	r9, r0, r4
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	4630      	mov	r0, r6
 80085e4:	4639      	mov	r1, r7
 80085e6:	f7f8 fa8f 	bl	8000b08 <__aeabi_dcmpeq>
 80085ea:	b108      	cbz	r0, 80085f0 <__cvt+0x7c>
 80085ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80085f0:	2230      	movs	r2, #48	@ 0x30
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	454b      	cmp	r3, r9
 80085f6:	d31e      	bcc.n	8008636 <__cvt+0xc2>
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085fc:	1b5b      	subs	r3, r3, r5
 80085fe:	4628      	mov	r0, r5
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	b004      	add	sp, #16
 8008604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008608:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800860c:	eb00 0904 	add.w	r9, r0, r4
 8008610:	d1e5      	bne.n	80085de <__cvt+0x6a>
 8008612:	7803      	ldrb	r3, [r0, #0]
 8008614:	2b30      	cmp	r3, #48	@ 0x30
 8008616:	d10a      	bne.n	800862e <__cvt+0xba>
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	4630      	mov	r0, r6
 800861e:	4639      	mov	r1, r7
 8008620:	f7f8 fa72 	bl	8000b08 <__aeabi_dcmpeq>
 8008624:	b918      	cbnz	r0, 800862e <__cvt+0xba>
 8008626:	f1c4 0401 	rsb	r4, r4, #1
 800862a:	f8ca 4000 	str.w	r4, [sl]
 800862e:	f8da 3000 	ldr.w	r3, [sl]
 8008632:	4499      	add	r9, r3
 8008634:	e7d3      	b.n	80085de <__cvt+0x6a>
 8008636:	1c59      	adds	r1, r3, #1
 8008638:	9103      	str	r1, [sp, #12]
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	e7d9      	b.n	80085f2 <__cvt+0x7e>

0800863e <__exponent>:
 800863e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008640:	2900      	cmp	r1, #0
 8008642:	bfba      	itte	lt
 8008644:	4249      	neglt	r1, r1
 8008646:	232d      	movlt	r3, #45	@ 0x2d
 8008648:	232b      	movge	r3, #43	@ 0x2b
 800864a:	2909      	cmp	r1, #9
 800864c:	7002      	strb	r2, [r0, #0]
 800864e:	7043      	strb	r3, [r0, #1]
 8008650:	dd29      	ble.n	80086a6 <__exponent+0x68>
 8008652:	f10d 0307 	add.w	r3, sp, #7
 8008656:	461d      	mov	r5, r3
 8008658:	270a      	movs	r7, #10
 800865a:	461a      	mov	r2, r3
 800865c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008660:	fb07 1416 	mls	r4, r7, r6, r1
 8008664:	3430      	adds	r4, #48	@ 0x30
 8008666:	f802 4c01 	strb.w	r4, [r2, #-1]
 800866a:	460c      	mov	r4, r1
 800866c:	2c63      	cmp	r4, #99	@ 0x63
 800866e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008672:	4631      	mov	r1, r6
 8008674:	dcf1      	bgt.n	800865a <__exponent+0x1c>
 8008676:	3130      	adds	r1, #48	@ 0x30
 8008678:	1e94      	subs	r4, r2, #2
 800867a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800867e:	1c41      	adds	r1, r0, #1
 8008680:	4623      	mov	r3, r4
 8008682:	42ab      	cmp	r3, r5
 8008684:	d30a      	bcc.n	800869c <__exponent+0x5e>
 8008686:	f10d 0309 	add.w	r3, sp, #9
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	42ac      	cmp	r4, r5
 800868e:	bf88      	it	hi
 8008690:	2300      	movhi	r3, #0
 8008692:	3302      	adds	r3, #2
 8008694:	4403      	add	r3, r0
 8008696:	1a18      	subs	r0, r3, r0
 8008698:	b003      	add	sp, #12
 800869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800869c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80086a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80086a4:	e7ed      	b.n	8008682 <__exponent+0x44>
 80086a6:	2330      	movs	r3, #48	@ 0x30
 80086a8:	3130      	adds	r1, #48	@ 0x30
 80086aa:	7083      	strb	r3, [r0, #2]
 80086ac:	70c1      	strb	r1, [r0, #3]
 80086ae:	1d03      	adds	r3, r0, #4
 80086b0:	e7f1      	b.n	8008696 <__exponent+0x58>
	...

080086b4 <_printf_float>:
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	b08d      	sub	sp, #52	@ 0x34
 80086ba:	460c      	mov	r4, r1
 80086bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80086c0:	4616      	mov	r6, r2
 80086c2:	461f      	mov	r7, r3
 80086c4:	4605      	mov	r5, r0
 80086c6:	f001 f81f 	bl	8009708 <_localeconv_r>
 80086ca:	6803      	ldr	r3, [r0, #0]
 80086cc:	9304      	str	r3, [sp, #16]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f7 fdee 	bl	80002b0 <strlen>
 80086d4:	2300      	movs	r3, #0
 80086d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d8:	f8d8 3000 	ldr.w	r3, [r8]
 80086dc:	9005      	str	r0, [sp, #20]
 80086de:	3307      	adds	r3, #7
 80086e0:	f023 0307 	bic.w	r3, r3, #7
 80086e4:	f103 0208 	add.w	r2, r3, #8
 80086e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086ec:	f8d4 b000 	ldr.w	fp, [r4]
 80086f0:	f8c8 2000 	str.w	r2, [r8]
 80086f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086fc:	9307      	str	r3, [sp, #28]
 80086fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008702:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800870a:	4b9c      	ldr	r3, [pc, #624]	@ (800897c <_printf_float+0x2c8>)
 800870c:	f04f 32ff 	mov.w	r2, #4294967295
 8008710:	f7f8 fa2c 	bl	8000b6c <__aeabi_dcmpun>
 8008714:	bb70      	cbnz	r0, 8008774 <_printf_float+0xc0>
 8008716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800871a:	4b98      	ldr	r3, [pc, #608]	@ (800897c <_printf_float+0x2c8>)
 800871c:	f04f 32ff 	mov.w	r2, #4294967295
 8008720:	f7f8 fa06 	bl	8000b30 <__aeabi_dcmple>
 8008724:	bb30      	cbnz	r0, 8008774 <_printf_float+0xc0>
 8008726:	2200      	movs	r2, #0
 8008728:	2300      	movs	r3, #0
 800872a:	4640      	mov	r0, r8
 800872c:	4649      	mov	r1, r9
 800872e:	f7f8 f9f5 	bl	8000b1c <__aeabi_dcmplt>
 8008732:	b110      	cbz	r0, 800873a <_printf_float+0x86>
 8008734:	232d      	movs	r3, #45	@ 0x2d
 8008736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800873a:	4a91      	ldr	r2, [pc, #580]	@ (8008980 <_printf_float+0x2cc>)
 800873c:	4b91      	ldr	r3, [pc, #580]	@ (8008984 <_printf_float+0x2d0>)
 800873e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008742:	bf94      	ite	ls
 8008744:	4690      	movls	r8, r2
 8008746:	4698      	movhi	r8, r3
 8008748:	2303      	movs	r3, #3
 800874a:	6123      	str	r3, [r4, #16]
 800874c:	f02b 0304 	bic.w	r3, fp, #4
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	f04f 0900 	mov.w	r9, #0
 8008756:	9700      	str	r7, [sp, #0]
 8008758:	4633      	mov	r3, r6
 800875a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800875c:	4621      	mov	r1, r4
 800875e:	4628      	mov	r0, r5
 8008760:	f000 f9d2 	bl	8008b08 <_printf_common>
 8008764:	3001      	adds	r0, #1
 8008766:	f040 808d 	bne.w	8008884 <_printf_float+0x1d0>
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	b00d      	add	sp, #52	@ 0x34
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	4642      	mov	r2, r8
 8008776:	464b      	mov	r3, r9
 8008778:	4640      	mov	r0, r8
 800877a:	4649      	mov	r1, r9
 800877c:	f7f8 f9f6 	bl	8000b6c <__aeabi_dcmpun>
 8008780:	b140      	cbz	r0, 8008794 <_printf_float+0xe0>
 8008782:	464b      	mov	r3, r9
 8008784:	2b00      	cmp	r3, #0
 8008786:	bfbc      	itt	lt
 8008788:	232d      	movlt	r3, #45	@ 0x2d
 800878a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800878e:	4a7e      	ldr	r2, [pc, #504]	@ (8008988 <_printf_float+0x2d4>)
 8008790:	4b7e      	ldr	r3, [pc, #504]	@ (800898c <_printf_float+0x2d8>)
 8008792:	e7d4      	b.n	800873e <_printf_float+0x8a>
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800879a:	9206      	str	r2, [sp, #24]
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	d13b      	bne.n	8008818 <_printf_float+0x164>
 80087a0:	2306      	movs	r3, #6
 80087a2:	6063      	str	r3, [r4, #4]
 80087a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80087a8:	2300      	movs	r3, #0
 80087aa:	6022      	str	r2, [r4, #0]
 80087ac:	9303      	str	r3, [sp, #12]
 80087ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80087b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80087b4:	ab09      	add	r3, sp, #36	@ 0x24
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	6861      	ldr	r1, [r4, #4]
 80087ba:	ec49 8b10 	vmov	d0, r8, r9
 80087be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80087c2:	4628      	mov	r0, r5
 80087c4:	f7ff fed6 	bl	8008574 <__cvt>
 80087c8:	9b06      	ldr	r3, [sp, #24]
 80087ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087cc:	2b47      	cmp	r3, #71	@ 0x47
 80087ce:	4680      	mov	r8, r0
 80087d0:	d129      	bne.n	8008826 <_printf_float+0x172>
 80087d2:	1cc8      	adds	r0, r1, #3
 80087d4:	db02      	blt.n	80087dc <_printf_float+0x128>
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	4299      	cmp	r1, r3
 80087da:	dd41      	ble.n	8008860 <_printf_float+0x1ac>
 80087dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80087e0:	fa5f fa8a 	uxtb.w	sl, sl
 80087e4:	3901      	subs	r1, #1
 80087e6:	4652      	mov	r2, sl
 80087e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80087ee:	f7ff ff26 	bl	800863e <__exponent>
 80087f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087f4:	1813      	adds	r3, r2, r0
 80087f6:	2a01      	cmp	r2, #1
 80087f8:	4681      	mov	r9, r0
 80087fa:	6123      	str	r3, [r4, #16]
 80087fc:	dc02      	bgt.n	8008804 <_printf_float+0x150>
 80087fe:	6822      	ldr	r2, [r4, #0]
 8008800:	07d2      	lsls	r2, r2, #31
 8008802:	d501      	bpl.n	8008808 <_printf_float+0x154>
 8008804:	3301      	adds	r3, #1
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0a2      	beq.n	8008756 <_printf_float+0xa2>
 8008810:	232d      	movs	r3, #45	@ 0x2d
 8008812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008816:	e79e      	b.n	8008756 <_printf_float+0xa2>
 8008818:	9a06      	ldr	r2, [sp, #24]
 800881a:	2a47      	cmp	r2, #71	@ 0x47
 800881c:	d1c2      	bne.n	80087a4 <_printf_float+0xf0>
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1c0      	bne.n	80087a4 <_printf_float+0xf0>
 8008822:	2301      	movs	r3, #1
 8008824:	e7bd      	b.n	80087a2 <_printf_float+0xee>
 8008826:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800882a:	d9db      	bls.n	80087e4 <_printf_float+0x130>
 800882c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008830:	d118      	bne.n	8008864 <_printf_float+0x1b0>
 8008832:	2900      	cmp	r1, #0
 8008834:	6863      	ldr	r3, [r4, #4]
 8008836:	dd0b      	ble.n	8008850 <_printf_float+0x19c>
 8008838:	6121      	str	r1, [r4, #16]
 800883a:	b913      	cbnz	r3, 8008842 <_printf_float+0x18e>
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	07d0      	lsls	r0, r2, #31
 8008840:	d502      	bpl.n	8008848 <_printf_float+0x194>
 8008842:	3301      	adds	r3, #1
 8008844:	440b      	add	r3, r1
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	65a1      	str	r1, [r4, #88]	@ 0x58
 800884a:	f04f 0900 	mov.w	r9, #0
 800884e:	e7db      	b.n	8008808 <_printf_float+0x154>
 8008850:	b913      	cbnz	r3, 8008858 <_printf_float+0x1a4>
 8008852:	6822      	ldr	r2, [r4, #0]
 8008854:	07d2      	lsls	r2, r2, #31
 8008856:	d501      	bpl.n	800885c <_printf_float+0x1a8>
 8008858:	3302      	adds	r3, #2
 800885a:	e7f4      	b.n	8008846 <_printf_float+0x192>
 800885c:	2301      	movs	r3, #1
 800885e:	e7f2      	b.n	8008846 <_printf_float+0x192>
 8008860:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008866:	4299      	cmp	r1, r3
 8008868:	db05      	blt.n	8008876 <_printf_float+0x1c2>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	6121      	str	r1, [r4, #16]
 800886e:	07d8      	lsls	r0, r3, #31
 8008870:	d5ea      	bpl.n	8008848 <_printf_float+0x194>
 8008872:	1c4b      	adds	r3, r1, #1
 8008874:	e7e7      	b.n	8008846 <_printf_float+0x192>
 8008876:	2900      	cmp	r1, #0
 8008878:	bfd4      	ite	le
 800887a:	f1c1 0202 	rsble	r2, r1, #2
 800887e:	2201      	movgt	r2, #1
 8008880:	4413      	add	r3, r2
 8008882:	e7e0      	b.n	8008846 <_printf_float+0x192>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	055a      	lsls	r2, r3, #21
 8008888:	d407      	bmi.n	800889a <_printf_float+0x1e6>
 800888a:	6923      	ldr	r3, [r4, #16]
 800888c:	4642      	mov	r2, r8
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	d12b      	bne.n	80088f0 <_printf_float+0x23c>
 8008898:	e767      	b.n	800876a <_printf_float+0xb6>
 800889a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800889e:	f240 80dd 	bls.w	8008a5c <_printf_float+0x3a8>
 80088a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088a6:	2200      	movs	r2, #0
 80088a8:	2300      	movs	r3, #0
 80088aa:	f7f8 f92d 	bl	8000b08 <__aeabi_dcmpeq>
 80088ae:	2800      	cmp	r0, #0
 80088b0:	d033      	beq.n	800891a <_printf_float+0x266>
 80088b2:	4a37      	ldr	r2, [pc, #220]	@ (8008990 <_printf_float+0x2dc>)
 80088b4:	2301      	movs	r3, #1
 80088b6:	4631      	mov	r1, r6
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b8      	blx	r7
 80088bc:	3001      	adds	r0, #1
 80088be:	f43f af54 	beq.w	800876a <_printf_float+0xb6>
 80088c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80088c6:	4543      	cmp	r3, r8
 80088c8:	db02      	blt.n	80088d0 <_printf_float+0x21c>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	07d8      	lsls	r0, r3, #31
 80088ce:	d50f      	bpl.n	80088f0 <_printf_float+0x23c>
 80088d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	f43f af45 	beq.w	800876a <_printf_float+0xb6>
 80088e0:	f04f 0900 	mov.w	r9, #0
 80088e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80088e8:	f104 0a1a 	add.w	sl, r4, #26
 80088ec:	45c8      	cmp	r8, r9
 80088ee:	dc09      	bgt.n	8008904 <_printf_float+0x250>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	079b      	lsls	r3, r3, #30
 80088f4:	f100 8103 	bmi.w	8008afe <_printf_float+0x44a>
 80088f8:	68e0      	ldr	r0, [r4, #12]
 80088fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088fc:	4298      	cmp	r0, r3
 80088fe:	bfb8      	it	lt
 8008900:	4618      	movlt	r0, r3
 8008902:	e734      	b.n	800876e <_printf_float+0xba>
 8008904:	2301      	movs	r3, #1
 8008906:	4652      	mov	r2, sl
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f af2b 	beq.w	800876a <_printf_float+0xb6>
 8008914:	f109 0901 	add.w	r9, r9, #1
 8008918:	e7e8      	b.n	80088ec <_printf_float+0x238>
 800891a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891c:	2b00      	cmp	r3, #0
 800891e:	dc39      	bgt.n	8008994 <_printf_float+0x2e0>
 8008920:	4a1b      	ldr	r2, [pc, #108]	@ (8008990 <_printf_float+0x2dc>)
 8008922:	2301      	movs	r3, #1
 8008924:	4631      	mov	r1, r6
 8008926:	4628      	mov	r0, r5
 8008928:	47b8      	blx	r7
 800892a:	3001      	adds	r0, #1
 800892c:	f43f af1d 	beq.w	800876a <_printf_float+0xb6>
 8008930:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008934:	ea59 0303 	orrs.w	r3, r9, r3
 8008938:	d102      	bne.n	8008940 <_printf_float+0x28c>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	07d9      	lsls	r1, r3, #31
 800893e:	d5d7      	bpl.n	80088f0 <_printf_float+0x23c>
 8008940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008944:	4631      	mov	r1, r6
 8008946:	4628      	mov	r0, r5
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f af0d 	beq.w	800876a <_printf_float+0xb6>
 8008950:	f04f 0a00 	mov.w	sl, #0
 8008954:	f104 0b1a 	add.w	fp, r4, #26
 8008958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800895a:	425b      	negs	r3, r3
 800895c:	4553      	cmp	r3, sl
 800895e:	dc01      	bgt.n	8008964 <_printf_float+0x2b0>
 8008960:	464b      	mov	r3, r9
 8008962:	e793      	b.n	800888c <_printf_float+0x1d8>
 8008964:	2301      	movs	r3, #1
 8008966:	465a      	mov	r2, fp
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f aefb 	beq.w	800876a <_printf_float+0xb6>
 8008974:	f10a 0a01 	add.w	sl, sl, #1
 8008978:	e7ee      	b.n	8008958 <_printf_float+0x2a4>
 800897a:	bf00      	nop
 800897c:	7fefffff 	.word	0x7fefffff
 8008980:	0800d794 	.word	0x0800d794
 8008984:	0800d798 	.word	0x0800d798
 8008988:	0800d79c 	.word	0x0800d79c
 800898c:	0800d7a0 	.word	0x0800d7a0
 8008990:	0800db30 	.word	0x0800db30
 8008994:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008996:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800899a:	4553      	cmp	r3, sl
 800899c:	bfa8      	it	ge
 800899e:	4653      	movge	r3, sl
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	4699      	mov	r9, r3
 80089a4:	dc36      	bgt.n	8008a14 <_printf_float+0x360>
 80089a6:	f04f 0b00 	mov.w	fp, #0
 80089aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089ae:	f104 021a 	add.w	r2, r4, #26
 80089b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089b4:	9306      	str	r3, [sp, #24]
 80089b6:	eba3 0309 	sub.w	r3, r3, r9
 80089ba:	455b      	cmp	r3, fp
 80089bc:	dc31      	bgt.n	8008a22 <_printf_float+0x36e>
 80089be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c0:	459a      	cmp	sl, r3
 80089c2:	dc3a      	bgt.n	8008a3a <_printf_float+0x386>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	07da      	lsls	r2, r3, #31
 80089c8:	d437      	bmi.n	8008a3a <_printf_float+0x386>
 80089ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089cc:	ebaa 0903 	sub.w	r9, sl, r3
 80089d0:	9b06      	ldr	r3, [sp, #24]
 80089d2:	ebaa 0303 	sub.w	r3, sl, r3
 80089d6:	4599      	cmp	r9, r3
 80089d8:	bfa8      	it	ge
 80089da:	4699      	movge	r9, r3
 80089dc:	f1b9 0f00 	cmp.w	r9, #0
 80089e0:	dc33      	bgt.n	8008a4a <_printf_float+0x396>
 80089e2:	f04f 0800 	mov.w	r8, #0
 80089e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089ea:	f104 0b1a 	add.w	fp, r4, #26
 80089ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f0:	ebaa 0303 	sub.w	r3, sl, r3
 80089f4:	eba3 0309 	sub.w	r3, r3, r9
 80089f8:	4543      	cmp	r3, r8
 80089fa:	f77f af79 	ble.w	80088f0 <_printf_float+0x23c>
 80089fe:	2301      	movs	r3, #1
 8008a00:	465a      	mov	r2, fp
 8008a02:	4631      	mov	r1, r6
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b8      	blx	r7
 8008a08:	3001      	adds	r0, #1
 8008a0a:	f43f aeae 	beq.w	800876a <_printf_float+0xb6>
 8008a0e:	f108 0801 	add.w	r8, r8, #1
 8008a12:	e7ec      	b.n	80089ee <_printf_float+0x33a>
 8008a14:	4642      	mov	r2, r8
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d1c2      	bne.n	80089a6 <_printf_float+0x2f2>
 8008a20:	e6a3      	b.n	800876a <_printf_float+0xb6>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4631      	mov	r1, r6
 8008a26:	4628      	mov	r0, r5
 8008a28:	9206      	str	r2, [sp, #24]
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae9c 	beq.w	800876a <_printf_float+0xb6>
 8008a32:	9a06      	ldr	r2, [sp, #24]
 8008a34:	f10b 0b01 	add.w	fp, fp, #1
 8008a38:	e7bb      	b.n	80089b2 <_printf_float+0x2fe>
 8008a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	d1c0      	bne.n	80089ca <_printf_float+0x316>
 8008a48:	e68f      	b.n	800876a <_printf_float+0xb6>
 8008a4a:	9a06      	ldr	r2, [sp, #24]
 8008a4c:	464b      	mov	r3, r9
 8008a4e:	4442      	add	r2, r8
 8008a50:	4631      	mov	r1, r6
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b8      	blx	r7
 8008a56:	3001      	adds	r0, #1
 8008a58:	d1c3      	bne.n	80089e2 <_printf_float+0x32e>
 8008a5a:	e686      	b.n	800876a <_printf_float+0xb6>
 8008a5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a60:	f1ba 0f01 	cmp.w	sl, #1
 8008a64:	dc01      	bgt.n	8008a6a <_printf_float+0x3b6>
 8008a66:	07db      	lsls	r3, r3, #31
 8008a68:	d536      	bpl.n	8008ad8 <_printf_float+0x424>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	f43f ae78 	beq.w	800876a <_printf_float+0xb6>
 8008a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f ae70 	beq.w	800876a <_printf_float+0xb6>
 8008a8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2300      	movs	r3, #0
 8008a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a96:	f7f8 f837 	bl	8000b08 <__aeabi_dcmpeq>
 8008a9a:	b9c0      	cbnz	r0, 8008ace <_printf_float+0x41a>
 8008a9c:	4653      	mov	r3, sl
 8008a9e:	f108 0201 	add.w	r2, r8, #1
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	d10c      	bne.n	8008ac6 <_printf_float+0x412>
 8008aac:	e65d      	b.n	800876a <_printf_float+0xb6>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	465a      	mov	r2, fp
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b8      	blx	r7
 8008ab8:	3001      	adds	r0, #1
 8008aba:	f43f ae56 	beq.w	800876a <_printf_float+0xb6>
 8008abe:	f108 0801 	add.w	r8, r8, #1
 8008ac2:	45d0      	cmp	r8, sl
 8008ac4:	dbf3      	blt.n	8008aae <_printf_float+0x3fa>
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008acc:	e6df      	b.n	800888e <_printf_float+0x1da>
 8008ace:	f04f 0800 	mov.w	r8, #0
 8008ad2:	f104 0b1a 	add.w	fp, r4, #26
 8008ad6:	e7f4      	b.n	8008ac2 <_printf_float+0x40e>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	4642      	mov	r2, r8
 8008adc:	e7e1      	b.n	8008aa2 <_printf_float+0x3ee>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	464a      	mov	r2, r9
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	f43f ae3e 	beq.w	800876a <_printf_float+0xb6>
 8008aee:	f108 0801 	add.w	r8, r8, #1
 8008af2:	68e3      	ldr	r3, [r4, #12]
 8008af4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008af6:	1a5b      	subs	r3, r3, r1
 8008af8:	4543      	cmp	r3, r8
 8008afa:	dcf0      	bgt.n	8008ade <_printf_float+0x42a>
 8008afc:	e6fc      	b.n	80088f8 <_printf_float+0x244>
 8008afe:	f04f 0800 	mov.w	r8, #0
 8008b02:	f104 0919 	add.w	r9, r4, #25
 8008b06:	e7f4      	b.n	8008af2 <_printf_float+0x43e>

08008b08 <_printf_common>:
 8008b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	4698      	mov	r8, r3
 8008b10:	688a      	ldr	r2, [r1, #8]
 8008b12:	690b      	ldr	r3, [r1, #16]
 8008b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	bfb8      	it	lt
 8008b1c:	4613      	movlt	r3, r2
 8008b1e:	6033      	str	r3, [r6, #0]
 8008b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b24:	4607      	mov	r7, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b10a      	cbz	r2, 8008b2e <_printf_common+0x26>
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	6033      	str	r3, [r6, #0]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	0699      	lsls	r1, r3, #26
 8008b32:	bf42      	ittt	mi
 8008b34:	6833      	ldrmi	r3, [r6, #0]
 8008b36:	3302      	addmi	r3, #2
 8008b38:	6033      	strmi	r3, [r6, #0]
 8008b3a:	6825      	ldr	r5, [r4, #0]
 8008b3c:	f015 0506 	ands.w	r5, r5, #6
 8008b40:	d106      	bne.n	8008b50 <_printf_common+0x48>
 8008b42:	f104 0a19 	add.w	sl, r4, #25
 8008b46:	68e3      	ldr	r3, [r4, #12]
 8008b48:	6832      	ldr	r2, [r6, #0]
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	42ab      	cmp	r3, r5
 8008b4e:	dc26      	bgt.n	8008b9e <_printf_common+0x96>
 8008b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b54:	6822      	ldr	r2, [r4, #0]
 8008b56:	3b00      	subs	r3, #0
 8008b58:	bf18      	it	ne
 8008b5a:	2301      	movne	r3, #1
 8008b5c:	0692      	lsls	r2, r2, #26
 8008b5e:	d42b      	bmi.n	8008bb8 <_printf_common+0xb0>
 8008b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b64:	4641      	mov	r1, r8
 8008b66:	4638      	mov	r0, r7
 8008b68:	47c8      	blx	r9
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	d01e      	beq.n	8008bac <_printf_common+0xa4>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	6922      	ldr	r2, [r4, #16]
 8008b72:	f003 0306 	and.w	r3, r3, #6
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	bf02      	ittt	eq
 8008b7a:	68e5      	ldreq	r5, [r4, #12]
 8008b7c:	6833      	ldreq	r3, [r6, #0]
 8008b7e:	1aed      	subeq	r5, r5, r3
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	bf0c      	ite	eq
 8008b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b88:	2500      	movne	r5, #0
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	bfc4      	itt	gt
 8008b8e:	1a9b      	subgt	r3, r3, r2
 8008b90:	18ed      	addgt	r5, r5, r3
 8008b92:	2600      	movs	r6, #0
 8008b94:	341a      	adds	r4, #26
 8008b96:	42b5      	cmp	r5, r6
 8008b98:	d11a      	bne.n	8008bd0 <_printf_common+0xc8>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e008      	b.n	8008bb0 <_printf_common+0xa8>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	47c8      	blx	r9
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d103      	bne.n	8008bb4 <_printf_common+0xac>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb4:	3501      	adds	r5, #1
 8008bb6:	e7c6      	b.n	8008b46 <_printf_common+0x3e>
 8008bb8:	18e1      	adds	r1, r4, r3
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	2030      	movs	r0, #48	@ 0x30
 8008bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008bc2:	4422      	add	r2, r4
 8008bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bcc:	3302      	adds	r3, #2
 8008bce:	e7c7      	b.n	8008b60 <_printf_common+0x58>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	4641      	mov	r1, r8
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	47c8      	blx	r9
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d0e6      	beq.n	8008bac <_printf_common+0xa4>
 8008bde:	3601      	adds	r6, #1
 8008be0:	e7d9      	b.n	8008b96 <_printf_common+0x8e>
	...

08008be4 <_printf_i>:
 8008be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	7e0f      	ldrb	r7, [r1, #24]
 8008bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bec:	2f78      	cmp	r7, #120	@ 0x78
 8008bee:	4691      	mov	r9, r2
 8008bf0:	4680      	mov	r8, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	469a      	mov	sl, r3
 8008bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bfa:	d807      	bhi.n	8008c0c <_printf_i+0x28>
 8008bfc:	2f62      	cmp	r7, #98	@ 0x62
 8008bfe:	d80a      	bhi.n	8008c16 <_printf_i+0x32>
 8008c00:	2f00      	cmp	r7, #0
 8008c02:	f000 80d2 	beq.w	8008daa <_printf_i+0x1c6>
 8008c06:	2f58      	cmp	r7, #88	@ 0x58
 8008c08:	f000 80b9 	beq.w	8008d7e <_printf_i+0x19a>
 8008c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c14:	e03a      	b.n	8008c8c <_printf_i+0xa8>
 8008c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c1a:	2b15      	cmp	r3, #21
 8008c1c:	d8f6      	bhi.n	8008c0c <_printf_i+0x28>
 8008c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c24 <_printf_i+0x40>)
 8008c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c24:	08008c7d 	.word	0x08008c7d
 8008c28:	08008c91 	.word	0x08008c91
 8008c2c:	08008c0d 	.word	0x08008c0d
 8008c30:	08008c0d 	.word	0x08008c0d
 8008c34:	08008c0d 	.word	0x08008c0d
 8008c38:	08008c0d 	.word	0x08008c0d
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008c0d 	.word	0x08008c0d
 8008c44:	08008c0d 	.word	0x08008c0d
 8008c48:	08008c0d 	.word	0x08008c0d
 8008c4c:	08008c0d 	.word	0x08008c0d
 8008c50:	08008d91 	.word	0x08008d91
 8008c54:	08008cbb 	.word	0x08008cbb
 8008c58:	08008d4b 	.word	0x08008d4b
 8008c5c:	08008c0d 	.word	0x08008c0d
 8008c60:	08008c0d 	.word	0x08008c0d
 8008c64:	08008db3 	.word	0x08008db3
 8008c68:	08008c0d 	.word	0x08008c0d
 8008c6c:	08008cbb 	.word	0x08008cbb
 8008c70:	08008c0d 	.word	0x08008c0d
 8008c74:	08008c0d 	.word	0x08008c0d
 8008c78:	08008d53 	.word	0x08008d53
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	1d1a      	adds	r2, r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	6032      	str	r2, [r6, #0]
 8008c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e09d      	b.n	8008dcc <_printf_i+0x1e8>
 8008c90:	6833      	ldr	r3, [r6, #0]
 8008c92:	6820      	ldr	r0, [r4, #0]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	6031      	str	r1, [r6, #0]
 8008c98:	0606      	lsls	r6, r0, #24
 8008c9a:	d501      	bpl.n	8008ca0 <_printf_i+0xbc>
 8008c9c:	681d      	ldr	r5, [r3, #0]
 8008c9e:	e003      	b.n	8008ca8 <_printf_i+0xc4>
 8008ca0:	0645      	lsls	r5, r0, #25
 8008ca2:	d5fb      	bpl.n	8008c9c <_printf_i+0xb8>
 8008ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ca8:	2d00      	cmp	r5, #0
 8008caa:	da03      	bge.n	8008cb4 <_printf_i+0xd0>
 8008cac:	232d      	movs	r3, #45	@ 0x2d
 8008cae:	426d      	negs	r5, r5
 8008cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cb4:	4859      	ldr	r0, [pc, #356]	@ (8008e1c <_printf_i+0x238>)
 8008cb6:	230a      	movs	r3, #10
 8008cb8:	e011      	b.n	8008cde <_printf_i+0xfa>
 8008cba:	6821      	ldr	r1, [r4, #0]
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	0608      	lsls	r0, r1, #24
 8008cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cc4:	d402      	bmi.n	8008ccc <_printf_i+0xe8>
 8008cc6:	0649      	lsls	r1, r1, #25
 8008cc8:	bf48      	it	mi
 8008cca:	b2ad      	uxthmi	r5, r5
 8008ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cce:	4853      	ldr	r0, [pc, #332]	@ (8008e1c <_printf_i+0x238>)
 8008cd0:	6033      	str	r3, [r6, #0]
 8008cd2:	bf14      	ite	ne
 8008cd4:	230a      	movne	r3, #10
 8008cd6:	2308      	moveq	r3, #8
 8008cd8:	2100      	movs	r1, #0
 8008cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cde:	6866      	ldr	r6, [r4, #4]
 8008ce0:	60a6      	str	r6, [r4, #8]
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	bfa2      	ittt	ge
 8008ce6:	6821      	ldrge	r1, [r4, #0]
 8008ce8:	f021 0104 	bicge.w	r1, r1, #4
 8008cec:	6021      	strge	r1, [r4, #0]
 8008cee:	b90d      	cbnz	r5, 8008cf4 <_printf_i+0x110>
 8008cf0:	2e00      	cmp	r6, #0
 8008cf2:	d04b      	beq.n	8008d8c <_printf_i+0x1a8>
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8008cfe:	5dc7      	ldrb	r7, [r0, r7]
 8008d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d04:	462f      	mov	r7, r5
 8008d06:	42bb      	cmp	r3, r7
 8008d08:	460d      	mov	r5, r1
 8008d0a:	d9f4      	bls.n	8008cf6 <_printf_i+0x112>
 8008d0c:	2b08      	cmp	r3, #8
 8008d0e:	d10b      	bne.n	8008d28 <_printf_i+0x144>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	07df      	lsls	r7, r3, #31
 8008d14:	d508      	bpl.n	8008d28 <_printf_i+0x144>
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	6861      	ldr	r1, [r4, #4]
 8008d1a:	4299      	cmp	r1, r3
 8008d1c:	bfde      	ittt	le
 8008d1e:	2330      	movle	r3, #48	@ 0x30
 8008d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d28:	1b92      	subs	r2, r2, r6
 8008d2a:	6122      	str	r2, [r4, #16]
 8008d2c:	f8cd a000 	str.w	sl, [sp]
 8008d30:	464b      	mov	r3, r9
 8008d32:	aa03      	add	r2, sp, #12
 8008d34:	4621      	mov	r1, r4
 8008d36:	4640      	mov	r0, r8
 8008d38:	f7ff fee6 	bl	8008b08 <_printf_common>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d14a      	bne.n	8008dd6 <_printf_i+0x1f2>
 8008d40:	f04f 30ff 	mov.w	r0, #4294967295
 8008d44:	b004      	add	sp, #16
 8008d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	f043 0320 	orr.w	r3, r3, #32
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	4833      	ldr	r0, [pc, #204]	@ (8008e20 <_printf_i+0x23c>)
 8008d54:	2778      	movs	r7, #120	@ 0x78
 8008d56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	6831      	ldr	r1, [r6, #0]
 8008d5e:	061f      	lsls	r7, r3, #24
 8008d60:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d64:	d402      	bmi.n	8008d6c <_printf_i+0x188>
 8008d66:	065f      	lsls	r7, r3, #25
 8008d68:	bf48      	it	mi
 8008d6a:	b2ad      	uxthmi	r5, r5
 8008d6c:	6031      	str	r1, [r6, #0]
 8008d6e:	07d9      	lsls	r1, r3, #31
 8008d70:	bf44      	itt	mi
 8008d72:	f043 0320 	orrmi.w	r3, r3, #32
 8008d76:	6023      	strmi	r3, [r4, #0]
 8008d78:	b11d      	cbz	r5, 8008d82 <_printf_i+0x19e>
 8008d7a:	2310      	movs	r3, #16
 8008d7c:	e7ac      	b.n	8008cd8 <_printf_i+0xf4>
 8008d7e:	4827      	ldr	r0, [pc, #156]	@ (8008e1c <_printf_i+0x238>)
 8008d80:	e7e9      	b.n	8008d56 <_printf_i+0x172>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	f023 0320 	bic.w	r3, r3, #32
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	e7f6      	b.n	8008d7a <_printf_i+0x196>
 8008d8c:	4616      	mov	r6, r2
 8008d8e:	e7bd      	b.n	8008d0c <_printf_i+0x128>
 8008d90:	6833      	ldr	r3, [r6, #0]
 8008d92:	6825      	ldr	r5, [r4, #0]
 8008d94:	6961      	ldr	r1, [r4, #20]
 8008d96:	1d18      	adds	r0, r3, #4
 8008d98:	6030      	str	r0, [r6, #0]
 8008d9a:	062e      	lsls	r6, r5, #24
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0x1c0>
 8008da0:	6019      	str	r1, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0x1c6>
 8008da4:	0668      	lsls	r0, r5, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0x1bc>
 8008da8:	8019      	strh	r1, [r3, #0]
 8008daa:	2300      	movs	r3, #0
 8008dac:	6123      	str	r3, [r4, #16]
 8008dae:	4616      	mov	r6, r2
 8008db0:	e7bc      	b.n	8008d2c <_printf_i+0x148>
 8008db2:	6833      	ldr	r3, [r6, #0]
 8008db4:	1d1a      	adds	r2, r3, #4
 8008db6:	6032      	str	r2, [r6, #0]
 8008db8:	681e      	ldr	r6, [r3, #0]
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7f7 fa26 	bl	8000210 <memchr>
 8008dc4:	b108      	cbz	r0, 8008dca <_printf_i+0x1e6>
 8008dc6:	1b80      	subs	r0, r0, r6
 8008dc8:	6060      	str	r0, [r4, #4]
 8008dca:	6863      	ldr	r3, [r4, #4]
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dd4:	e7aa      	b.n	8008d2c <_printf_i+0x148>
 8008dd6:	6923      	ldr	r3, [r4, #16]
 8008dd8:	4632      	mov	r2, r6
 8008dda:	4649      	mov	r1, r9
 8008ddc:	4640      	mov	r0, r8
 8008dde:	47d0      	blx	sl
 8008de0:	3001      	adds	r0, #1
 8008de2:	d0ad      	beq.n	8008d40 <_printf_i+0x15c>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	079b      	lsls	r3, r3, #30
 8008de8:	d413      	bmi.n	8008e12 <_printf_i+0x22e>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	4298      	cmp	r0, r3
 8008df0:	bfb8      	it	lt
 8008df2:	4618      	movlt	r0, r3
 8008df4:	e7a6      	b.n	8008d44 <_printf_i+0x160>
 8008df6:	2301      	movs	r3, #1
 8008df8:	4632      	mov	r2, r6
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	47d0      	blx	sl
 8008e00:	3001      	adds	r0, #1
 8008e02:	d09d      	beq.n	8008d40 <_printf_i+0x15c>
 8008e04:	3501      	adds	r5, #1
 8008e06:	68e3      	ldr	r3, [r4, #12]
 8008e08:	9903      	ldr	r1, [sp, #12]
 8008e0a:	1a5b      	subs	r3, r3, r1
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dcf2      	bgt.n	8008df6 <_printf_i+0x212>
 8008e10:	e7eb      	b.n	8008dea <_printf_i+0x206>
 8008e12:	2500      	movs	r5, #0
 8008e14:	f104 0619 	add.w	r6, r4, #25
 8008e18:	e7f5      	b.n	8008e06 <_printf_i+0x222>
 8008e1a:	bf00      	nop
 8008e1c:	0800d7a4 	.word	0x0800d7a4
 8008e20:	0800d7b5 	.word	0x0800d7b5

08008e24 <_scanf_float>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	b087      	sub	sp, #28
 8008e2a:	4617      	mov	r7, r2
 8008e2c:	9303      	str	r3, [sp, #12]
 8008e2e:	688b      	ldr	r3, [r1, #8]
 8008e30:	1e5a      	subs	r2, r3, #1
 8008e32:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008e36:	bf81      	itttt	hi
 8008e38:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008e3c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008e40:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008e44:	608b      	strhi	r3, [r1, #8]
 8008e46:	680b      	ldr	r3, [r1, #0]
 8008e48:	460a      	mov	r2, r1
 8008e4a:	f04f 0500 	mov.w	r5, #0
 8008e4e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008e52:	f842 3b1c 	str.w	r3, [r2], #28
 8008e56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	bf98      	it	ls
 8008e60:	f04f 0b00 	movls.w	fp, #0
 8008e64:	9201      	str	r2, [sp, #4]
 8008e66:	4616      	mov	r6, r2
 8008e68:	46aa      	mov	sl, r5
 8008e6a:	46a9      	mov	r9, r5
 8008e6c:	9502      	str	r5, [sp, #8]
 8008e6e:	68a2      	ldr	r2, [r4, #8]
 8008e70:	b152      	cbz	r2, 8008e88 <_scanf_float+0x64>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	2b4e      	cmp	r3, #78	@ 0x4e
 8008e78:	d864      	bhi.n	8008f44 <_scanf_float+0x120>
 8008e7a:	2b40      	cmp	r3, #64	@ 0x40
 8008e7c:	d83c      	bhi.n	8008ef8 <_scanf_float+0xd4>
 8008e7e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008e82:	b2c8      	uxtb	r0, r1
 8008e84:	280e      	cmp	r0, #14
 8008e86:	d93a      	bls.n	8008efe <_scanf_float+0xda>
 8008e88:	f1b9 0f00 	cmp.w	r9, #0
 8008e8c:	d003      	beq.n	8008e96 <_scanf_float+0x72>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e9a:	f1ba 0f01 	cmp.w	sl, #1
 8008e9e:	f200 8117 	bhi.w	80090d0 <_scanf_float+0x2ac>
 8008ea2:	9b01      	ldr	r3, [sp, #4]
 8008ea4:	429e      	cmp	r6, r3
 8008ea6:	f200 8108 	bhi.w	80090ba <_scanf_float+0x296>
 8008eaa:	2001      	movs	r0, #1
 8008eac:	b007      	add	sp, #28
 8008eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008eb6:	2a0d      	cmp	r2, #13
 8008eb8:	d8e6      	bhi.n	8008e88 <_scanf_float+0x64>
 8008eba:	a101      	add	r1, pc, #4	@ (adr r1, 8008ec0 <_scanf_float+0x9c>)
 8008ebc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ec0:	08009007 	.word	0x08009007
 8008ec4:	08008e89 	.word	0x08008e89
 8008ec8:	08008e89 	.word	0x08008e89
 8008ecc:	08008e89 	.word	0x08008e89
 8008ed0:	08009067 	.word	0x08009067
 8008ed4:	0800903f 	.word	0x0800903f
 8008ed8:	08008e89 	.word	0x08008e89
 8008edc:	08008e89 	.word	0x08008e89
 8008ee0:	08009015 	.word	0x08009015
 8008ee4:	08008e89 	.word	0x08008e89
 8008ee8:	08008e89 	.word	0x08008e89
 8008eec:	08008e89 	.word	0x08008e89
 8008ef0:	08008e89 	.word	0x08008e89
 8008ef4:	08008fcd 	.word	0x08008fcd
 8008ef8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008efc:	e7db      	b.n	8008eb6 <_scanf_float+0x92>
 8008efe:	290e      	cmp	r1, #14
 8008f00:	d8c2      	bhi.n	8008e88 <_scanf_float+0x64>
 8008f02:	a001      	add	r0, pc, #4	@ (adr r0, 8008f08 <_scanf_float+0xe4>)
 8008f04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008f08:	08008fbd 	.word	0x08008fbd
 8008f0c:	08008e89 	.word	0x08008e89
 8008f10:	08008fbd 	.word	0x08008fbd
 8008f14:	08009053 	.word	0x08009053
 8008f18:	08008e89 	.word	0x08008e89
 8008f1c:	08008f65 	.word	0x08008f65
 8008f20:	08008fa3 	.word	0x08008fa3
 8008f24:	08008fa3 	.word	0x08008fa3
 8008f28:	08008fa3 	.word	0x08008fa3
 8008f2c:	08008fa3 	.word	0x08008fa3
 8008f30:	08008fa3 	.word	0x08008fa3
 8008f34:	08008fa3 	.word	0x08008fa3
 8008f38:	08008fa3 	.word	0x08008fa3
 8008f3c:	08008fa3 	.word	0x08008fa3
 8008f40:	08008fa3 	.word	0x08008fa3
 8008f44:	2b6e      	cmp	r3, #110	@ 0x6e
 8008f46:	d809      	bhi.n	8008f5c <_scanf_float+0x138>
 8008f48:	2b60      	cmp	r3, #96	@ 0x60
 8008f4a:	d8b2      	bhi.n	8008eb2 <_scanf_float+0x8e>
 8008f4c:	2b54      	cmp	r3, #84	@ 0x54
 8008f4e:	d07b      	beq.n	8009048 <_scanf_float+0x224>
 8008f50:	2b59      	cmp	r3, #89	@ 0x59
 8008f52:	d199      	bne.n	8008e88 <_scanf_float+0x64>
 8008f54:	2d07      	cmp	r5, #7
 8008f56:	d197      	bne.n	8008e88 <_scanf_float+0x64>
 8008f58:	2508      	movs	r5, #8
 8008f5a:	e02c      	b.n	8008fb6 <_scanf_float+0x192>
 8008f5c:	2b74      	cmp	r3, #116	@ 0x74
 8008f5e:	d073      	beq.n	8009048 <_scanf_float+0x224>
 8008f60:	2b79      	cmp	r3, #121	@ 0x79
 8008f62:	e7f6      	b.n	8008f52 <_scanf_float+0x12e>
 8008f64:	6821      	ldr	r1, [r4, #0]
 8008f66:	05c8      	lsls	r0, r1, #23
 8008f68:	d51b      	bpl.n	8008fa2 <_scanf_float+0x17e>
 8008f6a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008f6e:	6021      	str	r1, [r4, #0]
 8008f70:	f109 0901 	add.w	r9, r9, #1
 8008f74:	f1bb 0f00 	cmp.w	fp, #0
 8008f78:	d003      	beq.n	8008f82 <_scanf_float+0x15e>
 8008f7a:	3201      	adds	r2, #1
 8008f7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f80:	60a2      	str	r2, [r4, #8]
 8008f82:	68a3      	ldr	r3, [r4, #8]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	60a3      	str	r3, [r4, #8]
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	6123      	str	r3, [r4, #16]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	607b      	str	r3, [r7, #4]
 8008f96:	f340 8087 	ble.w	80090a8 <_scanf_float+0x284>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	e765      	b.n	8008e6e <_scanf_float+0x4a>
 8008fa2:	eb1a 0105 	adds.w	r1, sl, r5
 8008fa6:	f47f af6f 	bne.w	8008e88 <_scanf_float+0x64>
 8008faa:	6822      	ldr	r2, [r4, #0]
 8008fac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008fb0:	6022      	str	r2, [r4, #0]
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	468a      	mov	sl, r1
 8008fb6:	f806 3b01 	strb.w	r3, [r6], #1
 8008fba:	e7e2      	b.n	8008f82 <_scanf_float+0x15e>
 8008fbc:	6822      	ldr	r2, [r4, #0]
 8008fbe:	0610      	lsls	r0, r2, #24
 8008fc0:	f57f af62 	bpl.w	8008e88 <_scanf_float+0x64>
 8008fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	e7f4      	b.n	8008fb6 <_scanf_float+0x192>
 8008fcc:	f1ba 0f00 	cmp.w	sl, #0
 8008fd0:	d10e      	bne.n	8008ff0 <_scanf_float+0x1cc>
 8008fd2:	f1b9 0f00 	cmp.w	r9, #0
 8008fd6:	d10e      	bne.n	8008ff6 <_scanf_float+0x1d2>
 8008fd8:	6822      	ldr	r2, [r4, #0]
 8008fda:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008fde:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008fe2:	d108      	bne.n	8008ff6 <_scanf_float+0x1d2>
 8008fe4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	f04f 0a01 	mov.w	sl, #1
 8008fee:	e7e2      	b.n	8008fb6 <_scanf_float+0x192>
 8008ff0:	f1ba 0f02 	cmp.w	sl, #2
 8008ff4:	d055      	beq.n	80090a2 <_scanf_float+0x27e>
 8008ff6:	2d01      	cmp	r5, #1
 8008ff8:	d002      	beq.n	8009000 <_scanf_float+0x1dc>
 8008ffa:	2d04      	cmp	r5, #4
 8008ffc:	f47f af44 	bne.w	8008e88 <_scanf_float+0x64>
 8009000:	3501      	adds	r5, #1
 8009002:	b2ed      	uxtb	r5, r5
 8009004:	e7d7      	b.n	8008fb6 <_scanf_float+0x192>
 8009006:	f1ba 0f01 	cmp.w	sl, #1
 800900a:	f47f af3d 	bne.w	8008e88 <_scanf_float+0x64>
 800900e:	f04f 0a02 	mov.w	sl, #2
 8009012:	e7d0      	b.n	8008fb6 <_scanf_float+0x192>
 8009014:	b97d      	cbnz	r5, 8009036 <_scanf_float+0x212>
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	f47f af38 	bne.w	8008e8e <_scanf_float+0x6a>
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009024:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009028:	f040 8108 	bne.w	800923c <_scanf_float+0x418>
 800902c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009030:	6022      	str	r2, [r4, #0]
 8009032:	2501      	movs	r5, #1
 8009034:	e7bf      	b.n	8008fb6 <_scanf_float+0x192>
 8009036:	2d03      	cmp	r5, #3
 8009038:	d0e2      	beq.n	8009000 <_scanf_float+0x1dc>
 800903a:	2d05      	cmp	r5, #5
 800903c:	e7de      	b.n	8008ffc <_scanf_float+0x1d8>
 800903e:	2d02      	cmp	r5, #2
 8009040:	f47f af22 	bne.w	8008e88 <_scanf_float+0x64>
 8009044:	2503      	movs	r5, #3
 8009046:	e7b6      	b.n	8008fb6 <_scanf_float+0x192>
 8009048:	2d06      	cmp	r5, #6
 800904a:	f47f af1d 	bne.w	8008e88 <_scanf_float+0x64>
 800904e:	2507      	movs	r5, #7
 8009050:	e7b1      	b.n	8008fb6 <_scanf_float+0x192>
 8009052:	6822      	ldr	r2, [r4, #0]
 8009054:	0591      	lsls	r1, r2, #22
 8009056:	f57f af17 	bpl.w	8008e88 <_scanf_float+0x64>
 800905a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800905e:	6022      	str	r2, [r4, #0]
 8009060:	f8cd 9008 	str.w	r9, [sp, #8]
 8009064:	e7a7      	b.n	8008fb6 <_scanf_float+0x192>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800906c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009070:	d006      	beq.n	8009080 <_scanf_float+0x25c>
 8009072:	0550      	lsls	r0, r2, #21
 8009074:	f57f af08 	bpl.w	8008e88 <_scanf_float+0x64>
 8009078:	f1b9 0f00 	cmp.w	r9, #0
 800907c:	f000 80de 	beq.w	800923c <_scanf_float+0x418>
 8009080:	0591      	lsls	r1, r2, #22
 8009082:	bf58      	it	pl
 8009084:	9902      	ldrpl	r1, [sp, #8]
 8009086:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800908a:	bf58      	it	pl
 800908c:	eba9 0101 	subpl.w	r1, r9, r1
 8009090:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009094:	bf58      	it	pl
 8009096:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800909a:	6022      	str	r2, [r4, #0]
 800909c:	f04f 0900 	mov.w	r9, #0
 80090a0:	e789      	b.n	8008fb6 <_scanf_float+0x192>
 80090a2:	f04f 0a03 	mov.w	sl, #3
 80090a6:	e786      	b.n	8008fb6 <_scanf_float+0x192>
 80090a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80090ac:	4639      	mov	r1, r7
 80090ae:	4640      	mov	r0, r8
 80090b0:	4798      	blx	r3
 80090b2:	2800      	cmp	r0, #0
 80090b4:	f43f aedb 	beq.w	8008e6e <_scanf_float+0x4a>
 80090b8:	e6e6      	b.n	8008e88 <_scanf_float+0x64>
 80090ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090c2:	463a      	mov	r2, r7
 80090c4:	4640      	mov	r0, r8
 80090c6:	4798      	blx	r3
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	6123      	str	r3, [r4, #16]
 80090ce:	e6e8      	b.n	8008ea2 <_scanf_float+0x7e>
 80090d0:	1e6b      	subs	r3, r5, #1
 80090d2:	2b06      	cmp	r3, #6
 80090d4:	d824      	bhi.n	8009120 <_scanf_float+0x2fc>
 80090d6:	2d02      	cmp	r5, #2
 80090d8:	d836      	bhi.n	8009148 <_scanf_float+0x324>
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	429e      	cmp	r6, r3
 80090de:	f67f aee4 	bls.w	8008eaa <_scanf_float+0x86>
 80090e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ea:	463a      	mov	r2, r7
 80090ec:	4640      	mov	r0, r8
 80090ee:	4798      	blx	r3
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	e7f0      	b.n	80090da <_scanf_float+0x2b6>
 80090f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009100:	463a      	mov	r2, r7
 8009102:	4640      	mov	r0, r8
 8009104:	4798      	blx	r3
 8009106:	6923      	ldr	r3, [r4, #16]
 8009108:	3b01      	subs	r3, #1
 800910a:	6123      	str	r3, [r4, #16]
 800910c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009110:	fa5f fa8a 	uxtb.w	sl, sl
 8009114:	f1ba 0f02 	cmp.w	sl, #2
 8009118:	d1ee      	bne.n	80090f8 <_scanf_float+0x2d4>
 800911a:	3d03      	subs	r5, #3
 800911c:	b2ed      	uxtb	r5, r5
 800911e:	1b76      	subs	r6, r6, r5
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	05da      	lsls	r2, r3, #23
 8009124:	d530      	bpl.n	8009188 <_scanf_float+0x364>
 8009126:	055b      	lsls	r3, r3, #21
 8009128:	d511      	bpl.n	800914e <_scanf_float+0x32a>
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	429e      	cmp	r6, r3
 800912e:	f67f aebc 	bls.w	8008eaa <_scanf_float+0x86>
 8009132:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009136:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800913a:	463a      	mov	r2, r7
 800913c:	4640      	mov	r0, r8
 800913e:	4798      	blx	r3
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	3b01      	subs	r3, #1
 8009144:	6123      	str	r3, [r4, #16]
 8009146:	e7f0      	b.n	800912a <_scanf_float+0x306>
 8009148:	46aa      	mov	sl, r5
 800914a:	46b3      	mov	fp, r6
 800914c:	e7de      	b.n	800910c <_scanf_float+0x2e8>
 800914e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	2965      	cmp	r1, #101	@ 0x65
 8009156:	f103 33ff 	add.w	r3, r3, #4294967295
 800915a:	f106 35ff 	add.w	r5, r6, #4294967295
 800915e:	6123      	str	r3, [r4, #16]
 8009160:	d00c      	beq.n	800917c <_scanf_float+0x358>
 8009162:	2945      	cmp	r1, #69	@ 0x45
 8009164:	d00a      	beq.n	800917c <_scanf_float+0x358>
 8009166:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800916a:	463a      	mov	r2, r7
 800916c:	4640      	mov	r0, r8
 800916e:	4798      	blx	r3
 8009170:	6923      	ldr	r3, [r4, #16]
 8009172:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009176:	3b01      	subs	r3, #1
 8009178:	1eb5      	subs	r5, r6, #2
 800917a:	6123      	str	r3, [r4, #16]
 800917c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009180:	463a      	mov	r2, r7
 8009182:	4640      	mov	r0, r8
 8009184:	4798      	blx	r3
 8009186:	462e      	mov	r6, r5
 8009188:	6822      	ldr	r2, [r4, #0]
 800918a:	f012 0210 	ands.w	r2, r2, #16
 800918e:	d001      	beq.n	8009194 <_scanf_float+0x370>
 8009190:	2000      	movs	r0, #0
 8009192:	e68b      	b.n	8008eac <_scanf_float+0x88>
 8009194:	7032      	strb	r2, [r6, #0]
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800919c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091a0:	d11c      	bne.n	80091dc <_scanf_float+0x3b8>
 80091a2:	9b02      	ldr	r3, [sp, #8]
 80091a4:	454b      	cmp	r3, r9
 80091a6:	eba3 0209 	sub.w	r2, r3, r9
 80091aa:	d123      	bne.n	80091f4 <_scanf_float+0x3d0>
 80091ac:	9901      	ldr	r1, [sp, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	4640      	mov	r0, r8
 80091b2:	f002 fd29 	bl	800bc08 <_strtod_r>
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	6821      	ldr	r1, [r4, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f011 0f02 	tst.w	r1, #2
 80091c0:	ec57 6b10 	vmov	r6, r7, d0
 80091c4:	f103 0204 	add.w	r2, r3, #4
 80091c8:	d01f      	beq.n	800920a <_scanf_float+0x3e6>
 80091ca:	9903      	ldr	r1, [sp, #12]
 80091cc:	600a      	str	r2, [r1, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	e9c3 6700 	strd	r6, r7, [r3]
 80091d4:	68e3      	ldr	r3, [r4, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60e3      	str	r3, [r4, #12]
 80091da:	e7d9      	b.n	8009190 <_scanf_float+0x36c>
 80091dc:	9b04      	ldr	r3, [sp, #16]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0e4      	beq.n	80091ac <_scanf_float+0x388>
 80091e2:	9905      	ldr	r1, [sp, #20]
 80091e4:	230a      	movs	r3, #10
 80091e6:	3101      	adds	r1, #1
 80091e8:	4640      	mov	r0, r8
 80091ea:	f002 fd8d 	bl	800bd08 <_strtol_r>
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	9e05      	ldr	r6, [sp, #20]
 80091f2:	1ac2      	subs	r2, r0, r3
 80091f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80091f8:	429e      	cmp	r6, r3
 80091fa:	bf28      	it	cs
 80091fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009200:	4910      	ldr	r1, [pc, #64]	@ (8009244 <_scanf_float+0x420>)
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f954 	bl	80094b0 <siprintf>
 8009208:	e7d0      	b.n	80091ac <_scanf_float+0x388>
 800920a:	f011 0f04 	tst.w	r1, #4
 800920e:	9903      	ldr	r1, [sp, #12]
 8009210:	600a      	str	r2, [r1, #0]
 8009212:	d1dc      	bne.n	80091ce <_scanf_float+0x3aa>
 8009214:	681d      	ldr	r5, [r3, #0]
 8009216:	4632      	mov	r2, r6
 8009218:	463b      	mov	r3, r7
 800921a:	4630      	mov	r0, r6
 800921c:	4639      	mov	r1, r7
 800921e:	f7f7 fca5 	bl	8000b6c <__aeabi_dcmpun>
 8009222:	b128      	cbz	r0, 8009230 <_scanf_float+0x40c>
 8009224:	4808      	ldr	r0, [pc, #32]	@ (8009248 <_scanf_float+0x424>)
 8009226:	f000 fae7 	bl	80097f8 <nanf>
 800922a:	ed85 0a00 	vstr	s0, [r5]
 800922e:	e7d1      	b.n	80091d4 <_scanf_float+0x3b0>
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 fcf8 	bl	8000c28 <__aeabi_d2f>
 8009238:	6028      	str	r0, [r5, #0]
 800923a:	e7cb      	b.n	80091d4 <_scanf_float+0x3b0>
 800923c:	f04f 0900 	mov.w	r9, #0
 8009240:	e629      	b.n	8008e96 <_scanf_float+0x72>
 8009242:	bf00      	nop
 8009244:	0800d7c6 	.word	0x0800d7c6
 8009248:	0800db78 	.word	0x0800db78

0800924c <std>:
 800924c:	2300      	movs	r3, #0
 800924e:	b510      	push	{r4, lr}
 8009250:	4604      	mov	r4, r0
 8009252:	e9c0 3300 	strd	r3, r3, [r0]
 8009256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800925a:	6083      	str	r3, [r0, #8]
 800925c:	8181      	strh	r1, [r0, #12]
 800925e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009260:	81c2      	strh	r2, [r0, #14]
 8009262:	6183      	str	r3, [r0, #24]
 8009264:	4619      	mov	r1, r3
 8009266:	2208      	movs	r2, #8
 8009268:	305c      	adds	r0, #92	@ 0x5c
 800926a:	f000 fa45 	bl	80096f8 <memset>
 800926e:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <std+0x58>)
 8009270:	6263      	str	r3, [r4, #36]	@ 0x24
 8009272:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <std+0x5c>)
 8009274:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009276:	4b0d      	ldr	r3, [pc, #52]	@ (80092ac <std+0x60>)
 8009278:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800927a:	4b0d      	ldr	r3, [pc, #52]	@ (80092b0 <std+0x64>)
 800927c:	6323      	str	r3, [r4, #48]	@ 0x30
 800927e:	4b0d      	ldr	r3, [pc, #52]	@ (80092b4 <std+0x68>)
 8009280:	6224      	str	r4, [r4, #32]
 8009282:	429c      	cmp	r4, r3
 8009284:	d006      	beq.n	8009294 <std+0x48>
 8009286:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800928a:	4294      	cmp	r4, r2
 800928c:	d002      	beq.n	8009294 <std+0x48>
 800928e:	33d0      	adds	r3, #208	@ 0xd0
 8009290:	429c      	cmp	r4, r3
 8009292:	d105      	bne.n	80092a0 <std+0x54>
 8009294:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800929c:	f000 baa8 	b.w	80097f0 <__retarget_lock_init_recursive>
 80092a0:	bd10      	pop	{r4, pc}
 80092a2:	bf00      	nop
 80092a4:	08009545 	.word	0x08009545
 80092a8:	0800956b 	.word	0x0800956b
 80092ac:	080095a3 	.word	0x080095a3
 80092b0:	080095c7 	.word	0x080095c7
 80092b4:	200004bc 	.word	0x200004bc

080092b8 <stdio_exit_handler>:
 80092b8:	4a02      	ldr	r2, [pc, #8]	@ (80092c4 <stdio_exit_handler+0xc>)
 80092ba:	4903      	ldr	r1, [pc, #12]	@ (80092c8 <stdio_exit_handler+0x10>)
 80092bc:	4803      	ldr	r0, [pc, #12]	@ (80092cc <stdio_exit_handler+0x14>)
 80092be:	f000 b869 	b.w	8009394 <_fwalk_sglue>
 80092c2:	bf00      	nop
 80092c4:	20000084 	.word	0x20000084
 80092c8:	0800c97d 	.word	0x0800c97d
 80092cc:	20000094 	.word	0x20000094

080092d0 <cleanup_stdio>:
 80092d0:	6841      	ldr	r1, [r0, #4]
 80092d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009304 <cleanup_stdio+0x34>)
 80092d4:	4299      	cmp	r1, r3
 80092d6:	b510      	push	{r4, lr}
 80092d8:	4604      	mov	r4, r0
 80092da:	d001      	beq.n	80092e0 <cleanup_stdio+0x10>
 80092dc:	f003 fb4e 	bl	800c97c <_fflush_r>
 80092e0:	68a1      	ldr	r1, [r4, #8]
 80092e2:	4b09      	ldr	r3, [pc, #36]	@ (8009308 <cleanup_stdio+0x38>)
 80092e4:	4299      	cmp	r1, r3
 80092e6:	d002      	beq.n	80092ee <cleanup_stdio+0x1e>
 80092e8:	4620      	mov	r0, r4
 80092ea:	f003 fb47 	bl	800c97c <_fflush_r>
 80092ee:	68e1      	ldr	r1, [r4, #12]
 80092f0:	4b06      	ldr	r3, [pc, #24]	@ (800930c <cleanup_stdio+0x3c>)
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d004      	beq.n	8009300 <cleanup_stdio+0x30>
 80092f6:	4620      	mov	r0, r4
 80092f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092fc:	f003 bb3e 	b.w	800c97c <_fflush_r>
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	200004bc 	.word	0x200004bc
 8009308:	20000524 	.word	0x20000524
 800930c:	2000058c 	.word	0x2000058c

08009310 <global_stdio_init.part.0>:
 8009310:	b510      	push	{r4, lr}
 8009312:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <global_stdio_init.part.0+0x30>)
 8009314:	4c0b      	ldr	r4, [pc, #44]	@ (8009344 <global_stdio_init.part.0+0x34>)
 8009316:	4a0c      	ldr	r2, [pc, #48]	@ (8009348 <global_stdio_init.part.0+0x38>)
 8009318:	601a      	str	r2, [r3, #0]
 800931a:	4620      	mov	r0, r4
 800931c:	2200      	movs	r2, #0
 800931e:	2104      	movs	r1, #4
 8009320:	f7ff ff94 	bl	800924c <std>
 8009324:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009328:	2201      	movs	r2, #1
 800932a:	2109      	movs	r1, #9
 800932c:	f7ff ff8e 	bl	800924c <std>
 8009330:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009334:	2202      	movs	r2, #2
 8009336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933a:	2112      	movs	r1, #18
 800933c:	f7ff bf86 	b.w	800924c <std>
 8009340:	200005f4 	.word	0x200005f4
 8009344:	200004bc 	.word	0x200004bc
 8009348:	080092b9 	.word	0x080092b9

0800934c <__sfp_lock_acquire>:
 800934c:	4801      	ldr	r0, [pc, #4]	@ (8009354 <__sfp_lock_acquire+0x8>)
 800934e:	f000 ba50 	b.w	80097f2 <__retarget_lock_acquire_recursive>
 8009352:	bf00      	nop
 8009354:	200005fd 	.word	0x200005fd

08009358 <__sfp_lock_release>:
 8009358:	4801      	ldr	r0, [pc, #4]	@ (8009360 <__sfp_lock_release+0x8>)
 800935a:	f000 ba4b 	b.w	80097f4 <__retarget_lock_release_recursive>
 800935e:	bf00      	nop
 8009360:	200005fd 	.word	0x200005fd

08009364 <__sinit>:
 8009364:	b510      	push	{r4, lr}
 8009366:	4604      	mov	r4, r0
 8009368:	f7ff fff0 	bl	800934c <__sfp_lock_acquire>
 800936c:	6a23      	ldr	r3, [r4, #32]
 800936e:	b11b      	cbz	r3, 8009378 <__sinit+0x14>
 8009370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009374:	f7ff bff0 	b.w	8009358 <__sfp_lock_release>
 8009378:	4b04      	ldr	r3, [pc, #16]	@ (800938c <__sinit+0x28>)
 800937a:	6223      	str	r3, [r4, #32]
 800937c:	4b04      	ldr	r3, [pc, #16]	@ (8009390 <__sinit+0x2c>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1f5      	bne.n	8009370 <__sinit+0xc>
 8009384:	f7ff ffc4 	bl	8009310 <global_stdio_init.part.0>
 8009388:	e7f2      	b.n	8009370 <__sinit+0xc>
 800938a:	bf00      	nop
 800938c:	080092d1 	.word	0x080092d1
 8009390:	200005f4 	.word	0x200005f4

08009394 <_fwalk_sglue>:
 8009394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009398:	4607      	mov	r7, r0
 800939a:	4688      	mov	r8, r1
 800939c:	4614      	mov	r4, r2
 800939e:	2600      	movs	r6, #0
 80093a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093a4:	f1b9 0901 	subs.w	r9, r9, #1
 80093a8:	d505      	bpl.n	80093b6 <_fwalk_sglue+0x22>
 80093aa:	6824      	ldr	r4, [r4, #0]
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	d1f7      	bne.n	80093a0 <_fwalk_sglue+0xc>
 80093b0:	4630      	mov	r0, r6
 80093b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d907      	bls.n	80093cc <_fwalk_sglue+0x38>
 80093bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093c0:	3301      	adds	r3, #1
 80093c2:	d003      	beq.n	80093cc <_fwalk_sglue+0x38>
 80093c4:	4629      	mov	r1, r5
 80093c6:	4638      	mov	r0, r7
 80093c8:	47c0      	blx	r8
 80093ca:	4306      	orrs	r6, r0
 80093cc:	3568      	adds	r5, #104	@ 0x68
 80093ce:	e7e9      	b.n	80093a4 <_fwalk_sglue+0x10>

080093d0 <iprintf>:
 80093d0:	b40f      	push	{r0, r1, r2, r3}
 80093d2:	b507      	push	{r0, r1, r2, lr}
 80093d4:	4906      	ldr	r1, [pc, #24]	@ (80093f0 <iprintf+0x20>)
 80093d6:	ab04      	add	r3, sp, #16
 80093d8:	6808      	ldr	r0, [r1, #0]
 80093da:	f853 2b04 	ldr.w	r2, [r3], #4
 80093de:	6881      	ldr	r1, [r0, #8]
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	f002 ffe1 	bl	800c3a8 <_vfiprintf_r>
 80093e6:	b003      	add	sp, #12
 80093e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093ec:	b004      	add	sp, #16
 80093ee:	4770      	bx	lr
 80093f0:	20000090 	.word	0x20000090

080093f4 <_puts_r>:
 80093f4:	6a03      	ldr	r3, [r0, #32]
 80093f6:	b570      	push	{r4, r5, r6, lr}
 80093f8:	6884      	ldr	r4, [r0, #8]
 80093fa:	4605      	mov	r5, r0
 80093fc:	460e      	mov	r6, r1
 80093fe:	b90b      	cbnz	r3, 8009404 <_puts_r+0x10>
 8009400:	f7ff ffb0 	bl	8009364 <__sinit>
 8009404:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009406:	07db      	lsls	r3, r3, #31
 8009408:	d405      	bmi.n	8009416 <_puts_r+0x22>
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	0598      	lsls	r0, r3, #22
 800940e:	d402      	bmi.n	8009416 <_puts_r+0x22>
 8009410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009412:	f000 f9ee 	bl	80097f2 <__retarget_lock_acquire_recursive>
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	0719      	lsls	r1, r3, #28
 800941a:	d502      	bpl.n	8009422 <_puts_r+0x2e>
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d135      	bne.n	800948e <_puts_r+0x9a>
 8009422:	4621      	mov	r1, r4
 8009424:	4628      	mov	r0, r5
 8009426:	f000 f911 	bl	800964c <__swsetup_r>
 800942a:	b380      	cbz	r0, 800948e <_puts_r+0x9a>
 800942c:	f04f 35ff 	mov.w	r5, #4294967295
 8009430:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009432:	07da      	lsls	r2, r3, #31
 8009434:	d405      	bmi.n	8009442 <_puts_r+0x4e>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	059b      	lsls	r3, r3, #22
 800943a:	d402      	bmi.n	8009442 <_puts_r+0x4e>
 800943c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800943e:	f000 f9d9 	bl	80097f4 <__retarget_lock_release_recursive>
 8009442:	4628      	mov	r0, r5
 8009444:	bd70      	pop	{r4, r5, r6, pc}
 8009446:	2b00      	cmp	r3, #0
 8009448:	da04      	bge.n	8009454 <_puts_r+0x60>
 800944a:	69a2      	ldr	r2, [r4, #24]
 800944c:	429a      	cmp	r2, r3
 800944e:	dc17      	bgt.n	8009480 <_puts_r+0x8c>
 8009450:	290a      	cmp	r1, #10
 8009452:	d015      	beq.n	8009480 <_puts_r+0x8c>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	6022      	str	r2, [r4, #0]
 800945a:	7019      	strb	r1, [r3, #0]
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009462:	3b01      	subs	r3, #1
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	2900      	cmp	r1, #0
 8009468:	d1ed      	bne.n	8009446 <_puts_r+0x52>
 800946a:	2b00      	cmp	r3, #0
 800946c:	da11      	bge.n	8009492 <_puts_r+0x9e>
 800946e:	4622      	mov	r2, r4
 8009470:	210a      	movs	r1, #10
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f8ab 	bl	80095ce <__swbuf_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d0d7      	beq.n	800942c <_puts_r+0x38>
 800947c:	250a      	movs	r5, #10
 800947e:	e7d7      	b.n	8009430 <_puts_r+0x3c>
 8009480:	4622      	mov	r2, r4
 8009482:	4628      	mov	r0, r5
 8009484:	f000 f8a3 	bl	80095ce <__swbuf_r>
 8009488:	3001      	adds	r0, #1
 800948a:	d1e7      	bne.n	800945c <_puts_r+0x68>
 800948c:	e7ce      	b.n	800942c <_puts_r+0x38>
 800948e:	3e01      	subs	r6, #1
 8009490:	e7e4      	b.n	800945c <_puts_r+0x68>
 8009492:	6823      	ldr	r3, [r4, #0]
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	6022      	str	r2, [r4, #0]
 8009498:	220a      	movs	r2, #10
 800949a:	701a      	strb	r2, [r3, #0]
 800949c:	e7ee      	b.n	800947c <_puts_r+0x88>
	...

080094a0 <puts>:
 80094a0:	4b02      	ldr	r3, [pc, #8]	@ (80094ac <puts+0xc>)
 80094a2:	4601      	mov	r1, r0
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	f7ff bfa5 	b.w	80093f4 <_puts_r>
 80094aa:	bf00      	nop
 80094ac:	20000090 	.word	0x20000090

080094b0 <siprintf>:
 80094b0:	b40e      	push	{r1, r2, r3}
 80094b2:	b500      	push	{lr}
 80094b4:	b09c      	sub	sp, #112	@ 0x70
 80094b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80094b8:	9002      	str	r0, [sp, #8]
 80094ba:	9006      	str	r0, [sp, #24]
 80094bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094c0:	4809      	ldr	r0, [pc, #36]	@ (80094e8 <siprintf+0x38>)
 80094c2:	9107      	str	r1, [sp, #28]
 80094c4:	9104      	str	r1, [sp, #16]
 80094c6:	4909      	ldr	r1, [pc, #36]	@ (80094ec <siprintf+0x3c>)
 80094c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80094cc:	9105      	str	r1, [sp, #20]
 80094ce:	6800      	ldr	r0, [r0, #0]
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	a902      	add	r1, sp, #8
 80094d4:	f002 fc76 	bl	800bdc4 <_svfiprintf_r>
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	2200      	movs	r2, #0
 80094dc:	701a      	strb	r2, [r3, #0]
 80094de:	b01c      	add	sp, #112	@ 0x70
 80094e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094e4:	b003      	add	sp, #12
 80094e6:	4770      	bx	lr
 80094e8:	20000090 	.word	0x20000090
 80094ec:	ffff0208 	.word	0xffff0208

080094f0 <siscanf>:
 80094f0:	b40e      	push	{r1, r2, r3}
 80094f2:	b530      	push	{r4, r5, lr}
 80094f4:	b09c      	sub	sp, #112	@ 0x70
 80094f6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80094f8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80094fc:	f854 5b04 	ldr.w	r5, [r4], #4
 8009500:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009504:	9002      	str	r0, [sp, #8]
 8009506:	9006      	str	r0, [sp, #24]
 8009508:	f7f6 fed2 	bl	80002b0 <strlen>
 800950c:	4b0b      	ldr	r3, [pc, #44]	@ (800953c <siscanf+0x4c>)
 800950e:	9003      	str	r0, [sp, #12]
 8009510:	9007      	str	r0, [sp, #28]
 8009512:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009514:	480a      	ldr	r0, [pc, #40]	@ (8009540 <siscanf+0x50>)
 8009516:	9401      	str	r4, [sp, #4]
 8009518:	2300      	movs	r3, #0
 800951a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800951c:	9314      	str	r3, [sp, #80]	@ 0x50
 800951e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009522:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009526:	462a      	mov	r2, r5
 8009528:	4623      	mov	r3, r4
 800952a:	a902      	add	r1, sp, #8
 800952c:	6800      	ldr	r0, [r0, #0]
 800952e:	f002 fd9d 	bl	800c06c <__ssvfiscanf_r>
 8009532:	b01c      	add	sp, #112	@ 0x70
 8009534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009538:	b003      	add	sp, #12
 800953a:	4770      	bx	lr
 800953c:	08009567 	.word	0x08009567
 8009540:	20000090 	.word	0x20000090

08009544 <__sread>:
 8009544:	b510      	push	{r4, lr}
 8009546:	460c      	mov	r4, r1
 8009548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800954c:	f000 f902 	bl	8009754 <_read_r>
 8009550:	2800      	cmp	r0, #0
 8009552:	bfab      	itete	ge
 8009554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009556:	89a3      	ldrhlt	r3, [r4, #12]
 8009558:	181b      	addge	r3, r3, r0
 800955a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800955e:	bfac      	ite	ge
 8009560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009562:	81a3      	strhlt	r3, [r4, #12]
 8009564:	bd10      	pop	{r4, pc}

08009566 <__seofread>:
 8009566:	2000      	movs	r0, #0
 8009568:	4770      	bx	lr

0800956a <__swrite>:
 800956a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956e:	461f      	mov	r7, r3
 8009570:	898b      	ldrh	r3, [r1, #12]
 8009572:	05db      	lsls	r3, r3, #23
 8009574:	4605      	mov	r5, r0
 8009576:	460c      	mov	r4, r1
 8009578:	4616      	mov	r6, r2
 800957a:	d505      	bpl.n	8009588 <__swrite+0x1e>
 800957c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009580:	2302      	movs	r3, #2
 8009582:	2200      	movs	r2, #0
 8009584:	f000 f8d4 	bl	8009730 <_lseek_r>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800958e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	4632      	mov	r2, r6
 8009596:	463b      	mov	r3, r7
 8009598:	4628      	mov	r0, r5
 800959a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800959e:	f000 b8eb 	b.w	8009778 <_write_r>

080095a2 <__sseek>:
 80095a2:	b510      	push	{r4, lr}
 80095a4:	460c      	mov	r4, r1
 80095a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095aa:	f000 f8c1 	bl	8009730 <_lseek_r>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	bf15      	itete	ne
 80095b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80095b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80095ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095be:	81a3      	strheq	r3, [r4, #12]
 80095c0:	bf18      	it	ne
 80095c2:	81a3      	strhne	r3, [r4, #12]
 80095c4:	bd10      	pop	{r4, pc}

080095c6 <__sclose>:
 80095c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ca:	f000 b8a1 	b.w	8009710 <_close_r>

080095ce <__swbuf_r>:
 80095ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d0:	460e      	mov	r6, r1
 80095d2:	4614      	mov	r4, r2
 80095d4:	4605      	mov	r5, r0
 80095d6:	b118      	cbz	r0, 80095e0 <__swbuf_r+0x12>
 80095d8:	6a03      	ldr	r3, [r0, #32]
 80095da:	b90b      	cbnz	r3, 80095e0 <__swbuf_r+0x12>
 80095dc:	f7ff fec2 	bl	8009364 <__sinit>
 80095e0:	69a3      	ldr	r3, [r4, #24]
 80095e2:	60a3      	str	r3, [r4, #8]
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	071a      	lsls	r2, r3, #28
 80095e8:	d501      	bpl.n	80095ee <__swbuf_r+0x20>
 80095ea:	6923      	ldr	r3, [r4, #16]
 80095ec:	b943      	cbnz	r3, 8009600 <__swbuf_r+0x32>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4628      	mov	r0, r5
 80095f2:	f000 f82b 	bl	800964c <__swsetup_r>
 80095f6:	b118      	cbz	r0, 8009600 <__swbuf_r+0x32>
 80095f8:	f04f 37ff 	mov.w	r7, #4294967295
 80095fc:	4638      	mov	r0, r7
 80095fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	6922      	ldr	r2, [r4, #16]
 8009604:	1a98      	subs	r0, r3, r2
 8009606:	6963      	ldr	r3, [r4, #20]
 8009608:	b2f6      	uxtb	r6, r6
 800960a:	4283      	cmp	r3, r0
 800960c:	4637      	mov	r7, r6
 800960e:	dc05      	bgt.n	800961c <__swbuf_r+0x4e>
 8009610:	4621      	mov	r1, r4
 8009612:	4628      	mov	r0, r5
 8009614:	f003 f9b2 	bl	800c97c <_fflush_r>
 8009618:	2800      	cmp	r0, #0
 800961a:	d1ed      	bne.n	80095f8 <__swbuf_r+0x2a>
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	3b01      	subs	r3, #1
 8009620:	60a3      	str	r3, [r4, #8]
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	6022      	str	r2, [r4, #0]
 8009628:	701e      	strb	r6, [r3, #0]
 800962a:	6962      	ldr	r2, [r4, #20]
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	429a      	cmp	r2, r3
 8009630:	d004      	beq.n	800963c <__swbuf_r+0x6e>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	07db      	lsls	r3, r3, #31
 8009636:	d5e1      	bpl.n	80095fc <__swbuf_r+0x2e>
 8009638:	2e0a      	cmp	r6, #10
 800963a:	d1df      	bne.n	80095fc <__swbuf_r+0x2e>
 800963c:	4621      	mov	r1, r4
 800963e:	4628      	mov	r0, r5
 8009640:	f003 f99c 	bl	800c97c <_fflush_r>
 8009644:	2800      	cmp	r0, #0
 8009646:	d0d9      	beq.n	80095fc <__swbuf_r+0x2e>
 8009648:	e7d6      	b.n	80095f8 <__swbuf_r+0x2a>
	...

0800964c <__swsetup_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4b29      	ldr	r3, [pc, #164]	@ (80096f4 <__swsetup_r+0xa8>)
 8009650:	4605      	mov	r5, r0
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	460c      	mov	r4, r1
 8009656:	b118      	cbz	r0, 8009660 <__swsetup_r+0x14>
 8009658:	6a03      	ldr	r3, [r0, #32]
 800965a:	b90b      	cbnz	r3, 8009660 <__swsetup_r+0x14>
 800965c:	f7ff fe82 	bl	8009364 <__sinit>
 8009660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009664:	0719      	lsls	r1, r3, #28
 8009666:	d422      	bmi.n	80096ae <__swsetup_r+0x62>
 8009668:	06da      	lsls	r2, r3, #27
 800966a:	d407      	bmi.n	800967c <__swsetup_r+0x30>
 800966c:	2209      	movs	r2, #9
 800966e:	602a      	str	r2, [r5, #0]
 8009670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	f04f 30ff 	mov.w	r0, #4294967295
 800967a:	e033      	b.n	80096e4 <__swsetup_r+0x98>
 800967c:	0758      	lsls	r0, r3, #29
 800967e:	d512      	bpl.n	80096a6 <__swsetup_r+0x5a>
 8009680:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009682:	b141      	cbz	r1, 8009696 <__swsetup_r+0x4a>
 8009684:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009688:	4299      	cmp	r1, r3
 800968a:	d002      	beq.n	8009692 <__swsetup_r+0x46>
 800968c:	4628      	mov	r0, r5
 800968e:	f000 ff07 	bl	800a4a0 <_free_r>
 8009692:	2300      	movs	r3, #0
 8009694:	6363      	str	r3, [r4, #52]	@ 0x34
 8009696:	89a3      	ldrh	r3, [r4, #12]
 8009698:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800969c:	81a3      	strh	r3, [r4, #12]
 800969e:	2300      	movs	r3, #0
 80096a0:	6063      	str	r3, [r4, #4]
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	89a3      	ldrh	r3, [r4, #12]
 80096a8:	f043 0308 	orr.w	r3, r3, #8
 80096ac:	81a3      	strh	r3, [r4, #12]
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	b94b      	cbnz	r3, 80096c6 <__swsetup_r+0x7a>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096bc:	d003      	beq.n	80096c6 <__swsetup_r+0x7a>
 80096be:	4621      	mov	r1, r4
 80096c0:	4628      	mov	r0, r5
 80096c2:	f003 f9a9 	bl	800ca18 <__smakebuf_r>
 80096c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ca:	f013 0201 	ands.w	r2, r3, #1
 80096ce:	d00a      	beq.n	80096e6 <__swsetup_r+0x9a>
 80096d0:	2200      	movs	r2, #0
 80096d2:	60a2      	str	r2, [r4, #8]
 80096d4:	6962      	ldr	r2, [r4, #20]
 80096d6:	4252      	negs	r2, r2
 80096d8:	61a2      	str	r2, [r4, #24]
 80096da:	6922      	ldr	r2, [r4, #16]
 80096dc:	b942      	cbnz	r2, 80096f0 <__swsetup_r+0xa4>
 80096de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096e2:	d1c5      	bne.n	8009670 <__swsetup_r+0x24>
 80096e4:	bd38      	pop	{r3, r4, r5, pc}
 80096e6:	0799      	lsls	r1, r3, #30
 80096e8:	bf58      	it	pl
 80096ea:	6962      	ldrpl	r2, [r4, #20]
 80096ec:	60a2      	str	r2, [r4, #8]
 80096ee:	e7f4      	b.n	80096da <__swsetup_r+0x8e>
 80096f0:	2000      	movs	r0, #0
 80096f2:	e7f7      	b.n	80096e4 <__swsetup_r+0x98>
 80096f4:	20000090 	.word	0x20000090

080096f8 <memset>:
 80096f8:	4402      	add	r2, r0
 80096fa:	4603      	mov	r3, r0
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d100      	bne.n	8009702 <memset+0xa>
 8009700:	4770      	bx	lr
 8009702:	f803 1b01 	strb.w	r1, [r3], #1
 8009706:	e7f9      	b.n	80096fc <memset+0x4>

08009708 <_localeconv_r>:
 8009708:	4800      	ldr	r0, [pc, #0]	@ (800970c <_localeconv_r+0x4>)
 800970a:	4770      	bx	lr
 800970c:	200001d0 	.word	0x200001d0

08009710 <_close_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d06      	ldr	r5, [pc, #24]	@ (800972c <_close_r+0x1c>)
 8009714:	2300      	movs	r3, #0
 8009716:	4604      	mov	r4, r0
 8009718:	4608      	mov	r0, r1
 800971a:	602b      	str	r3, [r5, #0]
 800971c:	f7f9 fc7c 	bl	8003018 <_close>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	d102      	bne.n	800972a <_close_r+0x1a>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	b103      	cbz	r3, 800972a <_close_r+0x1a>
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	200005f8 	.word	0x200005f8

08009730 <_lseek_r>:
 8009730:	b538      	push	{r3, r4, r5, lr}
 8009732:	4d07      	ldr	r5, [pc, #28]	@ (8009750 <_lseek_r+0x20>)
 8009734:	4604      	mov	r4, r0
 8009736:	4608      	mov	r0, r1
 8009738:	4611      	mov	r1, r2
 800973a:	2200      	movs	r2, #0
 800973c:	602a      	str	r2, [r5, #0]
 800973e:	461a      	mov	r2, r3
 8009740:	f7f9 fc91 	bl	8003066 <_lseek>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d102      	bne.n	800974e <_lseek_r+0x1e>
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	b103      	cbz	r3, 800974e <_lseek_r+0x1e>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	200005f8 	.word	0x200005f8

08009754 <_read_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	@ (8009774 <_read_r+0x20>)
 8009758:	4604      	mov	r4, r0
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	2200      	movs	r2, #0
 8009760:	602a      	str	r2, [r5, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f7f9 fc3b 	bl	8002fde <_read>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_read_r+0x1e>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_read_r+0x1e>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	200005f8 	.word	0x200005f8

08009778 <_write_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d07      	ldr	r5, [pc, #28]	@ (8009798 <_write_r+0x20>)
 800977c:	4604      	mov	r4, r0
 800977e:	4608      	mov	r0, r1
 8009780:	4611      	mov	r1, r2
 8009782:	2200      	movs	r2, #0
 8009784:	602a      	str	r2, [r5, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	f7f8 ffb0 	bl	80026ec <_write>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_write_r+0x1e>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_write_r+0x1e>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	200005f8 	.word	0x200005f8

0800979c <__errno>:
 800979c:	4b01      	ldr	r3, [pc, #4]	@ (80097a4 <__errno+0x8>)
 800979e:	6818      	ldr	r0, [r3, #0]
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000090 	.word	0x20000090

080097a8 <__libc_init_array>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	4d0d      	ldr	r5, [pc, #52]	@ (80097e0 <__libc_init_array+0x38>)
 80097ac:	4c0d      	ldr	r4, [pc, #52]	@ (80097e4 <__libc_init_array+0x3c>)
 80097ae:	1b64      	subs	r4, r4, r5
 80097b0:	10a4      	asrs	r4, r4, #2
 80097b2:	2600      	movs	r6, #0
 80097b4:	42a6      	cmp	r6, r4
 80097b6:	d109      	bne.n	80097cc <__libc_init_array+0x24>
 80097b8:	4d0b      	ldr	r5, [pc, #44]	@ (80097e8 <__libc_init_array+0x40>)
 80097ba:	4c0c      	ldr	r4, [pc, #48]	@ (80097ec <__libc_init_array+0x44>)
 80097bc:	f003 ff36 	bl	800d62c <_init>
 80097c0:	1b64      	subs	r4, r4, r5
 80097c2:	10a4      	asrs	r4, r4, #2
 80097c4:	2600      	movs	r6, #0
 80097c6:	42a6      	cmp	r6, r4
 80097c8:	d105      	bne.n	80097d6 <__libc_init_array+0x2e>
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d0:	4798      	blx	r3
 80097d2:	3601      	adds	r6, #1
 80097d4:	e7ee      	b.n	80097b4 <__libc_init_array+0xc>
 80097d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80097da:	4798      	blx	r3
 80097dc:	3601      	adds	r6, #1
 80097de:	e7f2      	b.n	80097c6 <__libc_init_array+0x1e>
 80097e0:	0800dbe4 	.word	0x0800dbe4
 80097e4:	0800dbe4 	.word	0x0800dbe4
 80097e8:	0800dbe4 	.word	0x0800dbe4
 80097ec:	0800dbe8 	.word	0x0800dbe8

080097f0 <__retarget_lock_init_recursive>:
 80097f0:	4770      	bx	lr

080097f2 <__retarget_lock_acquire_recursive>:
 80097f2:	4770      	bx	lr

080097f4 <__retarget_lock_release_recursive>:
 80097f4:	4770      	bx	lr
	...

080097f8 <nanf>:
 80097f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009800 <nanf+0x8>
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	7fc00000 	.word	0x7fc00000

08009804 <quorem>:
 8009804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009808:	6903      	ldr	r3, [r0, #16]
 800980a:	690c      	ldr	r4, [r1, #16]
 800980c:	42a3      	cmp	r3, r4
 800980e:	4607      	mov	r7, r0
 8009810:	db7e      	blt.n	8009910 <quorem+0x10c>
 8009812:	3c01      	subs	r4, #1
 8009814:	f101 0814 	add.w	r8, r1, #20
 8009818:	00a3      	lsls	r3, r4, #2
 800981a:	f100 0514 	add.w	r5, r0, #20
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800982a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800982e:	3301      	adds	r3, #1
 8009830:	429a      	cmp	r2, r3
 8009832:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009836:	fbb2 f6f3 	udiv	r6, r2, r3
 800983a:	d32e      	bcc.n	800989a <quorem+0x96>
 800983c:	f04f 0a00 	mov.w	sl, #0
 8009840:	46c4      	mov	ip, r8
 8009842:	46ae      	mov	lr, r5
 8009844:	46d3      	mov	fp, sl
 8009846:	f85c 3b04 	ldr.w	r3, [ip], #4
 800984a:	b298      	uxth	r0, r3
 800984c:	fb06 a000 	mla	r0, r6, r0, sl
 8009850:	0c02      	lsrs	r2, r0, #16
 8009852:	0c1b      	lsrs	r3, r3, #16
 8009854:	fb06 2303 	mla	r3, r6, r3, r2
 8009858:	f8de 2000 	ldr.w	r2, [lr]
 800985c:	b280      	uxth	r0, r0
 800985e:	b292      	uxth	r2, r2
 8009860:	1a12      	subs	r2, r2, r0
 8009862:	445a      	add	r2, fp
 8009864:	f8de 0000 	ldr.w	r0, [lr]
 8009868:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800986c:	b29b      	uxth	r3, r3
 800986e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009872:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009876:	b292      	uxth	r2, r2
 8009878:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800987c:	45e1      	cmp	r9, ip
 800987e:	f84e 2b04 	str.w	r2, [lr], #4
 8009882:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009886:	d2de      	bcs.n	8009846 <quorem+0x42>
 8009888:	9b00      	ldr	r3, [sp, #0]
 800988a:	58eb      	ldr	r3, [r5, r3]
 800988c:	b92b      	cbnz	r3, 800989a <quorem+0x96>
 800988e:	9b01      	ldr	r3, [sp, #4]
 8009890:	3b04      	subs	r3, #4
 8009892:	429d      	cmp	r5, r3
 8009894:	461a      	mov	r2, r3
 8009896:	d32f      	bcc.n	80098f8 <quorem+0xf4>
 8009898:	613c      	str	r4, [r7, #16]
 800989a:	4638      	mov	r0, r7
 800989c:	f001 f9c4 	bl	800ac28 <__mcmp>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	db25      	blt.n	80098f0 <quorem+0xec>
 80098a4:	4629      	mov	r1, r5
 80098a6:	2000      	movs	r0, #0
 80098a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80098ac:	f8d1 c000 	ldr.w	ip, [r1]
 80098b0:	fa1f fe82 	uxth.w	lr, r2
 80098b4:	fa1f f38c 	uxth.w	r3, ip
 80098b8:	eba3 030e 	sub.w	r3, r3, lr
 80098bc:	4403      	add	r3, r0
 80098be:	0c12      	lsrs	r2, r2, #16
 80098c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ce:	45c1      	cmp	r9, r8
 80098d0:	f841 3b04 	str.w	r3, [r1], #4
 80098d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098d8:	d2e6      	bcs.n	80098a8 <quorem+0xa4>
 80098da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098e2:	b922      	cbnz	r2, 80098ee <quorem+0xea>
 80098e4:	3b04      	subs	r3, #4
 80098e6:	429d      	cmp	r5, r3
 80098e8:	461a      	mov	r2, r3
 80098ea:	d30b      	bcc.n	8009904 <quorem+0x100>
 80098ec:	613c      	str	r4, [r7, #16]
 80098ee:	3601      	adds	r6, #1
 80098f0:	4630      	mov	r0, r6
 80098f2:	b003      	add	sp, #12
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	6812      	ldr	r2, [r2, #0]
 80098fa:	3b04      	subs	r3, #4
 80098fc:	2a00      	cmp	r2, #0
 80098fe:	d1cb      	bne.n	8009898 <quorem+0x94>
 8009900:	3c01      	subs	r4, #1
 8009902:	e7c6      	b.n	8009892 <quorem+0x8e>
 8009904:	6812      	ldr	r2, [r2, #0]
 8009906:	3b04      	subs	r3, #4
 8009908:	2a00      	cmp	r2, #0
 800990a:	d1ef      	bne.n	80098ec <quorem+0xe8>
 800990c:	3c01      	subs	r4, #1
 800990e:	e7ea      	b.n	80098e6 <quorem+0xe2>
 8009910:	2000      	movs	r0, #0
 8009912:	e7ee      	b.n	80098f2 <quorem+0xee>
 8009914:	0000      	movs	r0, r0
	...

08009918 <_dtoa_r>:
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	69c7      	ldr	r7, [r0, #28]
 800991e:	b099      	sub	sp, #100	@ 0x64
 8009920:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009924:	ec55 4b10 	vmov	r4, r5, d0
 8009928:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800992a:	9109      	str	r1, [sp, #36]	@ 0x24
 800992c:	4683      	mov	fp, r0
 800992e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009930:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009932:	b97f      	cbnz	r7, 8009954 <_dtoa_r+0x3c>
 8009934:	2010      	movs	r0, #16
 8009936:	f000 fdfd 	bl	800a534 <malloc>
 800993a:	4602      	mov	r2, r0
 800993c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009940:	b920      	cbnz	r0, 800994c <_dtoa_r+0x34>
 8009942:	4ba7      	ldr	r3, [pc, #668]	@ (8009be0 <_dtoa_r+0x2c8>)
 8009944:	21ef      	movs	r1, #239	@ 0xef
 8009946:	48a7      	ldr	r0, [pc, #668]	@ (8009be4 <_dtoa_r+0x2cc>)
 8009948:	f003 f98a 	bl	800cc60 <__assert_func>
 800994c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009950:	6007      	str	r7, [r0, #0]
 8009952:	60c7      	str	r7, [r0, #12]
 8009954:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009958:	6819      	ldr	r1, [r3, #0]
 800995a:	b159      	cbz	r1, 8009974 <_dtoa_r+0x5c>
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	604a      	str	r2, [r1, #4]
 8009960:	2301      	movs	r3, #1
 8009962:	4093      	lsls	r3, r2
 8009964:	608b      	str	r3, [r1, #8]
 8009966:	4658      	mov	r0, fp
 8009968:	f000 feda 	bl	800a720 <_Bfree>
 800996c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	1e2b      	subs	r3, r5, #0
 8009976:	bfb9      	ittee	lt
 8009978:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800997c:	9303      	strlt	r3, [sp, #12]
 800997e:	2300      	movge	r3, #0
 8009980:	6033      	strge	r3, [r6, #0]
 8009982:	9f03      	ldr	r7, [sp, #12]
 8009984:	4b98      	ldr	r3, [pc, #608]	@ (8009be8 <_dtoa_r+0x2d0>)
 8009986:	bfbc      	itt	lt
 8009988:	2201      	movlt	r2, #1
 800998a:	6032      	strlt	r2, [r6, #0]
 800998c:	43bb      	bics	r3, r7
 800998e:	d112      	bne.n	80099b6 <_dtoa_r+0x9e>
 8009990:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009992:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800999c:	4323      	orrs	r3, r4
 800999e:	f000 854d 	beq.w	800a43c <_dtoa_r+0xb24>
 80099a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009bfc <_dtoa_r+0x2e4>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 854f 	beq.w	800a44c <_dtoa_r+0xb34>
 80099ae:	f10a 0303 	add.w	r3, sl, #3
 80099b2:	f000 bd49 	b.w	800a448 <_dtoa_r+0xb30>
 80099b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099ba:	2200      	movs	r2, #0
 80099bc:	ec51 0b17 	vmov	r0, r1, d7
 80099c0:	2300      	movs	r3, #0
 80099c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80099c6:	f7f7 f89f 	bl	8000b08 <__aeabi_dcmpeq>
 80099ca:	4680      	mov	r8, r0
 80099cc:	b158      	cbz	r0, 80099e6 <_dtoa_r+0xce>
 80099ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80099d0:	2301      	movs	r3, #1
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099d6:	b113      	cbz	r3, 80099de <_dtoa_r+0xc6>
 80099d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80099da:	4b84      	ldr	r3, [pc, #528]	@ (8009bec <_dtoa_r+0x2d4>)
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009c00 <_dtoa_r+0x2e8>
 80099e2:	f000 bd33 	b.w	800a44c <_dtoa_r+0xb34>
 80099e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80099ea:	aa16      	add	r2, sp, #88	@ 0x58
 80099ec:	a917      	add	r1, sp, #92	@ 0x5c
 80099ee:	4658      	mov	r0, fp
 80099f0:	f001 fa3a 	bl	800ae68 <__d2b>
 80099f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099f8:	4681      	mov	r9, r0
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d077      	beq.n	8009aee <_dtoa_r+0x1d6>
 80099fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a18:	4619      	mov	r1, r3
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4b74      	ldr	r3, [pc, #464]	@ (8009bf0 <_dtoa_r+0x2d8>)
 8009a1e:	f7f6 fc53 	bl	80002c8 <__aeabi_dsub>
 8009a22:	a369      	add	r3, pc, #420	@ (adr r3, 8009bc8 <_dtoa_r+0x2b0>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fe06 	bl	8000638 <__aeabi_dmul>
 8009a2c:	a368      	add	r3, pc, #416	@ (adr r3, 8009bd0 <_dtoa_r+0x2b8>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fc4b 	bl	80002cc <__adddf3>
 8009a36:	4604      	mov	r4, r0
 8009a38:	4630      	mov	r0, r6
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	f7f6 fd92 	bl	8000564 <__aeabi_i2d>
 8009a40:	a365      	add	r3, pc, #404	@ (adr r3, 8009bd8 <_dtoa_r+0x2c0>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fdf7 	bl	8000638 <__aeabi_dmul>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f6 fc3b 	bl	80002cc <__adddf3>
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	f7f7 f89d 	bl	8000b98 <__aeabi_d2iz>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4607      	mov	r7, r0
 8009a62:	2300      	movs	r3, #0
 8009a64:	4620      	mov	r0, r4
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7f7 f858 	bl	8000b1c <__aeabi_dcmplt>
 8009a6c:	b140      	cbz	r0, 8009a80 <_dtoa_r+0x168>
 8009a6e:	4638      	mov	r0, r7
 8009a70:	f7f6 fd78 	bl	8000564 <__aeabi_i2d>
 8009a74:	4622      	mov	r2, r4
 8009a76:	462b      	mov	r3, r5
 8009a78:	f7f7 f846 	bl	8000b08 <__aeabi_dcmpeq>
 8009a7c:	b900      	cbnz	r0, 8009a80 <_dtoa_r+0x168>
 8009a7e:	3f01      	subs	r7, #1
 8009a80:	2f16      	cmp	r7, #22
 8009a82:	d851      	bhi.n	8009b28 <_dtoa_r+0x210>
 8009a84:	4b5b      	ldr	r3, [pc, #364]	@ (8009bf4 <_dtoa_r+0x2dc>)
 8009a86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a92:	f7f7 f843 	bl	8000b1c <__aeabi_dcmplt>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d048      	beq.n	8009b2c <_dtoa_r+0x214>
 8009a9a:	3f01      	subs	r7, #1
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009aa0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009aa2:	1b9b      	subs	r3, r3, r6
 8009aa4:	1e5a      	subs	r2, r3, #1
 8009aa6:	bf44      	itt	mi
 8009aa8:	f1c3 0801 	rsbmi	r8, r3, #1
 8009aac:	2300      	movmi	r3, #0
 8009aae:	9208      	str	r2, [sp, #32]
 8009ab0:	bf54      	ite	pl
 8009ab2:	f04f 0800 	movpl.w	r8, #0
 8009ab6:	9308      	strmi	r3, [sp, #32]
 8009ab8:	2f00      	cmp	r7, #0
 8009aba:	db39      	blt.n	8009b30 <_dtoa_r+0x218>
 8009abc:	9b08      	ldr	r3, [sp, #32]
 8009abe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ac0:	443b      	add	r3, r7
 8009ac2:	9308      	str	r3, [sp, #32]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aca:	2b09      	cmp	r3, #9
 8009acc:	d864      	bhi.n	8009b98 <_dtoa_r+0x280>
 8009ace:	2b05      	cmp	r3, #5
 8009ad0:	bfc4      	itt	gt
 8009ad2:	3b04      	subgt	r3, #4
 8009ad4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad8:	f1a3 0302 	sub.w	r3, r3, #2
 8009adc:	bfcc      	ite	gt
 8009ade:	2400      	movgt	r4, #0
 8009ae0:	2401      	movle	r4, #1
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d863      	bhi.n	8009bae <_dtoa_r+0x296>
 8009ae6:	e8df f003 	tbb	[pc, r3]
 8009aea:	372a      	.short	0x372a
 8009aec:	5535      	.short	0x5535
 8009aee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009af2:	441e      	add	r6, r3
 8009af4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	bfc1      	itttt	gt
 8009afc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b00:	409f      	lslgt	r7, r3
 8009b02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b0a:	bfd6      	itet	le
 8009b0c:	f1c3 0320 	rsble	r3, r3, #32
 8009b10:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b14:	fa04 f003 	lslle.w	r0, r4, r3
 8009b18:	f7f6 fd14 	bl	8000544 <__aeabi_ui2d>
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b22:	3e01      	subs	r6, #1
 8009b24:	9214      	str	r2, [sp, #80]	@ 0x50
 8009b26:	e777      	b.n	8009a18 <_dtoa_r+0x100>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e7b8      	b.n	8009a9e <_dtoa_r+0x186>
 8009b2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009b2e:	e7b7      	b.n	8009aa0 <_dtoa_r+0x188>
 8009b30:	427b      	negs	r3, r7
 8009b32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b34:	2300      	movs	r3, #0
 8009b36:	eba8 0807 	sub.w	r8, r8, r7
 8009b3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b3c:	e7c4      	b.n	8009ac8 <_dtoa_r+0x1b0>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dc35      	bgt.n	8009bb4 <_dtoa_r+0x29c>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	9307      	str	r3, [sp, #28]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b52:	e00b      	b.n	8009b6c <_dtoa_r+0x254>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e7f3      	b.n	8009b40 <_dtoa_r+0x228>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b5e:	18fb      	adds	r3, r7, r3
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	3301      	adds	r3, #1
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	9307      	str	r3, [sp, #28]
 8009b68:	bfb8      	it	lt
 8009b6a:	2301      	movlt	r3, #1
 8009b6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b70:	2100      	movs	r1, #0
 8009b72:	2204      	movs	r2, #4
 8009b74:	f102 0514 	add.w	r5, r2, #20
 8009b78:	429d      	cmp	r5, r3
 8009b7a:	d91f      	bls.n	8009bbc <_dtoa_r+0x2a4>
 8009b7c:	6041      	str	r1, [r0, #4]
 8009b7e:	4658      	mov	r0, fp
 8009b80:	f000 fd8e 	bl	800a6a0 <_Balloc>
 8009b84:	4682      	mov	sl, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d13c      	bne.n	8009c04 <_dtoa_r+0x2ec>
 8009b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf8 <_dtoa_r+0x2e0>)
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b92:	e6d8      	b.n	8009946 <_dtoa_r+0x2e>
 8009b94:	2301      	movs	r3, #1
 8009b96:	e7e0      	b.n	8009b5a <_dtoa_r+0x242>
 8009b98:	2401      	movs	r4, #1
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	9307      	str	r3, [sp, #28]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	2312      	movs	r3, #18
 8009bac:	e7d0      	b.n	8009b50 <_dtoa_r+0x238>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bb2:	e7f5      	b.n	8009ba0 <_dtoa_r+0x288>
 8009bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	9307      	str	r3, [sp, #28]
 8009bba:	e7d7      	b.n	8009b6c <_dtoa_r+0x254>
 8009bbc:	3101      	adds	r1, #1
 8009bbe:	0052      	lsls	r2, r2, #1
 8009bc0:	e7d8      	b.n	8009b74 <_dtoa_r+0x25c>
 8009bc2:	bf00      	nop
 8009bc4:	f3af 8000 	nop.w
 8009bc8:	636f4361 	.word	0x636f4361
 8009bcc:	3fd287a7 	.word	0x3fd287a7
 8009bd0:	8b60c8b3 	.word	0x8b60c8b3
 8009bd4:	3fc68a28 	.word	0x3fc68a28
 8009bd8:	509f79fb 	.word	0x509f79fb
 8009bdc:	3fd34413 	.word	0x3fd34413
 8009be0:	0800d7d8 	.word	0x0800d7d8
 8009be4:	0800d7ef 	.word	0x0800d7ef
 8009be8:	7ff00000 	.word	0x7ff00000
 8009bec:	0800db31 	.word	0x0800db31
 8009bf0:	3ff80000 	.word	0x3ff80000
 8009bf4:	0800d8e8 	.word	0x0800d8e8
 8009bf8:	0800d847 	.word	0x0800d847
 8009bfc:	0800d7d4 	.word	0x0800d7d4
 8009c00:	0800db30 	.word	0x0800db30
 8009c04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c08:	6018      	str	r0, [r3, #0]
 8009c0a:	9b07      	ldr	r3, [sp, #28]
 8009c0c:	2b0e      	cmp	r3, #14
 8009c0e:	f200 80a4 	bhi.w	8009d5a <_dtoa_r+0x442>
 8009c12:	2c00      	cmp	r4, #0
 8009c14:	f000 80a1 	beq.w	8009d5a <_dtoa_r+0x442>
 8009c18:	2f00      	cmp	r7, #0
 8009c1a:	dd33      	ble.n	8009c84 <_dtoa_r+0x36c>
 8009c1c:	4bad      	ldr	r3, [pc, #692]	@ (8009ed4 <_dtoa_r+0x5bc>)
 8009c1e:	f007 020f 	and.w	r2, r7, #15
 8009c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c26:	ed93 7b00 	vldr	d7, [r3]
 8009c2a:	05f8      	lsls	r0, r7, #23
 8009c2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009c30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c34:	d516      	bpl.n	8009c64 <_dtoa_r+0x34c>
 8009c36:	4ba8      	ldr	r3, [pc, #672]	@ (8009ed8 <_dtoa_r+0x5c0>)
 8009c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c40:	f7f6 fe24 	bl	800088c <__aeabi_ddiv>
 8009c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c48:	f004 040f 	and.w	r4, r4, #15
 8009c4c:	2603      	movs	r6, #3
 8009c4e:	4da2      	ldr	r5, [pc, #648]	@ (8009ed8 <_dtoa_r+0x5c0>)
 8009c50:	b954      	cbnz	r4, 8009c68 <_dtoa_r+0x350>
 8009c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c5a:	f7f6 fe17 	bl	800088c <__aeabi_ddiv>
 8009c5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c62:	e028      	b.n	8009cb6 <_dtoa_r+0x39e>
 8009c64:	2602      	movs	r6, #2
 8009c66:	e7f2      	b.n	8009c4e <_dtoa_r+0x336>
 8009c68:	07e1      	lsls	r1, r4, #31
 8009c6a:	d508      	bpl.n	8009c7e <_dtoa_r+0x366>
 8009c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c74:	f7f6 fce0 	bl	8000638 <__aeabi_dmul>
 8009c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c7c:	3601      	adds	r6, #1
 8009c7e:	1064      	asrs	r4, r4, #1
 8009c80:	3508      	adds	r5, #8
 8009c82:	e7e5      	b.n	8009c50 <_dtoa_r+0x338>
 8009c84:	f000 80d2 	beq.w	8009e2c <_dtoa_r+0x514>
 8009c88:	427c      	negs	r4, r7
 8009c8a:	4b92      	ldr	r3, [pc, #584]	@ (8009ed4 <_dtoa_r+0x5bc>)
 8009c8c:	4d92      	ldr	r5, [pc, #584]	@ (8009ed8 <_dtoa_r+0x5c0>)
 8009c8e:	f004 020f 	and.w	r2, r4, #15
 8009c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c9e:	f7f6 fccb 	bl	8000638 <__aeabi_dmul>
 8009ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca6:	1124      	asrs	r4, r4, #4
 8009ca8:	2300      	movs	r3, #0
 8009caa:	2602      	movs	r6, #2
 8009cac:	2c00      	cmp	r4, #0
 8009cae:	f040 80b2 	bne.w	8009e16 <_dtoa_r+0x4fe>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1d3      	bne.n	8009c5e <_dtoa_r+0x346>
 8009cb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 80b7 	beq.w	8009e30 <_dtoa_r+0x518>
 8009cc2:	4b86      	ldr	r3, [pc, #536]	@ (8009edc <_dtoa_r+0x5c4>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7f6 ff27 	bl	8000b1c <__aeabi_dcmplt>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f000 80ae 	beq.w	8009e30 <_dtoa_r+0x518>
 8009cd4:	9b07      	ldr	r3, [sp, #28]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 80aa 	beq.w	8009e30 <_dtoa_r+0x518>
 8009cdc:	9b00      	ldr	r3, [sp, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	dd37      	ble.n	8009d52 <_dtoa_r+0x43a>
 8009ce2:	1e7b      	subs	r3, r7, #1
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	4b7d      	ldr	r3, [pc, #500]	@ (8009ee0 <_dtoa_r+0x5c8>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	4629      	mov	r1, r5
 8009cee:	f7f6 fca3 	bl	8000638 <__aeabi_dmul>
 8009cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf6:	9c00      	ldr	r4, [sp, #0]
 8009cf8:	3601      	adds	r6, #1
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7f6 fc32 	bl	8000564 <__aeabi_i2d>
 8009d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d04:	f7f6 fc98 	bl	8000638 <__aeabi_dmul>
 8009d08:	4b76      	ldr	r3, [pc, #472]	@ (8009ee4 <_dtoa_r+0x5cc>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f7f6 fade 	bl	80002cc <__adddf3>
 8009d10:	4605      	mov	r5, r0
 8009d12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d16:	2c00      	cmp	r4, #0
 8009d18:	f040 808d 	bne.w	8009e36 <_dtoa_r+0x51e>
 8009d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d20:	4b71      	ldr	r3, [pc, #452]	@ (8009ee8 <_dtoa_r+0x5d0>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	f7f6 fad0 	bl	80002c8 <__aeabi_dsub>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d30:	462a      	mov	r2, r5
 8009d32:	4633      	mov	r3, r6
 8009d34:	f7f6 ff10 	bl	8000b58 <__aeabi_dcmpgt>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	f040 828b 	bne.w	800a254 <_dtoa_r+0x93c>
 8009d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d42:	462a      	mov	r2, r5
 8009d44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d48:	f7f6 fee8 	bl	8000b1c <__aeabi_dcmplt>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	f040 8128 	bne.w	8009fa2 <_dtoa_r+0x68a>
 8009d52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f2c0 815a 	blt.w	800a016 <_dtoa_r+0x6fe>
 8009d62:	2f0e      	cmp	r7, #14
 8009d64:	f300 8157 	bgt.w	800a016 <_dtoa_r+0x6fe>
 8009d68:	4b5a      	ldr	r3, [pc, #360]	@ (8009ed4 <_dtoa_r+0x5bc>)
 8009d6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d6e:	ed93 7b00 	vldr	d7, [r3]
 8009d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	ed8d 7b00 	vstr	d7, [sp]
 8009d7a:	da03      	bge.n	8009d84 <_dtoa_r+0x46c>
 8009d7c:	9b07      	ldr	r3, [sp, #28]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f340 8101 	ble.w	8009f86 <_dtoa_r+0x66e>
 8009d84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d88:	4656      	mov	r6, sl
 8009d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fd7b 	bl	800088c <__aeabi_ddiv>
 8009d96:	f7f6 feff 	bl	8000b98 <__aeabi_d2iz>
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	f7f6 fbe2 	bl	8000564 <__aeabi_i2d>
 8009da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009da4:	f7f6 fc48 	bl	8000638 <__aeabi_dmul>
 8009da8:	4602      	mov	r2, r0
 8009daa:	460b      	mov	r3, r1
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009db4:	f7f6 fa88 	bl	80002c8 <__aeabi_dsub>
 8009db8:	f806 4b01 	strb.w	r4, [r6], #1
 8009dbc:	9d07      	ldr	r5, [sp, #28]
 8009dbe:	eba6 040a 	sub.w	r4, r6, sl
 8009dc2:	42a5      	cmp	r5, r4
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	f040 8117 	bne.w	8009ffa <_dtoa_r+0x6e2>
 8009dcc:	f7f6 fa7e 	bl	80002cc <__adddf3>
 8009dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	460d      	mov	r5, r1
 8009dd8:	f7f6 febe 	bl	8000b58 <__aeabi_dcmpgt>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	f040 80f9 	bne.w	8009fd4 <_dtoa_r+0x6bc>
 8009de2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fe8d 	bl	8000b08 <__aeabi_dcmpeq>
 8009dee:	b118      	cbz	r0, 8009df8 <_dtoa_r+0x4e0>
 8009df0:	f018 0f01 	tst.w	r8, #1
 8009df4:	f040 80ee 	bne.w	8009fd4 <_dtoa_r+0x6bc>
 8009df8:	4649      	mov	r1, r9
 8009dfa:	4658      	mov	r0, fp
 8009dfc:	f000 fc90 	bl	800a720 <_Bfree>
 8009e00:	2300      	movs	r3, #0
 8009e02:	7033      	strb	r3, [r6, #0]
 8009e04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e06:	3701      	adds	r7, #1
 8009e08:	601f      	str	r7, [r3, #0]
 8009e0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 831d 	beq.w	800a44c <_dtoa_r+0xb34>
 8009e12:	601e      	str	r6, [r3, #0]
 8009e14:	e31a      	b.n	800a44c <_dtoa_r+0xb34>
 8009e16:	07e2      	lsls	r2, r4, #31
 8009e18:	d505      	bpl.n	8009e26 <_dtoa_r+0x50e>
 8009e1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e1e:	f7f6 fc0b 	bl	8000638 <__aeabi_dmul>
 8009e22:	3601      	adds	r6, #1
 8009e24:	2301      	movs	r3, #1
 8009e26:	1064      	asrs	r4, r4, #1
 8009e28:	3508      	adds	r5, #8
 8009e2a:	e73f      	b.n	8009cac <_dtoa_r+0x394>
 8009e2c:	2602      	movs	r6, #2
 8009e2e:	e742      	b.n	8009cb6 <_dtoa_r+0x39e>
 8009e30:	9c07      	ldr	r4, [sp, #28]
 8009e32:	9704      	str	r7, [sp, #16]
 8009e34:	e761      	b.n	8009cfa <_dtoa_r+0x3e2>
 8009e36:	4b27      	ldr	r3, [pc, #156]	@ (8009ed4 <_dtoa_r+0x5bc>)
 8009e38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e42:	4454      	add	r4, sl
 8009e44:	2900      	cmp	r1, #0
 8009e46:	d053      	beq.n	8009ef0 <_dtoa_r+0x5d8>
 8009e48:	4928      	ldr	r1, [pc, #160]	@ (8009eec <_dtoa_r+0x5d4>)
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f7f6 fd1e 	bl	800088c <__aeabi_ddiv>
 8009e50:	4633      	mov	r3, r6
 8009e52:	462a      	mov	r2, r5
 8009e54:	f7f6 fa38 	bl	80002c8 <__aeabi_dsub>
 8009e58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e5c:	4656      	mov	r6, sl
 8009e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e62:	f7f6 fe99 	bl	8000b98 <__aeabi_d2iz>
 8009e66:	4605      	mov	r5, r0
 8009e68:	f7f6 fb7c 	bl	8000564 <__aeabi_i2d>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e74:	f7f6 fa28 	bl	80002c8 <__aeabi_dsub>
 8009e78:	3530      	adds	r5, #48	@ 0x30
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e82:	f806 5b01 	strb.w	r5, [r6], #1
 8009e86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e8a:	f7f6 fe47 	bl	8000b1c <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d171      	bne.n	8009f76 <_dtoa_r+0x65e>
 8009e92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e96:	4911      	ldr	r1, [pc, #68]	@ (8009edc <_dtoa_r+0x5c4>)
 8009e98:	2000      	movs	r0, #0
 8009e9a:	f7f6 fa15 	bl	80002c8 <__aeabi_dsub>
 8009e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ea2:	f7f6 fe3b 	bl	8000b1c <__aeabi_dcmplt>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f040 8095 	bne.w	8009fd6 <_dtoa_r+0x6be>
 8009eac:	42a6      	cmp	r6, r4
 8009eae:	f43f af50 	beq.w	8009d52 <_dtoa_r+0x43a>
 8009eb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee0 <_dtoa_r+0x5c8>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f7f6 fbbd 	bl	8000638 <__aeabi_dmul>
 8009ebe:	4b08      	ldr	r3, [pc, #32]	@ (8009ee0 <_dtoa_r+0x5c8>)
 8009ec0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eca:	f7f6 fbb5 	bl	8000638 <__aeabi_dmul>
 8009ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed2:	e7c4      	b.n	8009e5e <_dtoa_r+0x546>
 8009ed4:	0800d8e8 	.word	0x0800d8e8
 8009ed8:	0800d8c0 	.word	0x0800d8c0
 8009edc:	3ff00000 	.word	0x3ff00000
 8009ee0:	40240000 	.word	0x40240000
 8009ee4:	401c0000 	.word	0x401c0000
 8009ee8:	40140000 	.word	0x40140000
 8009eec:	3fe00000 	.word	0x3fe00000
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	f7f6 fba0 	bl	8000638 <__aeabi_dmul>
 8009ef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009efc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009efe:	4656      	mov	r6, sl
 8009f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f04:	f7f6 fe48 	bl	8000b98 <__aeabi_d2iz>
 8009f08:	4605      	mov	r5, r0
 8009f0a:	f7f6 fb2b 	bl	8000564 <__aeabi_i2d>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f16:	f7f6 f9d7 	bl	80002c8 <__aeabi_dsub>
 8009f1a:	3530      	adds	r5, #48	@ 0x30
 8009f1c:	f806 5b01 	strb.w	r5, [r6], #1
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	42a6      	cmp	r6, r4
 8009f26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f2a:	f04f 0200 	mov.w	r2, #0
 8009f2e:	d124      	bne.n	8009f7a <_dtoa_r+0x662>
 8009f30:	4bac      	ldr	r3, [pc, #688]	@ (800a1e4 <_dtoa_r+0x8cc>)
 8009f32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f36:	f7f6 f9c9 	bl	80002cc <__adddf3>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f42:	f7f6 fe09 	bl	8000b58 <__aeabi_dcmpgt>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d145      	bne.n	8009fd6 <_dtoa_r+0x6be>
 8009f4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f4e:	49a5      	ldr	r1, [pc, #660]	@ (800a1e4 <_dtoa_r+0x8cc>)
 8009f50:	2000      	movs	r0, #0
 8009f52:	f7f6 f9b9 	bl	80002c8 <__aeabi_dsub>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f5e:	f7f6 fddd 	bl	8000b1c <__aeabi_dcmplt>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	f43f aef5 	beq.w	8009d52 <_dtoa_r+0x43a>
 8009f68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009f6a:	1e73      	subs	r3, r6, #1
 8009f6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f72:	2b30      	cmp	r3, #48	@ 0x30
 8009f74:	d0f8      	beq.n	8009f68 <_dtoa_r+0x650>
 8009f76:	9f04      	ldr	r7, [sp, #16]
 8009f78:	e73e      	b.n	8009df8 <_dtoa_r+0x4e0>
 8009f7a:	4b9b      	ldr	r3, [pc, #620]	@ (800a1e8 <_dtoa_r+0x8d0>)
 8009f7c:	f7f6 fb5c 	bl	8000638 <__aeabi_dmul>
 8009f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f84:	e7bc      	b.n	8009f00 <_dtoa_r+0x5e8>
 8009f86:	d10c      	bne.n	8009fa2 <_dtoa_r+0x68a>
 8009f88:	4b98      	ldr	r3, [pc, #608]	@ (800a1ec <_dtoa_r+0x8d4>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f90:	f7f6 fb52 	bl	8000638 <__aeabi_dmul>
 8009f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f98:	f7f6 fdd4 	bl	8000b44 <__aeabi_dcmpge>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f000 8157 	beq.w	800a250 <_dtoa_r+0x938>
 8009fa2:	2400      	movs	r4, #0
 8009fa4:	4625      	mov	r5, r4
 8009fa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fa8:	43db      	mvns	r3, r3
 8009faa:	9304      	str	r3, [sp, #16]
 8009fac:	4656      	mov	r6, sl
 8009fae:	2700      	movs	r7, #0
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4658      	mov	r0, fp
 8009fb4:	f000 fbb4 	bl	800a720 <_Bfree>
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	d0dc      	beq.n	8009f76 <_dtoa_r+0x65e>
 8009fbc:	b12f      	cbz	r7, 8009fca <_dtoa_r+0x6b2>
 8009fbe:	42af      	cmp	r7, r5
 8009fc0:	d003      	beq.n	8009fca <_dtoa_r+0x6b2>
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	4658      	mov	r0, fp
 8009fc6:	f000 fbab 	bl	800a720 <_Bfree>
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4658      	mov	r0, fp
 8009fce:	f000 fba7 	bl	800a720 <_Bfree>
 8009fd2:	e7d0      	b.n	8009f76 <_dtoa_r+0x65e>
 8009fd4:	9704      	str	r7, [sp, #16]
 8009fd6:	4633      	mov	r3, r6
 8009fd8:	461e      	mov	r6, r3
 8009fda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fde:	2a39      	cmp	r2, #57	@ 0x39
 8009fe0:	d107      	bne.n	8009ff2 <_dtoa_r+0x6da>
 8009fe2:	459a      	cmp	sl, r3
 8009fe4:	d1f8      	bne.n	8009fd8 <_dtoa_r+0x6c0>
 8009fe6:	9a04      	ldr	r2, [sp, #16]
 8009fe8:	3201      	adds	r2, #1
 8009fea:	9204      	str	r2, [sp, #16]
 8009fec:	2230      	movs	r2, #48	@ 0x30
 8009fee:	f88a 2000 	strb.w	r2, [sl]
 8009ff2:	781a      	ldrb	r2, [r3, #0]
 8009ff4:	3201      	adds	r2, #1
 8009ff6:	701a      	strb	r2, [r3, #0]
 8009ff8:	e7bd      	b.n	8009f76 <_dtoa_r+0x65e>
 8009ffa:	4b7b      	ldr	r3, [pc, #492]	@ (800a1e8 <_dtoa_r+0x8d0>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f7f6 fb1b 	bl	8000638 <__aeabi_dmul>
 800a002:	2200      	movs	r2, #0
 800a004:	2300      	movs	r3, #0
 800a006:	4604      	mov	r4, r0
 800a008:	460d      	mov	r5, r1
 800a00a:	f7f6 fd7d 	bl	8000b08 <__aeabi_dcmpeq>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f aebb 	beq.w	8009d8a <_dtoa_r+0x472>
 800a014:	e6f0      	b.n	8009df8 <_dtoa_r+0x4e0>
 800a016:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a018:	2a00      	cmp	r2, #0
 800a01a:	f000 80db 	beq.w	800a1d4 <_dtoa_r+0x8bc>
 800a01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a020:	2a01      	cmp	r2, #1
 800a022:	f300 80bf 	bgt.w	800a1a4 <_dtoa_r+0x88c>
 800a026:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a028:	2a00      	cmp	r2, #0
 800a02a:	f000 80b7 	beq.w	800a19c <_dtoa_r+0x884>
 800a02e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a032:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a034:	4646      	mov	r6, r8
 800a036:	9a08      	ldr	r2, [sp, #32]
 800a038:	2101      	movs	r1, #1
 800a03a:	441a      	add	r2, r3
 800a03c:	4658      	mov	r0, fp
 800a03e:	4498      	add	r8, r3
 800a040:	9208      	str	r2, [sp, #32]
 800a042:	f000 fc6b 	bl	800a91c <__i2b>
 800a046:	4605      	mov	r5, r0
 800a048:	b15e      	cbz	r6, 800a062 <_dtoa_r+0x74a>
 800a04a:	9b08      	ldr	r3, [sp, #32]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd08      	ble.n	800a062 <_dtoa_r+0x74a>
 800a050:	42b3      	cmp	r3, r6
 800a052:	9a08      	ldr	r2, [sp, #32]
 800a054:	bfa8      	it	ge
 800a056:	4633      	movge	r3, r6
 800a058:	eba8 0803 	sub.w	r8, r8, r3
 800a05c:	1af6      	subs	r6, r6, r3
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	9308      	str	r3, [sp, #32]
 800a062:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a064:	b1f3      	cbz	r3, 800a0a4 <_dtoa_r+0x78c>
 800a066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 80b7 	beq.w	800a1dc <_dtoa_r+0x8c4>
 800a06e:	b18c      	cbz	r4, 800a094 <_dtoa_r+0x77c>
 800a070:	4629      	mov	r1, r5
 800a072:	4622      	mov	r2, r4
 800a074:	4658      	mov	r0, fp
 800a076:	f000 fd11 	bl	800aa9c <__pow5mult>
 800a07a:	464a      	mov	r2, r9
 800a07c:	4601      	mov	r1, r0
 800a07e:	4605      	mov	r5, r0
 800a080:	4658      	mov	r0, fp
 800a082:	f000 fc61 	bl	800a948 <__multiply>
 800a086:	4649      	mov	r1, r9
 800a088:	9004      	str	r0, [sp, #16]
 800a08a:	4658      	mov	r0, fp
 800a08c:	f000 fb48 	bl	800a720 <_Bfree>
 800a090:	9b04      	ldr	r3, [sp, #16]
 800a092:	4699      	mov	r9, r3
 800a094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a096:	1b1a      	subs	r2, r3, r4
 800a098:	d004      	beq.n	800a0a4 <_dtoa_r+0x78c>
 800a09a:	4649      	mov	r1, r9
 800a09c:	4658      	mov	r0, fp
 800a09e:	f000 fcfd 	bl	800aa9c <__pow5mult>
 800a0a2:	4681      	mov	r9, r0
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	4658      	mov	r0, fp
 800a0a8:	f000 fc38 	bl	800a91c <__i2b>
 800a0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 81cf 	beq.w	800a454 <_dtoa_r+0xb3c>
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	4601      	mov	r1, r0
 800a0ba:	4658      	mov	r0, fp
 800a0bc:	f000 fcee 	bl	800aa9c <__pow5mult>
 800a0c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	f300 8095 	bgt.w	800a1f4 <_dtoa_r+0x8dc>
 800a0ca:	9b02      	ldr	r3, [sp, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8087 	bne.w	800a1e0 <_dtoa_r+0x8c8>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f040 8089 	bne.w	800a1f0 <_dtoa_r+0x8d8>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0e4:	0d1b      	lsrs	r3, r3, #20
 800a0e6:	051b      	lsls	r3, r3, #20
 800a0e8:	b12b      	cbz	r3, 800a0f6 <_dtoa_r+0x7de>
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	9308      	str	r3, [sp, #32]
 800a0f0:	f108 0801 	add.w	r8, r8, #1
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 81b0 	beq.w	800a460 <_dtoa_r+0xb48>
 800a100:	6923      	ldr	r3, [r4, #16]
 800a102:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a106:	6918      	ldr	r0, [r3, #16]
 800a108:	f000 fbbc 	bl	800a884 <__hi0bits>
 800a10c:	f1c0 0020 	rsb	r0, r0, #32
 800a110:	9b08      	ldr	r3, [sp, #32]
 800a112:	4418      	add	r0, r3
 800a114:	f010 001f 	ands.w	r0, r0, #31
 800a118:	d077      	beq.n	800a20a <_dtoa_r+0x8f2>
 800a11a:	f1c0 0320 	rsb	r3, r0, #32
 800a11e:	2b04      	cmp	r3, #4
 800a120:	dd6b      	ble.n	800a1fa <_dtoa_r+0x8e2>
 800a122:	9b08      	ldr	r3, [sp, #32]
 800a124:	f1c0 001c 	rsb	r0, r0, #28
 800a128:	4403      	add	r3, r0
 800a12a:	4480      	add	r8, r0
 800a12c:	4406      	add	r6, r0
 800a12e:	9308      	str	r3, [sp, #32]
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	dd05      	ble.n	800a142 <_dtoa_r+0x82a>
 800a136:	4649      	mov	r1, r9
 800a138:	4642      	mov	r2, r8
 800a13a:	4658      	mov	r0, fp
 800a13c:	f000 fd08 	bl	800ab50 <__lshift>
 800a140:	4681      	mov	r9, r0
 800a142:	9b08      	ldr	r3, [sp, #32]
 800a144:	2b00      	cmp	r3, #0
 800a146:	dd05      	ble.n	800a154 <_dtoa_r+0x83c>
 800a148:	4621      	mov	r1, r4
 800a14a:	461a      	mov	r2, r3
 800a14c:	4658      	mov	r0, fp
 800a14e:	f000 fcff 	bl	800ab50 <__lshift>
 800a152:	4604      	mov	r4, r0
 800a154:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a156:	2b00      	cmp	r3, #0
 800a158:	d059      	beq.n	800a20e <_dtoa_r+0x8f6>
 800a15a:	4621      	mov	r1, r4
 800a15c:	4648      	mov	r0, r9
 800a15e:	f000 fd63 	bl	800ac28 <__mcmp>
 800a162:	2800      	cmp	r0, #0
 800a164:	da53      	bge.n	800a20e <_dtoa_r+0x8f6>
 800a166:	1e7b      	subs	r3, r7, #1
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	4649      	mov	r1, r9
 800a16c:	2300      	movs	r3, #0
 800a16e:	220a      	movs	r2, #10
 800a170:	4658      	mov	r0, fp
 800a172:	f000 faf7 	bl	800a764 <__multadd>
 800a176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a178:	4681      	mov	r9, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 8172 	beq.w	800a464 <_dtoa_r+0xb4c>
 800a180:	2300      	movs	r3, #0
 800a182:	4629      	mov	r1, r5
 800a184:	220a      	movs	r2, #10
 800a186:	4658      	mov	r0, fp
 800a188:	f000 faec 	bl	800a764 <__multadd>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	4605      	mov	r5, r0
 800a192:	dc67      	bgt.n	800a264 <_dtoa_r+0x94c>
 800a194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a196:	2b02      	cmp	r3, #2
 800a198:	dc41      	bgt.n	800a21e <_dtoa_r+0x906>
 800a19a:	e063      	b.n	800a264 <_dtoa_r+0x94c>
 800a19c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a19e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a1a2:	e746      	b.n	800a032 <_dtoa_r+0x71a>
 800a1a4:	9b07      	ldr	r3, [sp, #28]
 800a1a6:	1e5c      	subs	r4, r3, #1
 800a1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	bfbf      	itttt	lt
 800a1ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a1b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a1b4:	1ae3      	sublt	r3, r4, r3
 800a1b6:	bfb4      	ite	lt
 800a1b8:	18d2      	addlt	r2, r2, r3
 800a1ba:	1b1c      	subge	r4, r3, r4
 800a1bc:	9b07      	ldr	r3, [sp, #28]
 800a1be:	bfbc      	itt	lt
 800a1c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a1c2:	2400      	movlt	r4, #0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	bfb5      	itete	lt
 800a1c8:	eba8 0603 	sublt.w	r6, r8, r3
 800a1cc:	9b07      	ldrge	r3, [sp, #28]
 800a1ce:	2300      	movlt	r3, #0
 800a1d0:	4646      	movge	r6, r8
 800a1d2:	e730      	b.n	800a036 <_dtoa_r+0x71e>
 800a1d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a1d8:	4646      	mov	r6, r8
 800a1da:	e735      	b.n	800a048 <_dtoa_r+0x730>
 800a1dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1de:	e75c      	b.n	800a09a <_dtoa_r+0x782>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e788      	b.n	800a0f6 <_dtoa_r+0x7de>
 800a1e4:	3fe00000 	.word	0x3fe00000
 800a1e8:	40240000 	.word	0x40240000
 800a1ec:	40140000 	.word	0x40140000
 800a1f0:	9b02      	ldr	r3, [sp, #8]
 800a1f2:	e780      	b.n	800a0f6 <_dtoa_r+0x7de>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1f8:	e782      	b.n	800a100 <_dtoa_r+0x7e8>
 800a1fa:	d099      	beq.n	800a130 <_dtoa_r+0x818>
 800a1fc:	9a08      	ldr	r2, [sp, #32]
 800a1fe:	331c      	adds	r3, #28
 800a200:	441a      	add	r2, r3
 800a202:	4498      	add	r8, r3
 800a204:	441e      	add	r6, r3
 800a206:	9208      	str	r2, [sp, #32]
 800a208:	e792      	b.n	800a130 <_dtoa_r+0x818>
 800a20a:	4603      	mov	r3, r0
 800a20c:	e7f6      	b.n	800a1fc <_dtoa_r+0x8e4>
 800a20e:	9b07      	ldr	r3, [sp, #28]
 800a210:	9704      	str	r7, [sp, #16]
 800a212:	2b00      	cmp	r3, #0
 800a214:	dc20      	bgt.n	800a258 <_dtoa_r+0x940>
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	dd1e      	ble.n	800a25c <_dtoa_r+0x944>
 800a21e:	9b00      	ldr	r3, [sp, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	f47f aec0 	bne.w	8009fa6 <_dtoa_r+0x68e>
 800a226:	4621      	mov	r1, r4
 800a228:	2205      	movs	r2, #5
 800a22a:	4658      	mov	r0, fp
 800a22c:	f000 fa9a 	bl	800a764 <__multadd>
 800a230:	4601      	mov	r1, r0
 800a232:	4604      	mov	r4, r0
 800a234:	4648      	mov	r0, r9
 800a236:	f000 fcf7 	bl	800ac28 <__mcmp>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	f77f aeb3 	ble.w	8009fa6 <_dtoa_r+0x68e>
 800a240:	4656      	mov	r6, sl
 800a242:	2331      	movs	r3, #49	@ 0x31
 800a244:	f806 3b01 	strb.w	r3, [r6], #1
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	3301      	adds	r3, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	e6ae      	b.n	8009fae <_dtoa_r+0x696>
 800a250:	9c07      	ldr	r4, [sp, #28]
 800a252:	9704      	str	r7, [sp, #16]
 800a254:	4625      	mov	r5, r4
 800a256:	e7f3      	b.n	800a240 <_dtoa_r+0x928>
 800a258:	9b07      	ldr	r3, [sp, #28]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 8104 	beq.w	800a46c <_dtoa_r+0xb54>
 800a264:	2e00      	cmp	r6, #0
 800a266:	dd05      	ble.n	800a274 <_dtoa_r+0x95c>
 800a268:	4629      	mov	r1, r5
 800a26a:	4632      	mov	r2, r6
 800a26c:	4658      	mov	r0, fp
 800a26e:	f000 fc6f 	bl	800ab50 <__lshift>
 800a272:	4605      	mov	r5, r0
 800a274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a276:	2b00      	cmp	r3, #0
 800a278:	d05a      	beq.n	800a330 <_dtoa_r+0xa18>
 800a27a:	6869      	ldr	r1, [r5, #4]
 800a27c:	4658      	mov	r0, fp
 800a27e:	f000 fa0f 	bl	800a6a0 <_Balloc>
 800a282:	4606      	mov	r6, r0
 800a284:	b928      	cbnz	r0, 800a292 <_dtoa_r+0x97a>
 800a286:	4b84      	ldr	r3, [pc, #528]	@ (800a498 <_dtoa_r+0xb80>)
 800a288:	4602      	mov	r2, r0
 800a28a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a28e:	f7ff bb5a 	b.w	8009946 <_dtoa_r+0x2e>
 800a292:	692a      	ldr	r2, [r5, #16]
 800a294:	3202      	adds	r2, #2
 800a296:	0092      	lsls	r2, r2, #2
 800a298:	f105 010c 	add.w	r1, r5, #12
 800a29c:	300c      	adds	r0, #12
 800a29e:	f002 fcc9 	bl	800cc34 <memcpy>
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	f000 fc52 	bl	800ab50 <__lshift>
 800a2ac:	f10a 0301 	add.w	r3, sl, #1
 800a2b0:	9307      	str	r3, [sp, #28]
 800a2b2:	9b00      	ldr	r3, [sp, #0]
 800a2b4:	4453      	add	r3, sl
 800a2b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	f003 0301 	and.w	r3, r3, #1
 800a2be:	462f      	mov	r7, r5
 800a2c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	4621      	mov	r1, r4
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	4648      	mov	r0, r9
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	f7ff fa99 	bl	8009804 <quorem>
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	9002      	str	r0, [sp, #8]
 800a2d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2da:	4648      	mov	r0, r9
 800a2dc:	f000 fca4 	bl	800ac28 <__mcmp>
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	9008      	str	r0, [sp, #32]
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	4658      	mov	r0, fp
 800a2e8:	f000 fcba 	bl	800ac60 <__mdiff>
 800a2ec:	68c2      	ldr	r2, [r0, #12]
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	bb02      	cbnz	r2, 800a334 <_dtoa_r+0xa1c>
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	4648      	mov	r0, r9
 800a2f6:	f000 fc97 	bl	800ac28 <__mcmp>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4658      	mov	r0, fp
 800a300:	920e      	str	r2, [sp, #56]	@ 0x38
 800a302:	f000 fa0d 	bl	800a720 <_Bfree>
 800a306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a308:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a30a:	9e07      	ldr	r6, [sp, #28]
 800a30c:	ea43 0102 	orr.w	r1, r3, r2
 800a310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a312:	4319      	orrs	r1, r3
 800a314:	d110      	bne.n	800a338 <_dtoa_r+0xa20>
 800a316:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a31a:	d029      	beq.n	800a370 <_dtoa_r+0xa58>
 800a31c:	9b08      	ldr	r3, [sp, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd02      	ble.n	800a328 <_dtoa_r+0xa10>
 800a322:	9b02      	ldr	r3, [sp, #8]
 800a324:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a328:	9b00      	ldr	r3, [sp, #0]
 800a32a:	f883 8000 	strb.w	r8, [r3]
 800a32e:	e63f      	b.n	8009fb0 <_dtoa_r+0x698>
 800a330:	4628      	mov	r0, r5
 800a332:	e7bb      	b.n	800a2ac <_dtoa_r+0x994>
 800a334:	2201      	movs	r2, #1
 800a336:	e7e1      	b.n	800a2fc <_dtoa_r+0x9e4>
 800a338:	9b08      	ldr	r3, [sp, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	db04      	blt.n	800a348 <_dtoa_r+0xa30>
 800a33e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a340:	430b      	orrs	r3, r1
 800a342:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a344:	430b      	orrs	r3, r1
 800a346:	d120      	bne.n	800a38a <_dtoa_r+0xa72>
 800a348:	2a00      	cmp	r2, #0
 800a34a:	dded      	ble.n	800a328 <_dtoa_r+0xa10>
 800a34c:	4649      	mov	r1, r9
 800a34e:	2201      	movs	r2, #1
 800a350:	4658      	mov	r0, fp
 800a352:	f000 fbfd 	bl	800ab50 <__lshift>
 800a356:	4621      	mov	r1, r4
 800a358:	4681      	mov	r9, r0
 800a35a:	f000 fc65 	bl	800ac28 <__mcmp>
 800a35e:	2800      	cmp	r0, #0
 800a360:	dc03      	bgt.n	800a36a <_dtoa_r+0xa52>
 800a362:	d1e1      	bne.n	800a328 <_dtoa_r+0xa10>
 800a364:	f018 0f01 	tst.w	r8, #1
 800a368:	d0de      	beq.n	800a328 <_dtoa_r+0xa10>
 800a36a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a36e:	d1d8      	bne.n	800a322 <_dtoa_r+0xa0a>
 800a370:	9a00      	ldr	r2, [sp, #0]
 800a372:	2339      	movs	r3, #57	@ 0x39
 800a374:	7013      	strb	r3, [r2, #0]
 800a376:	4633      	mov	r3, r6
 800a378:	461e      	mov	r6, r3
 800a37a:	3b01      	subs	r3, #1
 800a37c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a380:	2a39      	cmp	r2, #57	@ 0x39
 800a382:	d052      	beq.n	800a42a <_dtoa_r+0xb12>
 800a384:	3201      	adds	r2, #1
 800a386:	701a      	strb	r2, [r3, #0]
 800a388:	e612      	b.n	8009fb0 <_dtoa_r+0x698>
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	dd07      	ble.n	800a39e <_dtoa_r+0xa86>
 800a38e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a392:	d0ed      	beq.n	800a370 <_dtoa_r+0xa58>
 800a394:	9a00      	ldr	r2, [sp, #0]
 800a396:	f108 0301 	add.w	r3, r8, #1
 800a39a:	7013      	strb	r3, [r2, #0]
 800a39c:	e608      	b.n	8009fb0 <_dtoa_r+0x698>
 800a39e:	9b07      	ldr	r3, [sp, #28]
 800a3a0:	9a07      	ldr	r2, [sp, #28]
 800a3a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d028      	beq.n	800a3fe <_dtoa_r+0xae6>
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	4658      	mov	r0, fp
 800a3b4:	f000 f9d6 	bl	800a764 <__multadd>
 800a3b8:	42af      	cmp	r7, r5
 800a3ba:	4681      	mov	r9, r0
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	f04f 020a 	mov.w	r2, #10
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	d107      	bne.n	800a3da <_dtoa_r+0xac2>
 800a3ca:	f000 f9cb 	bl	800a764 <__multadd>
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	9b07      	ldr	r3, [sp, #28]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	9307      	str	r3, [sp, #28]
 800a3d8:	e774      	b.n	800a2c4 <_dtoa_r+0x9ac>
 800a3da:	f000 f9c3 	bl	800a764 <__multadd>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	220a      	movs	r2, #10
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	f000 f9bc 	bl	800a764 <__multadd>
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	e7f0      	b.n	800a3d2 <_dtoa_r+0xaba>
 800a3f0:	9b00      	ldr	r3, [sp, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	bfcc      	ite	gt
 800a3f6:	461e      	movgt	r6, r3
 800a3f8:	2601      	movle	r6, #1
 800a3fa:	4456      	add	r6, sl
 800a3fc:	2700      	movs	r7, #0
 800a3fe:	4649      	mov	r1, r9
 800a400:	2201      	movs	r2, #1
 800a402:	4658      	mov	r0, fp
 800a404:	f000 fba4 	bl	800ab50 <__lshift>
 800a408:	4621      	mov	r1, r4
 800a40a:	4681      	mov	r9, r0
 800a40c:	f000 fc0c 	bl	800ac28 <__mcmp>
 800a410:	2800      	cmp	r0, #0
 800a412:	dcb0      	bgt.n	800a376 <_dtoa_r+0xa5e>
 800a414:	d102      	bne.n	800a41c <_dtoa_r+0xb04>
 800a416:	f018 0f01 	tst.w	r8, #1
 800a41a:	d1ac      	bne.n	800a376 <_dtoa_r+0xa5e>
 800a41c:	4633      	mov	r3, r6
 800a41e:	461e      	mov	r6, r3
 800a420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a424:	2a30      	cmp	r2, #48	@ 0x30
 800a426:	d0fa      	beq.n	800a41e <_dtoa_r+0xb06>
 800a428:	e5c2      	b.n	8009fb0 <_dtoa_r+0x698>
 800a42a:	459a      	cmp	sl, r3
 800a42c:	d1a4      	bne.n	800a378 <_dtoa_r+0xa60>
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	3301      	adds	r3, #1
 800a432:	9304      	str	r3, [sp, #16]
 800a434:	2331      	movs	r3, #49	@ 0x31
 800a436:	f88a 3000 	strb.w	r3, [sl]
 800a43a:	e5b9      	b.n	8009fb0 <_dtoa_r+0x698>
 800a43c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a43e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a49c <_dtoa_r+0xb84>
 800a442:	b11b      	cbz	r3, 800a44c <_dtoa_r+0xb34>
 800a444:	f10a 0308 	add.w	r3, sl, #8
 800a448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a44a:	6013      	str	r3, [r2, #0]
 800a44c:	4650      	mov	r0, sl
 800a44e:	b019      	add	sp, #100	@ 0x64
 800a450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a456:	2b01      	cmp	r3, #1
 800a458:	f77f ae37 	ble.w	800a0ca <_dtoa_r+0x7b2>
 800a45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a460:	2001      	movs	r0, #1
 800a462:	e655      	b.n	800a110 <_dtoa_r+0x7f8>
 800a464:	9b00      	ldr	r3, [sp, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f77f aed6 	ble.w	800a218 <_dtoa_r+0x900>
 800a46c:	4656      	mov	r6, sl
 800a46e:	4621      	mov	r1, r4
 800a470:	4648      	mov	r0, r9
 800a472:	f7ff f9c7 	bl	8009804 <quorem>
 800a476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a47a:	f806 8b01 	strb.w	r8, [r6], #1
 800a47e:	9b00      	ldr	r3, [sp, #0]
 800a480:	eba6 020a 	sub.w	r2, r6, sl
 800a484:	4293      	cmp	r3, r2
 800a486:	ddb3      	ble.n	800a3f0 <_dtoa_r+0xad8>
 800a488:	4649      	mov	r1, r9
 800a48a:	2300      	movs	r3, #0
 800a48c:	220a      	movs	r2, #10
 800a48e:	4658      	mov	r0, fp
 800a490:	f000 f968 	bl	800a764 <__multadd>
 800a494:	4681      	mov	r9, r0
 800a496:	e7ea      	b.n	800a46e <_dtoa_r+0xb56>
 800a498:	0800d847 	.word	0x0800d847
 800a49c:	0800d7cb 	.word	0x0800d7cb

0800a4a0 <_free_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	d041      	beq.n	800a52c <_free_r+0x8c>
 800a4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ac:	1f0c      	subs	r4, r1, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bfb8      	it	lt
 800a4b2:	18e4      	addlt	r4, r4, r3
 800a4b4:	f000 f8e8 	bl	800a688 <__malloc_lock>
 800a4b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a530 <_free_r+0x90>)
 800a4ba:	6813      	ldr	r3, [r2, #0]
 800a4bc:	b933      	cbnz	r3, 800a4cc <_free_r+0x2c>
 800a4be:	6063      	str	r3, [r4, #4]
 800a4c0:	6014      	str	r4, [r2, #0]
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c8:	f000 b8e4 	b.w	800a694 <__malloc_unlock>
 800a4cc:	42a3      	cmp	r3, r4
 800a4ce:	d908      	bls.n	800a4e2 <_free_r+0x42>
 800a4d0:	6820      	ldr	r0, [r4, #0]
 800a4d2:	1821      	adds	r1, r4, r0
 800a4d4:	428b      	cmp	r3, r1
 800a4d6:	bf01      	itttt	eq
 800a4d8:	6819      	ldreq	r1, [r3, #0]
 800a4da:	685b      	ldreq	r3, [r3, #4]
 800a4dc:	1809      	addeq	r1, r1, r0
 800a4de:	6021      	streq	r1, [r4, #0]
 800a4e0:	e7ed      	b.n	800a4be <_free_r+0x1e>
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	b10b      	cbz	r3, 800a4ec <_free_r+0x4c>
 800a4e8:	42a3      	cmp	r3, r4
 800a4ea:	d9fa      	bls.n	800a4e2 <_free_r+0x42>
 800a4ec:	6811      	ldr	r1, [r2, #0]
 800a4ee:	1850      	adds	r0, r2, r1
 800a4f0:	42a0      	cmp	r0, r4
 800a4f2:	d10b      	bne.n	800a50c <_free_r+0x6c>
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	4401      	add	r1, r0
 800a4f8:	1850      	adds	r0, r2, r1
 800a4fa:	4283      	cmp	r3, r0
 800a4fc:	6011      	str	r1, [r2, #0]
 800a4fe:	d1e0      	bne.n	800a4c2 <_free_r+0x22>
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	6053      	str	r3, [r2, #4]
 800a506:	4408      	add	r0, r1
 800a508:	6010      	str	r0, [r2, #0]
 800a50a:	e7da      	b.n	800a4c2 <_free_r+0x22>
 800a50c:	d902      	bls.n	800a514 <_free_r+0x74>
 800a50e:	230c      	movs	r3, #12
 800a510:	602b      	str	r3, [r5, #0]
 800a512:	e7d6      	b.n	800a4c2 <_free_r+0x22>
 800a514:	6820      	ldr	r0, [r4, #0]
 800a516:	1821      	adds	r1, r4, r0
 800a518:	428b      	cmp	r3, r1
 800a51a:	bf04      	itt	eq
 800a51c:	6819      	ldreq	r1, [r3, #0]
 800a51e:	685b      	ldreq	r3, [r3, #4]
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	bf04      	itt	eq
 800a524:	1809      	addeq	r1, r1, r0
 800a526:	6021      	streq	r1, [r4, #0]
 800a528:	6054      	str	r4, [r2, #4]
 800a52a:	e7ca      	b.n	800a4c2 <_free_r+0x22>
 800a52c:	bd38      	pop	{r3, r4, r5, pc}
 800a52e:	bf00      	nop
 800a530:	20000604 	.word	0x20000604

0800a534 <malloc>:
 800a534:	4b02      	ldr	r3, [pc, #8]	@ (800a540 <malloc+0xc>)
 800a536:	4601      	mov	r1, r0
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	f000 b825 	b.w	800a588 <_malloc_r>
 800a53e:	bf00      	nop
 800a540:	20000090 	.word	0x20000090

0800a544 <sbrk_aligned>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	4e0f      	ldr	r6, [pc, #60]	@ (800a584 <sbrk_aligned+0x40>)
 800a548:	460c      	mov	r4, r1
 800a54a:	6831      	ldr	r1, [r6, #0]
 800a54c:	4605      	mov	r5, r0
 800a54e:	b911      	cbnz	r1, 800a556 <sbrk_aligned+0x12>
 800a550:	f002 fb60 	bl	800cc14 <_sbrk_r>
 800a554:	6030      	str	r0, [r6, #0]
 800a556:	4621      	mov	r1, r4
 800a558:	4628      	mov	r0, r5
 800a55a:	f002 fb5b 	bl	800cc14 <_sbrk_r>
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	d103      	bne.n	800a56a <sbrk_aligned+0x26>
 800a562:	f04f 34ff 	mov.w	r4, #4294967295
 800a566:	4620      	mov	r0, r4
 800a568:	bd70      	pop	{r4, r5, r6, pc}
 800a56a:	1cc4      	adds	r4, r0, #3
 800a56c:	f024 0403 	bic.w	r4, r4, #3
 800a570:	42a0      	cmp	r0, r4
 800a572:	d0f8      	beq.n	800a566 <sbrk_aligned+0x22>
 800a574:	1a21      	subs	r1, r4, r0
 800a576:	4628      	mov	r0, r5
 800a578:	f002 fb4c 	bl	800cc14 <_sbrk_r>
 800a57c:	3001      	adds	r0, #1
 800a57e:	d1f2      	bne.n	800a566 <sbrk_aligned+0x22>
 800a580:	e7ef      	b.n	800a562 <sbrk_aligned+0x1e>
 800a582:	bf00      	nop
 800a584:	20000600 	.word	0x20000600

0800a588 <_malloc_r>:
 800a588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a58c:	1ccd      	adds	r5, r1, #3
 800a58e:	f025 0503 	bic.w	r5, r5, #3
 800a592:	3508      	adds	r5, #8
 800a594:	2d0c      	cmp	r5, #12
 800a596:	bf38      	it	cc
 800a598:	250c      	movcc	r5, #12
 800a59a:	2d00      	cmp	r5, #0
 800a59c:	4606      	mov	r6, r0
 800a59e:	db01      	blt.n	800a5a4 <_malloc_r+0x1c>
 800a5a0:	42a9      	cmp	r1, r5
 800a5a2:	d904      	bls.n	800a5ae <_malloc_r+0x26>
 800a5a4:	230c      	movs	r3, #12
 800a5a6:	6033      	str	r3, [r6, #0]
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a684 <_malloc_r+0xfc>
 800a5b2:	f000 f869 	bl	800a688 <__malloc_lock>
 800a5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ba:	461c      	mov	r4, r3
 800a5bc:	bb44      	cbnz	r4, 800a610 <_malloc_r+0x88>
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f7ff ffbf 	bl	800a544 <sbrk_aligned>
 800a5c6:	1c43      	adds	r3, r0, #1
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	d158      	bne.n	800a67e <_malloc_r+0xf6>
 800a5cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a5d0:	4627      	mov	r7, r4
 800a5d2:	2f00      	cmp	r7, #0
 800a5d4:	d143      	bne.n	800a65e <_malloc_r+0xd6>
 800a5d6:	2c00      	cmp	r4, #0
 800a5d8:	d04b      	beq.n	800a672 <_malloc_r+0xea>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	4639      	mov	r1, r7
 800a5de:	4630      	mov	r0, r6
 800a5e0:	eb04 0903 	add.w	r9, r4, r3
 800a5e4:	f002 fb16 	bl	800cc14 <_sbrk_r>
 800a5e8:	4581      	cmp	r9, r0
 800a5ea:	d142      	bne.n	800a672 <_malloc_r+0xea>
 800a5ec:	6821      	ldr	r1, [r4, #0]
 800a5ee:	1a6d      	subs	r5, r5, r1
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7ff ffa6 	bl	800a544 <sbrk_aligned>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	d03a      	beq.n	800a672 <_malloc_r+0xea>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	442b      	add	r3, r5
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	f8d8 3000 	ldr.w	r3, [r8]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	bb62      	cbnz	r2, 800a664 <_malloc_r+0xdc>
 800a60a:	f8c8 7000 	str.w	r7, [r8]
 800a60e:	e00f      	b.n	800a630 <_malloc_r+0xa8>
 800a610:	6822      	ldr	r2, [r4, #0]
 800a612:	1b52      	subs	r2, r2, r5
 800a614:	d420      	bmi.n	800a658 <_malloc_r+0xd0>
 800a616:	2a0b      	cmp	r2, #11
 800a618:	d917      	bls.n	800a64a <_malloc_r+0xc2>
 800a61a:	1961      	adds	r1, r4, r5
 800a61c:	42a3      	cmp	r3, r4
 800a61e:	6025      	str	r5, [r4, #0]
 800a620:	bf18      	it	ne
 800a622:	6059      	strne	r1, [r3, #4]
 800a624:	6863      	ldr	r3, [r4, #4]
 800a626:	bf08      	it	eq
 800a628:	f8c8 1000 	streq.w	r1, [r8]
 800a62c:	5162      	str	r2, [r4, r5]
 800a62e:	604b      	str	r3, [r1, #4]
 800a630:	4630      	mov	r0, r6
 800a632:	f000 f82f 	bl	800a694 <__malloc_unlock>
 800a636:	f104 000b 	add.w	r0, r4, #11
 800a63a:	1d23      	adds	r3, r4, #4
 800a63c:	f020 0007 	bic.w	r0, r0, #7
 800a640:	1ac2      	subs	r2, r0, r3
 800a642:	bf1c      	itt	ne
 800a644:	1a1b      	subne	r3, r3, r0
 800a646:	50a3      	strne	r3, [r4, r2]
 800a648:	e7af      	b.n	800a5aa <_malloc_r+0x22>
 800a64a:	6862      	ldr	r2, [r4, #4]
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	bf0c      	ite	eq
 800a650:	f8c8 2000 	streq.w	r2, [r8]
 800a654:	605a      	strne	r2, [r3, #4]
 800a656:	e7eb      	b.n	800a630 <_malloc_r+0xa8>
 800a658:	4623      	mov	r3, r4
 800a65a:	6864      	ldr	r4, [r4, #4]
 800a65c:	e7ae      	b.n	800a5bc <_malloc_r+0x34>
 800a65e:	463c      	mov	r4, r7
 800a660:	687f      	ldr	r7, [r7, #4]
 800a662:	e7b6      	b.n	800a5d2 <_malloc_r+0x4a>
 800a664:	461a      	mov	r2, r3
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	42a3      	cmp	r3, r4
 800a66a:	d1fb      	bne.n	800a664 <_malloc_r+0xdc>
 800a66c:	2300      	movs	r3, #0
 800a66e:	6053      	str	r3, [r2, #4]
 800a670:	e7de      	b.n	800a630 <_malloc_r+0xa8>
 800a672:	230c      	movs	r3, #12
 800a674:	6033      	str	r3, [r6, #0]
 800a676:	4630      	mov	r0, r6
 800a678:	f000 f80c 	bl	800a694 <__malloc_unlock>
 800a67c:	e794      	b.n	800a5a8 <_malloc_r+0x20>
 800a67e:	6005      	str	r5, [r0, #0]
 800a680:	e7d6      	b.n	800a630 <_malloc_r+0xa8>
 800a682:	bf00      	nop
 800a684:	20000604 	.word	0x20000604

0800a688 <__malloc_lock>:
 800a688:	4801      	ldr	r0, [pc, #4]	@ (800a690 <__malloc_lock+0x8>)
 800a68a:	f7ff b8b2 	b.w	80097f2 <__retarget_lock_acquire_recursive>
 800a68e:	bf00      	nop
 800a690:	200005fc 	.word	0x200005fc

0800a694 <__malloc_unlock>:
 800a694:	4801      	ldr	r0, [pc, #4]	@ (800a69c <__malloc_unlock+0x8>)
 800a696:	f7ff b8ad 	b.w	80097f4 <__retarget_lock_release_recursive>
 800a69a:	bf00      	nop
 800a69c:	200005fc 	.word	0x200005fc

0800a6a0 <_Balloc>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	69c6      	ldr	r6, [r0, #28]
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	460d      	mov	r5, r1
 800a6a8:	b976      	cbnz	r6, 800a6c8 <_Balloc+0x28>
 800a6aa:	2010      	movs	r0, #16
 800a6ac:	f7ff ff42 	bl	800a534 <malloc>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	61e0      	str	r0, [r4, #28]
 800a6b4:	b920      	cbnz	r0, 800a6c0 <_Balloc+0x20>
 800a6b6:	4b18      	ldr	r3, [pc, #96]	@ (800a718 <_Balloc+0x78>)
 800a6b8:	4818      	ldr	r0, [pc, #96]	@ (800a71c <_Balloc+0x7c>)
 800a6ba:	216b      	movs	r1, #107	@ 0x6b
 800a6bc:	f002 fad0 	bl	800cc60 <__assert_func>
 800a6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c4:	6006      	str	r6, [r0, #0]
 800a6c6:	60c6      	str	r6, [r0, #12]
 800a6c8:	69e6      	ldr	r6, [r4, #28]
 800a6ca:	68f3      	ldr	r3, [r6, #12]
 800a6cc:	b183      	cbz	r3, 800a6f0 <_Balloc+0x50>
 800a6ce:	69e3      	ldr	r3, [r4, #28]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6d6:	b9b8      	cbnz	r0, 800a708 <_Balloc+0x68>
 800a6d8:	2101      	movs	r1, #1
 800a6da:	fa01 f605 	lsl.w	r6, r1, r5
 800a6de:	1d72      	adds	r2, r6, #5
 800a6e0:	0092      	lsls	r2, r2, #2
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f002 fada 	bl	800cc9c <_calloc_r>
 800a6e8:	b160      	cbz	r0, 800a704 <_Balloc+0x64>
 800a6ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6ee:	e00e      	b.n	800a70e <_Balloc+0x6e>
 800a6f0:	2221      	movs	r2, #33	@ 0x21
 800a6f2:	2104      	movs	r1, #4
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f002 fad1 	bl	800cc9c <_calloc_r>
 800a6fa:	69e3      	ldr	r3, [r4, #28]
 800a6fc:	60f0      	str	r0, [r6, #12]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1e4      	bne.n	800a6ce <_Balloc+0x2e>
 800a704:	2000      	movs	r0, #0
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	6802      	ldr	r2, [r0, #0]
 800a70a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a70e:	2300      	movs	r3, #0
 800a710:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a714:	e7f7      	b.n	800a706 <_Balloc+0x66>
 800a716:	bf00      	nop
 800a718:	0800d7d8 	.word	0x0800d7d8
 800a71c:	0800d858 	.word	0x0800d858

0800a720 <_Bfree>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	69c6      	ldr	r6, [r0, #28]
 800a724:	4605      	mov	r5, r0
 800a726:	460c      	mov	r4, r1
 800a728:	b976      	cbnz	r6, 800a748 <_Bfree+0x28>
 800a72a:	2010      	movs	r0, #16
 800a72c:	f7ff ff02 	bl	800a534 <malloc>
 800a730:	4602      	mov	r2, r0
 800a732:	61e8      	str	r0, [r5, #28]
 800a734:	b920      	cbnz	r0, 800a740 <_Bfree+0x20>
 800a736:	4b09      	ldr	r3, [pc, #36]	@ (800a75c <_Bfree+0x3c>)
 800a738:	4809      	ldr	r0, [pc, #36]	@ (800a760 <_Bfree+0x40>)
 800a73a:	218f      	movs	r1, #143	@ 0x8f
 800a73c:	f002 fa90 	bl	800cc60 <__assert_func>
 800a740:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a744:	6006      	str	r6, [r0, #0]
 800a746:	60c6      	str	r6, [r0, #12]
 800a748:	b13c      	cbz	r4, 800a75a <_Bfree+0x3a>
 800a74a:	69eb      	ldr	r3, [r5, #28]
 800a74c:	6862      	ldr	r2, [r4, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a754:	6021      	str	r1, [r4, #0]
 800a756:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a75a:	bd70      	pop	{r4, r5, r6, pc}
 800a75c:	0800d7d8 	.word	0x0800d7d8
 800a760:	0800d858 	.word	0x0800d858

0800a764 <__multadd>:
 800a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a768:	690d      	ldr	r5, [r1, #16]
 800a76a:	4607      	mov	r7, r0
 800a76c:	460c      	mov	r4, r1
 800a76e:	461e      	mov	r6, r3
 800a770:	f101 0c14 	add.w	ip, r1, #20
 800a774:	2000      	movs	r0, #0
 800a776:	f8dc 3000 	ldr.w	r3, [ip]
 800a77a:	b299      	uxth	r1, r3
 800a77c:	fb02 6101 	mla	r1, r2, r1, r6
 800a780:	0c1e      	lsrs	r6, r3, #16
 800a782:	0c0b      	lsrs	r3, r1, #16
 800a784:	fb02 3306 	mla	r3, r2, r6, r3
 800a788:	b289      	uxth	r1, r1
 800a78a:	3001      	adds	r0, #1
 800a78c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a790:	4285      	cmp	r5, r0
 800a792:	f84c 1b04 	str.w	r1, [ip], #4
 800a796:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a79a:	dcec      	bgt.n	800a776 <__multadd+0x12>
 800a79c:	b30e      	cbz	r6, 800a7e2 <__multadd+0x7e>
 800a79e:	68a3      	ldr	r3, [r4, #8]
 800a7a0:	42ab      	cmp	r3, r5
 800a7a2:	dc19      	bgt.n	800a7d8 <__multadd+0x74>
 800a7a4:	6861      	ldr	r1, [r4, #4]
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	3101      	adds	r1, #1
 800a7aa:	f7ff ff79 	bl	800a6a0 <_Balloc>
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	b928      	cbnz	r0, 800a7be <__multadd+0x5a>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e8 <__multadd+0x84>)
 800a7b6:	480d      	ldr	r0, [pc, #52]	@ (800a7ec <__multadd+0x88>)
 800a7b8:	21ba      	movs	r1, #186	@ 0xba
 800a7ba:	f002 fa51 	bl	800cc60 <__assert_func>
 800a7be:	6922      	ldr	r2, [r4, #16]
 800a7c0:	3202      	adds	r2, #2
 800a7c2:	f104 010c 	add.w	r1, r4, #12
 800a7c6:	0092      	lsls	r2, r2, #2
 800a7c8:	300c      	adds	r0, #12
 800a7ca:	f002 fa33 	bl	800cc34 <memcpy>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7ff ffa5 	bl	800a720 <_Bfree>
 800a7d6:	4644      	mov	r4, r8
 800a7d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7dc:	3501      	adds	r5, #1
 800a7de:	615e      	str	r6, [r3, #20]
 800a7e0:	6125      	str	r5, [r4, #16]
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e8:	0800d847 	.word	0x0800d847
 800a7ec:	0800d858 	.word	0x0800d858

0800a7f0 <__s2b>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	4615      	mov	r5, r2
 800a7f8:	461f      	mov	r7, r3
 800a7fa:	2209      	movs	r2, #9
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	4606      	mov	r6, r0
 800a800:	fb93 f3f2 	sdiv	r3, r3, r2
 800a804:	2100      	movs	r1, #0
 800a806:	2201      	movs	r2, #1
 800a808:	429a      	cmp	r2, r3
 800a80a:	db09      	blt.n	800a820 <__s2b+0x30>
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7ff ff47 	bl	800a6a0 <_Balloc>
 800a812:	b940      	cbnz	r0, 800a826 <__s2b+0x36>
 800a814:	4602      	mov	r2, r0
 800a816:	4b19      	ldr	r3, [pc, #100]	@ (800a87c <__s2b+0x8c>)
 800a818:	4819      	ldr	r0, [pc, #100]	@ (800a880 <__s2b+0x90>)
 800a81a:	21d3      	movs	r1, #211	@ 0xd3
 800a81c:	f002 fa20 	bl	800cc60 <__assert_func>
 800a820:	0052      	lsls	r2, r2, #1
 800a822:	3101      	adds	r1, #1
 800a824:	e7f0      	b.n	800a808 <__s2b+0x18>
 800a826:	9b08      	ldr	r3, [sp, #32]
 800a828:	6143      	str	r3, [r0, #20]
 800a82a:	2d09      	cmp	r5, #9
 800a82c:	f04f 0301 	mov.w	r3, #1
 800a830:	6103      	str	r3, [r0, #16]
 800a832:	dd16      	ble.n	800a862 <__s2b+0x72>
 800a834:	f104 0909 	add.w	r9, r4, #9
 800a838:	46c8      	mov	r8, r9
 800a83a:	442c      	add	r4, r5
 800a83c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a840:	4601      	mov	r1, r0
 800a842:	3b30      	subs	r3, #48	@ 0x30
 800a844:	220a      	movs	r2, #10
 800a846:	4630      	mov	r0, r6
 800a848:	f7ff ff8c 	bl	800a764 <__multadd>
 800a84c:	45a0      	cmp	r8, r4
 800a84e:	d1f5      	bne.n	800a83c <__s2b+0x4c>
 800a850:	f1a5 0408 	sub.w	r4, r5, #8
 800a854:	444c      	add	r4, r9
 800a856:	1b2d      	subs	r5, r5, r4
 800a858:	1963      	adds	r3, r4, r5
 800a85a:	42bb      	cmp	r3, r7
 800a85c:	db04      	blt.n	800a868 <__s2b+0x78>
 800a85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a862:	340a      	adds	r4, #10
 800a864:	2509      	movs	r5, #9
 800a866:	e7f6      	b.n	800a856 <__s2b+0x66>
 800a868:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a86c:	4601      	mov	r1, r0
 800a86e:	3b30      	subs	r3, #48	@ 0x30
 800a870:	220a      	movs	r2, #10
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ff76 	bl	800a764 <__multadd>
 800a878:	e7ee      	b.n	800a858 <__s2b+0x68>
 800a87a:	bf00      	nop
 800a87c:	0800d847 	.word	0x0800d847
 800a880:	0800d858 	.word	0x0800d858

0800a884 <__hi0bits>:
 800a884:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a888:	4603      	mov	r3, r0
 800a88a:	bf36      	itet	cc
 800a88c:	0403      	lslcc	r3, r0, #16
 800a88e:	2000      	movcs	r0, #0
 800a890:	2010      	movcc	r0, #16
 800a892:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a896:	bf3c      	itt	cc
 800a898:	021b      	lslcc	r3, r3, #8
 800a89a:	3008      	addcc	r0, #8
 800a89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8a0:	bf3c      	itt	cc
 800a8a2:	011b      	lslcc	r3, r3, #4
 800a8a4:	3004      	addcc	r0, #4
 800a8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8aa:	bf3c      	itt	cc
 800a8ac:	009b      	lslcc	r3, r3, #2
 800a8ae:	3002      	addcc	r0, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	db05      	blt.n	800a8c0 <__hi0bits+0x3c>
 800a8b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8b8:	f100 0001 	add.w	r0, r0, #1
 800a8bc:	bf08      	it	eq
 800a8be:	2020      	moveq	r0, #32
 800a8c0:	4770      	bx	lr

0800a8c2 <__lo0bits>:
 800a8c2:	6803      	ldr	r3, [r0, #0]
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	f013 0007 	ands.w	r0, r3, #7
 800a8ca:	d00b      	beq.n	800a8e4 <__lo0bits+0x22>
 800a8cc:	07d9      	lsls	r1, r3, #31
 800a8ce:	d421      	bmi.n	800a914 <__lo0bits+0x52>
 800a8d0:	0798      	lsls	r0, r3, #30
 800a8d2:	bf49      	itett	mi
 800a8d4:	085b      	lsrmi	r3, r3, #1
 800a8d6:	089b      	lsrpl	r3, r3, #2
 800a8d8:	2001      	movmi	r0, #1
 800a8da:	6013      	strmi	r3, [r2, #0]
 800a8dc:	bf5c      	itt	pl
 800a8de:	6013      	strpl	r3, [r2, #0]
 800a8e0:	2002      	movpl	r0, #2
 800a8e2:	4770      	bx	lr
 800a8e4:	b299      	uxth	r1, r3
 800a8e6:	b909      	cbnz	r1, 800a8ec <__lo0bits+0x2a>
 800a8e8:	0c1b      	lsrs	r3, r3, #16
 800a8ea:	2010      	movs	r0, #16
 800a8ec:	b2d9      	uxtb	r1, r3
 800a8ee:	b909      	cbnz	r1, 800a8f4 <__lo0bits+0x32>
 800a8f0:	3008      	adds	r0, #8
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	0719      	lsls	r1, r3, #28
 800a8f6:	bf04      	itt	eq
 800a8f8:	091b      	lsreq	r3, r3, #4
 800a8fa:	3004      	addeq	r0, #4
 800a8fc:	0799      	lsls	r1, r3, #30
 800a8fe:	bf04      	itt	eq
 800a900:	089b      	lsreq	r3, r3, #2
 800a902:	3002      	addeq	r0, #2
 800a904:	07d9      	lsls	r1, r3, #31
 800a906:	d403      	bmi.n	800a910 <__lo0bits+0x4e>
 800a908:	085b      	lsrs	r3, r3, #1
 800a90a:	f100 0001 	add.w	r0, r0, #1
 800a90e:	d003      	beq.n	800a918 <__lo0bits+0x56>
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	4770      	bx	lr
 800a914:	2000      	movs	r0, #0
 800a916:	4770      	bx	lr
 800a918:	2020      	movs	r0, #32
 800a91a:	4770      	bx	lr

0800a91c <__i2b>:
 800a91c:	b510      	push	{r4, lr}
 800a91e:	460c      	mov	r4, r1
 800a920:	2101      	movs	r1, #1
 800a922:	f7ff febd 	bl	800a6a0 <_Balloc>
 800a926:	4602      	mov	r2, r0
 800a928:	b928      	cbnz	r0, 800a936 <__i2b+0x1a>
 800a92a:	4b05      	ldr	r3, [pc, #20]	@ (800a940 <__i2b+0x24>)
 800a92c:	4805      	ldr	r0, [pc, #20]	@ (800a944 <__i2b+0x28>)
 800a92e:	f240 1145 	movw	r1, #325	@ 0x145
 800a932:	f002 f995 	bl	800cc60 <__assert_func>
 800a936:	2301      	movs	r3, #1
 800a938:	6144      	str	r4, [r0, #20]
 800a93a:	6103      	str	r3, [r0, #16]
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	bf00      	nop
 800a940:	0800d847 	.word	0x0800d847
 800a944:	0800d858 	.word	0x0800d858

0800a948 <__multiply>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	4614      	mov	r4, r2
 800a94e:	690a      	ldr	r2, [r1, #16]
 800a950:	6923      	ldr	r3, [r4, #16]
 800a952:	429a      	cmp	r2, r3
 800a954:	bfa8      	it	ge
 800a956:	4623      	movge	r3, r4
 800a958:	460f      	mov	r7, r1
 800a95a:	bfa4      	itt	ge
 800a95c:	460c      	movge	r4, r1
 800a95e:	461f      	movge	r7, r3
 800a960:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a964:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a968:	68a3      	ldr	r3, [r4, #8]
 800a96a:	6861      	ldr	r1, [r4, #4]
 800a96c:	eb0a 0609 	add.w	r6, sl, r9
 800a970:	42b3      	cmp	r3, r6
 800a972:	b085      	sub	sp, #20
 800a974:	bfb8      	it	lt
 800a976:	3101      	addlt	r1, #1
 800a978:	f7ff fe92 	bl	800a6a0 <_Balloc>
 800a97c:	b930      	cbnz	r0, 800a98c <__multiply+0x44>
 800a97e:	4602      	mov	r2, r0
 800a980:	4b44      	ldr	r3, [pc, #272]	@ (800aa94 <__multiply+0x14c>)
 800a982:	4845      	ldr	r0, [pc, #276]	@ (800aa98 <__multiply+0x150>)
 800a984:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a988:	f002 f96a 	bl	800cc60 <__assert_func>
 800a98c:	f100 0514 	add.w	r5, r0, #20
 800a990:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a994:	462b      	mov	r3, r5
 800a996:	2200      	movs	r2, #0
 800a998:	4543      	cmp	r3, r8
 800a99a:	d321      	bcc.n	800a9e0 <__multiply+0x98>
 800a99c:	f107 0114 	add.w	r1, r7, #20
 800a9a0:	f104 0214 	add.w	r2, r4, #20
 800a9a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9ac:	9302      	str	r3, [sp, #8]
 800a9ae:	1b13      	subs	r3, r2, r4
 800a9b0:	3b15      	subs	r3, #21
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	f104 0715 	add.w	r7, r4, #21
 800a9bc:	42ba      	cmp	r2, r7
 800a9be:	bf38      	it	cc
 800a9c0:	2304      	movcc	r3, #4
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	9103      	str	r1, [sp, #12]
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	d80c      	bhi.n	800a9e6 <__multiply+0x9e>
 800a9cc:	2e00      	cmp	r6, #0
 800a9ce:	dd03      	ble.n	800a9d8 <__multiply+0x90>
 800a9d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d05b      	beq.n	800aa90 <__multiply+0x148>
 800a9d8:	6106      	str	r6, [r0, #16]
 800a9da:	b005      	add	sp, #20
 800a9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e0:	f843 2b04 	str.w	r2, [r3], #4
 800a9e4:	e7d8      	b.n	800a998 <__multiply+0x50>
 800a9e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9ea:	f1ba 0f00 	cmp.w	sl, #0
 800a9ee:	d024      	beq.n	800aa3a <__multiply+0xf2>
 800a9f0:	f104 0e14 	add.w	lr, r4, #20
 800a9f4:	46a9      	mov	r9, r5
 800a9f6:	f04f 0c00 	mov.w	ip, #0
 800a9fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9fe:	f8d9 3000 	ldr.w	r3, [r9]
 800aa02:	fa1f fb87 	uxth.w	fp, r7
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa10:	f8d9 7000 	ldr.w	r7, [r9]
 800aa14:	4463      	add	r3, ip
 800aa16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa1a:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa28:	4572      	cmp	r2, lr
 800aa2a:	f849 3b04 	str.w	r3, [r9], #4
 800aa2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa32:	d8e2      	bhi.n	800a9fa <__multiply+0xb2>
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	f845 c003 	str.w	ip, [r5, r3]
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa40:	3104      	adds	r1, #4
 800aa42:	f1b9 0f00 	cmp.w	r9, #0
 800aa46:	d021      	beq.n	800aa8c <__multiply+0x144>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	f104 0c14 	add.w	ip, r4, #20
 800aa4e:	46ae      	mov	lr, r5
 800aa50:	f04f 0a00 	mov.w	sl, #0
 800aa54:	f8bc b000 	ldrh.w	fp, [ip]
 800aa58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa5c:	fb09 770b 	mla	r7, r9, fp, r7
 800aa60:	4457      	add	r7, sl
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa68:	f84e 3b04 	str.w	r3, [lr], #4
 800aa6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa74:	f8be 3000 	ldrh.w	r3, [lr]
 800aa78:	fb09 330a 	mla	r3, r9, sl, r3
 800aa7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aa80:	4562      	cmp	r2, ip
 800aa82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa86:	d8e5      	bhi.n	800aa54 <__multiply+0x10c>
 800aa88:	9f01      	ldr	r7, [sp, #4]
 800aa8a:	51eb      	str	r3, [r5, r7]
 800aa8c:	3504      	adds	r5, #4
 800aa8e:	e799      	b.n	800a9c4 <__multiply+0x7c>
 800aa90:	3e01      	subs	r6, #1
 800aa92:	e79b      	b.n	800a9cc <__multiply+0x84>
 800aa94:	0800d847 	.word	0x0800d847
 800aa98:	0800d858 	.word	0x0800d858

0800aa9c <__pow5mult>:
 800aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa0:	4615      	mov	r5, r2
 800aaa2:	f012 0203 	ands.w	r2, r2, #3
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	d007      	beq.n	800aabc <__pow5mult+0x20>
 800aaac:	4c25      	ldr	r4, [pc, #148]	@ (800ab44 <__pow5mult+0xa8>)
 800aaae:	3a01      	subs	r2, #1
 800aab0:	2300      	movs	r3, #0
 800aab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aab6:	f7ff fe55 	bl	800a764 <__multadd>
 800aaba:	4606      	mov	r6, r0
 800aabc:	10ad      	asrs	r5, r5, #2
 800aabe:	d03d      	beq.n	800ab3c <__pow5mult+0xa0>
 800aac0:	69fc      	ldr	r4, [r7, #28]
 800aac2:	b97c      	cbnz	r4, 800aae4 <__pow5mult+0x48>
 800aac4:	2010      	movs	r0, #16
 800aac6:	f7ff fd35 	bl	800a534 <malloc>
 800aaca:	4602      	mov	r2, r0
 800aacc:	61f8      	str	r0, [r7, #28]
 800aace:	b928      	cbnz	r0, 800aadc <__pow5mult+0x40>
 800aad0:	4b1d      	ldr	r3, [pc, #116]	@ (800ab48 <__pow5mult+0xac>)
 800aad2:	481e      	ldr	r0, [pc, #120]	@ (800ab4c <__pow5mult+0xb0>)
 800aad4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aad8:	f002 f8c2 	bl	800cc60 <__assert_func>
 800aadc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aae0:	6004      	str	r4, [r0, #0]
 800aae2:	60c4      	str	r4, [r0, #12]
 800aae4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaec:	b94c      	cbnz	r4, 800ab02 <__pow5mult+0x66>
 800aaee:	f240 2171 	movw	r1, #625	@ 0x271
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7ff ff12 	bl	800a91c <__i2b>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f8c8 0008 	str.w	r0, [r8, #8]
 800aafe:	4604      	mov	r4, r0
 800ab00:	6003      	str	r3, [r0, #0]
 800ab02:	f04f 0900 	mov.w	r9, #0
 800ab06:	07eb      	lsls	r3, r5, #31
 800ab08:	d50a      	bpl.n	800ab20 <__pow5mult+0x84>
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	4638      	mov	r0, r7
 800ab10:	f7ff ff1a 	bl	800a948 <__multiply>
 800ab14:	4631      	mov	r1, r6
 800ab16:	4680      	mov	r8, r0
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff fe01 	bl	800a720 <_Bfree>
 800ab1e:	4646      	mov	r6, r8
 800ab20:	106d      	asrs	r5, r5, #1
 800ab22:	d00b      	beq.n	800ab3c <__pow5mult+0xa0>
 800ab24:	6820      	ldr	r0, [r4, #0]
 800ab26:	b938      	cbnz	r0, 800ab38 <__pow5mult+0x9c>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7ff ff0b 	bl	800a948 <__multiply>
 800ab32:	6020      	str	r0, [r4, #0]
 800ab34:	f8c0 9000 	str.w	r9, [r0]
 800ab38:	4604      	mov	r4, r0
 800ab3a:	e7e4      	b.n	800ab06 <__pow5mult+0x6a>
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab42:	bf00      	nop
 800ab44:	0800d8b4 	.word	0x0800d8b4
 800ab48:	0800d7d8 	.word	0x0800d7d8
 800ab4c:	0800d858 	.word	0x0800d858

0800ab50 <__lshift>:
 800ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab54:	460c      	mov	r4, r1
 800ab56:	6849      	ldr	r1, [r1, #4]
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	4607      	mov	r7, r0
 800ab62:	4691      	mov	r9, r2
 800ab64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab68:	f108 0601 	add.w	r6, r8, #1
 800ab6c:	42b3      	cmp	r3, r6
 800ab6e:	db0b      	blt.n	800ab88 <__lshift+0x38>
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff fd95 	bl	800a6a0 <_Balloc>
 800ab76:	4605      	mov	r5, r0
 800ab78:	b948      	cbnz	r0, 800ab8e <__lshift+0x3e>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	4b28      	ldr	r3, [pc, #160]	@ (800ac20 <__lshift+0xd0>)
 800ab7e:	4829      	ldr	r0, [pc, #164]	@ (800ac24 <__lshift+0xd4>)
 800ab80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab84:	f002 f86c 	bl	800cc60 <__assert_func>
 800ab88:	3101      	adds	r1, #1
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	e7ee      	b.n	800ab6c <__lshift+0x1c>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f100 0114 	add.w	r1, r0, #20
 800ab94:	f100 0210 	add.w	r2, r0, #16
 800ab98:	4618      	mov	r0, r3
 800ab9a:	4553      	cmp	r3, sl
 800ab9c:	db33      	blt.n	800ac06 <__lshift+0xb6>
 800ab9e:	6920      	ldr	r0, [r4, #16]
 800aba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aba4:	f104 0314 	add.w	r3, r4, #20
 800aba8:	f019 091f 	ands.w	r9, r9, #31
 800abac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abb4:	d02b      	beq.n	800ac0e <__lshift+0xbe>
 800abb6:	f1c9 0e20 	rsb	lr, r9, #32
 800abba:	468a      	mov	sl, r1
 800abbc:	2200      	movs	r2, #0
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	fa00 f009 	lsl.w	r0, r0, r9
 800abc4:	4310      	orrs	r0, r2
 800abc6:	f84a 0b04 	str.w	r0, [sl], #4
 800abca:	f853 2b04 	ldr.w	r2, [r3], #4
 800abce:	459c      	cmp	ip, r3
 800abd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800abd4:	d8f3      	bhi.n	800abbe <__lshift+0x6e>
 800abd6:	ebac 0304 	sub.w	r3, ip, r4
 800abda:	3b15      	subs	r3, #21
 800abdc:	f023 0303 	bic.w	r3, r3, #3
 800abe0:	3304      	adds	r3, #4
 800abe2:	f104 0015 	add.w	r0, r4, #21
 800abe6:	4584      	cmp	ip, r0
 800abe8:	bf38      	it	cc
 800abea:	2304      	movcc	r3, #4
 800abec:	50ca      	str	r2, [r1, r3]
 800abee:	b10a      	cbz	r2, 800abf4 <__lshift+0xa4>
 800abf0:	f108 0602 	add.w	r6, r8, #2
 800abf4:	3e01      	subs	r6, #1
 800abf6:	4638      	mov	r0, r7
 800abf8:	612e      	str	r6, [r5, #16]
 800abfa:	4621      	mov	r1, r4
 800abfc:	f7ff fd90 	bl	800a720 <_Bfree>
 800ac00:	4628      	mov	r0, r5
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	e7c5      	b.n	800ab9a <__lshift+0x4a>
 800ac0e:	3904      	subs	r1, #4
 800ac10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac14:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac18:	459c      	cmp	ip, r3
 800ac1a:	d8f9      	bhi.n	800ac10 <__lshift+0xc0>
 800ac1c:	e7ea      	b.n	800abf4 <__lshift+0xa4>
 800ac1e:	bf00      	nop
 800ac20:	0800d847 	.word	0x0800d847
 800ac24:	0800d858 	.word	0x0800d858

0800ac28 <__mcmp>:
 800ac28:	690a      	ldr	r2, [r1, #16]
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6900      	ldr	r0, [r0, #16]
 800ac2e:	1a80      	subs	r0, r0, r2
 800ac30:	b530      	push	{r4, r5, lr}
 800ac32:	d10e      	bne.n	800ac52 <__mcmp+0x2a>
 800ac34:	3314      	adds	r3, #20
 800ac36:	3114      	adds	r1, #20
 800ac38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac48:	4295      	cmp	r5, r2
 800ac4a:	d003      	beq.n	800ac54 <__mcmp+0x2c>
 800ac4c:	d205      	bcs.n	800ac5a <__mcmp+0x32>
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	bd30      	pop	{r4, r5, pc}
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	d3f3      	bcc.n	800ac40 <__mcmp+0x18>
 800ac58:	e7fb      	b.n	800ac52 <__mcmp+0x2a>
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	e7f9      	b.n	800ac52 <__mcmp+0x2a>
	...

0800ac60 <__mdiff>:
 800ac60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	4689      	mov	r9, r1
 800ac66:	4606      	mov	r6, r0
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4648      	mov	r0, r9
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	f7ff ffdb 	bl	800ac28 <__mcmp>
 800ac72:	1e05      	subs	r5, r0, #0
 800ac74:	d112      	bne.n	800ac9c <__mdiff+0x3c>
 800ac76:	4629      	mov	r1, r5
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff fd11 	bl	800a6a0 <_Balloc>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	b928      	cbnz	r0, 800ac8e <__mdiff+0x2e>
 800ac82:	4b3f      	ldr	r3, [pc, #252]	@ (800ad80 <__mdiff+0x120>)
 800ac84:	f240 2137 	movw	r1, #567	@ 0x237
 800ac88:	483e      	ldr	r0, [pc, #248]	@ (800ad84 <__mdiff+0x124>)
 800ac8a:	f001 ffe9 	bl	800cc60 <__assert_func>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac94:	4610      	mov	r0, r2
 800ac96:	b003      	add	sp, #12
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	bfbc      	itt	lt
 800ac9e:	464b      	movlt	r3, r9
 800aca0:	46a1      	movlt	r9, r4
 800aca2:	4630      	mov	r0, r6
 800aca4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aca8:	bfba      	itte	lt
 800acaa:	461c      	movlt	r4, r3
 800acac:	2501      	movlt	r5, #1
 800acae:	2500      	movge	r5, #0
 800acb0:	f7ff fcf6 	bl	800a6a0 <_Balloc>
 800acb4:	4602      	mov	r2, r0
 800acb6:	b918      	cbnz	r0, 800acc0 <__mdiff+0x60>
 800acb8:	4b31      	ldr	r3, [pc, #196]	@ (800ad80 <__mdiff+0x120>)
 800acba:	f240 2145 	movw	r1, #581	@ 0x245
 800acbe:	e7e3      	b.n	800ac88 <__mdiff+0x28>
 800acc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acc4:	6926      	ldr	r6, [r4, #16]
 800acc6:	60c5      	str	r5, [r0, #12]
 800acc8:	f109 0310 	add.w	r3, r9, #16
 800accc:	f109 0514 	add.w	r5, r9, #20
 800acd0:	f104 0e14 	add.w	lr, r4, #20
 800acd4:	f100 0b14 	add.w	fp, r0, #20
 800acd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800acdc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	46d9      	mov	r9, fp
 800ace4:	f04f 0c00 	mov.w	ip, #0
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	fa1f f38a 	uxth.w	r3, sl
 800acf8:	4619      	mov	r1, r3
 800acfa:	b283      	uxth	r3, r0
 800acfc:	1acb      	subs	r3, r1, r3
 800acfe:	0c00      	lsrs	r0, r0, #16
 800ad00:	4463      	add	r3, ip
 800ad02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad10:	4576      	cmp	r6, lr
 800ad12:	f849 3b04 	str.w	r3, [r9], #4
 800ad16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad1a:	d8e5      	bhi.n	800ace8 <__mdiff+0x88>
 800ad1c:	1b33      	subs	r3, r6, r4
 800ad1e:	3b15      	subs	r3, #21
 800ad20:	f023 0303 	bic.w	r3, r3, #3
 800ad24:	3415      	adds	r4, #21
 800ad26:	3304      	adds	r3, #4
 800ad28:	42a6      	cmp	r6, r4
 800ad2a:	bf38      	it	cc
 800ad2c:	2304      	movcc	r3, #4
 800ad2e:	441d      	add	r5, r3
 800ad30:	445b      	add	r3, fp
 800ad32:	461e      	mov	r6, r3
 800ad34:	462c      	mov	r4, r5
 800ad36:	4544      	cmp	r4, r8
 800ad38:	d30e      	bcc.n	800ad58 <__mdiff+0xf8>
 800ad3a:	f108 0103 	add.w	r1, r8, #3
 800ad3e:	1b49      	subs	r1, r1, r5
 800ad40:	f021 0103 	bic.w	r1, r1, #3
 800ad44:	3d03      	subs	r5, #3
 800ad46:	45a8      	cmp	r8, r5
 800ad48:	bf38      	it	cc
 800ad4a:	2100      	movcc	r1, #0
 800ad4c:	440b      	add	r3, r1
 800ad4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad52:	b191      	cbz	r1, 800ad7a <__mdiff+0x11a>
 800ad54:	6117      	str	r7, [r2, #16]
 800ad56:	e79d      	b.n	800ac94 <__mdiff+0x34>
 800ad58:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad5c:	46e6      	mov	lr, ip
 800ad5e:	0c08      	lsrs	r0, r1, #16
 800ad60:	fa1c fc81 	uxtah	ip, ip, r1
 800ad64:	4471      	add	r1, lr
 800ad66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad6a:	b289      	uxth	r1, r1
 800ad6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad70:	f846 1b04 	str.w	r1, [r6], #4
 800ad74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad78:	e7dd      	b.n	800ad36 <__mdiff+0xd6>
 800ad7a:	3f01      	subs	r7, #1
 800ad7c:	e7e7      	b.n	800ad4e <__mdiff+0xee>
 800ad7e:	bf00      	nop
 800ad80:	0800d847 	.word	0x0800d847
 800ad84:	0800d858 	.word	0x0800d858

0800ad88 <__ulp>:
 800ad88:	b082      	sub	sp, #8
 800ad8a:	ed8d 0b00 	vstr	d0, [sp]
 800ad8e:	9a01      	ldr	r2, [sp, #4]
 800ad90:	4b0f      	ldr	r3, [pc, #60]	@ (800add0 <__ulp+0x48>)
 800ad92:	4013      	ands	r3, r2
 800ad94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc08      	bgt.n	800adae <__ulp+0x26>
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ada2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ada6:	da04      	bge.n	800adb2 <__ulp+0x2a>
 800ada8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800adac:	4113      	asrs	r3, r2
 800adae:	2200      	movs	r2, #0
 800adb0:	e008      	b.n	800adc4 <__ulp+0x3c>
 800adb2:	f1a2 0314 	sub.w	r3, r2, #20
 800adb6:	2b1e      	cmp	r3, #30
 800adb8:	bfda      	itte	le
 800adba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800adbe:	40da      	lsrle	r2, r3
 800adc0:	2201      	movgt	r2, #1
 800adc2:	2300      	movs	r3, #0
 800adc4:	4619      	mov	r1, r3
 800adc6:	4610      	mov	r0, r2
 800adc8:	ec41 0b10 	vmov	d0, r0, r1
 800adcc:	b002      	add	sp, #8
 800adce:	4770      	bx	lr
 800add0:	7ff00000 	.word	0x7ff00000

0800add4 <__b2d>:
 800add4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add8:	6906      	ldr	r6, [r0, #16]
 800adda:	f100 0814 	add.w	r8, r0, #20
 800adde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ade2:	1f37      	subs	r7, r6, #4
 800ade4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ade8:	4610      	mov	r0, r2
 800adea:	f7ff fd4b 	bl	800a884 <__hi0bits>
 800adee:	f1c0 0320 	rsb	r3, r0, #32
 800adf2:	280a      	cmp	r0, #10
 800adf4:	600b      	str	r3, [r1, #0]
 800adf6:	491b      	ldr	r1, [pc, #108]	@ (800ae64 <__b2d+0x90>)
 800adf8:	dc15      	bgt.n	800ae26 <__b2d+0x52>
 800adfa:	f1c0 0c0b 	rsb	ip, r0, #11
 800adfe:	fa22 f30c 	lsr.w	r3, r2, ip
 800ae02:	45b8      	cmp	r8, r7
 800ae04:	ea43 0501 	orr.w	r5, r3, r1
 800ae08:	bf34      	ite	cc
 800ae0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae0e:	2300      	movcs	r3, #0
 800ae10:	3015      	adds	r0, #21
 800ae12:	fa02 f000 	lsl.w	r0, r2, r0
 800ae16:	fa23 f30c 	lsr.w	r3, r3, ip
 800ae1a:	4303      	orrs	r3, r0
 800ae1c:	461c      	mov	r4, r3
 800ae1e:	ec45 4b10 	vmov	d0, r4, r5
 800ae22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae26:	45b8      	cmp	r8, r7
 800ae28:	bf3a      	itte	cc
 800ae2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ae2e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ae32:	2300      	movcs	r3, #0
 800ae34:	380b      	subs	r0, #11
 800ae36:	d012      	beq.n	800ae5e <__b2d+0x8a>
 800ae38:	f1c0 0120 	rsb	r1, r0, #32
 800ae3c:	fa23 f401 	lsr.w	r4, r3, r1
 800ae40:	4082      	lsls	r2, r0
 800ae42:	4322      	orrs	r2, r4
 800ae44:	4547      	cmp	r7, r8
 800ae46:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ae4a:	bf8c      	ite	hi
 800ae4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ae50:	2200      	movls	r2, #0
 800ae52:	4083      	lsls	r3, r0
 800ae54:	40ca      	lsrs	r2, r1
 800ae56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	e7de      	b.n	800ae1c <__b2d+0x48>
 800ae5e:	ea42 0501 	orr.w	r5, r2, r1
 800ae62:	e7db      	b.n	800ae1c <__b2d+0x48>
 800ae64:	3ff00000 	.word	0x3ff00000

0800ae68 <__d2b>:
 800ae68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	2101      	movs	r1, #1
 800ae70:	ec59 8b10 	vmov	r8, r9, d0
 800ae74:	4616      	mov	r6, r2
 800ae76:	f7ff fc13 	bl	800a6a0 <_Balloc>
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	b930      	cbnz	r0, 800ae8c <__d2b+0x24>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	4b23      	ldr	r3, [pc, #140]	@ (800af10 <__d2b+0xa8>)
 800ae82:	4824      	ldr	r0, [pc, #144]	@ (800af14 <__d2b+0xac>)
 800ae84:	f240 310f 	movw	r1, #783	@ 0x30f
 800ae88:	f001 feea 	bl	800cc60 <__assert_func>
 800ae8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae94:	b10d      	cbz	r5, 800ae9a <__d2b+0x32>
 800ae96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	f1b8 0300 	subs.w	r3, r8, #0
 800aea0:	d023      	beq.n	800aeea <__d2b+0x82>
 800aea2:	4668      	mov	r0, sp
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	f7ff fd0c 	bl	800a8c2 <__lo0bits>
 800aeaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aeae:	b1d0      	cbz	r0, 800aee6 <__d2b+0x7e>
 800aeb0:	f1c0 0320 	rsb	r3, r0, #32
 800aeb4:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb8:	430b      	orrs	r3, r1
 800aeba:	40c2      	lsrs	r2, r0
 800aebc:	6163      	str	r3, [r4, #20]
 800aebe:	9201      	str	r2, [sp, #4]
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	61a3      	str	r3, [r4, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bf0c      	ite	eq
 800aec8:	2201      	moveq	r2, #1
 800aeca:	2202      	movne	r2, #2
 800aecc:	6122      	str	r2, [r4, #16]
 800aece:	b1a5      	cbz	r5, 800aefa <__d2b+0x92>
 800aed0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aed4:	4405      	add	r5, r0
 800aed6:	603d      	str	r5, [r7, #0]
 800aed8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aedc:	6030      	str	r0, [r6, #0]
 800aede:	4620      	mov	r0, r4
 800aee0:	b003      	add	sp, #12
 800aee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aee6:	6161      	str	r1, [r4, #20]
 800aee8:	e7ea      	b.n	800aec0 <__d2b+0x58>
 800aeea:	a801      	add	r0, sp, #4
 800aeec:	f7ff fce9 	bl	800a8c2 <__lo0bits>
 800aef0:	9b01      	ldr	r3, [sp, #4]
 800aef2:	6163      	str	r3, [r4, #20]
 800aef4:	3020      	adds	r0, #32
 800aef6:	2201      	movs	r2, #1
 800aef8:	e7e8      	b.n	800aecc <__d2b+0x64>
 800aefa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aefe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800af02:	6038      	str	r0, [r7, #0]
 800af04:	6918      	ldr	r0, [r3, #16]
 800af06:	f7ff fcbd 	bl	800a884 <__hi0bits>
 800af0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af0e:	e7e5      	b.n	800aedc <__d2b+0x74>
 800af10:	0800d847 	.word	0x0800d847
 800af14:	0800d858 	.word	0x0800d858

0800af18 <__ratio>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	b085      	sub	sp, #20
 800af1e:	e9cd 1000 	strd	r1, r0, [sp]
 800af22:	a902      	add	r1, sp, #8
 800af24:	f7ff ff56 	bl	800add4 <__b2d>
 800af28:	9800      	ldr	r0, [sp, #0]
 800af2a:	a903      	add	r1, sp, #12
 800af2c:	ec55 4b10 	vmov	r4, r5, d0
 800af30:	f7ff ff50 	bl	800add4 <__b2d>
 800af34:	9b01      	ldr	r3, [sp, #4]
 800af36:	6919      	ldr	r1, [r3, #16]
 800af38:	9b00      	ldr	r3, [sp, #0]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	1ac9      	subs	r1, r1, r3
 800af3e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800af42:	1a9b      	subs	r3, r3, r2
 800af44:	ec5b ab10 	vmov	sl, fp, d0
 800af48:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bfce      	itee	gt
 800af50:	462a      	movgt	r2, r5
 800af52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af56:	465a      	movle	r2, fp
 800af58:	462f      	mov	r7, r5
 800af5a:	46d9      	mov	r9, fp
 800af5c:	bfcc      	ite	gt
 800af5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800af62:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800af66:	464b      	mov	r3, r9
 800af68:	4652      	mov	r2, sl
 800af6a:	4620      	mov	r0, r4
 800af6c:	4639      	mov	r1, r7
 800af6e:	f7f5 fc8d 	bl	800088c <__aeabi_ddiv>
 800af72:	ec41 0b10 	vmov	d0, r0, r1
 800af76:	b005      	add	sp, #20
 800af78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af7c <__copybits>:
 800af7c:	3901      	subs	r1, #1
 800af7e:	b570      	push	{r4, r5, r6, lr}
 800af80:	1149      	asrs	r1, r1, #5
 800af82:	6914      	ldr	r4, [r2, #16]
 800af84:	3101      	adds	r1, #1
 800af86:	f102 0314 	add.w	r3, r2, #20
 800af8a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af92:	1f05      	subs	r5, r0, #4
 800af94:	42a3      	cmp	r3, r4
 800af96:	d30c      	bcc.n	800afb2 <__copybits+0x36>
 800af98:	1aa3      	subs	r3, r4, r2
 800af9a:	3b11      	subs	r3, #17
 800af9c:	f023 0303 	bic.w	r3, r3, #3
 800afa0:	3211      	adds	r2, #17
 800afa2:	42a2      	cmp	r2, r4
 800afa4:	bf88      	it	hi
 800afa6:	2300      	movhi	r3, #0
 800afa8:	4418      	add	r0, r3
 800afaa:	2300      	movs	r3, #0
 800afac:	4288      	cmp	r0, r1
 800afae:	d305      	bcc.n	800afbc <__copybits+0x40>
 800afb0:	bd70      	pop	{r4, r5, r6, pc}
 800afb2:	f853 6b04 	ldr.w	r6, [r3], #4
 800afb6:	f845 6f04 	str.w	r6, [r5, #4]!
 800afba:	e7eb      	b.n	800af94 <__copybits+0x18>
 800afbc:	f840 3b04 	str.w	r3, [r0], #4
 800afc0:	e7f4      	b.n	800afac <__copybits+0x30>

0800afc2 <__any_on>:
 800afc2:	f100 0214 	add.w	r2, r0, #20
 800afc6:	6900      	ldr	r0, [r0, #16]
 800afc8:	114b      	asrs	r3, r1, #5
 800afca:	4298      	cmp	r0, r3
 800afcc:	b510      	push	{r4, lr}
 800afce:	db11      	blt.n	800aff4 <__any_on+0x32>
 800afd0:	dd0a      	ble.n	800afe8 <__any_on+0x26>
 800afd2:	f011 011f 	ands.w	r1, r1, #31
 800afd6:	d007      	beq.n	800afe8 <__any_on+0x26>
 800afd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800afdc:	fa24 f001 	lsr.w	r0, r4, r1
 800afe0:	fa00 f101 	lsl.w	r1, r0, r1
 800afe4:	428c      	cmp	r4, r1
 800afe6:	d10b      	bne.n	800b000 <__any_on+0x3e>
 800afe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afec:	4293      	cmp	r3, r2
 800afee:	d803      	bhi.n	800aff8 <__any_on+0x36>
 800aff0:	2000      	movs	r0, #0
 800aff2:	bd10      	pop	{r4, pc}
 800aff4:	4603      	mov	r3, r0
 800aff6:	e7f7      	b.n	800afe8 <__any_on+0x26>
 800aff8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800affc:	2900      	cmp	r1, #0
 800affe:	d0f5      	beq.n	800afec <__any_on+0x2a>
 800b000:	2001      	movs	r0, #1
 800b002:	e7f6      	b.n	800aff2 <__any_on+0x30>

0800b004 <sulp>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
 800b00a:	ec45 4b10 	vmov	d0, r4, r5
 800b00e:	4616      	mov	r6, r2
 800b010:	f7ff feba 	bl	800ad88 <__ulp>
 800b014:	ec51 0b10 	vmov	r0, r1, d0
 800b018:	b17e      	cbz	r6, 800b03a <sulp+0x36>
 800b01a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b01e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b022:	2b00      	cmp	r3, #0
 800b024:	dd09      	ble.n	800b03a <sulp+0x36>
 800b026:	051b      	lsls	r3, r3, #20
 800b028:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b02c:	2400      	movs	r4, #0
 800b02e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b032:	4622      	mov	r2, r4
 800b034:	462b      	mov	r3, r5
 800b036:	f7f5 faff 	bl	8000638 <__aeabi_dmul>
 800b03a:	ec41 0b10 	vmov	d0, r0, r1
 800b03e:	bd70      	pop	{r4, r5, r6, pc}

0800b040 <_strtod_l>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	b09f      	sub	sp, #124	@ 0x7c
 800b046:	460c      	mov	r4, r1
 800b048:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b04a:	2200      	movs	r2, #0
 800b04c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b04e:	9005      	str	r0, [sp, #20]
 800b050:	f04f 0a00 	mov.w	sl, #0
 800b054:	f04f 0b00 	mov.w	fp, #0
 800b058:	460a      	mov	r2, r1
 800b05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b05c:	7811      	ldrb	r1, [r2, #0]
 800b05e:	292b      	cmp	r1, #43	@ 0x2b
 800b060:	d04a      	beq.n	800b0f8 <_strtod_l+0xb8>
 800b062:	d838      	bhi.n	800b0d6 <_strtod_l+0x96>
 800b064:	290d      	cmp	r1, #13
 800b066:	d832      	bhi.n	800b0ce <_strtod_l+0x8e>
 800b068:	2908      	cmp	r1, #8
 800b06a:	d832      	bhi.n	800b0d2 <_strtod_l+0x92>
 800b06c:	2900      	cmp	r1, #0
 800b06e:	d03b      	beq.n	800b0e8 <_strtod_l+0xa8>
 800b070:	2200      	movs	r2, #0
 800b072:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b076:	782a      	ldrb	r2, [r5, #0]
 800b078:	2a30      	cmp	r2, #48	@ 0x30
 800b07a:	f040 80b3 	bne.w	800b1e4 <_strtod_l+0x1a4>
 800b07e:	786a      	ldrb	r2, [r5, #1]
 800b080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b084:	2a58      	cmp	r2, #88	@ 0x58
 800b086:	d16e      	bne.n	800b166 <_strtod_l+0x126>
 800b088:	9302      	str	r3, [sp, #8]
 800b08a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	4a8e      	ldr	r2, [pc, #568]	@ (800b2cc <_strtod_l+0x28c>)
 800b094:	9805      	ldr	r0, [sp, #20]
 800b096:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b098:	a919      	add	r1, sp, #100	@ 0x64
 800b09a:	f001 fe7b 	bl	800cd94 <__gethex>
 800b09e:	f010 060f 	ands.w	r6, r0, #15
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	d005      	beq.n	800b0b2 <_strtod_l+0x72>
 800b0a6:	2e06      	cmp	r6, #6
 800b0a8:	d128      	bne.n	800b0fc <_strtod_l+0xbc>
 800b0aa:	3501      	adds	r5, #1
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800b0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f040 858e 	bne.w	800bbd6 <_strtod_l+0xb96>
 800b0ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0bc:	b1cb      	cbz	r3, 800b0f2 <_strtod_l+0xb2>
 800b0be:	4652      	mov	r2, sl
 800b0c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b0c4:	ec43 2b10 	vmov	d0, r2, r3
 800b0c8:	b01f      	add	sp, #124	@ 0x7c
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	2920      	cmp	r1, #32
 800b0d0:	d1ce      	bne.n	800b070 <_strtod_l+0x30>
 800b0d2:	3201      	adds	r2, #1
 800b0d4:	e7c1      	b.n	800b05a <_strtod_l+0x1a>
 800b0d6:	292d      	cmp	r1, #45	@ 0x2d
 800b0d8:	d1ca      	bne.n	800b070 <_strtod_l+0x30>
 800b0da:	2101      	movs	r1, #1
 800b0dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b0de:	1c51      	adds	r1, r2, #1
 800b0e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800b0e2:	7852      	ldrb	r2, [r2, #1]
 800b0e4:	2a00      	cmp	r2, #0
 800b0e6:	d1c5      	bne.n	800b074 <_strtod_l+0x34>
 800b0e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f040 8570 	bne.w	800bbd2 <_strtod_l+0xb92>
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	e7e5      	b.n	800b0c4 <_strtod_l+0x84>
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	e7ef      	b.n	800b0dc <_strtod_l+0x9c>
 800b0fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b0fe:	b13a      	cbz	r2, 800b110 <_strtod_l+0xd0>
 800b100:	2135      	movs	r1, #53	@ 0x35
 800b102:	a81c      	add	r0, sp, #112	@ 0x70
 800b104:	f7ff ff3a 	bl	800af7c <__copybits>
 800b108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b10a:	9805      	ldr	r0, [sp, #20]
 800b10c:	f7ff fb08 	bl	800a720 <_Bfree>
 800b110:	3e01      	subs	r6, #1
 800b112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b114:	2e04      	cmp	r6, #4
 800b116:	d806      	bhi.n	800b126 <_strtod_l+0xe6>
 800b118:	e8df f006 	tbb	[pc, r6]
 800b11c:	201d0314 	.word	0x201d0314
 800b120:	14          	.byte	0x14
 800b121:	00          	.byte	0x00
 800b122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b126:	05e1      	lsls	r1, r4, #23
 800b128:	bf48      	it	mi
 800b12a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b12e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b132:	0d1b      	lsrs	r3, r3, #20
 800b134:	051b      	lsls	r3, r3, #20
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1bb      	bne.n	800b0b2 <_strtod_l+0x72>
 800b13a:	f7fe fb2f 	bl	800979c <__errno>
 800b13e:	2322      	movs	r3, #34	@ 0x22
 800b140:	6003      	str	r3, [r0, #0]
 800b142:	e7b6      	b.n	800b0b2 <_strtod_l+0x72>
 800b144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b14c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b154:	e7e7      	b.n	800b126 <_strtod_l+0xe6>
 800b156:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b2d4 <_strtod_l+0x294>
 800b15a:	e7e4      	b.n	800b126 <_strtod_l+0xe6>
 800b15c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b160:	f04f 3aff 	mov.w	sl, #4294967295
 800b164:	e7df      	b.n	800b126 <_strtod_l+0xe6>
 800b166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	2b30      	cmp	r3, #48	@ 0x30
 800b170:	d0f9      	beq.n	800b166 <_strtod_l+0x126>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d09d      	beq.n	800b0b2 <_strtod_l+0x72>
 800b176:	2301      	movs	r3, #1
 800b178:	9309      	str	r3, [sp, #36]	@ 0x24
 800b17a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b17c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b17e:	2300      	movs	r3, #0
 800b180:	9308      	str	r3, [sp, #32]
 800b182:	930a      	str	r3, [sp, #40]	@ 0x28
 800b184:	461f      	mov	r7, r3
 800b186:	220a      	movs	r2, #10
 800b188:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b18a:	7805      	ldrb	r5, [r0, #0]
 800b18c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b190:	b2d9      	uxtb	r1, r3
 800b192:	2909      	cmp	r1, #9
 800b194:	d928      	bls.n	800b1e8 <_strtod_l+0x1a8>
 800b196:	494e      	ldr	r1, [pc, #312]	@ (800b2d0 <_strtod_l+0x290>)
 800b198:	2201      	movs	r2, #1
 800b19a:	f001 fd06 	bl	800cbaa <strncmp>
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d032      	beq.n	800b208 <_strtod_l+0x1c8>
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4681      	mov	r9, r0
 800b1a8:	463d      	mov	r5, r7
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2a65      	cmp	r2, #101	@ 0x65
 800b1ae:	d001      	beq.n	800b1b4 <_strtod_l+0x174>
 800b1b0:	2a45      	cmp	r2, #69	@ 0x45
 800b1b2:	d114      	bne.n	800b1de <_strtod_l+0x19e>
 800b1b4:	b91d      	cbnz	r5, 800b1be <_strtod_l+0x17e>
 800b1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1b8:	4302      	orrs	r2, r0
 800b1ba:	d095      	beq.n	800b0e8 <_strtod_l+0xa8>
 800b1bc:	2500      	movs	r5, #0
 800b1be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b1c0:	1c62      	adds	r2, r4, #1
 800b1c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b1c4:	7862      	ldrb	r2, [r4, #1]
 800b1c6:	2a2b      	cmp	r2, #43	@ 0x2b
 800b1c8:	d077      	beq.n	800b2ba <_strtod_l+0x27a>
 800b1ca:	2a2d      	cmp	r2, #45	@ 0x2d
 800b1cc:	d07b      	beq.n	800b2c6 <_strtod_l+0x286>
 800b1ce:	f04f 0c00 	mov.w	ip, #0
 800b1d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b1d6:	2909      	cmp	r1, #9
 800b1d8:	f240 8082 	bls.w	800b2e0 <_strtod_l+0x2a0>
 800b1dc:	9419      	str	r4, [sp, #100]	@ 0x64
 800b1de:	f04f 0800 	mov.w	r8, #0
 800b1e2:	e0a2      	b.n	800b32a <_strtod_l+0x2ea>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e7c7      	b.n	800b178 <_strtod_l+0x138>
 800b1e8:	2f08      	cmp	r7, #8
 800b1ea:	bfd5      	itete	le
 800b1ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b1ee:	9908      	ldrgt	r1, [sp, #32]
 800b1f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b1f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b1f8:	f100 0001 	add.w	r0, r0, #1
 800b1fc:	bfd4      	ite	le
 800b1fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b200:	9308      	strgt	r3, [sp, #32]
 800b202:	3701      	adds	r7, #1
 800b204:	9019      	str	r0, [sp, #100]	@ 0x64
 800b206:	e7bf      	b.n	800b188 <_strtod_l+0x148>
 800b208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b20a:	1c5a      	adds	r2, r3, #1
 800b20c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b20e:	785a      	ldrb	r2, [r3, #1]
 800b210:	b37f      	cbz	r7, 800b272 <_strtod_l+0x232>
 800b212:	4681      	mov	r9, r0
 800b214:	463d      	mov	r5, r7
 800b216:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b21a:	2b09      	cmp	r3, #9
 800b21c:	d912      	bls.n	800b244 <_strtod_l+0x204>
 800b21e:	2301      	movs	r3, #1
 800b220:	e7c4      	b.n	800b1ac <_strtod_l+0x16c>
 800b222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	9219      	str	r2, [sp, #100]	@ 0x64
 800b228:	785a      	ldrb	r2, [r3, #1]
 800b22a:	3001      	adds	r0, #1
 800b22c:	2a30      	cmp	r2, #48	@ 0x30
 800b22e:	d0f8      	beq.n	800b222 <_strtod_l+0x1e2>
 800b230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b234:	2b08      	cmp	r3, #8
 800b236:	f200 84d3 	bhi.w	800bbe0 <_strtod_l+0xba0>
 800b23a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b23c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b23e:	4681      	mov	r9, r0
 800b240:	2000      	movs	r0, #0
 800b242:	4605      	mov	r5, r0
 800b244:	3a30      	subs	r2, #48	@ 0x30
 800b246:	f100 0301 	add.w	r3, r0, #1
 800b24a:	d02a      	beq.n	800b2a2 <_strtod_l+0x262>
 800b24c:	4499      	add	r9, r3
 800b24e:	eb00 0c05 	add.w	ip, r0, r5
 800b252:	462b      	mov	r3, r5
 800b254:	210a      	movs	r1, #10
 800b256:	4563      	cmp	r3, ip
 800b258:	d10d      	bne.n	800b276 <_strtod_l+0x236>
 800b25a:	1c69      	adds	r1, r5, #1
 800b25c:	4401      	add	r1, r0
 800b25e:	4428      	add	r0, r5
 800b260:	2808      	cmp	r0, #8
 800b262:	dc16      	bgt.n	800b292 <_strtod_l+0x252>
 800b264:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b266:	230a      	movs	r3, #10
 800b268:	fb03 2300 	mla	r3, r3, r0, r2
 800b26c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b26e:	2300      	movs	r3, #0
 800b270:	e018      	b.n	800b2a4 <_strtod_l+0x264>
 800b272:	4638      	mov	r0, r7
 800b274:	e7da      	b.n	800b22c <_strtod_l+0x1ec>
 800b276:	2b08      	cmp	r3, #8
 800b278:	f103 0301 	add.w	r3, r3, #1
 800b27c:	dc03      	bgt.n	800b286 <_strtod_l+0x246>
 800b27e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b280:	434e      	muls	r6, r1
 800b282:	960a      	str	r6, [sp, #40]	@ 0x28
 800b284:	e7e7      	b.n	800b256 <_strtod_l+0x216>
 800b286:	2b10      	cmp	r3, #16
 800b288:	bfde      	ittt	le
 800b28a:	9e08      	ldrle	r6, [sp, #32]
 800b28c:	434e      	mulle	r6, r1
 800b28e:	9608      	strle	r6, [sp, #32]
 800b290:	e7e1      	b.n	800b256 <_strtod_l+0x216>
 800b292:	280f      	cmp	r0, #15
 800b294:	dceb      	bgt.n	800b26e <_strtod_l+0x22e>
 800b296:	9808      	ldr	r0, [sp, #32]
 800b298:	230a      	movs	r3, #10
 800b29a:	fb03 2300 	mla	r3, r3, r0, r2
 800b29e:	9308      	str	r3, [sp, #32]
 800b2a0:	e7e5      	b.n	800b26e <_strtod_l+0x22e>
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b2a6:	1c50      	adds	r0, r2, #1
 800b2a8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b2aa:	7852      	ldrb	r2, [r2, #1]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	e7b1      	b.n	800b216 <_strtod_l+0x1d6>
 800b2b2:	f04f 0900 	mov.w	r9, #0
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e77d      	b.n	800b1b6 <_strtod_l+0x176>
 800b2ba:	f04f 0c00 	mov.w	ip, #0
 800b2be:	1ca2      	adds	r2, r4, #2
 800b2c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2c2:	78a2      	ldrb	r2, [r4, #2]
 800b2c4:	e785      	b.n	800b1d2 <_strtod_l+0x192>
 800b2c6:	f04f 0c01 	mov.w	ip, #1
 800b2ca:	e7f8      	b.n	800b2be <_strtod_l+0x27e>
 800b2cc:	0800d9c8 	.word	0x0800d9c8
 800b2d0:	0800d9b0 	.word	0x0800d9b0
 800b2d4:	7ff00000 	.word	0x7ff00000
 800b2d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b2da:	1c51      	adds	r1, r2, #1
 800b2dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b2de:	7852      	ldrb	r2, [r2, #1]
 800b2e0:	2a30      	cmp	r2, #48	@ 0x30
 800b2e2:	d0f9      	beq.n	800b2d8 <_strtod_l+0x298>
 800b2e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b2e8:	2908      	cmp	r1, #8
 800b2ea:	f63f af78 	bhi.w	800b1de <_strtod_l+0x19e>
 800b2ee:	3a30      	subs	r2, #48	@ 0x30
 800b2f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b2f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b2f6:	f04f 080a 	mov.w	r8, #10
 800b2fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b2fc:	1c56      	adds	r6, r2, #1
 800b2fe:	9619      	str	r6, [sp, #100]	@ 0x64
 800b300:	7852      	ldrb	r2, [r2, #1]
 800b302:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b306:	f1be 0f09 	cmp.w	lr, #9
 800b30a:	d939      	bls.n	800b380 <_strtod_l+0x340>
 800b30c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b30e:	1a76      	subs	r6, r6, r1
 800b310:	2e08      	cmp	r6, #8
 800b312:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b316:	dc03      	bgt.n	800b320 <_strtod_l+0x2e0>
 800b318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b31a:	4588      	cmp	r8, r1
 800b31c:	bfa8      	it	ge
 800b31e:	4688      	movge	r8, r1
 800b320:	f1bc 0f00 	cmp.w	ip, #0
 800b324:	d001      	beq.n	800b32a <_strtod_l+0x2ea>
 800b326:	f1c8 0800 	rsb	r8, r8, #0
 800b32a:	2d00      	cmp	r5, #0
 800b32c:	d14e      	bne.n	800b3cc <_strtod_l+0x38c>
 800b32e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b330:	4308      	orrs	r0, r1
 800b332:	f47f aebe 	bne.w	800b0b2 <_strtod_l+0x72>
 800b336:	2b00      	cmp	r3, #0
 800b338:	f47f aed6 	bne.w	800b0e8 <_strtod_l+0xa8>
 800b33c:	2a69      	cmp	r2, #105	@ 0x69
 800b33e:	d028      	beq.n	800b392 <_strtod_l+0x352>
 800b340:	dc25      	bgt.n	800b38e <_strtod_l+0x34e>
 800b342:	2a49      	cmp	r2, #73	@ 0x49
 800b344:	d025      	beq.n	800b392 <_strtod_l+0x352>
 800b346:	2a4e      	cmp	r2, #78	@ 0x4e
 800b348:	f47f aece 	bne.w	800b0e8 <_strtod_l+0xa8>
 800b34c:	499b      	ldr	r1, [pc, #620]	@ (800b5bc <_strtod_l+0x57c>)
 800b34e:	a819      	add	r0, sp, #100	@ 0x64
 800b350:	f001 ff42 	bl	800d1d8 <__match>
 800b354:	2800      	cmp	r0, #0
 800b356:	f43f aec7 	beq.w	800b0e8 <_strtod_l+0xa8>
 800b35a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b28      	cmp	r3, #40	@ 0x28
 800b360:	d12e      	bne.n	800b3c0 <_strtod_l+0x380>
 800b362:	4997      	ldr	r1, [pc, #604]	@ (800b5c0 <_strtod_l+0x580>)
 800b364:	aa1c      	add	r2, sp, #112	@ 0x70
 800b366:	a819      	add	r0, sp, #100	@ 0x64
 800b368:	f001 ff4a 	bl	800d200 <__hexnan>
 800b36c:	2805      	cmp	r0, #5
 800b36e:	d127      	bne.n	800b3c0 <_strtod_l+0x380>
 800b370:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b372:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b376:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b37a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b37e:	e698      	b.n	800b0b2 <_strtod_l+0x72>
 800b380:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b382:	fb08 2101 	mla	r1, r8, r1, r2
 800b386:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b38a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b38c:	e7b5      	b.n	800b2fa <_strtod_l+0x2ba>
 800b38e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b390:	e7da      	b.n	800b348 <_strtod_l+0x308>
 800b392:	498c      	ldr	r1, [pc, #560]	@ (800b5c4 <_strtod_l+0x584>)
 800b394:	a819      	add	r0, sp, #100	@ 0x64
 800b396:	f001 ff1f 	bl	800d1d8 <__match>
 800b39a:	2800      	cmp	r0, #0
 800b39c:	f43f aea4 	beq.w	800b0e8 <_strtod_l+0xa8>
 800b3a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3a2:	4989      	ldr	r1, [pc, #548]	@ (800b5c8 <_strtod_l+0x588>)
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	a819      	add	r0, sp, #100	@ 0x64
 800b3a8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b3aa:	f001 ff15 	bl	800d1d8 <__match>
 800b3ae:	b910      	cbnz	r0, 800b3b6 <_strtod_l+0x376>
 800b3b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b3b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b5d8 <_strtod_l+0x598>
 800b3ba:	f04f 0a00 	mov.w	sl, #0
 800b3be:	e678      	b.n	800b0b2 <_strtod_l+0x72>
 800b3c0:	4882      	ldr	r0, [pc, #520]	@ (800b5cc <_strtod_l+0x58c>)
 800b3c2:	f001 fc45 	bl	800cc50 <nan>
 800b3c6:	ec5b ab10 	vmov	sl, fp, d0
 800b3ca:	e672      	b.n	800b0b2 <_strtod_l+0x72>
 800b3cc:	eba8 0309 	sub.w	r3, r8, r9
 800b3d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3d4:	2f00      	cmp	r7, #0
 800b3d6:	bf08      	it	eq
 800b3d8:	462f      	moveq	r7, r5
 800b3da:	2d10      	cmp	r5, #16
 800b3dc:	462c      	mov	r4, r5
 800b3de:	bfa8      	it	ge
 800b3e0:	2410      	movge	r4, #16
 800b3e2:	f7f5 f8af 	bl	8000544 <__aeabi_ui2d>
 800b3e6:	2d09      	cmp	r5, #9
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	468b      	mov	fp, r1
 800b3ec:	dc13      	bgt.n	800b416 <_strtod_l+0x3d6>
 800b3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f43f ae5e 	beq.w	800b0b2 <_strtod_l+0x72>
 800b3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f8:	dd78      	ble.n	800b4ec <_strtod_l+0x4ac>
 800b3fa:	2b16      	cmp	r3, #22
 800b3fc:	dc5f      	bgt.n	800b4be <_strtod_l+0x47e>
 800b3fe:	4974      	ldr	r1, [pc, #464]	@ (800b5d0 <_strtod_l+0x590>)
 800b400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b408:	4652      	mov	r2, sl
 800b40a:	465b      	mov	r3, fp
 800b40c:	f7f5 f914 	bl	8000638 <__aeabi_dmul>
 800b410:	4682      	mov	sl, r0
 800b412:	468b      	mov	fp, r1
 800b414:	e64d      	b.n	800b0b2 <_strtod_l+0x72>
 800b416:	4b6e      	ldr	r3, [pc, #440]	@ (800b5d0 <_strtod_l+0x590>)
 800b418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b41c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b420:	f7f5 f90a 	bl	8000638 <__aeabi_dmul>
 800b424:	4682      	mov	sl, r0
 800b426:	9808      	ldr	r0, [sp, #32]
 800b428:	468b      	mov	fp, r1
 800b42a:	f7f5 f88b 	bl	8000544 <__aeabi_ui2d>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4650      	mov	r0, sl
 800b434:	4659      	mov	r1, fp
 800b436:	f7f4 ff49 	bl	80002cc <__adddf3>
 800b43a:	2d0f      	cmp	r5, #15
 800b43c:	4682      	mov	sl, r0
 800b43e:	468b      	mov	fp, r1
 800b440:	ddd5      	ble.n	800b3ee <_strtod_l+0x3ae>
 800b442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b444:	1b2c      	subs	r4, r5, r4
 800b446:	441c      	add	r4, r3
 800b448:	2c00      	cmp	r4, #0
 800b44a:	f340 8096 	ble.w	800b57a <_strtod_l+0x53a>
 800b44e:	f014 030f 	ands.w	r3, r4, #15
 800b452:	d00a      	beq.n	800b46a <_strtod_l+0x42a>
 800b454:	495e      	ldr	r1, [pc, #376]	@ (800b5d0 <_strtod_l+0x590>)
 800b456:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b45a:	4652      	mov	r2, sl
 800b45c:	465b      	mov	r3, fp
 800b45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b462:	f7f5 f8e9 	bl	8000638 <__aeabi_dmul>
 800b466:	4682      	mov	sl, r0
 800b468:	468b      	mov	fp, r1
 800b46a:	f034 040f 	bics.w	r4, r4, #15
 800b46e:	d073      	beq.n	800b558 <_strtod_l+0x518>
 800b470:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b474:	dd48      	ble.n	800b508 <_strtod_l+0x4c8>
 800b476:	2400      	movs	r4, #0
 800b478:	46a0      	mov	r8, r4
 800b47a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b47c:	46a1      	mov	r9, r4
 800b47e:	9a05      	ldr	r2, [sp, #20]
 800b480:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b5d8 <_strtod_l+0x598>
 800b484:	2322      	movs	r3, #34	@ 0x22
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	f04f 0a00 	mov.w	sl, #0
 800b48c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f43f ae0f 	beq.w	800b0b2 <_strtod_l+0x72>
 800b494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b496:	9805      	ldr	r0, [sp, #20]
 800b498:	f7ff f942 	bl	800a720 <_Bfree>
 800b49c:	9805      	ldr	r0, [sp, #20]
 800b49e:	4649      	mov	r1, r9
 800b4a0:	f7ff f93e 	bl	800a720 <_Bfree>
 800b4a4:	9805      	ldr	r0, [sp, #20]
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	f7ff f93a 	bl	800a720 <_Bfree>
 800b4ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4ae:	9805      	ldr	r0, [sp, #20]
 800b4b0:	f7ff f936 	bl	800a720 <_Bfree>
 800b4b4:	9805      	ldr	r0, [sp, #20]
 800b4b6:	4621      	mov	r1, r4
 800b4b8:	f7ff f932 	bl	800a720 <_Bfree>
 800b4bc:	e5f9      	b.n	800b0b2 <_strtod_l+0x72>
 800b4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	dbbc      	blt.n	800b442 <_strtod_l+0x402>
 800b4c8:	4c41      	ldr	r4, [pc, #260]	@ (800b5d0 <_strtod_l+0x590>)
 800b4ca:	f1c5 050f 	rsb	r5, r5, #15
 800b4ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b4d2:	4652      	mov	r2, sl
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4da:	f7f5 f8ad 	bl	8000638 <__aeabi_dmul>
 800b4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e0:	1b5d      	subs	r5, r3, r5
 800b4e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b4e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b4ea:	e78f      	b.n	800b40c <_strtod_l+0x3cc>
 800b4ec:	3316      	adds	r3, #22
 800b4ee:	dba8      	blt.n	800b442 <_strtod_l+0x402>
 800b4f0:	4b37      	ldr	r3, [pc, #220]	@ (800b5d0 <_strtod_l+0x590>)
 800b4f2:	eba9 0808 	sub.w	r8, r9, r8
 800b4f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b4fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b4fe:	4650      	mov	r0, sl
 800b500:	4659      	mov	r1, fp
 800b502:	f7f5 f9c3 	bl	800088c <__aeabi_ddiv>
 800b506:	e783      	b.n	800b410 <_strtod_l+0x3d0>
 800b508:	4b32      	ldr	r3, [pc, #200]	@ (800b5d4 <_strtod_l+0x594>)
 800b50a:	9308      	str	r3, [sp, #32]
 800b50c:	2300      	movs	r3, #0
 800b50e:	1124      	asrs	r4, r4, #4
 800b510:	4650      	mov	r0, sl
 800b512:	4659      	mov	r1, fp
 800b514:	461e      	mov	r6, r3
 800b516:	2c01      	cmp	r4, #1
 800b518:	dc21      	bgt.n	800b55e <_strtod_l+0x51e>
 800b51a:	b10b      	cbz	r3, 800b520 <_strtod_l+0x4e0>
 800b51c:	4682      	mov	sl, r0
 800b51e:	468b      	mov	fp, r1
 800b520:	492c      	ldr	r1, [pc, #176]	@ (800b5d4 <_strtod_l+0x594>)
 800b522:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b526:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b52a:	4652      	mov	r2, sl
 800b52c:	465b      	mov	r3, fp
 800b52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b532:	f7f5 f881 	bl	8000638 <__aeabi_dmul>
 800b536:	4b28      	ldr	r3, [pc, #160]	@ (800b5d8 <_strtod_l+0x598>)
 800b538:	460a      	mov	r2, r1
 800b53a:	400b      	ands	r3, r1
 800b53c:	4927      	ldr	r1, [pc, #156]	@ (800b5dc <_strtod_l+0x59c>)
 800b53e:	428b      	cmp	r3, r1
 800b540:	4682      	mov	sl, r0
 800b542:	d898      	bhi.n	800b476 <_strtod_l+0x436>
 800b544:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b548:	428b      	cmp	r3, r1
 800b54a:	bf86      	itte	hi
 800b54c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b5e0 <_strtod_l+0x5a0>
 800b550:	f04f 3aff 	movhi.w	sl, #4294967295
 800b554:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b558:	2300      	movs	r3, #0
 800b55a:	9308      	str	r3, [sp, #32]
 800b55c:	e07a      	b.n	800b654 <_strtod_l+0x614>
 800b55e:	07e2      	lsls	r2, r4, #31
 800b560:	d505      	bpl.n	800b56e <_strtod_l+0x52e>
 800b562:	9b08      	ldr	r3, [sp, #32]
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f7f5 f866 	bl	8000638 <__aeabi_dmul>
 800b56c:	2301      	movs	r3, #1
 800b56e:	9a08      	ldr	r2, [sp, #32]
 800b570:	3208      	adds	r2, #8
 800b572:	3601      	adds	r6, #1
 800b574:	1064      	asrs	r4, r4, #1
 800b576:	9208      	str	r2, [sp, #32]
 800b578:	e7cd      	b.n	800b516 <_strtod_l+0x4d6>
 800b57a:	d0ed      	beq.n	800b558 <_strtod_l+0x518>
 800b57c:	4264      	negs	r4, r4
 800b57e:	f014 020f 	ands.w	r2, r4, #15
 800b582:	d00a      	beq.n	800b59a <_strtod_l+0x55a>
 800b584:	4b12      	ldr	r3, [pc, #72]	@ (800b5d0 <_strtod_l+0x590>)
 800b586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b58a:	4650      	mov	r0, sl
 800b58c:	4659      	mov	r1, fp
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	f7f5 f97b 	bl	800088c <__aeabi_ddiv>
 800b596:	4682      	mov	sl, r0
 800b598:	468b      	mov	fp, r1
 800b59a:	1124      	asrs	r4, r4, #4
 800b59c:	d0dc      	beq.n	800b558 <_strtod_l+0x518>
 800b59e:	2c1f      	cmp	r4, #31
 800b5a0:	dd20      	ble.n	800b5e4 <_strtod_l+0x5a4>
 800b5a2:	2400      	movs	r4, #0
 800b5a4:	46a0      	mov	r8, r4
 800b5a6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b5a8:	46a1      	mov	r9, r4
 800b5aa:	9a05      	ldr	r2, [sp, #20]
 800b5ac:	2322      	movs	r3, #34	@ 0x22
 800b5ae:	f04f 0a00 	mov.w	sl, #0
 800b5b2:	f04f 0b00 	mov.w	fp, #0
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	e768      	b.n	800b48c <_strtod_l+0x44c>
 800b5ba:	bf00      	nop
 800b5bc:	0800d7a1 	.word	0x0800d7a1
 800b5c0:	0800d9b4 	.word	0x0800d9b4
 800b5c4:	0800d799 	.word	0x0800d799
 800b5c8:	0800d7ce 	.word	0x0800d7ce
 800b5cc:	0800db78 	.word	0x0800db78
 800b5d0:	0800d8e8 	.word	0x0800d8e8
 800b5d4:	0800d8c0 	.word	0x0800d8c0
 800b5d8:	7ff00000 	.word	0x7ff00000
 800b5dc:	7ca00000 	.word	0x7ca00000
 800b5e0:	7fefffff 	.word	0x7fefffff
 800b5e4:	f014 0310 	ands.w	r3, r4, #16
 800b5e8:	bf18      	it	ne
 800b5ea:	236a      	movne	r3, #106	@ 0x6a
 800b5ec:	4ea9      	ldr	r6, [pc, #676]	@ (800b894 <_strtod_l+0x854>)
 800b5ee:	9308      	str	r3, [sp, #32]
 800b5f0:	4650      	mov	r0, sl
 800b5f2:	4659      	mov	r1, fp
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	07e2      	lsls	r2, r4, #31
 800b5f8:	d504      	bpl.n	800b604 <_strtod_l+0x5c4>
 800b5fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5fe:	f7f5 f81b 	bl	8000638 <__aeabi_dmul>
 800b602:	2301      	movs	r3, #1
 800b604:	1064      	asrs	r4, r4, #1
 800b606:	f106 0608 	add.w	r6, r6, #8
 800b60a:	d1f4      	bne.n	800b5f6 <_strtod_l+0x5b6>
 800b60c:	b10b      	cbz	r3, 800b612 <_strtod_l+0x5d2>
 800b60e:	4682      	mov	sl, r0
 800b610:	468b      	mov	fp, r1
 800b612:	9b08      	ldr	r3, [sp, #32]
 800b614:	b1b3      	cbz	r3, 800b644 <_strtod_l+0x604>
 800b616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b61a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b61e:	2b00      	cmp	r3, #0
 800b620:	4659      	mov	r1, fp
 800b622:	dd0f      	ble.n	800b644 <_strtod_l+0x604>
 800b624:	2b1f      	cmp	r3, #31
 800b626:	dd55      	ble.n	800b6d4 <_strtod_l+0x694>
 800b628:	2b34      	cmp	r3, #52	@ 0x34
 800b62a:	bfde      	ittt	le
 800b62c:	f04f 33ff 	movle.w	r3, #4294967295
 800b630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b634:	4093      	lslle	r3, r2
 800b636:	f04f 0a00 	mov.w	sl, #0
 800b63a:	bfcc      	ite	gt
 800b63c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b640:	ea03 0b01 	andle.w	fp, r3, r1
 800b644:	2200      	movs	r2, #0
 800b646:	2300      	movs	r3, #0
 800b648:	4650      	mov	r0, sl
 800b64a:	4659      	mov	r1, fp
 800b64c:	f7f5 fa5c 	bl	8000b08 <__aeabi_dcmpeq>
 800b650:	2800      	cmp	r0, #0
 800b652:	d1a6      	bne.n	800b5a2 <_strtod_l+0x562>
 800b654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b65a:	9805      	ldr	r0, [sp, #20]
 800b65c:	462b      	mov	r3, r5
 800b65e:	463a      	mov	r2, r7
 800b660:	f7ff f8c6 	bl	800a7f0 <__s2b>
 800b664:	900a      	str	r0, [sp, #40]	@ 0x28
 800b666:	2800      	cmp	r0, #0
 800b668:	f43f af05 	beq.w	800b476 <_strtod_l+0x436>
 800b66c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b66e:	2a00      	cmp	r2, #0
 800b670:	eba9 0308 	sub.w	r3, r9, r8
 800b674:	bfa8      	it	ge
 800b676:	2300      	movge	r3, #0
 800b678:	9312      	str	r3, [sp, #72]	@ 0x48
 800b67a:	2400      	movs	r4, #0
 800b67c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b680:	9316      	str	r3, [sp, #88]	@ 0x58
 800b682:	46a0      	mov	r8, r4
 800b684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b686:	9805      	ldr	r0, [sp, #20]
 800b688:	6859      	ldr	r1, [r3, #4]
 800b68a:	f7ff f809 	bl	800a6a0 <_Balloc>
 800b68e:	4681      	mov	r9, r0
 800b690:	2800      	cmp	r0, #0
 800b692:	f43f aef4 	beq.w	800b47e <_strtod_l+0x43e>
 800b696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b698:	691a      	ldr	r2, [r3, #16]
 800b69a:	3202      	adds	r2, #2
 800b69c:	f103 010c 	add.w	r1, r3, #12
 800b6a0:	0092      	lsls	r2, r2, #2
 800b6a2:	300c      	adds	r0, #12
 800b6a4:	f001 fac6 	bl	800cc34 <memcpy>
 800b6a8:	ec4b ab10 	vmov	d0, sl, fp
 800b6ac:	9805      	ldr	r0, [sp, #20]
 800b6ae:	aa1c      	add	r2, sp, #112	@ 0x70
 800b6b0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b6b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b6b6:	f7ff fbd7 	bl	800ae68 <__d2b>
 800b6ba:	901a      	str	r0, [sp, #104]	@ 0x68
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	f43f aede 	beq.w	800b47e <_strtod_l+0x43e>
 800b6c2:	9805      	ldr	r0, [sp, #20]
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	f7ff f929 	bl	800a91c <__i2b>
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	b948      	cbnz	r0, 800b6e2 <_strtod_l+0x6a2>
 800b6ce:	f04f 0800 	mov.w	r8, #0
 800b6d2:	e6d4      	b.n	800b47e <_strtod_l+0x43e>
 800b6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6dc:	ea03 0a0a 	and.w	sl, r3, sl
 800b6e0:	e7b0      	b.n	800b644 <_strtod_l+0x604>
 800b6e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b6e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b6e6:	2d00      	cmp	r5, #0
 800b6e8:	bfab      	itete	ge
 800b6ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b6ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b6ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b6f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b6f2:	bfac      	ite	ge
 800b6f4:	18ef      	addge	r7, r5, r3
 800b6f6:	1b5e      	sublt	r6, r3, r5
 800b6f8:	9b08      	ldr	r3, [sp, #32]
 800b6fa:	1aed      	subs	r5, r5, r3
 800b6fc:	4415      	add	r5, r2
 800b6fe:	4b66      	ldr	r3, [pc, #408]	@ (800b898 <_strtod_l+0x858>)
 800b700:	3d01      	subs	r5, #1
 800b702:	429d      	cmp	r5, r3
 800b704:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b708:	da50      	bge.n	800b7ac <_strtod_l+0x76c>
 800b70a:	1b5b      	subs	r3, r3, r5
 800b70c:	2b1f      	cmp	r3, #31
 800b70e:	eba2 0203 	sub.w	r2, r2, r3
 800b712:	f04f 0101 	mov.w	r1, #1
 800b716:	dc3d      	bgt.n	800b794 <_strtod_l+0x754>
 800b718:	fa01 f303 	lsl.w	r3, r1, r3
 800b71c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b71e:	2300      	movs	r3, #0
 800b720:	9310      	str	r3, [sp, #64]	@ 0x40
 800b722:	18bd      	adds	r5, r7, r2
 800b724:	9b08      	ldr	r3, [sp, #32]
 800b726:	42af      	cmp	r7, r5
 800b728:	4416      	add	r6, r2
 800b72a:	441e      	add	r6, r3
 800b72c:	463b      	mov	r3, r7
 800b72e:	bfa8      	it	ge
 800b730:	462b      	movge	r3, r5
 800b732:	42b3      	cmp	r3, r6
 800b734:	bfa8      	it	ge
 800b736:	4633      	movge	r3, r6
 800b738:	2b00      	cmp	r3, #0
 800b73a:	bfc2      	ittt	gt
 800b73c:	1aed      	subgt	r5, r5, r3
 800b73e:	1af6      	subgt	r6, r6, r3
 800b740:	1aff      	subgt	r7, r7, r3
 800b742:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b744:	2b00      	cmp	r3, #0
 800b746:	dd16      	ble.n	800b776 <_strtod_l+0x736>
 800b748:	4641      	mov	r1, r8
 800b74a:	9805      	ldr	r0, [sp, #20]
 800b74c:	461a      	mov	r2, r3
 800b74e:	f7ff f9a5 	bl	800aa9c <__pow5mult>
 800b752:	4680      	mov	r8, r0
 800b754:	2800      	cmp	r0, #0
 800b756:	d0ba      	beq.n	800b6ce <_strtod_l+0x68e>
 800b758:	4601      	mov	r1, r0
 800b75a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b75c:	9805      	ldr	r0, [sp, #20]
 800b75e:	f7ff f8f3 	bl	800a948 <__multiply>
 800b762:	900e      	str	r0, [sp, #56]	@ 0x38
 800b764:	2800      	cmp	r0, #0
 800b766:	f43f ae8a 	beq.w	800b47e <_strtod_l+0x43e>
 800b76a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b76c:	9805      	ldr	r0, [sp, #20]
 800b76e:	f7fe ffd7 	bl	800a720 <_Bfree>
 800b772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b774:	931a      	str	r3, [sp, #104]	@ 0x68
 800b776:	2d00      	cmp	r5, #0
 800b778:	dc1d      	bgt.n	800b7b6 <_strtod_l+0x776>
 800b77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	dd23      	ble.n	800b7c8 <_strtod_l+0x788>
 800b780:	4649      	mov	r1, r9
 800b782:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b784:	9805      	ldr	r0, [sp, #20]
 800b786:	f7ff f989 	bl	800aa9c <__pow5mult>
 800b78a:	4681      	mov	r9, r0
 800b78c:	b9e0      	cbnz	r0, 800b7c8 <_strtod_l+0x788>
 800b78e:	f04f 0900 	mov.w	r9, #0
 800b792:	e674      	b.n	800b47e <_strtod_l+0x43e>
 800b794:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b798:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b79c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b7a0:	35e2      	adds	r5, #226	@ 0xe2
 800b7a2:	fa01 f305 	lsl.w	r3, r1, r5
 800b7a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b7aa:	e7ba      	b.n	800b722 <_strtod_l+0x6e2>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7b4:	e7b5      	b.n	800b722 <_strtod_l+0x6e2>
 800b7b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7b8:	9805      	ldr	r0, [sp, #20]
 800b7ba:	462a      	mov	r2, r5
 800b7bc:	f7ff f9c8 	bl	800ab50 <__lshift>
 800b7c0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d1d9      	bne.n	800b77a <_strtod_l+0x73a>
 800b7c6:	e65a      	b.n	800b47e <_strtod_l+0x43e>
 800b7c8:	2e00      	cmp	r6, #0
 800b7ca:	dd07      	ble.n	800b7dc <_strtod_l+0x79c>
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	9805      	ldr	r0, [sp, #20]
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	f7ff f9bd 	bl	800ab50 <__lshift>
 800b7d6:	4681      	mov	r9, r0
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d0d8      	beq.n	800b78e <_strtod_l+0x74e>
 800b7dc:	2f00      	cmp	r7, #0
 800b7de:	dd08      	ble.n	800b7f2 <_strtod_l+0x7b2>
 800b7e0:	4641      	mov	r1, r8
 800b7e2:	9805      	ldr	r0, [sp, #20]
 800b7e4:	463a      	mov	r2, r7
 800b7e6:	f7ff f9b3 	bl	800ab50 <__lshift>
 800b7ea:	4680      	mov	r8, r0
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	f43f ae46 	beq.w	800b47e <_strtod_l+0x43e>
 800b7f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7f4:	9805      	ldr	r0, [sp, #20]
 800b7f6:	464a      	mov	r2, r9
 800b7f8:	f7ff fa32 	bl	800ac60 <__mdiff>
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	2800      	cmp	r0, #0
 800b800:	f43f ae3d 	beq.w	800b47e <_strtod_l+0x43e>
 800b804:	68c3      	ldr	r3, [r0, #12]
 800b806:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b808:	2300      	movs	r3, #0
 800b80a:	60c3      	str	r3, [r0, #12]
 800b80c:	4641      	mov	r1, r8
 800b80e:	f7ff fa0b 	bl	800ac28 <__mcmp>
 800b812:	2800      	cmp	r0, #0
 800b814:	da46      	bge.n	800b8a4 <_strtod_l+0x864>
 800b816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b818:	ea53 030a 	orrs.w	r3, r3, sl
 800b81c:	d16c      	bne.n	800b8f8 <_strtod_l+0x8b8>
 800b81e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b822:	2b00      	cmp	r3, #0
 800b824:	d168      	bne.n	800b8f8 <_strtod_l+0x8b8>
 800b826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b82a:	0d1b      	lsrs	r3, r3, #20
 800b82c:	051b      	lsls	r3, r3, #20
 800b82e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b832:	d961      	bls.n	800b8f8 <_strtod_l+0x8b8>
 800b834:	6963      	ldr	r3, [r4, #20]
 800b836:	b913      	cbnz	r3, 800b83e <_strtod_l+0x7fe>
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	dd5c      	ble.n	800b8f8 <_strtod_l+0x8b8>
 800b83e:	4621      	mov	r1, r4
 800b840:	2201      	movs	r2, #1
 800b842:	9805      	ldr	r0, [sp, #20]
 800b844:	f7ff f984 	bl	800ab50 <__lshift>
 800b848:	4641      	mov	r1, r8
 800b84a:	4604      	mov	r4, r0
 800b84c:	f7ff f9ec 	bl	800ac28 <__mcmp>
 800b850:	2800      	cmp	r0, #0
 800b852:	dd51      	ble.n	800b8f8 <_strtod_l+0x8b8>
 800b854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b858:	9a08      	ldr	r2, [sp, #32]
 800b85a:	0d1b      	lsrs	r3, r3, #20
 800b85c:	051b      	lsls	r3, r3, #20
 800b85e:	2a00      	cmp	r2, #0
 800b860:	d06b      	beq.n	800b93a <_strtod_l+0x8fa>
 800b862:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b866:	d868      	bhi.n	800b93a <_strtod_l+0x8fa>
 800b868:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b86c:	f67f ae9d 	bls.w	800b5aa <_strtod_l+0x56a>
 800b870:	4b0a      	ldr	r3, [pc, #40]	@ (800b89c <_strtod_l+0x85c>)
 800b872:	4650      	mov	r0, sl
 800b874:	4659      	mov	r1, fp
 800b876:	2200      	movs	r2, #0
 800b878:	f7f4 fede 	bl	8000638 <__aeabi_dmul>
 800b87c:	4b08      	ldr	r3, [pc, #32]	@ (800b8a0 <_strtod_l+0x860>)
 800b87e:	400b      	ands	r3, r1
 800b880:	4682      	mov	sl, r0
 800b882:	468b      	mov	fp, r1
 800b884:	2b00      	cmp	r3, #0
 800b886:	f47f ae05 	bne.w	800b494 <_strtod_l+0x454>
 800b88a:	9a05      	ldr	r2, [sp, #20]
 800b88c:	2322      	movs	r3, #34	@ 0x22
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	e600      	b.n	800b494 <_strtod_l+0x454>
 800b892:	bf00      	nop
 800b894:	0800d9e0 	.word	0x0800d9e0
 800b898:	fffffc02 	.word	0xfffffc02
 800b89c:	39500000 	.word	0x39500000
 800b8a0:	7ff00000 	.word	0x7ff00000
 800b8a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b8a8:	d165      	bne.n	800b976 <_strtod_l+0x936>
 800b8aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b8ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8b0:	b35a      	cbz	r2, 800b90a <_strtod_l+0x8ca>
 800b8b2:	4a9f      	ldr	r2, [pc, #636]	@ (800bb30 <_strtod_l+0xaf0>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d12b      	bne.n	800b910 <_strtod_l+0x8d0>
 800b8b8:	9b08      	ldr	r3, [sp, #32]
 800b8ba:	4651      	mov	r1, sl
 800b8bc:	b303      	cbz	r3, 800b900 <_strtod_l+0x8c0>
 800b8be:	4b9d      	ldr	r3, [pc, #628]	@ (800bb34 <_strtod_l+0xaf4>)
 800b8c0:	465a      	mov	r2, fp
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8cc:	d81b      	bhi.n	800b906 <_strtod_l+0x8c6>
 800b8ce:	0d1b      	lsrs	r3, r3, #20
 800b8d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b8d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	d119      	bne.n	800b910 <_strtod_l+0x8d0>
 800b8dc:	4b96      	ldr	r3, [pc, #600]	@ (800bb38 <_strtod_l+0xaf8>)
 800b8de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d102      	bne.n	800b8ea <_strtod_l+0x8aa>
 800b8e4:	3101      	adds	r1, #1
 800b8e6:	f43f adca 	beq.w	800b47e <_strtod_l+0x43e>
 800b8ea:	4b92      	ldr	r3, [pc, #584]	@ (800bb34 <_strtod_l+0xaf4>)
 800b8ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8ee:	401a      	ands	r2, r3
 800b8f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b8f4:	f04f 0a00 	mov.w	sl, #0
 800b8f8:	9b08      	ldr	r3, [sp, #32]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1b8      	bne.n	800b870 <_strtod_l+0x830>
 800b8fe:	e5c9      	b.n	800b494 <_strtod_l+0x454>
 800b900:	f04f 33ff 	mov.w	r3, #4294967295
 800b904:	e7e8      	b.n	800b8d8 <_strtod_l+0x898>
 800b906:	4613      	mov	r3, r2
 800b908:	e7e6      	b.n	800b8d8 <_strtod_l+0x898>
 800b90a:	ea53 030a 	orrs.w	r3, r3, sl
 800b90e:	d0a1      	beq.n	800b854 <_strtod_l+0x814>
 800b910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b912:	b1db      	cbz	r3, 800b94c <_strtod_l+0x90c>
 800b914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b916:	4213      	tst	r3, r2
 800b918:	d0ee      	beq.n	800b8f8 <_strtod_l+0x8b8>
 800b91a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b91c:	9a08      	ldr	r2, [sp, #32]
 800b91e:	4650      	mov	r0, sl
 800b920:	4659      	mov	r1, fp
 800b922:	b1bb      	cbz	r3, 800b954 <_strtod_l+0x914>
 800b924:	f7ff fb6e 	bl	800b004 <sulp>
 800b928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b92c:	ec53 2b10 	vmov	r2, r3, d0
 800b930:	f7f4 fccc 	bl	80002cc <__adddf3>
 800b934:	4682      	mov	sl, r0
 800b936:	468b      	mov	fp, r1
 800b938:	e7de      	b.n	800b8f8 <_strtod_l+0x8b8>
 800b93a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b93e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b946:	f04f 3aff 	mov.w	sl, #4294967295
 800b94a:	e7d5      	b.n	800b8f8 <_strtod_l+0x8b8>
 800b94c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b94e:	ea13 0f0a 	tst.w	r3, sl
 800b952:	e7e1      	b.n	800b918 <_strtod_l+0x8d8>
 800b954:	f7ff fb56 	bl	800b004 <sulp>
 800b958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b95c:	ec53 2b10 	vmov	r2, r3, d0
 800b960:	f7f4 fcb2 	bl	80002c8 <__aeabi_dsub>
 800b964:	2200      	movs	r2, #0
 800b966:	2300      	movs	r3, #0
 800b968:	4682      	mov	sl, r0
 800b96a:	468b      	mov	fp, r1
 800b96c:	f7f5 f8cc 	bl	8000b08 <__aeabi_dcmpeq>
 800b970:	2800      	cmp	r0, #0
 800b972:	d0c1      	beq.n	800b8f8 <_strtod_l+0x8b8>
 800b974:	e619      	b.n	800b5aa <_strtod_l+0x56a>
 800b976:	4641      	mov	r1, r8
 800b978:	4620      	mov	r0, r4
 800b97a:	f7ff facd 	bl	800af18 <__ratio>
 800b97e:	ec57 6b10 	vmov	r6, r7, d0
 800b982:	2200      	movs	r2, #0
 800b984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f5 f8d0 	bl	8000b30 <__aeabi_dcmple>
 800b990:	2800      	cmp	r0, #0
 800b992:	d06f      	beq.n	800ba74 <_strtod_l+0xa34>
 800b994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b996:	2b00      	cmp	r3, #0
 800b998:	d17a      	bne.n	800ba90 <_strtod_l+0xa50>
 800b99a:	f1ba 0f00 	cmp.w	sl, #0
 800b99e:	d158      	bne.n	800ba52 <_strtod_l+0xa12>
 800b9a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d15a      	bne.n	800ba60 <_strtod_l+0xa20>
 800b9aa:	4b64      	ldr	r3, [pc, #400]	@ (800bb3c <_strtod_l+0xafc>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	f7f5 f8b3 	bl	8000b1c <__aeabi_dcmplt>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d159      	bne.n	800ba6e <_strtod_l+0xa2e>
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	4639      	mov	r1, r7
 800b9be:	4b60      	ldr	r3, [pc, #384]	@ (800bb40 <_strtod_l+0xb00>)
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f7f4 fe39 	bl	8000638 <__aeabi_dmul>
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b9ce:	9606      	str	r6, [sp, #24]
 800b9d0:	9307      	str	r3, [sp, #28]
 800b9d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9d6:	4d57      	ldr	r5, [pc, #348]	@ (800bb34 <_strtod_l+0xaf4>)
 800b9d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9de:	401d      	ands	r5, r3
 800b9e0:	4b58      	ldr	r3, [pc, #352]	@ (800bb44 <_strtod_l+0xb04>)
 800b9e2:	429d      	cmp	r5, r3
 800b9e4:	f040 80b2 	bne.w	800bb4c <_strtod_l+0xb0c>
 800b9e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b9ee:	ec4b ab10 	vmov	d0, sl, fp
 800b9f2:	f7ff f9c9 	bl	800ad88 <__ulp>
 800b9f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9fa:	ec51 0b10 	vmov	r0, r1, d0
 800b9fe:	f7f4 fe1b 	bl	8000638 <__aeabi_dmul>
 800ba02:	4652      	mov	r2, sl
 800ba04:	465b      	mov	r3, fp
 800ba06:	f7f4 fc61 	bl	80002cc <__adddf3>
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4949      	ldr	r1, [pc, #292]	@ (800bb34 <_strtod_l+0xaf4>)
 800ba0e:	4a4e      	ldr	r2, [pc, #312]	@ (800bb48 <_strtod_l+0xb08>)
 800ba10:	4019      	ands	r1, r3
 800ba12:	4291      	cmp	r1, r2
 800ba14:	4682      	mov	sl, r0
 800ba16:	d942      	bls.n	800ba9e <_strtod_l+0xa5e>
 800ba18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba1a:	4b47      	ldr	r3, [pc, #284]	@ (800bb38 <_strtod_l+0xaf8>)
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d103      	bne.n	800ba28 <_strtod_l+0x9e8>
 800ba20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba22:	3301      	adds	r3, #1
 800ba24:	f43f ad2b 	beq.w	800b47e <_strtod_l+0x43e>
 800ba28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bb38 <_strtod_l+0xaf8>
 800ba2c:	f04f 3aff 	mov.w	sl, #4294967295
 800ba30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba32:	9805      	ldr	r0, [sp, #20]
 800ba34:	f7fe fe74 	bl	800a720 <_Bfree>
 800ba38:	9805      	ldr	r0, [sp, #20]
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	f7fe fe70 	bl	800a720 <_Bfree>
 800ba40:	9805      	ldr	r0, [sp, #20]
 800ba42:	4641      	mov	r1, r8
 800ba44:	f7fe fe6c 	bl	800a720 <_Bfree>
 800ba48:	9805      	ldr	r0, [sp, #20]
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	f7fe fe68 	bl	800a720 <_Bfree>
 800ba50:	e618      	b.n	800b684 <_strtod_l+0x644>
 800ba52:	f1ba 0f01 	cmp.w	sl, #1
 800ba56:	d103      	bne.n	800ba60 <_strtod_l+0xa20>
 800ba58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f43f ada5 	beq.w	800b5aa <_strtod_l+0x56a>
 800ba60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bb10 <_strtod_l+0xad0>
 800ba64:	4f35      	ldr	r7, [pc, #212]	@ (800bb3c <_strtod_l+0xafc>)
 800ba66:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba6a:	2600      	movs	r6, #0
 800ba6c:	e7b1      	b.n	800b9d2 <_strtod_l+0x992>
 800ba6e:	4f34      	ldr	r7, [pc, #208]	@ (800bb40 <_strtod_l+0xb00>)
 800ba70:	2600      	movs	r6, #0
 800ba72:	e7aa      	b.n	800b9ca <_strtod_l+0x98a>
 800ba74:	4b32      	ldr	r3, [pc, #200]	@ (800bb40 <_strtod_l+0xb00>)
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f7f4 fddc 	bl	8000638 <__aeabi_dmul>
 800ba80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba82:	4606      	mov	r6, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d09f      	beq.n	800b9ca <_strtod_l+0x98a>
 800ba8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ba8e:	e7a0      	b.n	800b9d2 <_strtod_l+0x992>
 800ba90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bb18 <_strtod_l+0xad8>
 800ba94:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ba98:	ec57 6b17 	vmov	r6, r7, d7
 800ba9c:	e799      	b.n	800b9d2 <_strtod_l+0x992>
 800ba9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800baa2:	9b08      	ldr	r3, [sp, #32]
 800baa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1c1      	bne.n	800ba30 <_strtod_l+0x9f0>
 800baac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bab0:	0d1b      	lsrs	r3, r3, #20
 800bab2:	051b      	lsls	r3, r3, #20
 800bab4:	429d      	cmp	r5, r3
 800bab6:	d1bb      	bne.n	800ba30 <_strtod_l+0x9f0>
 800bab8:	4630      	mov	r0, r6
 800baba:	4639      	mov	r1, r7
 800babc:	f7f5 f91c 	bl	8000cf8 <__aeabi_d2lz>
 800bac0:	f7f4 fd8c 	bl	80005dc <__aeabi_l2d>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4630      	mov	r0, r6
 800baca:	4639      	mov	r1, r7
 800bacc:	f7f4 fbfc 	bl	80002c8 <__aeabi_dsub>
 800bad0:	460b      	mov	r3, r1
 800bad2:	4602      	mov	r2, r0
 800bad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800badc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bade:	ea46 060a 	orr.w	r6, r6, sl
 800bae2:	431e      	orrs	r6, r3
 800bae4:	d06f      	beq.n	800bbc6 <_strtod_l+0xb86>
 800bae6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bb20 <_strtod_l+0xae0>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f5 f816 	bl	8000b1c <__aeabi_dcmplt>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	f47f accf 	bne.w	800b494 <_strtod_l+0x454>
 800baf6:	a30c      	add	r3, pc, #48	@ (adr r3, 800bb28 <_strtod_l+0xae8>)
 800baf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb00:	f7f5 f82a 	bl	8000b58 <__aeabi_dcmpgt>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d093      	beq.n	800ba30 <_strtod_l+0x9f0>
 800bb08:	e4c4      	b.n	800b494 <_strtod_l+0x454>
 800bb0a:	bf00      	nop
 800bb0c:	f3af 8000 	nop.w
 800bb10:	00000000 	.word	0x00000000
 800bb14:	bff00000 	.word	0xbff00000
 800bb18:	00000000 	.word	0x00000000
 800bb1c:	3ff00000 	.word	0x3ff00000
 800bb20:	94a03595 	.word	0x94a03595
 800bb24:	3fdfffff 	.word	0x3fdfffff
 800bb28:	35afe535 	.word	0x35afe535
 800bb2c:	3fe00000 	.word	0x3fe00000
 800bb30:	000fffff 	.word	0x000fffff
 800bb34:	7ff00000 	.word	0x7ff00000
 800bb38:	7fefffff 	.word	0x7fefffff
 800bb3c:	3ff00000 	.word	0x3ff00000
 800bb40:	3fe00000 	.word	0x3fe00000
 800bb44:	7fe00000 	.word	0x7fe00000
 800bb48:	7c9fffff 	.word	0x7c9fffff
 800bb4c:	9b08      	ldr	r3, [sp, #32]
 800bb4e:	b323      	cbz	r3, 800bb9a <_strtod_l+0xb5a>
 800bb50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bb54:	d821      	bhi.n	800bb9a <_strtod_l+0xb5a>
 800bb56:	a328      	add	r3, pc, #160	@ (adr r3, 800bbf8 <_strtod_l+0xbb8>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	4639      	mov	r1, r7
 800bb60:	f7f4 ffe6 	bl	8000b30 <__aeabi_dcmple>
 800bb64:	b1a0      	cbz	r0, 800bb90 <_strtod_l+0xb50>
 800bb66:	4639      	mov	r1, r7
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7f5 f83d 	bl	8000be8 <__aeabi_d2uiz>
 800bb6e:	2801      	cmp	r0, #1
 800bb70:	bf38      	it	cc
 800bb72:	2001      	movcc	r0, #1
 800bb74:	f7f4 fce6 	bl	8000544 <__aeabi_ui2d>
 800bb78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	b9fb      	cbnz	r3, 800bbc0 <_strtod_l+0xb80>
 800bb80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb84:	9014      	str	r0, [sp, #80]	@ 0x50
 800bb86:	9315      	str	r3, [sp, #84]	@ 0x54
 800bb88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bb8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bb90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bb92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bb96:	1b5b      	subs	r3, r3, r5
 800bb98:	9311      	str	r3, [sp, #68]	@ 0x44
 800bb9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bb9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bba2:	f7ff f8f1 	bl	800ad88 <__ulp>
 800bba6:	4650      	mov	r0, sl
 800bba8:	ec53 2b10 	vmov	r2, r3, d0
 800bbac:	4659      	mov	r1, fp
 800bbae:	f7f4 fd43 	bl	8000638 <__aeabi_dmul>
 800bbb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bbb6:	f7f4 fb89 	bl	80002cc <__adddf3>
 800bbba:	4682      	mov	sl, r0
 800bbbc:	468b      	mov	fp, r1
 800bbbe:	e770      	b.n	800baa2 <_strtod_l+0xa62>
 800bbc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bbc4:	e7e0      	b.n	800bb88 <_strtod_l+0xb48>
 800bbc6:	a30e      	add	r3, pc, #56	@ (adr r3, 800bc00 <_strtod_l+0xbc0>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 ffa6 	bl	8000b1c <__aeabi_dcmplt>
 800bbd0:	e798      	b.n	800bb04 <_strtod_l+0xac4>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bbd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	f7ff ba6d 	b.w	800b0ba <_strtod_l+0x7a>
 800bbe0:	2a65      	cmp	r2, #101	@ 0x65
 800bbe2:	f43f ab66 	beq.w	800b2b2 <_strtod_l+0x272>
 800bbe6:	2a45      	cmp	r2, #69	@ 0x45
 800bbe8:	f43f ab63 	beq.w	800b2b2 <_strtod_l+0x272>
 800bbec:	2301      	movs	r3, #1
 800bbee:	f7ff bb9e 	b.w	800b32e <_strtod_l+0x2ee>
 800bbf2:	bf00      	nop
 800bbf4:	f3af 8000 	nop.w
 800bbf8:	ffc00000 	.word	0xffc00000
 800bbfc:	41dfffff 	.word	0x41dfffff
 800bc00:	94a03595 	.word	0x94a03595
 800bc04:	3fcfffff 	.word	0x3fcfffff

0800bc08 <_strtod_r>:
 800bc08:	4b01      	ldr	r3, [pc, #4]	@ (800bc10 <_strtod_r+0x8>)
 800bc0a:	f7ff ba19 	b.w	800b040 <_strtod_l>
 800bc0e:	bf00      	nop
 800bc10:	200000e0 	.word	0x200000e0

0800bc14 <_strtol_l.constprop.0>:
 800bc14:	2b24      	cmp	r3, #36	@ 0x24
 800bc16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc1a:	4686      	mov	lr, r0
 800bc1c:	4690      	mov	r8, r2
 800bc1e:	d801      	bhi.n	800bc24 <_strtol_l.constprop.0+0x10>
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d106      	bne.n	800bc32 <_strtol_l.constprop.0+0x1e>
 800bc24:	f7fd fdba 	bl	800979c <__errno>
 800bc28:	2316      	movs	r3, #22
 800bc2a:	6003      	str	r3, [r0, #0]
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc32:	4834      	ldr	r0, [pc, #208]	@ (800bd04 <_strtol_l.constprop.0+0xf0>)
 800bc34:	460d      	mov	r5, r1
 800bc36:	462a      	mov	r2, r5
 800bc38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc3c:	5d06      	ldrb	r6, [r0, r4]
 800bc3e:	f016 0608 	ands.w	r6, r6, #8
 800bc42:	d1f8      	bne.n	800bc36 <_strtol_l.constprop.0+0x22>
 800bc44:	2c2d      	cmp	r4, #45	@ 0x2d
 800bc46:	d12d      	bne.n	800bca4 <_strtol_l.constprop.0+0x90>
 800bc48:	782c      	ldrb	r4, [r5, #0]
 800bc4a:	2601      	movs	r6, #1
 800bc4c:	1c95      	adds	r5, r2, #2
 800bc4e:	f033 0210 	bics.w	r2, r3, #16
 800bc52:	d109      	bne.n	800bc68 <_strtol_l.constprop.0+0x54>
 800bc54:	2c30      	cmp	r4, #48	@ 0x30
 800bc56:	d12a      	bne.n	800bcae <_strtol_l.constprop.0+0x9a>
 800bc58:	782a      	ldrb	r2, [r5, #0]
 800bc5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bc5e:	2a58      	cmp	r2, #88	@ 0x58
 800bc60:	d125      	bne.n	800bcae <_strtol_l.constprop.0+0x9a>
 800bc62:	786c      	ldrb	r4, [r5, #1]
 800bc64:	2310      	movs	r3, #16
 800bc66:	3502      	adds	r5, #2
 800bc68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bc6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bc70:	2200      	movs	r2, #0
 800bc72:	fbbc f9f3 	udiv	r9, ip, r3
 800bc76:	4610      	mov	r0, r2
 800bc78:	fb03 ca19 	mls	sl, r3, r9, ip
 800bc7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bc80:	2f09      	cmp	r7, #9
 800bc82:	d81b      	bhi.n	800bcbc <_strtol_l.constprop.0+0xa8>
 800bc84:	463c      	mov	r4, r7
 800bc86:	42a3      	cmp	r3, r4
 800bc88:	dd27      	ble.n	800bcda <_strtol_l.constprop.0+0xc6>
 800bc8a:	1c57      	adds	r7, r2, #1
 800bc8c:	d007      	beq.n	800bc9e <_strtol_l.constprop.0+0x8a>
 800bc8e:	4581      	cmp	r9, r0
 800bc90:	d320      	bcc.n	800bcd4 <_strtol_l.constprop.0+0xc0>
 800bc92:	d101      	bne.n	800bc98 <_strtol_l.constprop.0+0x84>
 800bc94:	45a2      	cmp	sl, r4
 800bc96:	db1d      	blt.n	800bcd4 <_strtol_l.constprop.0+0xc0>
 800bc98:	fb00 4003 	mla	r0, r0, r3, r4
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bca2:	e7eb      	b.n	800bc7c <_strtol_l.constprop.0+0x68>
 800bca4:	2c2b      	cmp	r4, #43	@ 0x2b
 800bca6:	bf04      	itt	eq
 800bca8:	782c      	ldrbeq	r4, [r5, #0]
 800bcaa:	1c95      	addeq	r5, r2, #2
 800bcac:	e7cf      	b.n	800bc4e <_strtol_l.constprop.0+0x3a>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1da      	bne.n	800bc68 <_strtol_l.constprop.0+0x54>
 800bcb2:	2c30      	cmp	r4, #48	@ 0x30
 800bcb4:	bf0c      	ite	eq
 800bcb6:	2308      	moveq	r3, #8
 800bcb8:	230a      	movne	r3, #10
 800bcba:	e7d5      	b.n	800bc68 <_strtol_l.constprop.0+0x54>
 800bcbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bcc0:	2f19      	cmp	r7, #25
 800bcc2:	d801      	bhi.n	800bcc8 <_strtol_l.constprop.0+0xb4>
 800bcc4:	3c37      	subs	r4, #55	@ 0x37
 800bcc6:	e7de      	b.n	800bc86 <_strtol_l.constprop.0+0x72>
 800bcc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bccc:	2f19      	cmp	r7, #25
 800bcce:	d804      	bhi.n	800bcda <_strtol_l.constprop.0+0xc6>
 800bcd0:	3c57      	subs	r4, #87	@ 0x57
 800bcd2:	e7d8      	b.n	800bc86 <_strtol_l.constprop.0+0x72>
 800bcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd8:	e7e1      	b.n	800bc9e <_strtol_l.constprop.0+0x8a>
 800bcda:	1c53      	adds	r3, r2, #1
 800bcdc:	d108      	bne.n	800bcf0 <_strtol_l.constprop.0+0xdc>
 800bcde:	2322      	movs	r3, #34	@ 0x22
 800bce0:	f8ce 3000 	str.w	r3, [lr]
 800bce4:	4660      	mov	r0, ip
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	d0a0      	beq.n	800bc2e <_strtol_l.constprop.0+0x1a>
 800bcec:	1e69      	subs	r1, r5, #1
 800bcee:	e006      	b.n	800bcfe <_strtol_l.constprop.0+0xea>
 800bcf0:	b106      	cbz	r6, 800bcf4 <_strtol_l.constprop.0+0xe0>
 800bcf2:	4240      	negs	r0, r0
 800bcf4:	f1b8 0f00 	cmp.w	r8, #0
 800bcf8:	d099      	beq.n	800bc2e <_strtol_l.constprop.0+0x1a>
 800bcfa:	2a00      	cmp	r2, #0
 800bcfc:	d1f6      	bne.n	800bcec <_strtol_l.constprop.0+0xd8>
 800bcfe:	f8c8 1000 	str.w	r1, [r8]
 800bd02:	e794      	b.n	800bc2e <_strtol_l.constprop.0+0x1a>
 800bd04:	0800da09 	.word	0x0800da09

0800bd08 <_strtol_r>:
 800bd08:	f7ff bf84 	b.w	800bc14 <_strtol_l.constprop.0>

0800bd0c <__ssputs_r>:
 800bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd10:	688e      	ldr	r6, [r1, #8]
 800bd12:	461f      	mov	r7, r3
 800bd14:	42be      	cmp	r6, r7
 800bd16:	680b      	ldr	r3, [r1, #0]
 800bd18:	4682      	mov	sl, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	4690      	mov	r8, r2
 800bd1e:	d82d      	bhi.n	800bd7c <__ssputs_r+0x70>
 800bd20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd28:	d026      	beq.n	800bd78 <__ssputs_r+0x6c>
 800bd2a:	6965      	ldr	r5, [r4, #20]
 800bd2c:	6909      	ldr	r1, [r1, #16]
 800bd2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd32:	eba3 0901 	sub.w	r9, r3, r1
 800bd36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd3a:	1c7b      	adds	r3, r7, #1
 800bd3c:	444b      	add	r3, r9
 800bd3e:	106d      	asrs	r5, r5, #1
 800bd40:	429d      	cmp	r5, r3
 800bd42:	bf38      	it	cc
 800bd44:	461d      	movcc	r5, r3
 800bd46:	0553      	lsls	r3, r2, #21
 800bd48:	d527      	bpl.n	800bd9a <__ssputs_r+0x8e>
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	f7fe fc1c 	bl	800a588 <_malloc_r>
 800bd50:	4606      	mov	r6, r0
 800bd52:	b360      	cbz	r0, 800bdae <__ssputs_r+0xa2>
 800bd54:	6921      	ldr	r1, [r4, #16]
 800bd56:	464a      	mov	r2, r9
 800bd58:	f000 ff6c 	bl	800cc34 <memcpy>
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	6126      	str	r6, [r4, #16]
 800bd6a:	6165      	str	r5, [r4, #20]
 800bd6c:	444e      	add	r6, r9
 800bd6e:	eba5 0509 	sub.w	r5, r5, r9
 800bd72:	6026      	str	r6, [r4, #0]
 800bd74:	60a5      	str	r5, [r4, #8]
 800bd76:	463e      	mov	r6, r7
 800bd78:	42be      	cmp	r6, r7
 800bd7a:	d900      	bls.n	800bd7e <__ssputs_r+0x72>
 800bd7c:	463e      	mov	r6, r7
 800bd7e:	6820      	ldr	r0, [r4, #0]
 800bd80:	4632      	mov	r2, r6
 800bd82:	4641      	mov	r1, r8
 800bd84:	f000 fef7 	bl	800cb76 <memmove>
 800bd88:	68a3      	ldr	r3, [r4, #8]
 800bd8a:	1b9b      	subs	r3, r3, r6
 800bd8c:	60a3      	str	r3, [r4, #8]
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	4433      	add	r3, r6
 800bd92:	6023      	str	r3, [r4, #0]
 800bd94:	2000      	movs	r0, #0
 800bd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd9a:	462a      	mov	r2, r5
 800bd9c:	f001 fadd 	bl	800d35a <_realloc_r>
 800bda0:	4606      	mov	r6, r0
 800bda2:	2800      	cmp	r0, #0
 800bda4:	d1e0      	bne.n	800bd68 <__ssputs_r+0x5c>
 800bda6:	6921      	ldr	r1, [r4, #16]
 800bda8:	4650      	mov	r0, sl
 800bdaa:	f7fe fb79 	bl	800a4a0 <_free_r>
 800bdae:	230c      	movs	r3, #12
 800bdb0:	f8ca 3000 	str.w	r3, [sl]
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	e7e9      	b.n	800bd96 <__ssputs_r+0x8a>
	...

0800bdc4 <_svfiprintf_r>:
 800bdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc8:	4698      	mov	r8, r3
 800bdca:	898b      	ldrh	r3, [r1, #12]
 800bdcc:	061b      	lsls	r3, r3, #24
 800bdce:	b09d      	sub	sp, #116	@ 0x74
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	4614      	mov	r4, r2
 800bdd6:	d510      	bpl.n	800bdfa <_svfiprintf_r+0x36>
 800bdd8:	690b      	ldr	r3, [r1, #16]
 800bdda:	b973      	cbnz	r3, 800bdfa <_svfiprintf_r+0x36>
 800bddc:	2140      	movs	r1, #64	@ 0x40
 800bdde:	f7fe fbd3 	bl	800a588 <_malloc_r>
 800bde2:	6028      	str	r0, [r5, #0]
 800bde4:	6128      	str	r0, [r5, #16]
 800bde6:	b930      	cbnz	r0, 800bdf6 <_svfiprintf_r+0x32>
 800bde8:	230c      	movs	r3, #12
 800bdea:	603b      	str	r3, [r7, #0]
 800bdec:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf0:	b01d      	add	sp, #116	@ 0x74
 800bdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf6:	2340      	movs	r3, #64	@ 0x40
 800bdf8:	616b      	str	r3, [r5, #20]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdfe:	2320      	movs	r3, #32
 800be00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be04:	f8cd 800c 	str.w	r8, [sp, #12]
 800be08:	2330      	movs	r3, #48	@ 0x30
 800be0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bfa8 <_svfiprintf_r+0x1e4>
 800be0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be12:	f04f 0901 	mov.w	r9, #1
 800be16:	4623      	mov	r3, r4
 800be18:	469a      	mov	sl, r3
 800be1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be1e:	b10a      	cbz	r2, 800be24 <_svfiprintf_r+0x60>
 800be20:	2a25      	cmp	r2, #37	@ 0x25
 800be22:	d1f9      	bne.n	800be18 <_svfiprintf_r+0x54>
 800be24:	ebba 0b04 	subs.w	fp, sl, r4
 800be28:	d00b      	beq.n	800be42 <_svfiprintf_r+0x7e>
 800be2a:	465b      	mov	r3, fp
 800be2c:	4622      	mov	r2, r4
 800be2e:	4629      	mov	r1, r5
 800be30:	4638      	mov	r0, r7
 800be32:	f7ff ff6b 	bl	800bd0c <__ssputs_r>
 800be36:	3001      	adds	r0, #1
 800be38:	f000 80a7 	beq.w	800bf8a <_svfiprintf_r+0x1c6>
 800be3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be3e:	445a      	add	r2, fp
 800be40:	9209      	str	r2, [sp, #36]	@ 0x24
 800be42:	f89a 3000 	ldrb.w	r3, [sl]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 809f 	beq.w	800bf8a <_svfiprintf_r+0x1c6>
 800be4c:	2300      	movs	r3, #0
 800be4e:	f04f 32ff 	mov.w	r2, #4294967295
 800be52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be56:	f10a 0a01 	add.w	sl, sl, #1
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	9307      	str	r3, [sp, #28]
 800be5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be62:	931a      	str	r3, [sp, #104]	@ 0x68
 800be64:	4654      	mov	r4, sl
 800be66:	2205      	movs	r2, #5
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	484e      	ldr	r0, [pc, #312]	@ (800bfa8 <_svfiprintf_r+0x1e4>)
 800be6e:	f7f4 f9cf 	bl	8000210 <memchr>
 800be72:	9a04      	ldr	r2, [sp, #16]
 800be74:	b9d8      	cbnz	r0, 800beae <_svfiprintf_r+0xea>
 800be76:	06d0      	lsls	r0, r2, #27
 800be78:	bf44      	itt	mi
 800be7a:	2320      	movmi	r3, #32
 800be7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be80:	0711      	lsls	r1, r2, #28
 800be82:	bf44      	itt	mi
 800be84:	232b      	movmi	r3, #43	@ 0x2b
 800be86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be8a:	f89a 3000 	ldrb.w	r3, [sl]
 800be8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be90:	d015      	beq.n	800bebe <_svfiprintf_r+0xfa>
 800be92:	9a07      	ldr	r2, [sp, #28]
 800be94:	4654      	mov	r4, sl
 800be96:	2000      	movs	r0, #0
 800be98:	f04f 0c0a 	mov.w	ip, #10
 800be9c:	4621      	mov	r1, r4
 800be9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bea2:	3b30      	subs	r3, #48	@ 0x30
 800bea4:	2b09      	cmp	r3, #9
 800bea6:	d94b      	bls.n	800bf40 <_svfiprintf_r+0x17c>
 800bea8:	b1b0      	cbz	r0, 800bed8 <_svfiprintf_r+0x114>
 800beaa:	9207      	str	r2, [sp, #28]
 800beac:	e014      	b.n	800bed8 <_svfiprintf_r+0x114>
 800beae:	eba0 0308 	sub.w	r3, r0, r8
 800beb2:	fa09 f303 	lsl.w	r3, r9, r3
 800beb6:	4313      	orrs	r3, r2
 800beb8:	9304      	str	r3, [sp, #16]
 800beba:	46a2      	mov	sl, r4
 800bebc:	e7d2      	b.n	800be64 <_svfiprintf_r+0xa0>
 800bebe:	9b03      	ldr	r3, [sp, #12]
 800bec0:	1d19      	adds	r1, r3, #4
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	9103      	str	r1, [sp, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfbb      	ittet	lt
 800beca:	425b      	neglt	r3, r3
 800becc:	f042 0202 	orrlt.w	r2, r2, #2
 800bed0:	9307      	strge	r3, [sp, #28]
 800bed2:	9307      	strlt	r3, [sp, #28]
 800bed4:	bfb8      	it	lt
 800bed6:	9204      	strlt	r2, [sp, #16]
 800bed8:	7823      	ldrb	r3, [r4, #0]
 800beda:	2b2e      	cmp	r3, #46	@ 0x2e
 800bedc:	d10a      	bne.n	800bef4 <_svfiprintf_r+0x130>
 800bede:	7863      	ldrb	r3, [r4, #1]
 800bee0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bee2:	d132      	bne.n	800bf4a <_svfiprintf_r+0x186>
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	1d1a      	adds	r2, r3, #4
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	9203      	str	r2, [sp, #12]
 800beec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bef0:	3402      	adds	r4, #2
 800bef2:	9305      	str	r3, [sp, #20]
 800bef4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bfb8 <_svfiprintf_r+0x1f4>
 800bef8:	7821      	ldrb	r1, [r4, #0]
 800befa:	2203      	movs	r2, #3
 800befc:	4650      	mov	r0, sl
 800befe:	f7f4 f987 	bl	8000210 <memchr>
 800bf02:	b138      	cbz	r0, 800bf14 <_svfiprintf_r+0x150>
 800bf04:	9b04      	ldr	r3, [sp, #16]
 800bf06:	eba0 000a 	sub.w	r0, r0, sl
 800bf0a:	2240      	movs	r2, #64	@ 0x40
 800bf0c:	4082      	lsls	r2, r0
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	3401      	adds	r4, #1
 800bf12:	9304      	str	r3, [sp, #16]
 800bf14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf18:	4824      	ldr	r0, [pc, #144]	@ (800bfac <_svfiprintf_r+0x1e8>)
 800bf1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf1e:	2206      	movs	r2, #6
 800bf20:	f7f4 f976 	bl	8000210 <memchr>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d036      	beq.n	800bf96 <_svfiprintf_r+0x1d2>
 800bf28:	4b21      	ldr	r3, [pc, #132]	@ (800bfb0 <_svfiprintf_r+0x1ec>)
 800bf2a:	bb1b      	cbnz	r3, 800bf74 <_svfiprintf_r+0x1b0>
 800bf2c:	9b03      	ldr	r3, [sp, #12]
 800bf2e:	3307      	adds	r3, #7
 800bf30:	f023 0307 	bic.w	r3, r3, #7
 800bf34:	3308      	adds	r3, #8
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf3a:	4433      	add	r3, r6
 800bf3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf3e:	e76a      	b.n	800be16 <_svfiprintf_r+0x52>
 800bf40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf44:	460c      	mov	r4, r1
 800bf46:	2001      	movs	r0, #1
 800bf48:	e7a8      	b.n	800be9c <_svfiprintf_r+0xd8>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	3401      	adds	r4, #1
 800bf4e:	9305      	str	r3, [sp, #20]
 800bf50:	4619      	mov	r1, r3
 800bf52:	f04f 0c0a 	mov.w	ip, #10
 800bf56:	4620      	mov	r0, r4
 800bf58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf5c:	3a30      	subs	r2, #48	@ 0x30
 800bf5e:	2a09      	cmp	r2, #9
 800bf60:	d903      	bls.n	800bf6a <_svfiprintf_r+0x1a6>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d0c6      	beq.n	800bef4 <_svfiprintf_r+0x130>
 800bf66:	9105      	str	r1, [sp, #20]
 800bf68:	e7c4      	b.n	800bef4 <_svfiprintf_r+0x130>
 800bf6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf6e:	4604      	mov	r4, r0
 800bf70:	2301      	movs	r3, #1
 800bf72:	e7f0      	b.n	800bf56 <_svfiprintf_r+0x192>
 800bf74:	ab03      	add	r3, sp, #12
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	462a      	mov	r2, r5
 800bf7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb4 <_svfiprintf_r+0x1f0>)
 800bf7c:	a904      	add	r1, sp, #16
 800bf7e:	4638      	mov	r0, r7
 800bf80:	f7fc fb98 	bl	80086b4 <_printf_float>
 800bf84:	1c42      	adds	r2, r0, #1
 800bf86:	4606      	mov	r6, r0
 800bf88:	d1d6      	bne.n	800bf38 <_svfiprintf_r+0x174>
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	065b      	lsls	r3, r3, #25
 800bf8e:	f53f af2d 	bmi.w	800bdec <_svfiprintf_r+0x28>
 800bf92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf94:	e72c      	b.n	800bdf0 <_svfiprintf_r+0x2c>
 800bf96:	ab03      	add	r3, sp, #12
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4b05      	ldr	r3, [pc, #20]	@ (800bfb4 <_svfiprintf_r+0x1f0>)
 800bf9e:	a904      	add	r1, sp, #16
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7fc fe1f 	bl	8008be4 <_printf_i>
 800bfa6:	e7ed      	b.n	800bf84 <_svfiprintf_r+0x1c0>
 800bfa8:	0800db09 	.word	0x0800db09
 800bfac:	0800db13 	.word	0x0800db13
 800bfb0:	080086b5 	.word	0x080086b5
 800bfb4:	0800bd0d 	.word	0x0800bd0d
 800bfb8:	0800db0f 	.word	0x0800db0f

0800bfbc <_sungetc_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	1c4b      	adds	r3, r1, #1
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	d103      	bne.n	800bfcc <_sungetc_r+0x10>
 800bfc4:	f04f 35ff 	mov.w	r5, #4294967295
 800bfc8:	4628      	mov	r0, r5
 800bfca:	bd38      	pop	{r3, r4, r5, pc}
 800bfcc:	8993      	ldrh	r3, [r2, #12]
 800bfce:	f023 0320 	bic.w	r3, r3, #32
 800bfd2:	8193      	strh	r3, [r2, #12]
 800bfd4:	6853      	ldr	r3, [r2, #4]
 800bfd6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bfd8:	b2cd      	uxtb	r5, r1
 800bfda:	b18a      	cbz	r2, 800c000 <_sungetc_r+0x44>
 800bfdc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	dd08      	ble.n	800bff4 <_sungetc_r+0x38>
 800bfe2:	6823      	ldr	r3, [r4, #0]
 800bfe4:	1e5a      	subs	r2, r3, #1
 800bfe6:	6022      	str	r2, [r4, #0]
 800bfe8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bfec:	6863      	ldr	r3, [r4, #4]
 800bfee:	3301      	adds	r3, #1
 800bff0:	6063      	str	r3, [r4, #4]
 800bff2:	e7e9      	b.n	800bfc8 <_sungetc_r+0xc>
 800bff4:	4621      	mov	r1, r4
 800bff6:	f000 fd84 	bl	800cb02 <__submore>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d0f1      	beq.n	800bfe2 <_sungetc_r+0x26>
 800bffe:	e7e1      	b.n	800bfc4 <_sungetc_r+0x8>
 800c000:	6921      	ldr	r1, [r4, #16]
 800c002:	6822      	ldr	r2, [r4, #0]
 800c004:	b141      	cbz	r1, 800c018 <_sungetc_r+0x5c>
 800c006:	4291      	cmp	r1, r2
 800c008:	d206      	bcs.n	800c018 <_sungetc_r+0x5c>
 800c00a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c00e:	42a9      	cmp	r1, r5
 800c010:	d102      	bne.n	800c018 <_sungetc_r+0x5c>
 800c012:	3a01      	subs	r2, #1
 800c014:	6022      	str	r2, [r4, #0]
 800c016:	e7ea      	b.n	800bfee <_sungetc_r+0x32>
 800c018:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c01c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c020:	6363      	str	r3, [r4, #52]	@ 0x34
 800c022:	2303      	movs	r3, #3
 800c024:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c026:	4623      	mov	r3, r4
 800c028:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	2301      	movs	r3, #1
 800c030:	e7de      	b.n	800bff0 <_sungetc_r+0x34>

0800c032 <__ssrefill_r>:
 800c032:	b510      	push	{r4, lr}
 800c034:	460c      	mov	r4, r1
 800c036:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c038:	b169      	cbz	r1, 800c056 <__ssrefill_r+0x24>
 800c03a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c03e:	4299      	cmp	r1, r3
 800c040:	d001      	beq.n	800c046 <__ssrefill_r+0x14>
 800c042:	f7fe fa2d 	bl	800a4a0 <_free_r>
 800c046:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c048:	6063      	str	r3, [r4, #4]
 800c04a:	2000      	movs	r0, #0
 800c04c:	6360      	str	r0, [r4, #52]	@ 0x34
 800c04e:	b113      	cbz	r3, 800c056 <__ssrefill_r+0x24>
 800c050:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	bd10      	pop	{r4, pc}
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	2300      	movs	r3, #0
 800c05c:	6063      	str	r3, [r4, #4]
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f043 0320 	orr.w	r3, r3, #32
 800c064:	81a3      	strh	r3, [r4, #12]
 800c066:	f04f 30ff 	mov.w	r0, #4294967295
 800c06a:	e7f3      	b.n	800c054 <__ssrefill_r+0x22>

0800c06c <__ssvfiscanf_r>:
 800c06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c076:	2100      	movs	r1, #0
 800c078:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c07c:	49a5      	ldr	r1, [pc, #660]	@ (800c314 <__ssvfiscanf_r+0x2a8>)
 800c07e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c080:	f10d 0804 	add.w	r8, sp, #4
 800c084:	49a4      	ldr	r1, [pc, #656]	@ (800c318 <__ssvfiscanf_r+0x2ac>)
 800c086:	4fa5      	ldr	r7, [pc, #660]	@ (800c31c <__ssvfiscanf_r+0x2b0>)
 800c088:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c08c:	4606      	mov	r6, r0
 800c08e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	7813      	ldrb	r3, [r2, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 8158 	beq.w	800c34a <__ssvfiscanf_r+0x2de>
 800c09a:	5cf9      	ldrb	r1, [r7, r3]
 800c09c:	f011 0108 	ands.w	r1, r1, #8
 800c0a0:	f102 0501 	add.w	r5, r2, #1
 800c0a4:	d019      	beq.n	800c0da <__ssvfiscanf_r+0x6e>
 800c0a6:	6863      	ldr	r3, [r4, #4]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dd0f      	ble.n	800c0cc <__ssvfiscanf_r+0x60>
 800c0ac:	6823      	ldr	r3, [r4, #0]
 800c0ae:	781a      	ldrb	r2, [r3, #0]
 800c0b0:	5cba      	ldrb	r2, [r7, r2]
 800c0b2:	0712      	lsls	r2, r2, #28
 800c0b4:	d401      	bmi.n	800c0ba <__ssvfiscanf_r+0x4e>
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	e7eb      	b.n	800c092 <__ssvfiscanf_r+0x26>
 800c0ba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c0bc:	3201      	adds	r2, #1
 800c0be:	9245      	str	r2, [sp, #276]	@ 0x114
 800c0c0:	6862      	ldr	r2, [r4, #4]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	3a01      	subs	r2, #1
 800c0c6:	6062      	str	r2, [r4, #4]
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	e7ec      	b.n	800c0a6 <__ssvfiscanf_r+0x3a>
 800c0cc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4798      	blx	r3
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d0e9      	beq.n	800c0ac <__ssvfiscanf_r+0x40>
 800c0d8:	e7ed      	b.n	800c0b6 <__ssvfiscanf_r+0x4a>
 800c0da:	2b25      	cmp	r3, #37	@ 0x25
 800c0dc:	d012      	beq.n	800c104 <__ssvfiscanf_r+0x98>
 800c0de:	4699      	mov	r9, r3
 800c0e0:	6863      	ldr	r3, [r4, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f340 8093 	ble.w	800c20e <__ssvfiscanf_r+0x1a2>
 800c0e8:	6822      	ldr	r2, [r4, #0]
 800c0ea:	7813      	ldrb	r3, [r2, #0]
 800c0ec:	454b      	cmp	r3, r9
 800c0ee:	f040 812c 	bne.w	800c34a <__ssvfiscanf_r+0x2de>
 800c0f2:	6863      	ldr	r3, [r4, #4]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	6063      	str	r3, [r4, #4]
 800c0f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c0fa:	3201      	adds	r2, #1
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	6022      	str	r2, [r4, #0]
 800c100:	9345      	str	r3, [sp, #276]	@ 0x114
 800c102:	e7d8      	b.n	800c0b6 <__ssvfiscanf_r+0x4a>
 800c104:	9141      	str	r1, [sp, #260]	@ 0x104
 800c106:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c108:	7853      	ldrb	r3, [r2, #1]
 800c10a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c10c:	bf02      	ittt	eq
 800c10e:	2310      	moveq	r3, #16
 800c110:	1c95      	addeq	r5, r2, #2
 800c112:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c114:	220a      	movs	r2, #10
 800c116:	46a9      	mov	r9, r5
 800c118:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c11c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c120:	2b09      	cmp	r3, #9
 800c122:	d91e      	bls.n	800c162 <__ssvfiscanf_r+0xf6>
 800c124:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c320 <__ssvfiscanf_r+0x2b4>
 800c128:	2203      	movs	r2, #3
 800c12a:	4650      	mov	r0, sl
 800c12c:	f7f4 f870 	bl	8000210 <memchr>
 800c130:	b138      	cbz	r0, 800c142 <__ssvfiscanf_r+0xd6>
 800c132:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c134:	eba0 000a 	sub.w	r0, r0, sl
 800c138:	2301      	movs	r3, #1
 800c13a:	4083      	lsls	r3, r0
 800c13c:	4313      	orrs	r3, r2
 800c13e:	9341      	str	r3, [sp, #260]	@ 0x104
 800c140:	464d      	mov	r5, r9
 800c142:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c146:	2b78      	cmp	r3, #120	@ 0x78
 800c148:	d806      	bhi.n	800c158 <__ssvfiscanf_r+0xec>
 800c14a:	2b57      	cmp	r3, #87	@ 0x57
 800c14c:	d810      	bhi.n	800c170 <__ssvfiscanf_r+0x104>
 800c14e:	2b25      	cmp	r3, #37	@ 0x25
 800c150:	d0c5      	beq.n	800c0de <__ssvfiscanf_r+0x72>
 800c152:	d857      	bhi.n	800c204 <__ssvfiscanf_r+0x198>
 800c154:	2b00      	cmp	r3, #0
 800c156:	d065      	beq.n	800c224 <__ssvfiscanf_r+0x1b8>
 800c158:	2303      	movs	r3, #3
 800c15a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c15c:	230a      	movs	r3, #10
 800c15e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c160:	e078      	b.n	800c254 <__ssvfiscanf_r+0x1e8>
 800c162:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c164:	fb02 1103 	mla	r1, r2, r3, r1
 800c168:	3930      	subs	r1, #48	@ 0x30
 800c16a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c16c:	464d      	mov	r5, r9
 800c16e:	e7d2      	b.n	800c116 <__ssvfiscanf_r+0xaa>
 800c170:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c174:	2a20      	cmp	r2, #32
 800c176:	d8ef      	bhi.n	800c158 <__ssvfiscanf_r+0xec>
 800c178:	a101      	add	r1, pc, #4	@ (adr r1, 800c180 <__ssvfiscanf_r+0x114>)
 800c17a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c17e:	bf00      	nop
 800c180:	0800c233 	.word	0x0800c233
 800c184:	0800c159 	.word	0x0800c159
 800c188:	0800c159 	.word	0x0800c159
 800c18c:	0800c28d 	.word	0x0800c28d
 800c190:	0800c159 	.word	0x0800c159
 800c194:	0800c159 	.word	0x0800c159
 800c198:	0800c159 	.word	0x0800c159
 800c19c:	0800c159 	.word	0x0800c159
 800c1a0:	0800c159 	.word	0x0800c159
 800c1a4:	0800c159 	.word	0x0800c159
 800c1a8:	0800c159 	.word	0x0800c159
 800c1ac:	0800c2a3 	.word	0x0800c2a3
 800c1b0:	0800c289 	.word	0x0800c289
 800c1b4:	0800c20b 	.word	0x0800c20b
 800c1b8:	0800c20b 	.word	0x0800c20b
 800c1bc:	0800c20b 	.word	0x0800c20b
 800c1c0:	0800c159 	.word	0x0800c159
 800c1c4:	0800c245 	.word	0x0800c245
 800c1c8:	0800c159 	.word	0x0800c159
 800c1cc:	0800c159 	.word	0x0800c159
 800c1d0:	0800c159 	.word	0x0800c159
 800c1d4:	0800c159 	.word	0x0800c159
 800c1d8:	0800c2b3 	.word	0x0800c2b3
 800c1dc:	0800c24d 	.word	0x0800c24d
 800c1e0:	0800c22b 	.word	0x0800c22b
 800c1e4:	0800c159 	.word	0x0800c159
 800c1e8:	0800c159 	.word	0x0800c159
 800c1ec:	0800c2af 	.word	0x0800c2af
 800c1f0:	0800c159 	.word	0x0800c159
 800c1f4:	0800c289 	.word	0x0800c289
 800c1f8:	0800c159 	.word	0x0800c159
 800c1fc:	0800c159 	.word	0x0800c159
 800c200:	0800c233 	.word	0x0800c233
 800c204:	3b45      	subs	r3, #69	@ 0x45
 800c206:	2b02      	cmp	r3, #2
 800c208:	d8a6      	bhi.n	800c158 <__ssvfiscanf_r+0xec>
 800c20a:	2305      	movs	r3, #5
 800c20c:	e021      	b.n	800c252 <__ssvfiscanf_r+0x1e6>
 800c20e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c210:	4621      	mov	r1, r4
 800c212:	4630      	mov	r0, r6
 800c214:	4798      	blx	r3
 800c216:	2800      	cmp	r0, #0
 800c218:	f43f af66 	beq.w	800c0e8 <__ssvfiscanf_r+0x7c>
 800c21c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c21e:	2800      	cmp	r0, #0
 800c220:	f040 808b 	bne.w	800c33a <__ssvfiscanf_r+0x2ce>
 800c224:	f04f 30ff 	mov.w	r0, #4294967295
 800c228:	e08b      	b.n	800c342 <__ssvfiscanf_r+0x2d6>
 800c22a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c22c:	f042 0220 	orr.w	r2, r2, #32
 800c230:	9241      	str	r2, [sp, #260]	@ 0x104
 800c232:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c238:	9241      	str	r2, [sp, #260]	@ 0x104
 800c23a:	2210      	movs	r2, #16
 800c23c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c23e:	9242      	str	r2, [sp, #264]	@ 0x108
 800c240:	d902      	bls.n	800c248 <__ssvfiscanf_r+0x1dc>
 800c242:	e005      	b.n	800c250 <__ssvfiscanf_r+0x1e4>
 800c244:	2300      	movs	r3, #0
 800c246:	9342      	str	r3, [sp, #264]	@ 0x108
 800c248:	2303      	movs	r3, #3
 800c24a:	e002      	b.n	800c252 <__ssvfiscanf_r+0x1e6>
 800c24c:	2308      	movs	r3, #8
 800c24e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c250:	2304      	movs	r3, #4
 800c252:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c254:	6863      	ldr	r3, [r4, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dd39      	ble.n	800c2ce <__ssvfiscanf_r+0x262>
 800c25a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c25c:	0659      	lsls	r1, r3, #25
 800c25e:	d404      	bmi.n	800c26a <__ssvfiscanf_r+0x1fe>
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	781a      	ldrb	r2, [r3, #0]
 800c264:	5cba      	ldrb	r2, [r7, r2]
 800c266:	0712      	lsls	r2, r2, #28
 800c268:	d438      	bmi.n	800c2dc <__ssvfiscanf_r+0x270>
 800c26a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	dc47      	bgt.n	800c300 <__ssvfiscanf_r+0x294>
 800c270:	466b      	mov	r3, sp
 800c272:	4622      	mov	r2, r4
 800c274:	a941      	add	r1, sp, #260	@ 0x104
 800c276:	4630      	mov	r0, r6
 800c278:	f000 f9ae 	bl	800c5d8 <_scanf_chars>
 800c27c:	2801      	cmp	r0, #1
 800c27e:	d064      	beq.n	800c34a <__ssvfiscanf_r+0x2de>
 800c280:	2802      	cmp	r0, #2
 800c282:	f47f af18 	bne.w	800c0b6 <__ssvfiscanf_r+0x4a>
 800c286:	e7c9      	b.n	800c21c <__ssvfiscanf_r+0x1b0>
 800c288:	220a      	movs	r2, #10
 800c28a:	e7d7      	b.n	800c23c <__ssvfiscanf_r+0x1d0>
 800c28c:	4629      	mov	r1, r5
 800c28e:	4640      	mov	r0, r8
 800c290:	f000 fbfe 	bl	800ca90 <__sccl>
 800c294:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c29a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c29c:	4605      	mov	r5, r0
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e7d7      	b.n	800c252 <__ssvfiscanf_r+0x1e6>
 800c2a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c2a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2a8:	9341      	str	r3, [sp, #260]	@ 0x104
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	e7d1      	b.n	800c252 <__ssvfiscanf_r+0x1e6>
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e7cf      	b.n	800c252 <__ssvfiscanf_r+0x1e6>
 800c2b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c2b4:	06c3      	lsls	r3, r0, #27
 800c2b6:	f53f aefe 	bmi.w	800c0b6 <__ssvfiscanf_r+0x4a>
 800c2ba:	9b00      	ldr	r3, [sp, #0]
 800c2bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c2be:	1d19      	adds	r1, r3, #4
 800c2c0:	9100      	str	r1, [sp, #0]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	07c0      	lsls	r0, r0, #31
 800c2c6:	bf4c      	ite	mi
 800c2c8:	801a      	strhmi	r2, [r3, #0]
 800c2ca:	601a      	strpl	r2, [r3, #0]
 800c2cc:	e6f3      	b.n	800c0b6 <__ssvfiscanf_r+0x4a>
 800c2ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	4798      	blx	r3
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d0bf      	beq.n	800c25a <__ssvfiscanf_r+0x1ee>
 800c2da:	e79f      	b.n	800c21c <__ssvfiscanf_r+0x1b0>
 800c2dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c2de:	3201      	adds	r2, #1
 800c2e0:	9245      	str	r2, [sp, #276]	@ 0x114
 800c2e2:	6862      	ldr	r2, [r4, #4]
 800c2e4:	3a01      	subs	r2, #1
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	6062      	str	r2, [r4, #4]
 800c2ea:	dd02      	ble.n	800c2f2 <__ssvfiscanf_r+0x286>
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	e7b6      	b.n	800c260 <__ssvfiscanf_r+0x1f4>
 800c2f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	4798      	blx	r3
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d0b0      	beq.n	800c260 <__ssvfiscanf_r+0x1f4>
 800c2fe:	e78d      	b.n	800c21c <__ssvfiscanf_r+0x1b0>
 800c300:	2b04      	cmp	r3, #4
 800c302:	dc0f      	bgt.n	800c324 <__ssvfiscanf_r+0x2b8>
 800c304:	466b      	mov	r3, sp
 800c306:	4622      	mov	r2, r4
 800c308:	a941      	add	r1, sp, #260	@ 0x104
 800c30a:	4630      	mov	r0, r6
 800c30c:	f000 f9be 	bl	800c68c <_scanf_i>
 800c310:	e7b4      	b.n	800c27c <__ssvfiscanf_r+0x210>
 800c312:	bf00      	nop
 800c314:	0800bfbd 	.word	0x0800bfbd
 800c318:	0800c033 	.word	0x0800c033
 800c31c:	0800da09 	.word	0x0800da09
 800c320:	0800db0f 	.word	0x0800db0f
 800c324:	4b0a      	ldr	r3, [pc, #40]	@ (800c350 <__ssvfiscanf_r+0x2e4>)
 800c326:	2b00      	cmp	r3, #0
 800c328:	f43f aec5 	beq.w	800c0b6 <__ssvfiscanf_r+0x4a>
 800c32c:	466b      	mov	r3, sp
 800c32e:	4622      	mov	r2, r4
 800c330:	a941      	add	r1, sp, #260	@ 0x104
 800c332:	4630      	mov	r0, r6
 800c334:	f7fc fd76 	bl	8008e24 <_scanf_float>
 800c338:	e7a0      	b.n	800c27c <__ssvfiscanf_r+0x210>
 800c33a:	89a3      	ldrh	r3, [r4, #12]
 800c33c:	065b      	lsls	r3, r3, #25
 800c33e:	f53f af71 	bmi.w	800c224 <__ssvfiscanf_r+0x1b8>
 800c342:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c34c:	e7f9      	b.n	800c342 <__ssvfiscanf_r+0x2d6>
 800c34e:	bf00      	nop
 800c350:	08008e25 	.word	0x08008e25

0800c354 <__sfputc_r>:
 800c354:	6893      	ldr	r3, [r2, #8]
 800c356:	3b01      	subs	r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	b410      	push	{r4}
 800c35c:	6093      	str	r3, [r2, #8]
 800c35e:	da08      	bge.n	800c372 <__sfputc_r+0x1e>
 800c360:	6994      	ldr	r4, [r2, #24]
 800c362:	42a3      	cmp	r3, r4
 800c364:	db01      	blt.n	800c36a <__sfputc_r+0x16>
 800c366:	290a      	cmp	r1, #10
 800c368:	d103      	bne.n	800c372 <__sfputc_r+0x1e>
 800c36a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c36e:	f7fd b92e 	b.w	80095ce <__swbuf_r>
 800c372:	6813      	ldr	r3, [r2, #0]
 800c374:	1c58      	adds	r0, r3, #1
 800c376:	6010      	str	r0, [r2, #0]
 800c378:	7019      	strb	r1, [r3, #0]
 800c37a:	4608      	mov	r0, r1
 800c37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c380:	4770      	bx	lr

0800c382 <__sfputs_r>:
 800c382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c384:	4606      	mov	r6, r0
 800c386:	460f      	mov	r7, r1
 800c388:	4614      	mov	r4, r2
 800c38a:	18d5      	adds	r5, r2, r3
 800c38c:	42ac      	cmp	r4, r5
 800c38e:	d101      	bne.n	800c394 <__sfputs_r+0x12>
 800c390:	2000      	movs	r0, #0
 800c392:	e007      	b.n	800c3a4 <__sfputs_r+0x22>
 800c394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c398:	463a      	mov	r2, r7
 800c39a:	4630      	mov	r0, r6
 800c39c:	f7ff ffda 	bl	800c354 <__sfputc_r>
 800c3a0:	1c43      	adds	r3, r0, #1
 800c3a2:	d1f3      	bne.n	800c38c <__sfputs_r+0xa>
 800c3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3a8 <_vfiprintf_r>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	b09d      	sub	sp, #116	@ 0x74
 800c3b0:	4614      	mov	r4, r2
 800c3b2:	4698      	mov	r8, r3
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	b118      	cbz	r0, 800c3c0 <_vfiprintf_r+0x18>
 800c3b8:	6a03      	ldr	r3, [r0, #32]
 800c3ba:	b90b      	cbnz	r3, 800c3c0 <_vfiprintf_r+0x18>
 800c3bc:	f7fc ffd2 	bl	8009364 <__sinit>
 800c3c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3c2:	07d9      	lsls	r1, r3, #31
 800c3c4:	d405      	bmi.n	800c3d2 <_vfiprintf_r+0x2a>
 800c3c6:	89ab      	ldrh	r3, [r5, #12]
 800c3c8:	059a      	lsls	r2, r3, #22
 800c3ca:	d402      	bmi.n	800c3d2 <_vfiprintf_r+0x2a>
 800c3cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3ce:	f7fd fa10 	bl	80097f2 <__retarget_lock_acquire_recursive>
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	071b      	lsls	r3, r3, #28
 800c3d6:	d501      	bpl.n	800c3dc <_vfiprintf_r+0x34>
 800c3d8:	692b      	ldr	r3, [r5, #16]
 800c3da:	b99b      	cbnz	r3, 800c404 <_vfiprintf_r+0x5c>
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7fd f934 	bl	800964c <__swsetup_r>
 800c3e4:	b170      	cbz	r0, 800c404 <_vfiprintf_r+0x5c>
 800c3e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3e8:	07dc      	lsls	r4, r3, #31
 800c3ea:	d504      	bpl.n	800c3f6 <_vfiprintf_r+0x4e>
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	b01d      	add	sp, #116	@ 0x74
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	89ab      	ldrh	r3, [r5, #12]
 800c3f8:	0598      	lsls	r0, r3, #22
 800c3fa:	d4f7      	bmi.n	800c3ec <_vfiprintf_r+0x44>
 800c3fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3fe:	f7fd f9f9 	bl	80097f4 <__retarget_lock_release_recursive>
 800c402:	e7f3      	b.n	800c3ec <_vfiprintf_r+0x44>
 800c404:	2300      	movs	r3, #0
 800c406:	9309      	str	r3, [sp, #36]	@ 0x24
 800c408:	2320      	movs	r3, #32
 800c40a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c40e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c412:	2330      	movs	r3, #48	@ 0x30
 800c414:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c5c4 <_vfiprintf_r+0x21c>
 800c418:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c41c:	f04f 0901 	mov.w	r9, #1
 800c420:	4623      	mov	r3, r4
 800c422:	469a      	mov	sl, r3
 800c424:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c428:	b10a      	cbz	r2, 800c42e <_vfiprintf_r+0x86>
 800c42a:	2a25      	cmp	r2, #37	@ 0x25
 800c42c:	d1f9      	bne.n	800c422 <_vfiprintf_r+0x7a>
 800c42e:	ebba 0b04 	subs.w	fp, sl, r4
 800c432:	d00b      	beq.n	800c44c <_vfiprintf_r+0xa4>
 800c434:	465b      	mov	r3, fp
 800c436:	4622      	mov	r2, r4
 800c438:	4629      	mov	r1, r5
 800c43a:	4630      	mov	r0, r6
 800c43c:	f7ff ffa1 	bl	800c382 <__sfputs_r>
 800c440:	3001      	adds	r0, #1
 800c442:	f000 80a7 	beq.w	800c594 <_vfiprintf_r+0x1ec>
 800c446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c448:	445a      	add	r2, fp
 800c44a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c44c:	f89a 3000 	ldrb.w	r3, [sl]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f000 809f 	beq.w	800c594 <_vfiprintf_r+0x1ec>
 800c456:	2300      	movs	r3, #0
 800c458:	f04f 32ff 	mov.w	r2, #4294967295
 800c45c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c460:	f10a 0a01 	add.w	sl, sl, #1
 800c464:	9304      	str	r3, [sp, #16]
 800c466:	9307      	str	r3, [sp, #28]
 800c468:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c46c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c46e:	4654      	mov	r4, sl
 800c470:	2205      	movs	r2, #5
 800c472:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c476:	4853      	ldr	r0, [pc, #332]	@ (800c5c4 <_vfiprintf_r+0x21c>)
 800c478:	f7f3 feca 	bl	8000210 <memchr>
 800c47c:	9a04      	ldr	r2, [sp, #16]
 800c47e:	b9d8      	cbnz	r0, 800c4b8 <_vfiprintf_r+0x110>
 800c480:	06d1      	lsls	r1, r2, #27
 800c482:	bf44      	itt	mi
 800c484:	2320      	movmi	r3, #32
 800c486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c48a:	0713      	lsls	r3, r2, #28
 800c48c:	bf44      	itt	mi
 800c48e:	232b      	movmi	r3, #43	@ 0x2b
 800c490:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c494:	f89a 3000 	ldrb.w	r3, [sl]
 800c498:	2b2a      	cmp	r3, #42	@ 0x2a
 800c49a:	d015      	beq.n	800c4c8 <_vfiprintf_r+0x120>
 800c49c:	9a07      	ldr	r2, [sp, #28]
 800c49e:	4654      	mov	r4, sl
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	f04f 0c0a 	mov.w	ip, #10
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ac:	3b30      	subs	r3, #48	@ 0x30
 800c4ae:	2b09      	cmp	r3, #9
 800c4b0:	d94b      	bls.n	800c54a <_vfiprintf_r+0x1a2>
 800c4b2:	b1b0      	cbz	r0, 800c4e2 <_vfiprintf_r+0x13a>
 800c4b4:	9207      	str	r2, [sp, #28]
 800c4b6:	e014      	b.n	800c4e2 <_vfiprintf_r+0x13a>
 800c4b8:	eba0 0308 	sub.w	r3, r0, r8
 800c4bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	9304      	str	r3, [sp, #16]
 800c4c4:	46a2      	mov	sl, r4
 800c4c6:	e7d2      	b.n	800c46e <_vfiprintf_r+0xc6>
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	1d19      	adds	r1, r3, #4
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	9103      	str	r1, [sp, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	bfbb      	ittet	lt
 800c4d4:	425b      	neglt	r3, r3
 800c4d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4da:	9307      	strge	r3, [sp, #28]
 800c4dc:	9307      	strlt	r3, [sp, #28]
 800c4de:	bfb8      	it	lt
 800c4e0:	9204      	strlt	r2, [sp, #16]
 800c4e2:	7823      	ldrb	r3, [r4, #0]
 800c4e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4e6:	d10a      	bne.n	800c4fe <_vfiprintf_r+0x156>
 800c4e8:	7863      	ldrb	r3, [r4, #1]
 800c4ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4ec:	d132      	bne.n	800c554 <_vfiprintf_r+0x1ac>
 800c4ee:	9b03      	ldr	r3, [sp, #12]
 800c4f0:	1d1a      	adds	r2, r3, #4
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	9203      	str	r2, [sp, #12]
 800c4f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4fa:	3402      	adds	r4, #2
 800c4fc:	9305      	str	r3, [sp, #20]
 800c4fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c5d4 <_vfiprintf_r+0x22c>
 800c502:	7821      	ldrb	r1, [r4, #0]
 800c504:	2203      	movs	r2, #3
 800c506:	4650      	mov	r0, sl
 800c508:	f7f3 fe82 	bl	8000210 <memchr>
 800c50c:	b138      	cbz	r0, 800c51e <_vfiprintf_r+0x176>
 800c50e:	9b04      	ldr	r3, [sp, #16]
 800c510:	eba0 000a 	sub.w	r0, r0, sl
 800c514:	2240      	movs	r2, #64	@ 0x40
 800c516:	4082      	lsls	r2, r0
 800c518:	4313      	orrs	r3, r2
 800c51a:	3401      	adds	r4, #1
 800c51c:	9304      	str	r3, [sp, #16]
 800c51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c522:	4829      	ldr	r0, [pc, #164]	@ (800c5c8 <_vfiprintf_r+0x220>)
 800c524:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c528:	2206      	movs	r2, #6
 800c52a:	f7f3 fe71 	bl	8000210 <memchr>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d03f      	beq.n	800c5b2 <_vfiprintf_r+0x20a>
 800c532:	4b26      	ldr	r3, [pc, #152]	@ (800c5cc <_vfiprintf_r+0x224>)
 800c534:	bb1b      	cbnz	r3, 800c57e <_vfiprintf_r+0x1d6>
 800c536:	9b03      	ldr	r3, [sp, #12]
 800c538:	3307      	adds	r3, #7
 800c53a:	f023 0307 	bic.w	r3, r3, #7
 800c53e:	3308      	adds	r3, #8
 800c540:	9303      	str	r3, [sp, #12]
 800c542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c544:	443b      	add	r3, r7
 800c546:	9309      	str	r3, [sp, #36]	@ 0x24
 800c548:	e76a      	b.n	800c420 <_vfiprintf_r+0x78>
 800c54a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c54e:	460c      	mov	r4, r1
 800c550:	2001      	movs	r0, #1
 800c552:	e7a8      	b.n	800c4a6 <_vfiprintf_r+0xfe>
 800c554:	2300      	movs	r3, #0
 800c556:	3401      	adds	r4, #1
 800c558:	9305      	str	r3, [sp, #20]
 800c55a:	4619      	mov	r1, r3
 800c55c:	f04f 0c0a 	mov.w	ip, #10
 800c560:	4620      	mov	r0, r4
 800c562:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c566:	3a30      	subs	r2, #48	@ 0x30
 800c568:	2a09      	cmp	r2, #9
 800c56a:	d903      	bls.n	800c574 <_vfiprintf_r+0x1cc>
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d0c6      	beq.n	800c4fe <_vfiprintf_r+0x156>
 800c570:	9105      	str	r1, [sp, #20]
 800c572:	e7c4      	b.n	800c4fe <_vfiprintf_r+0x156>
 800c574:	fb0c 2101 	mla	r1, ip, r1, r2
 800c578:	4604      	mov	r4, r0
 800c57a:	2301      	movs	r3, #1
 800c57c:	e7f0      	b.n	800c560 <_vfiprintf_r+0x1b8>
 800c57e:	ab03      	add	r3, sp, #12
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	462a      	mov	r2, r5
 800c584:	4b12      	ldr	r3, [pc, #72]	@ (800c5d0 <_vfiprintf_r+0x228>)
 800c586:	a904      	add	r1, sp, #16
 800c588:	4630      	mov	r0, r6
 800c58a:	f7fc f893 	bl	80086b4 <_printf_float>
 800c58e:	4607      	mov	r7, r0
 800c590:	1c78      	adds	r0, r7, #1
 800c592:	d1d6      	bne.n	800c542 <_vfiprintf_r+0x19a>
 800c594:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c596:	07d9      	lsls	r1, r3, #31
 800c598:	d405      	bmi.n	800c5a6 <_vfiprintf_r+0x1fe>
 800c59a:	89ab      	ldrh	r3, [r5, #12]
 800c59c:	059a      	lsls	r2, r3, #22
 800c59e:	d402      	bmi.n	800c5a6 <_vfiprintf_r+0x1fe>
 800c5a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5a2:	f7fd f927 	bl	80097f4 <__retarget_lock_release_recursive>
 800c5a6:	89ab      	ldrh	r3, [r5, #12]
 800c5a8:	065b      	lsls	r3, r3, #25
 800c5aa:	f53f af1f 	bmi.w	800c3ec <_vfiprintf_r+0x44>
 800c5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5b0:	e71e      	b.n	800c3f0 <_vfiprintf_r+0x48>
 800c5b2:	ab03      	add	r3, sp, #12
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	462a      	mov	r2, r5
 800c5b8:	4b05      	ldr	r3, [pc, #20]	@ (800c5d0 <_vfiprintf_r+0x228>)
 800c5ba:	a904      	add	r1, sp, #16
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7fc fb11 	bl	8008be4 <_printf_i>
 800c5c2:	e7e4      	b.n	800c58e <_vfiprintf_r+0x1e6>
 800c5c4:	0800db09 	.word	0x0800db09
 800c5c8:	0800db13 	.word	0x0800db13
 800c5cc:	080086b5 	.word	0x080086b5
 800c5d0:	0800c383 	.word	0x0800c383
 800c5d4:	0800db0f 	.word	0x0800db0f

0800c5d8 <_scanf_chars>:
 800c5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5dc:	4615      	mov	r5, r2
 800c5de:	688a      	ldr	r2, [r1, #8]
 800c5e0:	4680      	mov	r8, r0
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	b932      	cbnz	r2, 800c5f4 <_scanf_chars+0x1c>
 800c5e6:	698a      	ldr	r2, [r1, #24]
 800c5e8:	2a00      	cmp	r2, #0
 800c5ea:	bf14      	ite	ne
 800c5ec:	f04f 32ff 	movne.w	r2, #4294967295
 800c5f0:	2201      	moveq	r2, #1
 800c5f2:	608a      	str	r2, [r1, #8]
 800c5f4:	6822      	ldr	r2, [r4, #0]
 800c5f6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c688 <_scanf_chars+0xb0>
 800c5fa:	06d1      	lsls	r1, r2, #27
 800c5fc:	bf5f      	itttt	pl
 800c5fe:	681a      	ldrpl	r2, [r3, #0]
 800c600:	1d11      	addpl	r1, r2, #4
 800c602:	6019      	strpl	r1, [r3, #0]
 800c604:	6816      	ldrpl	r6, [r2, #0]
 800c606:	2700      	movs	r7, #0
 800c608:	69a0      	ldr	r0, [r4, #24]
 800c60a:	b188      	cbz	r0, 800c630 <_scanf_chars+0x58>
 800c60c:	2801      	cmp	r0, #1
 800c60e:	d107      	bne.n	800c620 <_scanf_chars+0x48>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	781a      	ldrb	r2, [r3, #0]
 800c614:	6963      	ldr	r3, [r4, #20]
 800c616:	5c9b      	ldrb	r3, [r3, r2]
 800c618:	b953      	cbnz	r3, 800c630 <_scanf_chars+0x58>
 800c61a:	2f00      	cmp	r7, #0
 800c61c:	d031      	beq.n	800c682 <_scanf_chars+0xaa>
 800c61e:	e022      	b.n	800c666 <_scanf_chars+0x8e>
 800c620:	2802      	cmp	r0, #2
 800c622:	d120      	bne.n	800c666 <_scanf_chars+0x8e>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c62c:	071b      	lsls	r3, r3, #28
 800c62e:	d41a      	bmi.n	800c666 <_scanf_chars+0x8e>
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	06da      	lsls	r2, r3, #27
 800c634:	bf5e      	ittt	pl
 800c636:	682b      	ldrpl	r3, [r5, #0]
 800c638:	781b      	ldrbpl	r3, [r3, #0]
 800c63a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c63e:	682a      	ldr	r2, [r5, #0]
 800c640:	686b      	ldr	r3, [r5, #4]
 800c642:	3201      	adds	r2, #1
 800c644:	602a      	str	r2, [r5, #0]
 800c646:	68a2      	ldr	r2, [r4, #8]
 800c648:	3b01      	subs	r3, #1
 800c64a:	3a01      	subs	r2, #1
 800c64c:	606b      	str	r3, [r5, #4]
 800c64e:	3701      	adds	r7, #1
 800c650:	60a2      	str	r2, [r4, #8]
 800c652:	b142      	cbz	r2, 800c666 <_scanf_chars+0x8e>
 800c654:	2b00      	cmp	r3, #0
 800c656:	dcd7      	bgt.n	800c608 <_scanf_chars+0x30>
 800c658:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c65c:	4629      	mov	r1, r5
 800c65e:	4640      	mov	r0, r8
 800c660:	4798      	blx	r3
 800c662:	2800      	cmp	r0, #0
 800c664:	d0d0      	beq.n	800c608 <_scanf_chars+0x30>
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	f013 0310 	ands.w	r3, r3, #16
 800c66c:	d105      	bne.n	800c67a <_scanf_chars+0xa2>
 800c66e:	68e2      	ldr	r2, [r4, #12]
 800c670:	3201      	adds	r2, #1
 800c672:	60e2      	str	r2, [r4, #12]
 800c674:	69a2      	ldr	r2, [r4, #24]
 800c676:	b102      	cbz	r2, 800c67a <_scanf_chars+0xa2>
 800c678:	7033      	strb	r3, [r6, #0]
 800c67a:	6923      	ldr	r3, [r4, #16]
 800c67c:	443b      	add	r3, r7
 800c67e:	6123      	str	r3, [r4, #16]
 800c680:	2000      	movs	r0, #0
 800c682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c686:	bf00      	nop
 800c688:	0800da09 	.word	0x0800da09

0800c68c <_scanf_i>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	4698      	mov	r8, r3
 800c692:	4b74      	ldr	r3, [pc, #464]	@ (800c864 <_scanf_i+0x1d8>)
 800c694:	460c      	mov	r4, r1
 800c696:	4682      	mov	sl, r0
 800c698:	4616      	mov	r6, r2
 800c69a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c69e:	b087      	sub	sp, #28
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c6a6:	4b70      	ldr	r3, [pc, #448]	@ (800c868 <_scanf_i+0x1dc>)
 800c6a8:	69a1      	ldr	r1, [r4, #24]
 800c6aa:	4a70      	ldr	r2, [pc, #448]	@ (800c86c <_scanf_i+0x1e0>)
 800c6ac:	2903      	cmp	r1, #3
 800c6ae:	bf08      	it	eq
 800c6b0:	461a      	moveq	r2, r3
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	9201      	str	r2, [sp, #4]
 800c6b6:	1e5a      	subs	r2, r3, #1
 800c6b8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c6bc:	bf88      	it	hi
 800c6be:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c6c2:	4627      	mov	r7, r4
 800c6c4:	bf82      	ittt	hi
 800c6c6:	eb03 0905 	addhi.w	r9, r3, r5
 800c6ca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c6ce:	60a3      	strhi	r3, [r4, #8]
 800c6d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c6d4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c6d8:	bf98      	it	ls
 800c6da:	f04f 0900 	movls.w	r9, #0
 800c6de:	6023      	str	r3, [r4, #0]
 800c6e0:	463d      	mov	r5, r7
 800c6e2:	f04f 0b00 	mov.w	fp, #0
 800c6e6:	6831      	ldr	r1, [r6, #0]
 800c6e8:	ab03      	add	r3, sp, #12
 800c6ea:	7809      	ldrb	r1, [r1, #0]
 800c6ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	f7f3 fd8d 	bl	8000210 <memchr>
 800c6f6:	b328      	cbz	r0, 800c744 <_scanf_i+0xb8>
 800c6f8:	f1bb 0f01 	cmp.w	fp, #1
 800c6fc:	d159      	bne.n	800c7b2 <_scanf_i+0x126>
 800c6fe:	6862      	ldr	r2, [r4, #4]
 800c700:	b92a      	cbnz	r2, 800c70e <_scanf_i+0x82>
 800c702:	6822      	ldr	r2, [r4, #0]
 800c704:	2108      	movs	r1, #8
 800c706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c70a:	6061      	str	r1, [r4, #4]
 800c70c:	6022      	str	r2, [r4, #0]
 800c70e:	6822      	ldr	r2, [r4, #0]
 800c710:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c714:	6022      	str	r2, [r4, #0]
 800c716:	68a2      	ldr	r2, [r4, #8]
 800c718:	1e51      	subs	r1, r2, #1
 800c71a:	60a1      	str	r1, [r4, #8]
 800c71c:	b192      	cbz	r2, 800c744 <_scanf_i+0xb8>
 800c71e:	6832      	ldr	r2, [r6, #0]
 800c720:	1c51      	adds	r1, r2, #1
 800c722:	6031      	str	r1, [r6, #0]
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	f805 2b01 	strb.w	r2, [r5], #1
 800c72a:	6872      	ldr	r2, [r6, #4]
 800c72c:	3a01      	subs	r2, #1
 800c72e:	2a00      	cmp	r2, #0
 800c730:	6072      	str	r2, [r6, #4]
 800c732:	dc07      	bgt.n	800c744 <_scanf_i+0xb8>
 800c734:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c738:	4631      	mov	r1, r6
 800c73a:	4650      	mov	r0, sl
 800c73c:	4790      	blx	r2
 800c73e:	2800      	cmp	r0, #0
 800c740:	f040 8085 	bne.w	800c84e <_scanf_i+0x1c2>
 800c744:	f10b 0b01 	add.w	fp, fp, #1
 800c748:	f1bb 0f03 	cmp.w	fp, #3
 800c74c:	d1cb      	bne.n	800c6e6 <_scanf_i+0x5a>
 800c74e:	6863      	ldr	r3, [r4, #4]
 800c750:	b90b      	cbnz	r3, 800c756 <_scanf_i+0xca>
 800c752:	230a      	movs	r3, #10
 800c754:	6063      	str	r3, [r4, #4]
 800c756:	6863      	ldr	r3, [r4, #4]
 800c758:	4945      	ldr	r1, [pc, #276]	@ (800c870 <_scanf_i+0x1e4>)
 800c75a:	6960      	ldr	r0, [r4, #20]
 800c75c:	1ac9      	subs	r1, r1, r3
 800c75e:	f000 f997 	bl	800ca90 <__sccl>
 800c762:	f04f 0b00 	mov.w	fp, #0
 800c766:	68a3      	ldr	r3, [r4, #8]
 800c768:	6822      	ldr	r2, [r4, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d03d      	beq.n	800c7ea <_scanf_i+0x15e>
 800c76e:	6831      	ldr	r1, [r6, #0]
 800c770:	6960      	ldr	r0, [r4, #20]
 800c772:	f891 c000 	ldrb.w	ip, [r1]
 800c776:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d035      	beq.n	800c7ea <_scanf_i+0x15e>
 800c77e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c782:	d124      	bne.n	800c7ce <_scanf_i+0x142>
 800c784:	0510      	lsls	r0, r2, #20
 800c786:	d522      	bpl.n	800c7ce <_scanf_i+0x142>
 800c788:	f10b 0b01 	add.w	fp, fp, #1
 800c78c:	f1b9 0f00 	cmp.w	r9, #0
 800c790:	d003      	beq.n	800c79a <_scanf_i+0x10e>
 800c792:	3301      	adds	r3, #1
 800c794:	f109 39ff 	add.w	r9, r9, #4294967295
 800c798:	60a3      	str	r3, [r4, #8]
 800c79a:	6873      	ldr	r3, [r6, #4]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	6073      	str	r3, [r6, #4]
 800c7a2:	dd1b      	ble.n	800c7dc <_scanf_i+0x150>
 800c7a4:	6833      	ldr	r3, [r6, #0]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	6033      	str	r3, [r6, #0]
 800c7aa:	68a3      	ldr	r3, [r4, #8]
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	60a3      	str	r3, [r4, #8]
 800c7b0:	e7d9      	b.n	800c766 <_scanf_i+0xda>
 800c7b2:	f1bb 0f02 	cmp.w	fp, #2
 800c7b6:	d1ae      	bne.n	800c716 <_scanf_i+0x8a>
 800c7b8:	6822      	ldr	r2, [r4, #0]
 800c7ba:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c7be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c7c2:	d1bf      	bne.n	800c744 <_scanf_i+0xb8>
 800c7c4:	2110      	movs	r1, #16
 800c7c6:	6061      	str	r1, [r4, #4]
 800c7c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c7cc:	e7a2      	b.n	800c714 <_scanf_i+0x88>
 800c7ce:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c7d2:	6022      	str	r2, [r4, #0]
 800c7d4:	780b      	ldrb	r3, [r1, #0]
 800c7d6:	f805 3b01 	strb.w	r3, [r5], #1
 800c7da:	e7de      	b.n	800c79a <_scanf_i+0x10e>
 800c7dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4650      	mov	r0, sl
 800c7e4:	4798      	blx	r3
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0df      	beq.n	800c7aa <_scanf_i+0x11e>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	05d9      	lsls	r1, r3, #23
 800c7ee:	d50d      	bpl.n	800c80c <_scanf_i+0x180>
 800c7f0:	42bd      	cmp	r5, r7
 800c7f2:	d909      	bls.n	800c808 <_scanf_i+0x17c>
 800c7f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c7f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	4650      	mov	r0, sl
 800c800:	4798      	blx	r3
 800c802:	f105 39ff 	add.w	r9, r5, #4294967295
 800c806:	464d      	mov	r5, r9
 800c808:	42bd      	cmp	r5, r7
 800c80a:	d028      	beq.n	800c85e <_scanf_i+0x1d2>
 800c80c:	6822      	ldr	r2, [r4, #0]
 800c80e:	f012 0210 	ands.w	r2, r2, #16
 800c812:	d113      	bne.n	800c83c <_scanf_i+0x1b0>
 800c814:	702a      	strb	r2, [r5, #0]
 800c816:	6863      	ldr	r3, [r4, #4]
 800c818:	9e01      	ldr	r6, [sp, #4]
 800c81a:	4639      	mov	r1, r7
 800c81c:	4650      	mov	r0, sl
 800c81e:	47b0      	blx	r6
 800c820:	f8d8 3000 	ldr.w	r3, [r8]
 800c824:	6821      	ldr	r1, [r4, #0]
 800c826:	1d1a      	adds	r2, r3, #4
 800c828:	f8c8 2000 	str.w	r2, [r8]
 800c82c:	f011 0f20 	tst.w	r1, #32
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	d00f      	beq.n	800c854 <_scanf_i+0x1c8>
 800c834:	6018      	str	r0, [r3, #0]
 800c836:	68e3      	ldr	r3, [r4, #12]
 800c838:	3301      	adds	r3, #1
 800c83a:	60e3      	str	r3, [r4, #12]
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	1bed      	subs	r5, r5, r7
 800c840:	445d      	add	r5, fp
 800c842:	442b      	add	r3, r5
 800c844:	6123      	str	r3, [r4, #16]
 800c846:	2000      	movs	r0, #0
 800c848:	b007      	add	sp, #28
 800c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	f04f 0b00 	mov.w	fp, #0
 800c852:	e7ca      	b.n	800c7ea <_scanf_i+0x15e>
 800c854:	07ca      	lsls	r2, r1, #31
 800c856:	bf4c      	ite	mi
 800c858:	8018      	strhmi	r0, [r3, #0]
 800c85a:	6018      	strpl	r0, [r3, #0]
 800c85c:	e7eb      	b.n	800c836 <_scanf_i+0x1aa>
 800c85e:	2001      	movs	r0, #1
 800c860:	e7f2      	b.n	800c848 <_scanf_i+0x1bc>
 800c862:	bf00      	nop
 800c864:	0800d770 	.word	0x0800d770
 800c868:	0800bd09 	.word	0x0800bd09
 800c86c:	0800d495 	.word	0x0800d495
 800c870:	0800db2a 	.word	0x0800db2a

0800c874 <__sflush_r>:
 800c874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c87c:	0716      	lsls	r6, r2, #28
 800c87e:	4605      	mov	r5, r0
 800c880:	460c      	mov	r4, r1
 800c882:	d454      	bmi.n	800c92e <__sflush_r+0xba>
 800c884:	684b      	ldr	r3, [r1, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	dc02      	bgt.n	800c890 <__sflush_r+0x1c>
 800c88a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dd48      	ble.n	800c922 <__sflush_r+0xae>
 800c890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c892:	2e00      	cmp	r6, #0
 800c894:	d045      	beq.n	800c922 <__sflush_r+0xae>
 800c896:	2300      	movs	r3, #0
 800c898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c89c:	682f      	ldr	r7, [r5, #0]
 800c89e:	6a21      	ldr	r1, [r4, #32]
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	d030      	beq.n	800c906 <__sflush_r+0x92>
 800c8a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	0759      	lsls	r1, r3, #29
 800c8aa:	d505      	bpl.n	800c8b8 <__sflush_r+0x44>
 800c8ac:	6863      	ldr	r3, [r4, #4]
 800c8ae:	1ad2      	subs	r2, r2, r3
 800c8b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8b2:	b10b      	cbz	r3, 800c8b8 <__sflush_r+0x44>
 800c8b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8b6:	1ad2      	subs	r2, r2, r3
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8bc:	6a21      	ldr	r1, [r4, #32]
 800c8be:	4628      	mov	r0, r5
 800c8c0:	47b0      	blx	r6
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	d106      	bne.n	800c8d6 <__sflush_r+0x62>
 800c8c8:	6829      	ldr	r1, [r5, #0]
 800c8ca:	291d      	cmp	r1, #29
 800c8cc:	d82b      	bhi.n	800c926 <__sflush_r+0xb2>
 800c8ce:	4a2a      	ldr	r2, [pc, #168]	@ (800c978 <__sflush_r+0x104>)
 800c8d0:	410a      	asrs	r2, r1
 800c8d2:	07d6      	lsls	r6, r2, #31
 800c8d4:	d427      	bmi.n	800c926 <__sflush_r+0xb2>
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	6062      	str	r2, [r4, #4]
 800c8da:	04d9      	lsls	r1, r3, #19
 800c8dc:	6922      	ldr	r2, [r4, #16]
 800c8de:	6022      	str	r2, [r4, #0]
 800c8e0:	d504      	bpl.n	800c8ec <__sflush_r+0x78>
 800c8e2:	1c42      	adds	r2, r0, #1
 800c8e4:	d101      	bne.n	800c8ea <__sflush_r+0x76>
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	b903      	cbnz	r3, 800c8ec <__sflush_r+0x78>
 800c8ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800c8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ee:	602f      	str	r7, [r5, #0]
 800c8f0:	b1b9      	cbz	r1, 800c922 <__sflush_r+0xae>
 800c8f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8f6:	4299      	cmp	r1, r3
 800c8f8:	d002      	beq.n	800c900 <__sflush_r+0x8c>
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f7fd fdd0 	bl	800a4a0 <_free_r>
 800c900:	2300      	movs	r3, #0
 800c902:	6363      	str	r3, [r4, #52]	@ 0x34
 800c904:	e00d      	b.n	800c922 <__sflush_r+0xae>
 800c906:	2301      	movs	r3, #1
 800c908:	4628      	mov	r0, r5
 800c90a:	47b0      	blx	r6
 800c90c:	4602      	mov	r2, r0
 800c90e:	1c50      	adds	r0, r2, #1
 800c910:	d1c9      	bne.n	800c8a6 <__sflush_r+0x32>
 800c912:	682b      	ldr	r3, [r5, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d0c6      	beq.n	800c8a6 <__sflush_r+0x32>
 800c918:	2b1d      	cmp	r3, #29
 800c91a:	d001      	beq.n	800c920 <__sflush_r+0xac>
 800c91c:	2b16      	cmp	r3, #22
 800c91e:	d11e      	bne.n	800c95e <__sflush_r+0xea>
 800c920:	602f      	str	r7, [r5, #0]
 800c922:	2000      	movs	r0, #0
 800c924:	e022      	b.n	800c96c <__sflush_r+0xf8>
 800c926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c92a:	b21b      	sxth	r3, r3
 800c92c:	e01b      	b.n	800c966 <__sflush_r+0xf2>
 800c92e:	690f      	ldr	r7, [r1, #16]
 800c930:	2f00      	cmp	r7, #0
 800c932:	d0f6      	beq.n	800c922 <__sflush_r+0xae>
 800c934:	0793      	lsls	r3, r2, #30
 800c936:	680e      	ldr	r6, [r1, #0]
 800c938:	bf08      	it	eq
 800c93a:	694b      	ldreq	r3, [r1, #20]
 800c93c:	600f      	str	r7, [r1, #0]
 800c93e:	bf18      	it	ne
 800c940:	2300      	movne	r3, #0
 800c942:	eba6 0807 	sub.w	r8, r6, r7
 800c946:	608b      	str	r3, [r1, #8]
 800c948:	f1b8 0f00 	cmp.w	r8, #0
 800c94c:	dde9      	ble.n	800c922 <__sflush_r+0xae>
 800c94e:	6a21      	ldr	r1, [r4, #32]
 800c950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c952:	4643      	mov	r3, r8
 800c954:	463a      	mov	r2, r7
 800c956:	4628      	mov	r0, r5
 800c958:	47b0      	blx	r6
 800c95a:	2800      	cmp	r0, #0
 800c95c:	dc08      	bgt.n	800c970 <__sflush_r+0xfc>
 800c95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c966:	81a3      	strh	r3, [r4, #12]
 800c968:	f04f 30ff 	mov.w	r0, #4294967295
 800c96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c970:	4407      	add	r7, r0
 800c972:	eba8 0800 	sub.w	r8, r8, r0
 800c976:	e7e7      	b.n	800c948 <__sflush_r+0xd4>
 800c978:	dfbffffe 	.word	0xdfbffffe

0800c97c <_fflush_r>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	690b      	ldr	r3, [r1, #16]
 800c980:	4605      	mov	r5, r0
 800c982:	460c      	mov	r4, r1
 800c984:	b913      	cbnz	r3, 800c98c <_fflush_r+0x10>
 800c986:	2500      	movs	r5, #0
 800c988:	4628      	mov	r0, r5
 800c98a:	bd38      	pop	{r3, r4, r5, pc}
 800c98c:	b118      	cbz	r0, 800c996 <_fflush_r+0x1a>
 800c98e:	6a03      	ldr	r3, [r0, #32]
 800c990:	b90b      	cbnz	r3, 800c996 <_fflush_r+0x1a>
 800c992:	f7fc fce7 	bl	8009364 <__sinit>
 800c996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0f3      	beq.n	800c986 <_fflush_r+0xa>
 800c99e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9a0:	07d0      	lsls	r0, r2, #31
 800c9a2:	d404      	bmi.n	800c9ae <_fflush_r+0x32>
 800c9a4:	0599      	lsls	r1, r3, #22
 800c9a6:	d402      	bmi.n	800c9ae <_fflush_r+0x32>
 800c9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9aa:	f7fc ff22 	bl	80097f2 <__retarget_lock_acquire_recursive>
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	f7ff ff5f 	bl	800c874 <__sflush_r>
 800c9b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9b8:	07da      	lsls	r2, r3, #31
 800c9ba:	4605      	mov	r5, r0
 800c9bc:	d4e4      	bmi.n	800c988 <_fflush_r+0xc>
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	059b      	lsls	r3, r3, #22
 800c9c2:	d4e1      	bmi.n	800c988 <_fflush_r+0xc>
 800c9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9c6:	f7fc ff15 	bl	80097f4 <__retarget_lock_release_recursive>
 800c9ca:	e7dd      	b.n	800c988 <_fflush_r+0xc>

0800c9cc <__swhatbuf_r>:
 800c9cc:	b570      	push	{r4, r5, r6, lr}
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d4:	2900      	cmp	r1, #0
 800c9d6:	b096      	sub	sp, #88	@ 0x58
 800c9d8:	4615      	mov	r5, r2
 800c9da:	461e      	mov	r6, r3
 800c9dc:	da0d      	bge.n	800c9fa <__swhatbuf_r+0x2e>
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9e4:	f04f 0100 	mov.w	r1, #0
 800c9e8:	bf14      	ite	ne
 800c9ea:	2340      	movne	r3, #64	@ 0x40
 800c9ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	6031      	str	r1, [r6, #0]
 800c9f4:	602b      	str	r3, [r5, #0]
 800c9f6:	b016      	add	sp, #88	@ 0x58
 800c9f8:	bd70      	pop	{r4, r5, r6, pc}
 800c9fa:	466a      	mov	r2, sp
 800c9fc:	f000 f8e8 	bl	800cbd0 <_fstat_r>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	dbec      	blt.n	800c9de <__swhatbuf_r+0x12>
 800ca04:	9901      	ldr	r1, [sp, #4]
 800ca06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca0e:	4259      	negs	r1, r3
 800ca10:	4159      	adcs	r1, r3
 800ca12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca16:	e7eb      	b.n	800c9f0 <__swhatbuf_r+0x24>

0800ca18 <__smakebuf_r>:
 800ca18:	898b      	ldrh	r3, [r1, #12]
 800ca1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca1c:	079d      	lsls	r5, r3, #30
 800ca1e:	4606      	mov	r6, r0
 800ca20:	460c      	mov	r4, r1
 800ca22:	d507      	bpl.n	800ca34 <__smakebuf_r+0x1c>
 800ca24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca28:	6023      	str	r3, [r4, #0]
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	6163      	str	r3, [r4, #20]
 800ca30:	b003      	add	sp, #12
 800ca32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca34:	ab01      	add	r3, sp, #4
 800ca36:	466a      	mov	r2, sp
 800ca38:	f7ff ffc8 	bl	800c9cc <__swhatbuf_r>
 800ca3c:	9f00      	ldr	r7, [sp, #0]
 800ca3e:	4605      	mov	r5, r0
 800ca40:	4639      	mov	r1, r7
 800ca42:	4630      	mov	r0, r6
 800ca44:	f7fd fda0 	bl	800a588 <_malloc_r>
 800ca48:	b948      	cbnz	r0, 800ca5e <__smakebuf_r+0x46>
 800ca4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4e:	059a      	lsls	r2, r3, #22
 800ca50:	d4ee      	bmi.n	800ca30 <__smakebuf_r+0x18>
 800ca52:	f023 0303 	bic.w	r3, r3, #3
 800ca56:	f043 0302 	orr.w	r3, r3, #2
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	e7e2      	b.n	800ca24 <__smakebuf_r+0xc>
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	6020      	str	r0, [r4, #0]
 800ca62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca66:	81a3      	strh	r3, [r4, #12]
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca6e:	b15b      	cbz	r3, 800ca88 <__smakebuf_r+0x70>
 800ca70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca74:	4630      	mov	r0, r6
 800ca76:	f000 f8bd 	bl	800cbf4 <_isatty_r>
 800ca7a:	b128      	cbz	r0, 800ca88 <__smakebuf_r+0x70>
 800ca7c:	89a3      	ldrh	r3, [r4, #12]
 800ca7e:	f023 0303 	bic.w	r3, r3, #3
 800ca82:	f043 0301 	orr.w	r3, r3, #1
 800ca86:	81a3      	strh	r3, [r4, #12]
 800ca88:	89a3      	ldrh	r3, [r4, #12]
 800ca8a:	431d      	orrs	r5, r3
 800ca8c:	81a5      	strh	r5, [r4, #12]
 800ca8e:	e7cf      	b.n	800ca30 <__smakebuf_r+0x18>

0800ca90 <__sccl>:
 800ca90:	b570      	push	{r4, r5, r6, lr}
 800ca92:	780b      	ldrb	r3, [r1, #0]
 800ca94:	4604      	mov	r4, r0
 800ca96:	2b5e      	cmp	r3, #94	@ 0x5e
 800ca98:	bf0b      	itete	eq
 800ca9a:	784b      	ldrbeq	r3, [r1, #1]
 800ca9c:	1c4a      	addne	r2, r1, #1
 800ca9e:	1c8a      	addeq	r2, r1, #2
 800caa0:	2100      	movne	r1, #0
 800caa2:	bf08      	it	eq
 800caa4:	2101      	moveq	r1, #1
 800caa6:	3801      	subs	r0, #1
 800caa8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800caac:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cab0:	42a8      	cmp	r0, r5
 800cab2:	d1fb      	bne.n	800caac <__sccl+0x1c>
 800cab4:	b90b      	cbnz	r3, 800caba <__sccl+0x2a>
 800cab6:	1e50      	subs	r0, r2, #1
 800cab8:	bd70      	pop	{r4, r5, r6, pc}
 800caba:	f081 0101 	eor.w	r1, r1, #1
 800cabe:	54e1      	strb	r1, [r4, r3]
 800cac0:	4610      	mov	r0, r2
 800cac2:	4602      	mov	r2, r0
 800cac4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cac8:	2d2d      	cmp	r5, #45	@ 0x2d
 800caca:	d005      	beq.n	800cad8 <__sccl+0x48>
 800cacc:	2d5d      	cmp	r5, #93	@ 0x5d
 800cace:	d016      	beq.n	800cafe <__sccl+0x6e>
 800cad0:	2d00      	cmp	r5, #0
 800cad2:	d0f1      	beq.n	800cab8 <__sccl+0x28>
 800cad4:	462b      	mov	r3, r5
 800cad6:	e7f2      	b.n	800cabe <__sccl+0x2e>
 800cad8:	7846      	ldrb	r6, [r0, #1]
 800cada:	2e5d      	cmp	r6, #93	@ 0x5d
 800cadc:	d0fa      	beq.n	800cad4 <__sccl+0x44>
 800cade:	42b3      	cmp	r3, r6
 800cae0:	dcf8      	bgt.n	800cad4 <__sccl+0x44>
 800cae2:	3002      	adds	r0, #2
 800cae4:	461a      	mov	r2, r3
 800cae6:	3201      	adds	r2, #1
 800cae8:	4296      	cmp	r6, r2
 800caea:	54a1      	strb	r1, [r4, r2]
 800caec:	dcfb      	bgt.n	800cae6 <__sccl+0x56>
 800caee:	1af2      	subs	r2, r6, r3
 800caf0:	3a01      	subs	r2, #1
 800caf2:	1c5d      	adds	r5, r3, #1
 800caf4:	42b3      	cmp	r3, r6
 800caf6:	bfa8      	it	ge
 800caf8:	2200      	movge	r2, #0
 800cafa:	18ab      	adds	r3, r5, r2
 800cafc:	e7e1      	b.n	800cac2 <__sccl+0x32>
 800cafe:	4610      	mov	r0, r2
 800cb00:	e7da      	b.n	800cab8 <__sccl+0x28>

0800cb02 <__submore>:
 800cb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb06:	460c      	mov	r4, r1
 800cb08:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cb0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	d11d      	bne.n	800cb4e <__submore+0x4c>
 800cb12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cb16:	f7fd fd37 	bl	800a588 <_malloc_r>
 800cb1a:	b918      	cbnz	r0, 800cb24 <__submore+0x22>
 800cb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb28:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cb2a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cb2e:	6360      	str	r0, [r4, #52]	@ 0x34
 800cb30:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cb34:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cb38:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800cb3c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cb40:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800cb44:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cb48:	6020      	str	r0, [r4, #0]
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	e7e8      	b.n	800cb20 <__submore+0x1e>
 800cb4e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cb50:	0077      	lsls	r7, r6, #1
 800cb52:	463a      	mov	r2, r7
 800cb54:	f000 fc01 	bl	800d35a <_realloc_r>
 800cb58:	4605      	mov	r5, r0
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0de      	beq.n	800cb1c <__submore+0x1a>
 800cb5e:	eb00 0806 	add.w	r8, r0, r6
 800cb62:	4601      	mov	r1, r0
 800cb64:	4632      	mov	r2, r6
 800cb66:	4640      	mov	r0, r8
 800cb68:	f000 f864 	bl	800cc34 <memcpy>
 800cb6c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cb70:	f8c4 8000 	str.w	r8, [r4]
 800cb74:	e7e9      	b.n	800cb4a <__submore+0x48>

0800cb76 <memmove>:
 800cb76:	4288      	cmp	r0, r1
 800cb78:	b510      	push	{r4, lr}
 800cb7a:	eb01 0402 	add.w	r4, r1, r2
 800cb7e:	d902      	bls.n	800cb86 <memmove+0x10>
 800cb80:	4284      	cmp	r4, r0
 800cb82:	4623      	mov	r3, r4
 800cb84:	d807      	bhi.n	800cb96 <memmove+0x20>
 800cb86:	1e43      	subs	r3, r0, #1
 800cb88:	42a1      	cmp	r1, r4
 800cb8a:	d008      	beq.n	800cb9e <memmove+0x28>
 800cb8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb90:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb94:	e7f8      	b.n	800cb88 <memmove+0x12>
 800cb96:	4402      	add	r2, r0
 800cb98:	4601      	mov	r1, r0
 800cb9a:	428a      	cmp	r2, r1
 800cb9c:	d100      	bne.n	800cba0 <memmove+0x2a>
 800cb9e:	bd10      	pop	{r4, pc}
 800cba0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cba4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cba8:	e7f7      	b.n	800cb9a <memmove+0x24>

0800cbaa <strncmp>:
 800cbaa:	b510      	push	{r4, lr}
 800cbac:	b16a      	cbz	r2, 800cbca <strncmp+0x20>
 800cbae:	3901      	subs	r1, #1
 800cbb0:	1884      	adds	r4, r0, r2
 800cbb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbb6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d103      	bne.n	800cbc6 <strncmp+0x1c>
 800cbbe:	42a0      	cmp	r0, r4
 800cbc0:	d001      	beq.n	800cbc6 <strncmp+0x1c>
 800cbc2:	2a00      	cmp	r2, #0
 800cbc4:	d1f5      	bne.n	800cbb2 <strncmp+0x8>
 800cbc6:	1ad0      	subs	r0, r2, r3
 800cbc8:	bd10      	pop	{r4, pc}
 800cbca:	4610      	mov	r0, r2
 800cbcc:	e7fc      	b.n	800cbc8 <strncmp+0x1e>
	...

0800cbd0 <_fstat_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d07      	ldr	r5, [pc, #28]	@ (800cbf0 <_fstat_r+0x20>)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	4608      	mov	r0, r1
 800cbda:	4611      	mov	r1, r2
 800cbdc:	602b      	str	r3, [r5, #0]
 800cbde:	f7f6 fa27 	bl	8003030 <_fstat>
 800cbe2:	1c43      	adds	r3, r0, #1
 800cbe4:	d102      	bne.n	800cbec <_fstat_r+0x1c>
 800cbe6:	682b      	ldr	r3, [r5, #0]
 800cbe8:	b103      	cbz	r3, 800cbec <_fstat_r+0x1c>
 800cbea:	6023      	str	r3, [r4, #0]
 800cbec:	bd38      	pop	{r3, r4, r5, pc}
 800cbee:	bf00      	nop
 800cbf0:	200005f8 	.word	0x200005f8

0800cbf4 <_isatty_r>:
 800cbf4:	b538      	push	{r3, r4, r5, lr}
 800cbf6:	4d06      	ldr	r5, [pc, #24]	@ (800cc10 <_isatty_r+0x1c>)
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	4608      	mov	r0, r1
 800cbfe:	602b      	str	r3, [r5, #0]
 800cc00:	f7f6 fa26 	bl	8003050 <_isatty>
 800cc04:	1c43      	adds	r3, r0, #1
 800cc06:	d102      	bne.n	800cc0e <_isatty_r+0x1a>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	b103      	cbz	r3, 800cc0e <_isatty_r+0x1a>
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
 800cc10:	200005f8 	.word	0x200005f8

0800cc14 <_sbrk_r>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	4d06      	ldr	r5, [pc, #24]	@ (800cc30 <_sbrk_r+0x1c>)
 800cc18:	2300      	movs	r3, #0
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	4608      	mov	r0, r1
 800cc1e:	602b      	str	r3, [r5, #0]
 800cc20:	f7f6 fa2e 	bl	8003080 <_sbrk>
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	d102      	bne.n	800cc2e <_sbrk_r+0x1a>
 800cc28:	682b      	ldr	r3, [r5, #0]
 800cc2a:	b103      	cbz	r3, 800cc2e <_sbrk_r+0x1a>
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	200005f8 	.word	0x200005f8

0800cc34 <memcpy>:
 800cc34:	440a      	add	r2, r1
 800cc36:	4291      	cmp	r1, r2
 800cc38:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc3c:	d100      	bne.n	800cc40 <memcpy+0xc>
 800cc3e:	4770      	bx	lr
 800cc40:	b510      	push	{r4, lr}
 800cc42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc4a:	4291      	cmp	r1, r2
 800cc4c:	d1f9      	bne.n	800cc42 <memcpy+0xe>
 800cc4e:	bd10      	pop	{r4, pc}

0800cc50 <nan>:
 800cc50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cc58 <nan+0x8>
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	00000000 	.word	0x00000000
 800cc5c:	7ff80000 	.word	0x7ff80000

0800cc60 <__assert_func>:
 800cc60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc62:	4614      	mov	r4, r2
 800cc64:	461a      	mov	r2, r3
 800cc66:	4b09      	ldr	r3, [pc, #36]	@ (800cc8c <__assert_func+0x2c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	68d8      	ldr	r0, [r3, #12]
 800cc6e:	b954      	cbnz	r4, 800cc86 <__assert_func+0x26>
 800cc70:	4b07      	ldr	r3, [pc, #28]	@ (800cc90 <__assert_func+0x30>)
 800cc72:	461c      	mov	r4, r3
 800cc74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc78:	9100      	str	r1, [sp, #0]
 800cc7a:	462b      	mov	r3, r5
 800cc7c:	4905      	ldr	r1, [pc, #20]	@ (800cc94 <__assert_func+0x34>)
 800cc7e:	f000 fc19 	bl	800d4b4 <fiprintf>
 800cc82:	f000 fc29 	bl	800d4d8 <abort>
 800cc86:	4b04      	ldr	r3, [pc, #16]	@ (800cc98 <__assert_func+0x38>)
 800cc88:	e7f4      	b.n	800cc74 <__assert_func+0x14>
 800cc8a:	bf00      	nop
 800cc8c:	20000090 	.word	0x20000090
 800cc90:	0800db78 	.word	0x0800db78
 800cc94:	0800db4a 	.word	0x0800db4a
 800cc98:	0800db3d 	.word	0x0800db3d

0800cc9c <_calloc_r>:
 800cc9c:	b570      	push	{r4, r5, r6, lr}
 800cc9e:	fba1 5402 	umull	r5, r4, r1, r2
 800cca2:	b93c      	cbnz	r4, 800ccb4 <_calloc_r+0x18>
 800cca4:	4629      	mov	r1, r5
 800cca6:	f7fd fc6f 	bl	800a588 <_malloc_r>
 800ccaa:	4606      	mov	r6, r0
 800ccac:	b928      	cbnz	r0, 800ccba <_calloc_r+0x1e>
 800ccae:	2600      	movs	r6, #0
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	bd70      	pop	{r4, r5, r6, pc}
 800ccb4:	220c      	movs	r2, #12
 800ccb6:	6002      	str	r2, [r0, #0]
 800ccb8:	e7f9      	b.n	800ccae <_calloc_r+0x12>
 800ccba:	462a      	mov	r2, r5
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	f7fc fd1b 	bl	80096f8 <memset>
 800ccc2:	e7f5      	b.n	800ccb0 <_calloc_r+0x14>

0800ccc4 <rshift>:
 800ccc4:	6903      	ldr	r3, [r0, #16]
 800ccc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ccca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ccd2:	f100 0414 	add.w	r4, r0, #20
 800ccd6:	dd45      	ble.n	800cd64 <rshift+0xa0>
 800ccd8:	f011 011f 	ands.w	r1, r1, #31
 800ccdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cce0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cce4:	d10c      	bne.n	800cd00 <rshift+0x3c>
 800cce6:	f100 0710 	add.w	r7, r0, #16
 800ccea:	4629      	mov	r1, r5
 800ccec:	42b1      	cmp	r1, r6
 800ccee:	d334      	bcc.n	800cd5a <rshift+0x96>
 800ccf0:	1a9b      	subs	r3, r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	1eea      	subs	r2, r5, #3
 800ccf6:	4296      	cmp	r6, r2
 800ccf8:	bf38      	it	cc
 800ccfa:	2300      	movcc	r3, #0
 800ccfc:	4423      	add	r3, r4
 800ccfe:	e015      	b.n	800cd2c <rshift+0x68>
 800cd00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cd04:	f1c1 0820 	rsb	r8, r1, #32
 800cd08:	40cf      	lsrs	r7, r1
 800cd0a:	f105 0e04 	add.w	lr, r5, #4
 800cd0e:	46a1      	mov	r9, r4
 800cd10:	4576      	cmp	r6, lr
 800cd12:	46f4      	mov	ip, lr
 800cd14:	d815      	bhi.n	800cd42 <rshift+0x7e>
 800cd16:	1a9a      	subs	r2, r3, r2
 800cd18:	0092      	lsls	r2, r2, #2
 800cd1a:	3a04      	subs	r2, #4
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	42ae      	cmp	r6, r5
 800cd20:	bf38      	it	cc
 800cd22:	2200      	movcc	r2, #0
 800cd24:	18a3      	adds	r3, r4, r2
 800cd26:	50a7      	str	r7, [r4, r2]
 800cd28:	b107      	cbz	r7, 800cd2c <rshift+0x68>
 800cd2a:	3304      	adds	r3, #4
 800cd2c:	1b1a      	subs	r2, r3, r4
 800cd2e:	42a3      	cmp	r3, r4
 800cd30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cd34:	bf08      	it	eq
 800cd36:	2300      	moveq	r3, #0
 800cd38:	6102      	str	r2, [r0, #16]
 800cd3a:	bf08      	it	eq
 800cd3c:	6143      	streq	r3, [r0, #20]
 800cd3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd42:	f8dc c000 	ldr.w	ip, [ip]
 800cd46:	fa0c fc08 	lsl.w	ip, ip, r8
 800cd4a:	ea4c 0707 	orr.w	r7, ip, r7
 800cd4e:	f849 7b04 	str.w	r7, [r9], #4
 800cd52:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd56:	40cf      	lsrs	r7, r1
 800cd58:	e7da      	b.n	800cd10 <rshift+0x4c>
 800cd5a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd5e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd62:	e7c3      	b.n	800ccec <rshift+0x28>
 800cd64:	4623      	mov	r3, r4
 800cd66:	e7e1      	b.n	800cd2c <rshift+0x68>

0800cd68 <__hexdig_fun>:
 800cd68:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cd6c:	2b09      	cmp	r3, #9
 800cd6e:	d802      	bhi.n	800cd76 <__hexdig_fun+0xe>
 800cd70:	3820      	subs	r0, #32
 800cd72:	b2c0      	uxtb	r0, r0
 800cd74:	4770      	bx	lr
 800cd76:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cd7a:	2b05      	cmp	r3, #5
 800cd7c:	d801      	bhi.n	800cd82 <__hexdig_fun+0x1a>
 800cd7e:	3847      	subs	r0, #71	@ 0x47
 800cd80:	e7f7      	b.n	800cd72 <__hexdig_fun+0xa>
 800cd82:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cd86:	2b05      	cmp	r3, #5
 800cd88:	d801      	bhi.n	800cd8e <__hexdig_fun+0x26>
 800cd8a:	3827      	subs	r0, #39	@ 0x27
 800cd8c:	e7f1      	b.n	800cd72 <__hexdig_fun+0xa>
 800cd8e:	2000      	movs	r0, #0
 800cd90:	4770      	bx	lr
	...

0800cd94 <__gethex>:
 800cd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd98:	b085      	sub	sp, #20
 800cd9a:	468a      	mov	sl, r1
 800cd9c:	9302      	str	r3, [sp, #8]
 800cd9e:	680b      	ldr	r3, [r1, #0]
 800cda0:	9001      	str	r0, [sp, #4]
 800cda2:	4690      	mov	r8, r2
 800cda4:	1c9c      	adds	r4, r3, #2
 800cda6:	46a1      	mov	r9, r4
 800cda8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cdac:	2830      	cmp	r0, #48	@ 0x30
 800cdae:	d0fa      	beq.n	800cda6 <__gethex+0x12>
 800cdb0:	eba9 0303 	sub.w	r3, r9, r3
 800cdb4:	f1a3 0b02 	sub.w	fp, r3, #2
 800cdb8:	f7ff ffd6 	bl	800cd68 <__hexdig_fun>
 800cdbc:	4605      	mov	r5, r0
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d168      	bne.n	800ce94 <__gethex+0x100>
 800cdc2:	49a0      	ldr	r1, [pc, #640]	@ (800d044 <__gethex+0x2b0>)
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	4648      	mov	r0, r9
 800cdc8:	f7ff feef 	bl	800cbaa <strncmp>
 800cdcc:	4607      	mov	r7, r0
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d167      	bne.n	800cea2 <__gethex+0x10e>
 800cdd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cdd6:	4626      	mov	r6, r4
 800cdd8:	f7ff ffc6 	bl	800cd68 <__hexdig_fun>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d062      	beq.n	800cea6 <__gethex+0x112>
 800cde0:	4623      	mov	r3, r4
 800cde2:	7818      	ldrb	r0, [r3, #0]
 800cde4:	2830      	cmp	r0, #48	@ 0x30
 800cde6:	4699      	mov	r9, r3
 800cde8:	f103 0301 	add.w	r3, r3, #1
 800cdec:	d0f9      	beq.n	800cde2 <__gethex+0x4e>
 800cdee:	f7ff ffbb 	bl	800cd68 <__hexdig_fun>
 800cdf2:	fab0 f580 	clz	r5, r0
 800cdf6:	096d      	lsrs	r5, r5, #5
 800cdf8:	f04f 0b01 	mov.w	fp, #1
 800cdfc:	464a      	mov	r2, r9
 800cdfe:	4616      	mov	r6, r2
 800ce00:	3201      	adds	r2, #1
 800ce02:	7830      	ldrb	r0, [r6, #0]
 800ce04:	f7ff ffb0 	bl	800cd68 <__hexdig_fun>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d1f8      	bne.n	800cdfe <__gethex+0x6a>
 800ce0c:	498d      	ldr	r1, [pc, #564]	@ (800d044 <__gethex+0x2b0>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7ff feca 	bl	800cbaa <strncmp>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d13f      	bne.n	800ce9a <__gethex+0x106>
 800ce1a:	b944      	cbnz	r4, 800ce2e <__gethex+0x9a>
 800ce1c:	1c74      	adds	r4, r6, #1
 800ce1e:	4622      	mov	r2, r4
 800ce20:	4616      	mov	r6, r2
 800ce22:	3201      	adds	r2, #1
 800ce24:	7830      	ldrb	r0, [r6, #0]
 800ce26:	f7ff ff9f 	bl	800cd68 <__hexdig_fun>
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d1f8      	bne.n	800ce20 <__gethex+0x8c>
 800ce2e:	1ba4      	subs	r4, r4, r6
 800ce30:	00a7      	lsls	r7, r4, #2
 800ce32:	7833      	ldrb	r3, [r6, #0]
 800ce34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ce38:	2b50      	cmp	r3, #80	@ 0x50
 800ce3a:	d13e      	bne.n	800ceba <__gethex+0x126>
 800ce3c:	7873      	ldrb	r3, [r6, #1]
 800ce3e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ce40:	d033      	beq.n	800ceaa <__gethex+0x116>
 800ce42:	2b2d      	cmp	r3, #45	@ 0x2d
 800ce44:	d034      	beq.n	800ceb0 <__gethex+0x11c>
 800ce46:	1c71      	adds	r1, r6, #1
 800ce48:	2400      	movs	r4, #0
 800ce4a:	7808      	ldrb	r0, [r1, #0]
 800ce4c:	f7ff ff8c 	bl	800cd68 <__hexdig_fun>
 800ce50:	1e43      	subs	r3, r0, #1
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b18      	cmp	r3, #24
 800ce56:	d830      	bhi.n	800ceba <__gethex+0x126>
 800ce58:	f1a0 0210 	sub.w	r2, r0, #16
 800ce5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce60:	f7ff ff82 	bl	800cd68 <__hexdig_fun>
 800ce64:	f100 3cff 	add.w	ip, r0, #4294967295
 800ce68:	fa5f fc8c 	uxtb.w	ip, ip
 800ce6c:	f1bc 0f18 	cmp.w	ip, #24
 800ce70:	f04f 030a 	mov.w	r3, #10
 800ce74:	d91e      	bls.n	800ceb4 <__gethex+0x120>
 800ce76:	b104      	cbz	r4, 800ce7a <__gethex+0xe6>
 800ce78:	4252      	negs	r2, r2
 800ce7a:	4417      	add	r7, r2
 800ce7c:	f8ca 1000 	str.w	r1, [sl]
 800ce80:	b1ed      	cbz	r5, 800cebe <__gethex+0x12a>
 800ce82:	f1bb 0f00 	cmp.w	fp, #0
 800ce86:	bf0c      	ite	eq
 800ce88:	2506      	moveq	r5, #6
 800ce8a:	2500      	movne	r5, #0
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	b005      	add	sp, #20
 800ce90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce94:	2500      	movs	r5, #0
 800ce96:	462c      	mov	r4, r5
 800ce98:	e7b0      	b.n	800cdfc <__gethex+0x68>
 800ce9a:	2c00      	cmp	r4, #0
 800ce9c:	d1c7      	bne.n	800ce2e <__gethex+0x9a>
 800ce9e:	4627      	mov	r7, r4
 800cea0:	e7c7      	b.n	800ce32 <__gethex+0x9e>
 800cea2:	464e      	mov	r6, r9
 800cea4:	462f      	mov	r7, r5
 800cea6:	2501      	movs	r5, #1
 800cea8:	e7c3      	b.n	800ce32 <__gethex+0x9e>
 800ceaa:	2400      	movs	r4, #0
 800ceac:	1cb1      	adds	r1, r6, #2
 800ceae:	e7cc      	b.n	800ce4a <__gethex+0xb6>
 800ceb0:	2401      	movs	r4, #1
 800ceb2:	e7fb      	b.n	800ceac <__gethex+0x118>
 800ceb4:	fb03 0002 	mla	r0, r3, r2, r0
 800ceb8:	e7ce      	b.n	800ce58 <__gethex+0xc4>
 800ceba:	4631      	mov	r1, r6
 800cebc:	e7de      	b.n	800ce7c <__gethex+0xe8>
 800cebe:	eba6 0309 	sub.w	r3, r6, r9
 800cec2:	3b01      	subs	r3, #1
 800cec4:	4629      	mov	r1, r5
 800cec6:	2b07      	cmp	r3, #7
 800cec8:	dc0a      	bgt.n	800cee0 <__gethex+0x14c>
 800ceca:	9801      	ldr	r0, [sp, #4]
 800cecc:	f7fd fbe8 	bl	800a6a0 <_Balloc>
 800ced0:	4604      	mov	r4, r0
 800ced2:	b940      	cbnz	r0, 800cee6 <__gethex+0x152>
 800ced4:	4b5c      	ldr	r3, [pc, #368]	@ (800d048 <__gethex+0x2b4>)
 800ced6:	4602      	mov	r2, r0
 800ced8:	21e4      	movs	r1, #228	@ 0xe4
 800ceda:	485c      	ldr	r0, [pc, #368]	@ (800d04c <__gethex+0x2b8>)
 800cedc:	f7ff fec0 	bl	800cc60 <__assert_func>
 800cee0:	3101      	adds	r1, #1
 800cee2:	105b      	asrs	r3, r3, #1
 800cee4:	e7ef      	b.n	800cec6 <__gethex+0x132>
 800cee6:	f100 0a14 	add.w	sl, r0, #20
 800ceea:	2300      	movs	r3, #0
 800ceec:	4655      	mov	r5, sl
 800ceee:	469b      	mov	fp, r3
 800cef0:	45b1      	cmp	r9, r6
 800cef2:	d337      	bcc.n	800cf64 <__gethex+0x1d0>
 800cef4:	f845 bb04 	str.w	fp, [r5], #4
 800cef8:	eba5 050a 	sub.w	r5, r5, sl
 800cefc:	10ad      	asrs	r5, r5, #2
 800cefe:	6125      	str	r5, [r4, #16]
 800cf00:	4658      	mov	r0, fp
 800cf02:	f7fd fcbf 	bl	800a884 <__hi0bits>
 800cf06:	016d      	lsls	r5, r5, #5
 800cf08:	f8d8 6000 	ldr.w	r6, [r8]
 800cf0c:	1a2d      	subs	r5, r5, r0
 800cf0e:	42b5      	cmp	r5, r6
 800cf10:	dd54      	ble.n	800cfbc <__gethex+0x228>
 800cf12:	1bad      	subs	r5, r5, r6
 800cf14:	4629      	mov	r1, r5
 800cf16:	4620      	mov	r0, r4
 800cf18:	f7fe f853 	bl	800afc2 <__any_on>
 800cf1c:	4681      	mov	r9, r0
 800cf1e:	b178      	cbz	r0, 800cf40 <__gethex+0x1ac>
 800cf20:	1e6b      	subs	r3, r5, #1
 800cf22:	1159      	asrs	r1, r3, #5
 800cf24:	f003 021f 	and.w	r2, r3, #31
 800cf28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cf2c:	f04f 0901 	mov.w	r9, #1
 800cf30:	fa09 f202 	lsl.w	r2, r9, r2
 800cf34:	420a      	tst	r2, r1
 800cf36:	d003      	beq.n	800cf40 <__gethex+0x1ac>
 800cf38:	454b      	cmp	r3, r9
 800cf3a:	dc36      	bgt.n	800cfaa <__gethex+0x216>
 800cf3c:	f04f 0902 	mov.w	r9, #2
 800cf40:	4629      	mov	r1, r5
 800cf42:	4620      	mov	r0, r4
 800cf44:	f7ff febe 	bl	800ccc4 <rshift>
 800cf48:	442f      	add	r7, r5
 800cf4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf4e:	42bb      	cmp	r3, r7
 800cf50:	da42      	bge.n	800cfd8 <__gethex+0x244>
 800cf52:	9801      	ldr	r0, [sp, #4]
 800cf54:	4621      	mov	r1, r4
 800cf56:	f7fd fbe3 	bl	800a720 <_Bfree>
 800cf5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	6013      	str	r3, [r2, #0]
 800cf60:	25a3      	movs	r5, #163	@ 0xa3
 800cf62:	e793      	b.n	800ce8c <__gethex+0xf8>
 800cf64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cf68:	2a2e      	cmp	r2, #46	@ 0x2e
 800cf6a:	d012      	beq.n	800cf92 <__gethex+0x1fe>
 800cf6c:	2b20      	cmp	r3, #32
 800cf6e:	d104      	bne.n	800cf7a <__gethex+0x1e6>
 800cf70:	f845 bb04 	str.w	fp, [r5], #4
 800cf74:	f04f 0b00 	mov.w	fp, #0
 800cf78:	465b      	mov	r3, fp
 800cf7a:	7830      	ldrb	r0, [r6, #0]
 800cf7c:	9303      	str	r3, [sp, #12]
 800cf7e:	f7ff fef3 	bl	800cd68 <__hexdig_fun>
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	f000 000f 	and.w	r0, r0, #15
 800cf88:	4098      	lsls	r0, r3
 800cf8a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cf8e:	3304      	adds	r3, #4
 800cf90:	e7ae      	b.n	800cef0 <__gethex+0x15c>
 800cf92:	45b1      	cmp	r9, r6
 800cf94:	d8ea      	bhi.n	800cf6c <__gethex+0x1d8>
 800cf96:	492b      	ldr	r1, [pc, #172]	@ (800d044 <__gethex+0x2b0>)
 800cf98:	9303      	str	r3, [sp, #12]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f7ff fe04 	bl	800cbaa <strncmp>
 800cfa2:	9b03      	ldr	r3, [sp, #12]
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d1e1      	bne.n	800cf6c <__gethex+0x1d8>
 800cfa8:	e7a2      	b.n	800cef0 <__gethex+0x15c>
 800cfaa:	1ea9      	subs	r1, r5, #2
 800cfac:	4620      	mov	r0, r4
 800cfae:	f7fe f808 	bl	800afc2 <__any_on>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d0c2      	beq.n	800cf3c <__gethex+0x1a8>
 800cfb6:	f04f 0903 	mov.w	r9, #3
 800cfba:	e7c1      	b.n	800cf40 <__gethex+0x1ac>
 800cfbc:	da09      	bge.n	800cfd2 <__gethex+0x23e>
 800cfbe:	1b75      	subs	r5, r6, r5
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	9801      	ldr	r0, [sp, #4]
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	f7fd fdc3 	bl	800ab50 <__lshift>
 800cfca:	1b7f      	subs	r7, r7, r5
 800cfcc:	4604      	mov	r4, r0
 800cfce:	f100 0a14 	add.w	sl, r0, #20
 800cfd2:	f04f 0900 	mov.w	r9, #0
 800cfd6:	e7b8      	b.n	800cf4a <__gethex+0x1b6>
 800cfd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cfdc:	42bd      	cmp	r5, r7
 800cfde:	dd6f      	ble.n	800d0c0 <__gethex+0x32c>
 800cfe0:	1bed      	subs	r5, r5, r7
 800cfe2:	42ae      	cmp	r6, r5
 800cfe4:	dc34      	bgt.n	800d050 <__gethex+0x2bc>
 800cfe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d022      	beq.n	800d034 <__gethex+0x2a0>
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d024      	beq.n	800d03c <__gethex+0x2a8>
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d115      	bne.n	800d022 <__gethex+0x28e>
 800cff6:	42ae      	cmp	r6, r5
 800cff8:	d113      	bne.n	800d022 <__gethex+0x28e>
 800cffa:	2e01      	cmp	r6, #1
 800cffc:	d10b      	bne.n	800d016 <__gethex+0x282>
 800cffe:	9a02      	ldr	r2, [sp, #8]
 800d000:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d004:	6013      	str	r3, [r2, #0]
 800d006:	2301      	movs	r3, #1
 800d008:	6123      	str	r3, [r4, #16]
 800d00a:	f8ca 3000 	str.w	r3, [sl]
 800d00e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d010:	2562      	movs	r5, #98	@ 0x62
 800d012:	601c      	str	r4, [r3, #0]
 800d014:	e73a      	b.n	800ce8c <__gethex+0xf8>
 800d016:	1e71      	subs	r1, r6, #1
 800d018:	4620      	mov	r0, r4
 800d01a:	f7fd ffd2 	bl	800afc2 <__any_on>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d1ed      	bne.n	800cffe <__gethex+0x26a>
 800d022:	9801      	ldr	r0, [sp, #4]
 800d024:	4621      	mov	r1, r4
 800d026:	f7fd fb7b 	bl	800a720 <_Bfree>
 800d02a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d02c:	2300      	movs	r3, #0
 800d02e:	6013      	str	r3, [r2, #0]
 800d030:	2550      	movs	r5, #80	@ 0x50
 800d032:	e72b      	b.n	800ce8c <__gethex+0xf8>
 800d034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1f3      	bne.n	800d022 <__gethex+0x28e>
 800d03a:	e7e0      	b.n	800cffe <__gethex+0x26a>
 800d03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1dd      	bne.n	800cffe <__gethex+0x26a>
 800d042:	e7ee      	b.n	800d022 <__gethex+0x28e>
 800d044:	0800d9b0 	.word	0x0800d9b0
 800d048:	0800d847 	.word	0x0800d847
 800d04c:	0800db79 	.word	0x0800db79
 800d050:	1e6f      	subs	r7, r5, #1
 800d052:	f1b9 0f00 	cmp.w	r9, #0
 800d056:	d130      	bne.n	800d0ba <__gethex+0x326>
 800d058:	b127      	cbz	r7, 800d064 <__gethex+0x2d0>
 800d05a:	4639      	mov	r1, r7
 800d05c:	4620      	mov	r0, r4
 800d05e:	f7fd ffb0 	bl	800afc2 <__any_on>
 800d062:	4681      	mov	r9, r0
 800d064:	117a      	asrs	r2, r7, #5
 800d066:	2301      	movs	r3, #1
 800d068:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d06c:	f007 071f 	and.w	r7, r7, #31
 800d070:	40bb      	lsls	r3, r7
 800d072:	4213      	tst	r3, r2
 800d074:	4629      	mov	r1, r5
 800d076:	4620      	mov	r0, r4
 800d078:	bf18      	it	ne
 800d07a:	f049 0902 	orrne.w	r9, r9, #2
 800d07e:	f7ff fe21 	bl	800ccc4 <rshift>
 800d082:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d086:	1b76      	subs	r6, r6, r5
 800d088:	2502      	movs	r5, #2
 800d08a:	f1b9 0f00 	cmp.w	r9, #0
 800d08e:	d047      	beq.n	800d120 <__gethex+0x38c>
 800d090:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d015      	beq.n	800d0c4 <__gethex+0x330>
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d017      	beq.n	800d0cc <__gethex+0x338>
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d109      	bne.n	800d0b4 <__gethex+0x320>
 800d0a0:	f019 0f02 	tst.w	r9, #2
 800d0a4:	d006      	beq.n	800d0b4 <__gethex+0x320>
 800d0a6:	f8da 3000 	ldr.w	r3, [sl]
 800d0aa:	ea49 0903 	orr.w	r9, r9, r3
 800d0ae:	f019 0f01 	tst.w	r9, #1
 800d0b2:	d10e      	bne.n	800d0d2 <__gethex+0x33e>
 800d0b4:	f045 0510 	orr.w	r5, r5, #16
 800d0b8:	e032      	b.n	800d120 <__gethex+0x38c>
 800d0ba:	f04f 0901 	mov.w	r9, #1
 800d0be:	e7d1      	b.n	800d064 <__gethex+0x2d0>
 800d0c0:	2501      	movs	r5, #1
 800d0c2:	e7e2      	b.n	800d08a <__gethex+0x2f6>
 800d0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0c6:	f1c3 0301 	rsb	r3, r3, #1
 800d0ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0f0      	beq.n	800d0b4 <__gethex+0x320>
 800d0d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0d6:	f104 0314 	add.w	r3, r4, #20
 800d0da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d0de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d0e2:	f04f 0c00 	mov.w	ip, #0
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0f0:	d01b      	beq.n	800d12a <__gethex+0x396>
 800d0f2:	3201      	adds	r2, #1
 800d0f4:	6002      	str	r2, [r0, #0]
 800d0f6:	2d02      	cmp	r5, #2
 800d0f8:	f104 0314 	add.w	r3, r4, #20
 800d0fc:	d13c      	bne.n	800d178 <__gethex+0x3e4>
 800d0fe:	f8d8 2000 	ldr.w	r2, [r8]
 800d102:	3a01      	subs	r2, #1
 800d104:	42b2      	cmp	r2, r6
 800d106:	d109      	bne.n	800d11c <__gethex+0x388>
 800d108:	1171      	asrs	r1, r6, #5
 800d10a:	2201      	movs	r2, #1
 800d10c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d110:	f006 061f 	and.w	r6, r6, #31
 800d114:	fa02 f606 	lsl.w	r6, r2, r6
 800d118:	421e      	tst	r6, r3
 800d11a:	d13a      	bne.n	800d192 <__gethex+0x3fe>
 800d11c:	f045 0520 	orr.w	r5, r5, #32
 800d120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d122:	601c      	str	r4, [r3, #0]
 800d124:	9b02      	ldr	r3, [sp, #8]
 800d126:	601f      	str	r7, [r3, #0]
 800d128:	e6b0      	b.n	800ce8c <__gethex+0xf8>
 800d12a:	4299      	cmp	r1, r3
 800d12c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d130:	d8d9      	bhi.n	800d0e6 <__gethex+0x352>
 800d132:	68a3      	ldr	r3, [r4, #8]
 800d134:	459b      	cmp	fp, r3
 800d136:	db17      	blt.n	800d168 <__gethex+0x3d4>
 800d138:	6861      	ldr	r1, [r4, #4]
 800d13a:	9801      	ldr	r0, [sp, #4]
 800d13c:	3101      	adds	r1, #1
 800d13e:	f7fd faaf 	bl	800a6a0 <_Balloc>
 800d142:	4681      	mov	r9, r0
 800d144:	b918      	cbnz	r0, 800d14e <__gethex+0x3ba>
 800d146:	4b1a      	ldr	r3, [pc, #104]	@ (800d1b0 <__gethex+0x41c>)
 800d148:	4602      	mov	r2, r0
 800d14a:	2184      	movs	r1, #132	@ 0x84
 800d14c:	e6c5      	b.n	800ceda <__gethex+0x146>
 800d14e:	6922      	ldr	r2, [r4, #16]
 800d150:	3202      	adds	r2, #2
 800d152:	f104 010c 	add.w	r1, r4, #12
 800d156:	0092      	lsls	r2, r2, #2
 800d158:	300c      	adds	r0, #12
 800d15a:	f7ff fd6b 	bl	800cc34 <memcpy>
 800d15e:	4621      	mov	r1, r4
 800d160:	9801      	ldr	r0, [sp, #4]
 800d162:	f7fd fadd 	bl	800a720 <_Bfree>
 800d166:	464c      	mov	r4, r9
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d170:	6122      	str	r2, [r4, #16]
 800d172:	2201      	movs	r2, #1
 800d174:	615a      	str	r2, [r3, #20]
 800d176:	e7be      	b.n	800d0f6 <__gethex+0x362>
 800d178:	6922      	ldr	r2, [r4, #16]
 800d17a:	455a      	cmp	r2, fp
 800d17c:	dd0b      	ble.n	800d196 <__gethex+0x402>
 800d17e:	2101      	movs	r1, #1
 800d180:	4620      	mov	r0, r4
 800d182:	f7ff fd9f 	bl	800ccc4 <rshift>
 800d186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d18a:	3701      	adds	r7, #1
 800d18c:	42bb      	cmp	r3, r7
 800d18e:	f6ff aee0 	blt.w	800cf52 <__gethex+0x1be>
 800d192:	2501      	movs	r5, #1
 800d194:	e7c2      	b.n	800d11c <__gethex+0x388>
 800d196:	f016 061f 	ands.w	r6, r6, #31
 800d19a:	d0fa      	beq.n	800d192 <__gethex+0x3fe>
 800d19c:	4453      	add	r3, sl
 800d19e:	f1c6 0620 	rsb	r6, r6, #32
 800d1a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d1a6:	f7fd fb6d 	bl	800a884 <__hi0bits>
 800d1aa:	42b0      	cmp	r0, r6
 800d1ac:	dbe7      	blt.n	800d17e <__gethex+0x3ea>
 800d1ae:	e7f0      	b.n	800d192 <__gethex+0x3fe>
 800d1b0:	0800d847 	.word	0x0800d847

0800d1b4 <L_shift>:
 800d1b4:	f1c2 0208 	rsb	r2, r2, #8
 800d1b8:	0092      	lsls	r2, r2, #2
 800d1ba:	b570      	push	{r4, r5, r6, lr}
 800d1bc:	f1c2 0620 	rsb	r6, r2, #32
 800d1c0:	6843      	ldr	r3, [r0, #4]
 800d1c2:	6804      	ldr	r4, [r0, #0]
 800d1c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d1c8:	432c      	orrs	r4, r5
 800d1ca:	40d3      	lsrs	r3, r2
 800d1cc:	6004      	str	r4, [r0, #0]
 800d1ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d1d2:	4288      	cmp	r0, r1
 800d1d4:	d3f4      	bcc.n	800d1c0 <L_shift+0xc>
 800d1d6:	bd70      	pop	{r4, r5, r6, pc}

0800d1d8 <__match>:
 800d1d8:	b530      	push	{r4, r5, lr}
 800d1da:	6803      	ldr	r3, [r0, #0]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1e2:	b914      	cbnz	r4, 800d1ea <__match+0x12>
 800d1e4:	6003      	str	r3, [r0, #0]
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	bd30      	pop	{r4, r5, pc}
 800d1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d1f2:	2d19      	cmp	r5, #25
 800d1f4:	bf98      	it	ls
 800d1f6:	3220      	addls	r2, #32
 800d1f8:	42a2      	cmp	r2, r4
 800d1fa:	d0f0      	beq.n	800d1de <__match+0x6>
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e7f3      	b.n	800d1e8 <__match+0x10>

0800d200 <__hexnan>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	680b      	ldr	r3, [r1, #0]
 800d206:	6801      	ldr	r1, [r0, #0]
 800d208:	115e      	asrs	r6, r3, #5
 800d20a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d20e:	f013 031f 	ands.w	r3, r3, #31
 800d212:	b087      	sub	sp, #28
 800d214:	bf18      	it	ne
 800d216:	3604      	addne	r6, #4
 800d218:	2500      	movs	r5, #0
 800d21a:	1f37      	subs	r7, r6, #4
 800d21c:	4682      	mov	sl, r0
 800d21e:	4690      	mov	r8, r2
 800d220:	9301      	str	r3, [sp, #4]
 800d222:	f846 5c04 	str.w	r5, [r6, #-4]
 800d226:	46b9      	mov	r9, r7
 800d228:	463c      	mov	r4, r7
 800d22a:	9502      	str	r5, [sp, #8]
 800d22c:	46ab      	mov	fp, r5
 800d22e:	784a      	ldrb	r2, [r1, #1]
 800d230:	1c4b      	adds	r3, r1, #1
 800d232:	9303      	str	r3, [sp, #12]
 800d234:	b342      	cbz	r2, 800d288 <__hexnan+0x88>
 800d236:	4610      	mov	r0, r2
 800d238:	9105      	str	r1, [sp, #20]
 800d23a:	9204      	str	r2, [sp, #16]
 800d23c:	f7ff fd94 	bl	800cd68 <__hexdig_fun>
 800d240:	2800      	cmp	r0, #0
 800d242:	d151      	bne.n	800d2e8 <__hexnan+0xe8>
 800d244:	9a04      	ldr	r2, [sp, #16]
 800d246:	9905      	ldr	r1, [sp, #20]
 800d248:	2a20      	cmp	r2, #32
 800d24a:	d818      	bhi.n	800d27e <__hexnan+0x7e>
 800d24c:	9b02      	ldr	r3, [sp, #8]
 800d24e:	459b      	cmp	fp, r3
 800d250:	dd13      	ble.n	800d27a <__hexnan+0x7a>
 800d252:	454c      	cmp	r4, r9
 800d254:	d206      	bcs.n	800d264 <__hexnan+0x64>
 800d256:	2d07      	cmp	r5, #7
 800d258:	dc04      	bgt.n	800d264 <__hexnan+0x64>
 800d25a:	462a      	mov	r2, r5
 800d25c:	4649      	mov	r1, r9
 800d25e:	4620      	mov	r0, r4
 800d260:	f7ff ffa8 	bl	800d1b4 <L_shift>
 800d264:	4544      	cmp	r4, r8
 800d266:	d952      	bls.n	800d30e <__hexnan+0x10e>
 800d268:	2300      	movs	r3, #0
 800d26a:	f1a4 0904 	sub.w	r9, r4, #4
 800d26e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d272:	f8cd b008 	str.w	fp, [sp, #8]
 800d276:	464c      	mov	r4, r9
 800d278:	461d      	mov	r5, r3
 800d27a:	9903      	ldr	r1, [sp, #12]
 800d27c:	e7d7      	b.n	800d22e <__hexnan+0x2e>
 800d27e:	2a29      	cmp	r2, #41	@ 0x29
 800d280:	d157      	bne.n	800d332 <__hexnan+0x132>
 800d282:	3102      	adds	r1, #2
 800d284:	f8ca 1000 	str.w	r1, [sl]
 800d288:	f1bb 0f00 	cmp.w	fp, #0
 800d28c:	d051      	beq.n	800d332 <__hexnan+0x132>
 800d28e:	454c      	cmp	r4, r9
 800d290:	d206      	bcs.n	800d2a0 <__hexnan+0xa0>
 800d292:	2d07      	cmp	r5, #7
 800d294:	dc04      	bgt.n	800d2a0 <__hexnan+0xa0>
 800d296:	462a      	mov	r2, r5
 800d298:	4649      	mov	r1, r9
 800d29a:	4620      	mov	r0, r4
 800d29c:	f7ff ff8a 	bl	800d1b4 <L_shift>
 800d2a0:	4544      	cmp	r4, r8
 800d2a2:	d936      	bls.n	800d312 <__hexnan+0x112>
 800d2a4:	f1a8 0204 	sub.w	r2, r8, #4
 800d2a8:	4623      	mov	r3, r4
 800d2aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d2ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800d2b2:	429f      	cmp	r7, r3
 800d2b4:	d2f9      	bcs.n	800d2aa <__hexnan+0xaa>
 800d2b6:	1b3b      	subs	r3, r7, r4
 800d2b8:	f023 0303 	bic.w	r3, r3, #3
 800d2bc:	3304      	adds	r3, #4
 800d2be:	3401      	adds	r4, #1
 800d2c0:	3e03      	subs	r6, #3
 800d2c2:	42b4      	cmp	r4, r6
 800d2c4:	bf88      	it	hi
 800d2c6:	2304      	movhi	r3, #4
 800d2c8:	4443      	add	r3, r8
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f843 2b04 	str.w	r2, [r3], #4
 800d2d0:	429f      	cmp	r7, r3
 800d2d2:	d2fb      	bcs.n	800d2cc <__hexnan+0xcc>
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	b91b      	cbnz	r3, 800d2e0 <__hexnan+0xe0>
 800d2d8:	4547      	cmp	r7, r8
 800d2da:	d128      	bne.n	800d32e <__hexnan+0x12e>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	603b      	str	r3, [r7, #0]
 800d2e0:	2005      	movs	r0, #5
 800d2e2:	b007      	add	sp, #28
 800d2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e8:	3501      	adds	r5, #1
 800d2ea:	2d08      	cmp	r5, #8
 800d2ec:	f10b 0b01 	add.w	fp, fp, #1
 800d2f0:	dd06      	ble.n	800d300 <__hexnan+0x100>
 800d2f2:	4544      	cmp	r4, r8
 800d2f4:	d9c1      	bls.n	800d27a <__hexnan+0x7a>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2fc:	2501      	movs	r5, #1
 800d2fe:	3c04      	subs	r4, #4
 800d300:	6822      	ldr	r2, [r4, #0]
 800d302:	f000 000f 	and.w	r0, r0, #15
 800d306:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d30a:	6020      	str	r0, [r4, #0]
 800d30c:	e7b5      	b.n	800d27a <__hexnan+0x7a>
 800d30e:	2508      	movs	r5, #8
 800d310:	e7b3      	b.n	800d27a <__hexnan+0x7a>
 800d312:	9b01      	ldr	r3, [sp, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d0dd      	beq.n	800d2d4 <__hexnan+0xd4>
 800d318:	f1c3 0320 	rsb	r3, r3, #32
 800d31c:	f04f 32ff 	mov.w	r2, #4294967295
 800d320:	40da      	lsrs	r2, r3
 800d322:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d326:	4013      	ands	r3, r2
 800d328:	f846 3c04 	str.w	r3, [r6, #-4]
 800d32c:	e7d2      	b.n	800d2d4 <__hexnan+0xd4>
 800d32e:	3f04      	subs	r7, #4
 800d330:	e7d0      	b.n	800d2d4 <__hexnan+0xd4>
 800d332:	2004      	movs	r0, #4
 800d334:	e7d5      	b.n	800d2e2 <__hexnan+0xe2>

0800d336 <__ascii_mbtowc>:
 800d336:	b082      	sub	sp, #8
 800d338:	b901      	cbnz	r1, 800d33c <__ascii_mbtowc+0x6>
 800d33a:	a901      	add	r1, sp, #4
 800d33c:	b142      	cbz	r2, 800d350 <__ascii_mbtowc+0x1a>
 800d33e:	b14b      	cbz	r3, 800d354 <__ascii_mbtowc+0x1e>
 800d340:	7813      	ldrb	r3, [r2, #0]
 800d342:	600b      	str	r3, [r1, #0]
 800d344:	7812      	ldrb	r2, [r2, #0]
 800d346:	1e10      	subs	r0, r2, #0
 800d348:	bf18      	it	ne
 800d34a:	2001      	movne	r0, #1
 800d34c:	b002      	add	sp, #8
 800d34e:	4770      	bx	lr
 800d350:	4610      	mov	r0, r2
 800d352:	e7fb      	b.n	800d34c <__ascii_mbtowc+0x16>
 800d354:	f06f 0001 	mvn.w	r0, #1
 800d358:	e7f8      	b.n	800d34c <__ascii_mbtowc+0x16>

0800d35a <_realloc_r>:
 800d35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d35e:	4680      	mov	r8, r0
 800d360:	4615      	mov	r5, r2
 800d362:	460c      	mov	r4, r1
 800d364:	b921      	cbnz	r1, 800d370 <_realloc_r+0x16>
 800d366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d36a:	4611      	mov	r1, r2
 800d36c:	f7fd b90c 	b.w	800a588 <_malloc_r>
 800d370:	b92a      	cbnz	r2, 800d37e <_realloc_r+0x24>
 800d372:	f7fd f895 	bl	800a4a0 <_free_r>
 800d376:	2400      	movs	r4, #0
 800d378:	4620      	mov	r0, r4
 800d37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d37e:	f000 f8b2 	bl	800d4e6 <_malloc_usable_size_r>
 800d382:	4285      	cmp	r5, r0
 800d384:	4606      	mov	r6, r0
 800d386:	d802      	bhi.n	800d38e <_realloc_r+0x34>
 800d388:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d38c:	d8f4      	bhi.n	800d378 <_realloc_r+0x1e>
 800d38e:	4629      	mov	r1, r5
 800d390:	4640      	mov	r0, r8
 800d392:	f7fd f8f9 	bl	800a588 <_malloc_r>
 800d396:	4607      	mov	r7, r0
 800d398:	2800      	cmp	r0, #0
 800d39a:	d0ec      	beq.n	800d376 <_realloc_r+0x1c>
 800d39c:	42b5      	cmp	r5, r6
 800d39e:	462a      	mov	r2, r5
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	bf28      	it	cs
 800d3a4:	4632      	movcs	r2, r6
 800d3a6:	f7ff fc45 	bl	800cc34 <memcpy>
 800d3aa:	4621      	mov	r1, r4
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	f7fd f877 	bl	800a4a0 <_free_r>
 800d3b2:	463c      	mov	r4, r7
 800d3b4:	e7e0      	b.n	800d378 <_realloc_r+0x1e>
	...

0800d3b8 <_strtoul_l.constprop.0>:
 800d3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3bc:	4e34      	ldr	r6, [pc, #208]	@ (800d490 <_strtoul_l.constprop.0+0xd8>)
 800d3be:	4686      	mov	lr, r0
 800d3c0:	460d      	mov	r5, r1
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3c8:	5d37      	ldrb	r7, [r6, r4]
 800d3ca:	f017 0708 	ands.w	r7, r7, #8
 800d3ce:	d1f8      	bne.n	800d3c2 <_strtoul_l.constprop.0+0xa>
 800d3d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800d3d2:	d12f      	bne.n	800d434 <_strtoul_l.constprop.0+0x7c>
 800d3d4:	782c      	ldrb	r4, [r5, #0]
 800d3d6:	2701      	movs	r7, #1
 800d3d8:	1c85      	adds	r5, r0, #2
 800d3da:	f033 0010 	bics.w	r0, r3, #16
 800d3de:	d109      	bne.n	800d3f4 <_strtoul_l.constprop.0+0x3c>
 800d3e0:	2c30      	cmp	r4, #48	@ 0x30
 800d3e2:	d12c      	bne.n	800d43e <_strtoul_l.constprop.0+0x86>
 800d3e4:	7828      	ldrb	r0, [r5, #0]
 800d3e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d3ea:	2858      	cmp	r0, #88	@ 0x58
 800d3ec:	d127      	bne.n	800d43e <_strtoul_l.constprop.0+0x86>
 800d3ee:	786c      	ldrb	r4, [r5, #1]
 800d3f0:	2310      	movs	r3, #16
 800d3f2:	3502      	adds	r5, #2
 800d3f4:	f04f 38ff 	mov.w	r8, #4294967295
 800d3f8:	2600      	movs	r6, #0
 800d3fa:	fbb8 f8f3 	udiv	r8, r8, r3
 800d3fe:	fb03 f908 	mul.w	r9, r3, r8
 800d402:	ea6f 0909 	mvn.w	r9, r9
 800d406:	4630      	mov	r0, r6
 800d408:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d40c:	f1bc 0f09 	cmp.w	ip, #9
 800d410:	d81c      	bhi.n	800d44c <_strtoul_l.constprop.0+0x94>
 800d412:	4664      	mov	r4, ip
 800d414:	42a3      	cmp	r3, r4
 800d416:	dd2a      	ble.n	800d46e <_strtoul_l.constprop.0+0xb6>
 800d418:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d41c:	d007      	beq.n	800d42e <_strtoul_l.constprop.0+0x76>
 800d41e:	4580      	cmp	r8, r0
 800d420:	d322      	bcc.n	800d468 <_strtoul_l.constprop.0+0xb0>
 800d422:	d101      	bne.n	800d428 <_strtoul_l.constprop.0+0x70>
 800d424:	45a1      	cmp	r9, r4
 800d426:	db1f      	blt.n	800d468 <_strtoul_l.constprop.0+0xb0>
 800d428:	fb00 4003 	mla	r0, r0, r3, r4
 800d42c:	2601      	movs	r6, #1
 800d42e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d432:	e7e9      	b.n	800d408 <_strtoul_l.constprop.0+0x50>
 800d434:	2c2b      	cmp	r4, #43	@ 0x2b
 800d436:	bf04      	itt	eq
 800d438:	782c      	ldrbeq	r4, [r5, #0]
 800d43a:	1c85      	addeq	r5, r0, #2
 800d43c:	e7cd      	b.n	800d3da <_strtoul_l.constprop.0+0x22>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1d8      	bne.n	800d3f4 <_strtoul_l.constprop.0+0x3c>
 800d442:	2c30      	cmp	r4, #48	@ 0x30
 800d444:	bf0c      	ite	eq
 800d446:	2308      	moveq	r3, #8
 800d448:	230a      	movne	r3, #10
 800d44a:	e7d3      	b.n	800d3f4 <_strtoul_l.constprop.0+0x3c>
 800d44c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d450:	f1bc 0f19 	cmp.w	ip, #25
 800d454:	d801      	bhi.n	800d45a <_strtoul_l.constprop.0+0xa2>
 800d456:	3c37      	subs	r4, #55	@ 0x37
 800d458:	e7dc      	b.n	800d414 <_strtoul_l.constprop.0+0x5c>
 800d45a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d45e:	f1bc 0f19 	cmp.w	ip, #25
 800d462:	d804      	bhi.n	800d46e <_strtoul_l.constprop.0+0xb6>
 800d464:	3c57      	subs	r4, #87	@ 0x57
 800d466:	e7d5      	b.n	800d414 <_strtoul_l.constprop.0+0x5c>
 800d468:	f04f 36ff 	mov.w	r6, #4294967295
 800d46c:	e7df      	b.n	800d42e <_strtoul_l.constprop.0+0x76>
 800d46e:	1c73      	adds	r3, r6, #1
 800d470:	d106      	bne.n	800d480 <_strtoul_l.constprop.0+0xc8>
 800d472:	2322      	movs	r3, #34	@ 0x22
 800d474:	f8ce 3000 	str.w	r3, [lr]
 800d478:	4630      	mov	r0, r6
 800d47a:	b932      	cbnz	r2, 800d48a <_strtoul_l.constprop.0+0xd2>
 800d47c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d480:	b107      	cbz	r7, 800d484 <_strtoul_l.constprop.0+0xcc>
 800d482:	4240      	negs	r0, r0
 800d484:	2a00      	cmp	r2, #0
 800d486:	d0f9      	beq.n	800d47c <_strtoul_l.constprop.0+0xc4>
 800d488:	b106      	cbz	r6, 800d48c <_strtoul_l.constprop.0+0xd4>
 800d48a:	1e69      	subs	r1, r5, #1
 800d48c:	6011      	str	r1, [r2, #0]
 800d48e:	e7f5      	b.n	800d47c <_strtoul_l.constprop.0+0xc4>
 800d490:	0800da09 	.word	0x0800da09

0800d494 <_strtoul_r>:
 800d494:	f7ff bf90 	b.w	800d3b8 <_strtoul_l.constprop.0>

0800d498 <__ascii_wctomb>:
 800d498:	4603      	mov	r3, r0
 800d49a:	4608      	mov	r0, r1
 800d49c:	b141      	cbz	r1, 800d4b0 <__ascii_wctomb+0x18>
 800d49e:	2aff      	cmp	r2, #255	@ 0xff
 800d4a0:	d904      	bls.n	800d4ac <__ascii_wctomb+0x14>
 800d4a2:	228a      	movs	r2, #138	@ 0x8a
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4aa:	4770      	bx	lr
 800d4ac:	700a      	strb	r2, [r1, #0]
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	4770      	bx	lr
	...

0800d4b4 <fiprintf>:
 800d4b4:	b40e      	push	{r1, r2, r3}
 800d4b6:	b503      	push	{r0, r1, lr}
 800d4b8:	4601      	mov	r1, r0
 800d4ba:	ab03      	add	r3, sp, #12
 800d4bc:	4805      	ldr	r0, [pc, #20]	@ (800d4d4 <fiprintf+0x20>)
 800d4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c2:	6800      	ldr	r0, [r0, #0]
 800d4c4:	9301      	str	r3, [sp, #4]
 800d4c6:	f7fe ff6f 	bl	800c3a8 <_vfiprintf_r>
 800d4ca:	b002      	add	sp, #8
 800d4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4d0:	b003      	add	sp, #12
 800d4d2:	4770      	bx	lr
 800d4d4:	20000090 	.word	0x20000090

0800d4d8 <abort>:
 800d4d8:	b508      	push	{r3, lr}
 800d4da:	2006      	movs	r0, #6
 800d4dc:	f000 f834 	bl	800d548 <raise>
 800d4e0:	2001      	movs	r0, #1
 800d4e2:	f7f5 fd71 	bl	8002fc8 <_exit>

0800d4e6 <_malloc_usable_size_r>:
 800d4e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ea:	1f18      	subs	r0, r3, #4
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	bfbc      	itt	lt
 800d4f0:	580b      	ldrlt	r3, [r1, r0]
 800d4f2:	18c0      	addlt	r0, r0, r3
 800d4f4:	4770      	bx	lr

0800d4f6 <_raise_r>:
 800d4f6:	291f      	cmp	r1, #31
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	d904      	bls.n	800d50a <_raise_r+0x14>
 800d500:	2316      	movs	r3, #22
 800d502:	6003      	str	r3, [r0, #0]
 800d504:	f04f 30ff 	mov.w	r0, #4294967295
 800d508:	bd38      	pop	{r3, r4, r5, pc}
 800d50a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d50c:	b112      	cbz	r2, 800d514 <_raise_r+0x1e>
 800d50e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d512:	b94b      	cbnz	r3, 800d528 <_raise_r+0x32>
 800d514:	4628      	mov	r0, r5
 800d516:	f000 f831 	bl	800d57c <_getpid_r>
 800d51a:	4622      	mov	r2, r4
 800d51c:	4601      	mov	r1, r0
 800d51e:	4628      	mov	r0, r5
 800d520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d524:	f000 b818 	b.w	800d558 <_kill_r>
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d00a      	beq.n	800d542 <_raise_r+0x4c>
 800d52c:	1c59      	adds	r1, r3, #1
 800d52e:	d103      	bne.n	800d538 <_raise_r+0x42>
 800d530:	2316      	movs	r3, #22
 800d532:	6003      	str	r3, [r0, #0]
 800d534:	2001      	movs	r0, #1
 800d536:	e7e7      	b.n	800d508 <_raise_r+0x12>
 800d538:	2100      	movs	r1, #0
 800d53a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d53e:	4620      	mov	r0, r4
 800d540:	4798      	blx	r3
 800d542:	2000      	movs	r0, #0
 800d544:	e7e0      	b.n	800d508 <_raise_r+0x12>
	...

0800d548 <raise>:
 800d548:	4b02      	ldr	r3, [pc, #8]	@ (800d554 <raise+0xc>)
 800d54a:	4601      	mov	r1, r0
 800d54c:	6818      	ldr	r0, [r3, #0]
 800d54e:	f7ff bfd2 	b.w	800d4f6 <_raise_r>
 800d552:	bf00      	nop
 800d554:	20000090 	.word	0x20000090

0800d558 <_kill_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d07      	ldr	r5, [pc, #28]	@ (800d578 <_kill_r+0x20>)
 800d55c:	2300      	movs	r3, #0
 800d55e:	4604      	mov	r4, r0
 800d560:	4608      	mov	r0, r1
 800d562:	4611      	mov	r1, r2
 800d564:	602b      	str	r3, [r5, #0]
 800d566:	f7f5 fd1f 	bl	8002fa8 <_kill>
 800d56a:	1c43      	adds	r3, r0, #1
 800d56c:	d102      	bne.n	800d574 <_kill_r+0x1c>
 800d56e:	682b      	ldr	r3, [r5, #0]
 800d570:	b103      	cbz	r3, 800d574 <_kill_r+0x1c>
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	bf00      	nop
 800d578:	200005f8 	.word	0x200005f8

0800d57c <_getpid_r>:
 800d57c:	f7f5 bd0c 	b.w	8002f98 <_getpid>

0800d580 <fmaxf>:
 800d580:	b508      	push	{r3, lr}
 800d582:	ed2d 8b02 	vpush	{d8}
 800d586:	eeb0 8a40 	vmov.f32	s16, s0
 800d58a:	eef0 8a60 	vmov.f32	s17, s1
 800d58e:	f000 f831 	bl	800d5f4 <__fpclassifyf>
 800d592:	b930      	cbnz	r0, 800d5a2 <fmaxf+0x22>
 800d594:	eeb0 8a68 	vmov.f32	s16, s17
 800d598:	eeb0 0a48 	vmov.f32	s0, s16
 800d59c:	ecbd 8b02 	vpop	{d8}
 800d5a0:	bd08      	pop	{r3, pc}
 800d5a2:	eeb0 0a68 	vmov.f32	s0, s17
 800d5a6:	f000 f825 	bl	800d5f4 <__fpclassifyf>
 800d5aa:	2800      	cmp	r0, #0
 800d5ac:	d0f4      	beq.n	800d598 <fmaxf+0x18>
 800d5ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b6:	dded      	ble.n	800d594 <fmaxf+0x14>
 800d5b8:	e7ee      	b.n	800d598 <fmaxf+0x18>

0800d5ba <fminf>:
 800d5ba:	b508      	push	{r3, lr}
 800d5bc:	ed2d 8b02 	vpush	{d8}
 800d5c0:	eeb0 8a40 	vmov.f32	s16, s0
 800d5c4:	eef0 8a60 	vmov.f32	s17, s1
 800d5c8:	f000 f814 	bl	800d5f4 <__fpclassifyf>
 800d5cc:	b930      	cbnz	r0, 800d5dc <fminf+0x22>
 800d5ce:	eeb0 8a68 	vmov.f32	s16, s17
 800d5d2:	eeb0 0a48 	vmov.f32	s0, s16
 800d5d6:	ecbd 8b02 	vpop	{d8}
 800d5da:	bd08      	pop	{r3, pc}
 800d5dc:	eeb0 0a68 	vmov.f32	s0, s17
 800d5e0:	f000 f808 	bl	800d5f4 <__fpclassifyf>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d0f4      	beq.n	800d5d2 <fminf+0x18>
 800d5e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f0:	d5ed      	bpl.n	800d5ce <fminf+0x14>
 800d5f2:	e7ee      	b.n	800d5d2 <fminf+0x18>

0800d5f4 <__fpclassifyf>:
 800d5f4:	ee10 3a10 	vmov	r3, s0
 800d5f8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800d5fc:	d00d      	beq.n	800d61a <__fpclassifyf+0x26>
 800d5fe:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800d602:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800d606:	d30a      	bcc.n	800d61e <__fpclassifyf+0x2a>
 800d608:	4b07      	ldr	r3, [pc, #28]	@ (800d628 <__fpclassifyf+0x34>)
 800d60a:	1e42      	subs	r2, r0, #1
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d908      	bls.n	800d622 <__fpclassifyf+0x2e>
 800d610:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800d614:	4258      	negs	r0, r3
 800d616:	4158      	adcs	r0, r3
 800d618:	4770      	bx	lr
 800d61a:	2002      	movs	r0, #2
 800d61c:	4770      	bx	lr
 800d61e:	2004      	movs	r0, #4
 800d620:	4770      	bx	lr
 800d622:	2003      	movs	r0, #3
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	007ffffe 	.word	0x007ffffe

0800d62c <_init>:
 800d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62e:	bf00      	nop
 800d630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d632:	bc08      	pop	{r3}
 800d634:	469e      	mov	lr, r3
 800d636:	4770      	bx	lr

0800d638 <_fini>:
 800d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63a:	bf00      	nop
 800d63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d63e:	bc08      	pop	{r3}
 800d640:	469e      	mov	lr, r3
 800d642:	4770      	bx	lr
